// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:objective_c/objective_c.dart' as objc;

/// Bindings for AVPlayer and related classes.
class FVPVideo {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FVPVideo(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FVPVideo.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<objc.ObjCObject>>
      _AVAudioSessionCategoryPlayback =
      _lookup<ffi.Pointer<objc.ObjCObject>>('AVAudioSessionCategoryPlayback');

  objc.NSString get AVAudioSessionCategoryPlayback =>
      objc.NSString.castFromPointer(_AVAudioSessionCategoryPlayback.value,
          retain: true, release: true);
}

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSDictionary_NSRange_bool(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSDate_bool_bool(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSTimer(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSFileHandle(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSDictionary_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSArray(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSCachedURLResponse(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSDictionary(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSURLCredential(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSArray_NSArray_NSArray(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSArray1(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSData(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSData_bool_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSTask(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSData_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVAssetTrackSegment_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_CMTime_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSArray_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVAssetTrack_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVMetadataItemValueRequest(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVMediaSelectionGroup_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_Int32_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVFragmentedAssetTrack_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_Int64_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVVideoComposition_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVAsynchronousCIImageFilteringRequest(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_bool_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVMutableVideoComposition_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AUAudioUnit_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AUParameter_ffiFloat(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_Uint8_Uint8_MIDICIProfile_bool(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVCompositionTrack_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVMutableCompositionTrack_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVMovieTrack_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVMutableMovieTrack_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVFragmentedMovieTrack_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVAudioPCMBuffer_AVAudioTime(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVAudioUnit_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVMusicEvent_ffiDouble_bool(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVMusicTrack_NSData_ffiDouble(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_opaqueCMSampleBuffer_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_opaqueCMSampleBuffer_AVCaptureBracketedStillImageSettings_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSString(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_AVPlayerItem(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

/// NSProgress
class NSProgress extends objc.NSObject {
  NSProgress._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSProgress] that points to the same underlying object as [other].
  NSProgress.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSProgress] that wraps the given raw object pointer.
  NSProgress.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSProgress].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSProgress);
  }

  /// currentProgress
  static NSProgress? currentProgress() {
    final _ret = _objc_msgSend_1(_class_NSProgress, _sel_currentProgress);
    return _ret.address == 0
        ? null
        : NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// progressWithTotalUnitCount:
  static NSProgress progressWithTotalUnitCount_(int unitCount) {
    final _ret = _objc_msgSend_2(
        _class_NSProgress, _sel_progressWithTotalUnitCount_, unitCount);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// discreteProgressWithTotalUnitCount:
  static NSProgress discreteProgressWithTotalUnitCount_(int unitCount) {
    final _ret = _objc_msgSend_2(
        _class_NSProgress, _sel_discreteProgressWithTotalUnitCount_, unitCount);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// progressWithTotalUnitCount:parent:pendingUnitCount:
  static NSProgress progressWithTotalUnitCount_parent_pendingUnitCount_(
      int unitCount, NSProgress parent, int portionOfParentTotalUnitCount) {
    final _ret = _objc_msgSend_3(
        _class_NSProgress,
        _sel_progressWithTotalUnitCount_parent_pendingUnitCount_,
        unitCount,
        parent.pointer,
        portionOfParentTotalUnitCount);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithParent:userInfo:
  NSProgress initWithParent_userInfo_(
      NSProgress? parentProgressOrNil, objc.ObjCObjectBase? userInfoOrNil) {
    final _ret = _objc_msgSend_4(
        this.pointer,
        _sel_initWithParent_userInfo_,
        parentProgressOrNil?.pointer ?? ffi.nullptr,
        userInfoOrNil?.pointer ?? ffi.nullptr);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// becomeCurrentWithPendingUnitCount:
  void becomeCurrentWithPendingUnitCount_(int unitCount) {
    _objc_msgSend_5(
        this.pointer, _sel_becomeCurrentWithPendingUnitCount_, unitCount);
  }

  /// performAsCurrentWithPendingUnitCount:usingBlock:
  void performAsCurrentWithPendingUnitCount_usingBlock_(
      int unitCount, objc.ObjCBlock<ffi.Void Function()> work) {
    _objc_msgSend_6(
        this.pointer,
        _sel_performAsCurrentWithPendingUnitCount_usingBlock_,
        unitCount,
        work.pointer);
  }

  /// resignCurrent
  void resignCurrent() {
    _objc_msgSend_7(this.pointer, _sel_resignCurrent);
  }

  /// addChild:withPendingUnitCount:
  void addChild_withPendingUnitCount_(NSProgress child, int inUnitCount) {
    _objc_msgSend_8(this.pointer, _sel_addChild_withPendingUnitCount_,
        child.pointer, inUnitCount);
  }

  /// totalUnitCount
  int get totalUnitCount {
    return _objc_msgSend_9(this.pointer, _sel_totalUnitCount);
  }

  /// setTotalUnitCount:
  set totalUnitCount(int value) {
    return _objc_msgSend_10(this.pointer, _sel_setTotalUnitCount_, value);
  }

  /// completedUnitCount
  int get completedUnitCount {
    return _objc_msgSend_9(this.pointer, _sel_completedUnitCount);
  }

  /// setCompletedUnitCount:
  set completedUnitCount(int value) {
    return _objc_msgSend_10(this.pointer, _sel_setCompletedUnitCount_, value);
  }

  /// localizedDescription
  objc.NSString get localizedDescription {
    final _ret = _objc_msgSend_11(this.pointer, _sel_localizedDescription);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLocalizedDescription:
  set localizedDescription(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setLocalizedDescription_, value.pointer);
  }

  /// localizedAdditionalDescription
  objc.NSString get localizedAdditionalDescription {
    final _ret =
        _objc_msgSend_11(this.pointer, _sel_localizedAdditionalDescription);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLocalizedAdditionalDescription:
  set localizedAdditionalDescription(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setLocalizedAdditionalDescription_, value.pointer);
  }

  /// isCancellable
  bool get cancellable {
    return _objc_msgSend_13(this.pointer, _sel_isCancellable);
  }

  /// setCancellable:
  set cancellable(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setCancellable_, value);
  }

  /// isPausable
  bool get pausable {
    return _objc_msgSend_13(this.pointer, _sel_isPausable);
  }

  /// setPausable:
  set pausable(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setPausable_, value);
  }

  /// isCancelled
  bool get cancelled {
    return _objc_msgSend_13(this.pointer, _sel_isCancelled);
  }

  /// isPaused
  bool get paused {
    return _objc_msgSend_13(this.pointer, _sel_isPaused);
  }

  /// cancellationHandler
  objc.ObjCBlock<ffi.Void Function()>? get cancellationHandler {
    final _ret = _objc_msgSend_15(this.pointer, _sel_cancellationHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCancellationHandler:
  set cancellationHandler(objc.ObjCBlock<ffi.Void Function()>? value) {
    return _objc_msgSend_16(this.pointer, _sel_setCancellationHandler_,
        value?.pointer ?? ffi.nullptr);
  }

  /// pausingHandler
  objc.ObjCBlock<ffi.Void Function()>? get pausingHandler {
    final _ret = _objc_msgSend_15(this.pointer, _sel_pausingHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPausingHandler:
  set pausingHandler(objc.ObjCBlock<ffi.Void Function()>? value) {
    return _objc_msgSend_16(
        this.pointer, _sel_setPausingHandler_, value?.pointer ?? ffi.nullptr);
  }

  /// resumingHandler
  objc.ObjCBlock<ffi.Void Function()>? get resumingHandler {
    final _ret = _objc_msgSend_15(this.pointer, _sel_resumingHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setResumingHandler:
  set resumingHandler(objc.ObjCBlock<ffi.Void Function()>? value) {
    return _objc_msgSend_16(
        this.pointer, _sel_setResumingHandler_, value?.pointer ?? ffi.nullptr);
  }

  /// setUserInfoObject:forKey:
  void setUserInfoObject_forKey_(
      objc.ObjCObjectBase? objectOrNil, objc.NSString key) {
    _objc_msgSend_17(this.pointer, _sel_setUserInfoObject_forKey_,
        objectOrNil?.pointer ?? ffi.nullptr, key.pointer);
  }

  /// isIndeterminate
  bool get indeterminate {
    return _objc_msgSend_13(this.pointer, _sel_isIndeterminate);
  }

  /// fractionCompleted
  double get fractionCompleted {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_fractionCompleted)
        : _objc_msgSend_18(this.pointer, _sel_fractionCompleted);
  }

  /// isFinished
  bool get finished {
    return _objc_msgSend_13(this.pointer, _sel_isFinished);
  }

  /// cancel
  void cancel() {
    _objc_msgSend_7(this.pointer, _sel_cancel);
  }

  /// pause
  void pause() {
    _objc_msgSend_7(this.pointer, _sel_pause);
  }

  /// resume
  void resume() {
    _objc_msgSend_7(this.pointer, _sel_resume);
  }

  /// userInfo
  objc.ObjCObjectBase get userInfo {
    final _ret = _objc_msgSend_19(this.pointer, _sel_userInfo);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// kind
  objc.NSString? get kind {
    final _ret = _objc_msgSend_20(this.pointer, _sel_kind);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setKind:
  set kind(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setKind_, value?.pointer ?? ffi.nullptr);
  }

  /// estimatedTimeRemaining
  objc.NSNumber? get estimatedTimeRemaining {
    final _ret = _objc_msgSend_22(this.pointer, _sel_estimatedTimeRemaining);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setEstimatedTimeRemaining:
  set estimatedTimeRemaining(objc.NSNumber? value) {
    return _objc_msgSend_23(this.pointer, _sel_setEstimatedTimeRemaining_,
        value?.pointer ?? ffi.nullptr);
  }

  /// throughput
  objc.NSNumber? get throughput {
    final _ret = _objc_msgSend_22(this.pointer, _sel_throughput);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setThroughput:
  set throughput(objc.NSNumber? value) {
    return _objc_msgSend_23(
        this.pointer, _sel_setThroughput_, value?.pointer ?? ffi.nullptr);
  }

  /// fileOperationKind
  objc.NSString? get fileOperationKind {
    final _ret = _objc_msgSend_20(this.pointer, _sel_fileOperationKind);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFileOperationKind:
  set fileOperationKind(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setFileOperationKind_,
        value?.pointer ?? ffi.nullptr);
  }

  /// fileURL
  objc.NSURL? get fileURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_fileURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFileURL:
  set fileURL(objc.NSURL? value) {
    return _objc_msgSend_25(
        this.pointer, _sel_setFileURL_, value?.pointer ?? ffi.nullptr);
  }

  /// fileTotalCount
  objc.NSNumber? get fileTotalCount {
    final _ret = _objc_msgSend_22(this.pointer, _sel_fileTotalCount);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFileTotalCount:
  set fileTotalCount(objc.NSNumber? value) {
    return _objc_msgSend_23(
        this.pointer, _sel_setFileTotalCount_, value?.pointer ?? ffi.nullptr);
  }

  /// fileCompletedCount
  objc.NSNumber? get fileCompletedCount {
    final _ret = _objc_msgSend_22(this.pointer, _sel_fileCompletedCount);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFileCompletedCount:
  set fileCompletedCount(objc.NSNumber? value) {
    return _objc_msgSend_23(this.pointer, _sel_setFileCompletedCount_,
        value?.pointer ?? ffi.nullptr);
  }

  /// publish
  void publish() {
    _objc_msgSend_7(this.pointer, _sel_publish);
  }

  /// unpublish
  void unpublish() {
    _objc_msgSend_7(this.pointer, _sel_unpublish);
  }

  /// addSubscriberForFileURL:withPublishingHandler:
  static objc.ObjCObjectBase addSubscriberForFileURL_withPublishingHandler_(
      objc.NSURL url,
      objc.ObjCBlock<ffi.Pointer<objc.ObjCBlockImpl> Function(NSProgress)>
          publishingHandler) {
    final _ret = _objc_msgSend_26(
        _class_NSProgress,
        _sel_addSubscriberForFileURL_withPublishingHandler_,
        url.pointer,
        publishingHandler.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// removeSubscriber:
  static void removeSubscriber_(objc.ObjCObjectBase subscriber) {
    _objc_msgSend_27(
        _class_NSProgress, _sel_removeSubscriber_, subscriber.pointer);
  }

  /// isOld
  bool get old {
    return _objc_msgSend_13(this.pointer, _sel_isOld);
  }

  /// init
  NSProgress init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSProgress new1() {
    final _ret = _objc_msgSend_19(_class_NSProgress, _sel_new);
    return NSProgress.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSProgress allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSProgress, _sel_allocWithZone_, zone);
    return NSProgress.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSProgress alloc() {
    final _ret = _objc_msgSend_19(_class_NSProgress, _sel_alloc);
    return NSProgress.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSProgress,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSProgress,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSProgress, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSProgress, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSProgress,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSProgress,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSProgress,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSProgress, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSProgress, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSProgress = objc.getClass("NSProgress");
late final _sel_currentProgress = objc.registerName("currentProgress");
final _objc_msgSend_1 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_progressWithTotalUnitCount_ =
    objc.registerName("progressWithTotalUnitCount:");
final _objc_msgSend_2 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_discreteProgressWithTotalUnitCount_ =
    objc.registerName("discreteProgressWithTotalUnitCount:");
late final _sel_progressWithTotalUnitCount_parent_pendingUnitCount_ =
    objc.registerName("progressWithTotalUnitCount:parent:pendingUnitCount:");
final _objc_msgSend_3 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int64,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int64)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
typedef instancetype = ffi.Pointer<objc.ObjCObject>;
typedef Dartinstancetype = objc.ObjCObjectBase;
late final _sel_initWithParent_userInfo_ =
    objc.registerName("initWithParent:userInfo:");
final _objc_msgSend_4 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_becomeCurrentWithPendingUnitCount_ =
    objc.registerName("becomeCurrentWithPendingUnitCount:");
final _objc_msgSend_5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
void _ObjCBlock_ffiVoid_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function()>>()
        .asFunction<void Function()>()();
void _ObjCBlock_ffiVoid_closureTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    (objc.getBlockClosure(block) as void Function())();

/// Construction methods for `objc.ObjCBlock<ffi.Void Function()>`.
abstract final class ObjCBlock_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function()> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function()>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function()> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr) =>
      objc.ObjCBlock<ffi.Void Function()>(
          objc.newPointerBlock(
              _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>(
                      _ObjCBlock_ffiVoid_fnPtrTrampoline)
                  .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function()> fromFunction(void Function() fn) =>
      objc.ObjCBlock<ffi.Void Function()>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>(
                      _ObjCBlock_ffiVoid_closureTrampoline)
                  .cast(),
              () => fn()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function()> listener(void Function() fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>)>.listener(
                _ObjCBlock_ffiVoid_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        () => fn());
    return objc.ObjCBlock<ffi.Void Function()>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function()>`.
extension ObjCBlock_ffiVoid_CallExtension
    on objc.ObjCBlock<ffi.Void Function()> {
  void call() => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlockImpl>)>()(
        pointer,
      );
}

late final _sel_performAsCurrentWithPendingUnitCount_usingBlock_ =
    objc.registerName("performAsCurrentWithPendingUnitCount:usingBlock:");
final _objc_msgSend_6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int64,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_resignCurrent = objc.registerName("resignCurrent");
final _objc_msgSend_7 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_addChild_withPendingUnitCount_ =
    objc.registerName("addChild:withPendingUnitCount:");
final _objc_msgSend_8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int64)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_totalUnitCount = objc.registerName("totalUnitCount");
final _objc_msgSend_9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int64 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTotalUnitCount_ = objc.registerName("setTotalUnitCount:");
final _objc_msgSend_10 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_completedUnitCount = objc.registerName("completedUnitCount");
late final _sel_setCompletedUnitCount_ =
    objc.registerName("setCompletedUnitCount:");
late final _sel_localizedDescription =
    objc.registerName("localizedDescription");
final _objc_msgSend_11 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setLocalizedDescription_ =
    objc.registerName("setLocalizedDescription:");
final _objc_msgSend_12 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localizedAdditionalDescription =
    objc.registerName("localizedAdditionalDescription");
late final _sel_setLocalizedAdditionalDescription_ =
    objc.registerName("setLocalizedAdditionalDescription:");
late final _sel_isCancellable = objc.registerName("isCancellable");
final _objc_msgSend_13 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCancellable_ = objc.registerName("setCancellable:");
final _objc_msgSend_14 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_isPausable = objc.registerName("isPausable");
late final _sel_setPausable_ = objc.registerName("setPausable:");
late final _sel_isCancelled = objc.registerName("isCancelled");
late final _sel_isPaused = objc.registerName("isPaused");
late final _sel_cancellationHandler = objc.registerName("cancellationHandler");
final _objc_msgSend_15 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCancellationHandler_ =
    objc.registerName("setCancellationHandler:");
final _objc_msgSend_16 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_pausingHandler = objc.registerName("pausingHandler");
late final _sel_setPausingHandler_ = objc.registerName("setPausingHandler:");
late final _sel_resumingHandler = objc.registerName("resumingHandler");
late final _sel_setResumingHandler_ = objc.registerName("setResumingHandler:");
late final _sel_setUserInfoObject_forKey_ =
    objc.registerName("setUserInfoObject:forKey:");
final _objc_msgSend_17 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isIndeterminate = objc.registerName("isIndeterminate");
late final _sel_fractionCompleted = objc.registerName("fractionCompleted");
final _objc_msgSend_18 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_18Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isFinished = objc.registerName("isFinished");
late final _sel_cancel = objc.registerName("cancel");
late final _sel_pause = objc.registerName("pause");
late final _sel_resume = objc.registerName("resume");
late final _sel_userInfo = objc.registerName("userInfo");
final _objc_msgSend_19 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_kind = objc.registerName("kind");
final _objc_msgSend_20 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setKind_ = objc.registerName("setKind:");
final _objc_msgSend_21 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_estimatedTimeRemaining =
    objc.registerName("estimatedTimeRemaining");
final _objc_msgSend_22 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setEstimatedTimeRemaining_ =
    objc.registerName("setEstimatedTimeRemaining:");
final _objc_msgSend_23 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_throughput = objc.registerName("throughput");
late final _sel_setThroughput_ = objc.registerName("setThroughput:");
late final _sel_fileOperationKind = objc.registerName("fileOperationKind");
late final _sel_setFileOperationKind_ =
    objc.registerName("setFileOperationKind:");
late final _sel_fileURL = objc.registerName("fileURL");
final _objc_msgSend_24 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFileURL_ = objc.registerName("setFileURL:");
final _objc_msgSend_25 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileTotalCount = objc.registerName("fileTotalCount");
late final _sel_setFileTotalCount_ = objc.registerName("setFileTotalCount:");
late final _sel_fileCompletedCount = objc.registerName("fileCompletedCount");
late final _sel_setFileCompletedCount_ =
    objc.registerName("setFileCompletedCount:");
late final _sel_publish = objc.registerName("publish");
late final _sel_unpublish = objc.registerName("unpublish");
ffi.Pointer<objc.ObjCBlockImpl> _ObjCBlock_ffiVoid_NSProgress_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCBlockImpl> Function(
                    ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>)>()(arg0);
ffi.Pointer<objc.ObjCBlockImpl> _ObjCBlock_ffiVoid_NSProgress_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCBlockImpl> Function(NSProgress)>`.
abstract final class ObjCBlock_ffiVoid_NSProgress {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCBlockImpl> Function(NSProgress)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCBlockImpl> Function(NSProgress)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCBlockImpl> Function(NSProgress)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCBlockImpl> Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCBlockImpl> Function(NSProgress)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Pointer<objc.ObjCBlockImpl> Function(
                                  ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSProgress_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCBlockImpl> Function(NSProgress)> fromFunction(
          objc.ObjCBlock<ffi.Void Function()>? Function(NSProgress) fn) =>
      objc.ObjCBlock<ffi.Pointer<objc.ObjCBlockImpl> Function(NSProgress)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCBlockImpl> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_NSProgress_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(NSProgress.castFromPointer(arg0, retain: true, release: true))
                      ?.retainAndReturnPointer() ??
                  ffi.nullptr),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCBlockImpl> Function(NSProgress)>`.
extension ObjCBlock_ffiVoid_NSProgress_CallExtension
    on objc.ObjCBlock<ffi.Pointer<objc.ObjCBlockImpl> Function(NSProgress)> {
  objc.ObjCBlock<ffi.Void Function()>? call(NSProgress arg0) => pointer
              .ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCBlockImpl> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCBlockImpl> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>()
              (pointer, arg0.pointer)
              .address ==
          0
      ? null
      : ObjCBlock_ffiVoid.castFromPointer(
          pointer.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCBlockImpl> Function(ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCBlockImpl> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer),
          retain: false,
          release: true);
}

late final _sel_addSubscriberForFileURL_withPublishingHandler_ =
    objc.registerName("addSubscriberForFileURL:withPublishingHandler:");
final _objc_msgSend_26 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_removeSubscriber_ = objc.registerName("removeSubscriber:");
final _objc_msgSend_27 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isOld = objc.registerName("isOld");
late final _sel_init = objc.registerName("init");
late final _sel_new = objc.registerName("new");

final class _NSZone extends ffi.Opaque {}

late final _sel_allocWithZone_ = objc.registerName("allocWithZone:");
final _objc_msgSend_28 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>();
late final _sel_alloc = objc.registerName("alloc");
late final _sel_cancelPreviousPerformRequestsWithTarget_selector_object_ = objc
    .registerName("cancelPreviousPerformRequestsWithTarget:selector:object:");
final _objc_msgSend_29 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cancelPreviousPerformRequestsWithTarget_ =
    objc.registerName("cancelPreviousPerformRequestsWithTarget:");
late final _sel_accessInstanceVariablesDirectly =
    objc.registerName("accessInstanceVariablesDirectly");
late final _sel_useStoredAccessor = objc.registerName("useStoredAccessor");
late final _sel_keyPathsForValuesAffectingValueForKey_ =
    objc.registerName("keyPathsForValuesAffectingValueForKey:");
final _objc_msgSend_30 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_automaticallyNotifiesObserversForKey_ =
    objc.registerName("automaticallyNotifiesObserversForKey:");
final _objc_msgSend_31 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setKeys_triggerChangeNotificationsForDependentKey_ =
    objc.registerName("setKeys:triggerChangeNotificationsForDependentKey:");
final _objc_msgSend_32 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_classFallbacksForKeyedArchiver =
    objc.registerName("classFallbacksForKeyedArchiver");
final _objc_msgSend_33 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_classForKeyedUnarchiver =
    objc.registerName("classForKeyedUnarchiver");
final _objc_msgSend_0 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isKindOfClass_ = objc.registerName("isKindOfClass:");

/// NSBundle
class NSBundle extends objc.NSObject {
  NSBundle._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSBundle] that points to the same underlying object as [other].
  NSBundle.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSBundle] that wraps the given raw object pointer.
  NSBundle.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSBundle].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSBundle);
  }

  /// mainBundle
  static NSBundle getMainBundle() {
    final _ret = _objc_msgSend_34(_class_NSBundle, _sel_mainBundle);
    return NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// bundleWithPath:
  static NSBundle? bundleWithPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_35(_class_NSBundle, _sel_bundleWithPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithPath:
  NSBundle? initWithPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_initWithPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// bundleWithURL:
  static NSBundle? bundleWithURL_(objc.NSURL url) {
    final _ret =
        _objc_msgSend_36(_class_NSBundle, _sel_bundleWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:
  NSBundle? initWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_36(this.pointer, _sel_initWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// bundleForClass:
  static NSBundle bundleForClass_(objc.ObjCObjectBase aClass) {
    final _ret =
        _objc_msgSend_37(_class_NSBundle, _sel_bundleForClass_, aClass.pointer);
    return NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// bundleWithIdentifier:
  static NSBundle? bundleWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_38(
        _class_NSBundle, _sel_bundleWithIdentifier_, identifier.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// allBundles
  static objc.NSArray getAllBundles() {
    final _ret = _objc_msgSend_33(_class_NSBundle, _sel_allBundles);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allFrameworks
  static objc.NSArray getAllFrameworks() {
    final _ret = _objc_msgSend_33(_class_NSBundle, _sel_allFrameworks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// load
  bool load() {
    return _objc_msgSend_13(this.pointer, _sel_load);
  }

  /// isLoaded
  bool get loaded {
    return _objc_msgSend_13(this.pointer, _sel_isLoaded);
  }

  /// unload
  bool unload() {
    return _objc_msgSend_13(this.pointer, _sel_unload);
  }

  /// preflightAndReturnError:
  bool preflightAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_39(this.pointer, _sel_preflightAndReturnError_, error);
  }

  /// loadAndReturnError:
  bool loadAndReturnError_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_39(this.pointer, _sel_loadAndReturnError_, error);
  }

  /// bundleURL
  objc.NSURL get bundleURL {
    final _ret = _objc_msgSend_40(this.pointer, _sel_bundleURL);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// resourceURL
  objc.NSURL? get resourceURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_resourceURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// executableURL
  objc.NSURL? get executableURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_executableURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForAuxiliaryExecutable:
  objc.NSURL? URLForAuxiliaryExecutable_(objc.NSString executableName) {
    final _ret = _objc_msgSend_41(
        this.pointer, _sel_URLForAuxiliaryExecutable_, executableName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// privateFrameworksURL
  objc.NSURL? get privateFrameworksURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_privateFrameworksURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// sharedFrameworksURL
  objc.NSURL? get sharedFrameworksURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_sharedFrameworksURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// sharedSupportURL
  objc.NSURL? get sharedSupportURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_sharedSupportURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// builtInPlugInsURL
  objc.NSURL? get builtInPlugInsURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_builtInPlugInsURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// appStoreReceiptURL
  objc.NSURL? get appStoreReceiptURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_appStoreReceiptURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// bundlePath
  objc.NSString get bundlePath {
    final _ret = _objc_msgSend_11(this.pointer, _sel_bundlePath);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// resourcePath
  objc.NSString? get resourcePath {
    final _ret = _objc_msgSend_20(this.pointer, _sel_resourcePath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// executablePath
  objc.NSString? get executablePath {
    final _ret = _objc_msgSend_20(this.pointer, _sel_executablePath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathForAuxiliaryExecutable:
  objc.NSString? pathForAuxiliaryExecutable_(objc.NSString executableName) {
    final _ret = _objc_msgSend_42(
        this.pointer, _sel_pathForAuxiliaryExecutable_, executableName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// privateFrameworksPath
  objc.NSString? get privateFrameworksPath {
    final _ret = _objc_msgSend_20(this.pointer, _sel_privateFrameworksPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// sharedFrameworksPath
  objc.NSString? get sharedFrameworksPath {
    final _ret = _objc_msgSend_20(this.pointer, _sel_sharedFrameworksPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// sharedSupportPath
  objc.NSString? get sharedSupportPath {
    final _ret = _objc_msgSend_20(this.pointer, _sel_sharedSupportPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// builtInPlugInsPath
  objc.NSString? get builtInPlugInsPath {
    final _ret = _objc_msgSend_20(this.pointer, _sel_builtInPlugInsPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForResource:withExtension:subdirectory:inBundleWithURL:
  static objc.NSURL? URLForResource_withExtension_subdirectory_inBundleWithURL_(
      objc.NSString? name,
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSURL bundleURL) {
    final _ret = _objc_msgSend_43(
        _class_NSBundle,
        _sel_URLForResource_withExtension_subdirectory_inBundleWithURL_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        bundleURL.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLsForResourcesWithExtension:subdirectory:inBundleWithURL:
  static objc.NSArray?
      URLsForResourcesWithExtension_subdirectory_inBundleWithURL_(
          objc.NSString? ext, objc.NSString? subpath, objc.NSURL bundleURL) {
    final _ret = _objc_msgSend_44(
        _class_NSBundle,
        _sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        bundleURL.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForResource:withExtension:
  objc.NSURL? URLForResource_withExtension_(
      objc.NSString? name, objc.NSString? ext) {
    final _ret = _objc_msgSend_45(
        this.pointer,
        _sel_URLForResource_withExtension_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForResource:withExtension:subdirectory:
  objc.NSURL? URLForResource_withExtension_subdirectory_(
      objc.NSString? name, objc.NSString? ext, objc.NSString? subpath) {
    final _ret = _objc_msgSend_46(
        this.pointer,
        _sel_URLForResource_withExtension_subdirectory_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForResource:withExtension:subdirectory:localization:
  objc.NSURL? URLForResource_withExtension_subdirectory_localization_(
      objc.NSString? name,
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_47(
        this.pointer,
        _sel_URLForResource_withExtension_subdirectory_localization_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        localizationName?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLsForResourcesWithExtension:subdirectory:
  objc.NSArray? URLsForResourcesWithExtension_subdirectory_(
      objc.NSString? ext, objc.NSString? subpath) {
    final _ret = _objc_msgSend_48(
        this.pointer,
        _sel_URLsForResourcesWithExtension_subdirectory_,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLsForResourcesWithExtension:subdirectory:localization:
  objc.NSArray? URLsForResourcesWithExtension_subdirectory_localization_(
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_49(
        this.pointer,
        _sel_URLsForResourcesWithExtension_subdirectory_localization_,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        localizationName?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathForResource:ofType:inDirectory:
  objc.NSString? pathForResource_ofType_inDirectory_(
      objc.NSString? name, objc.NSString? ext, objc.NSString? subpath) {
    final _ret = _objc_msgSend_50(
        this.pointer,
        _sel_pathForResource_ofType_inDirectory_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathsForResourcesOfType:inDirectory:
  objc.NSArray pathsForResourcesOfType_inDirectory_(
      objc.NSString? ext, objc.NSString? subpath) {
    final _ret = _objc_msgSend_51(
        this.pointer,
        _sel_pathsForResourcesOfType_inDirectory_,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathForResource:ofType:
  objc.NSString? pathForResource_ofType_(
      objc.NSString? name, objc.NSString? ext) {
    final _ret = _objc_msgSend_52(this.pointer, _sel_pathForResource_ofType_,
        name?.pointer ?? ffi.nullptr, ext?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathForResource:ofType:inDirectory:forLocalization:
  objc.NSString? pathForResource_ofType_inDirectory_forLocalization_(
      objc.NSString? name,
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_53(
        this.pointer,
        _sel_pathForResource_ofType_inDirectory_forLocalization_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        localizationName?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathsForResourcesOfType:inDirectory:forLocalization:
  objc.NSArray pathsForResourcesOfType_inDirectory_forLocalization_(
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_54(
        this.pointer,
        _sel_pathsForResourcesOfType_inDirectory_forLocalization_,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        localizationName?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedStringForKey:value:table:
  objc.NSString localizedStringForKey_value_table_(
      objc.NSString key, objc.NSString? value, objc.NSString? tableName) {
    final _ret = _objc_msgSend_55(
        this.pointer,
        _sel_localizedStringForKey_value_table_,
        key.pointer,
        value?.pointer ?? ffi.nullptr,
        tableName?.pointer ?? ffi.nullptr);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedAttributedStringForKey:value:table:
  NSAttributedString localizedAttributedStringForKey_value_table_(
      objc.NSString key, objc.NSString? value, objc.NSString? tableName) {
    final _ret = _objc_msgSend_83(
        this.pointer,
        _sel_localizedAttributedStringForKey_value_table_,
        key.pointer,
        value?.pointer ?? ffi.nullptr,
        tableName?.pointer ?? ffi.nullptr);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// bundleIdentifier
  objc.NSString? get bundleIdentifier {
    final _ret = _objc_msgSend_20(this.pointer, _sel_bundleIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// infoDictionary
  objc.NSDictionary? get infoDictionary {
    final _ret = _objc_msgSend_84(this.pointer, _sel_infoDictionary);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedInfoDictionary
  objc.NSDictionary? get localizedInfoDictionary {
    final _ret = _objc_msgSend_84(this.pointer, _sel_localizedInfoDictionary);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// objectForInfoDictionaryKey:
  objc.ObjCObjectBase? objectForInfoDictionaryKey_(objc.NSString key) {
    final _ret = _objc_msgSend_35(
        this.pointer, _sel_objectForInfoDictionaryKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// classNamed:
  objc.ObjCObjectBase? classNamed_(objc.NSString className) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_classNamed_, className.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// principalClass
  objc.ObjCObjectBase? get principalClass {
    final _ret = _objc_msgSend_85(this.pointer, _sel_principalClass);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// preferredLocalizations
  objc.NSArray get preferredLocalizations {
    final _ret = _objc_msgSend_33(this.pointer, _sel_preferredLocalizations);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizations
  objc.NSArray get localizations {
    final _ret = _objc_msgSend_33(this.pointer, _sel_localizations);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// developmentLocalization
  objc.NSString? get developmentLocalization {
    final _ret = _objc_msgSend_20(this.pointer, _sel_developmentLocalization);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredLocalizationsFromArray:
  static objc.NSArray preferredLocalizationsFromArray_(
      objc.NSArray localizationsArray) {
    final _ret = _objc_msgSend_86(_class_NSBundle,
        _sel_preferredLocalizationsFromArray_, localizationsArray.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredLocalizationsFromArray:forPreferences:
  static objc.NSArray preferredLocalizationsFromArray_forPreferences_(
      objc.NSArray localizationsArray, objc.NSArray? preferencesArray) {
    final _ret = _objc_msgSend_87(
        _class_NSBundle,
        _sel_preferredLocalizationsFromArray_forPreferences_,
        localizationsArray.pointer,
        preferencesArray?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// executableArchitectures
  objc.NSArray? get executableArchitectures {
    final _ret = _objc_msgSend_88(this.pointer, _sel_executableArchitectures);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPreservationPriority:forTags:
  void setPreservationPriority_forTags_(double priority, objc.NSSet tags) {
    _objc_msgSend_89(this.pointer, _sel_setPreservationPriority_forTags_,
        priority, tags.pointer);
  }

  /// preservationPriorityForTag:
  double preservationPriorityForTag_(objc.NSString tag) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_90Fpret(
            this.pointer, _sel_preservationPriorityForTag_, tag.pointer)
        : _objc_msgSend_90(
            this.pointer, _sel_preservationPriorityForTag_, tag.pointer);
  }

  /// init
  NSBundle init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSBundle new1() {
    final _ret = _objc_msgSend_19(_class_NSBundle, _sel_new);
    return NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSBundle allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSBundle, _sel_allocWithZone_, zone);
    return NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSBundle alloc() {
    final _ret = _objc_msgSend_19(_class_NSBundle, _sel_alloc);
    return NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSBundle,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSBundle,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSBundle, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSBundle, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSBundle,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSBundle,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSBundle,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSBundle, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSBundle, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSBundle = objc.getClass("NSBundle");
late final _sel_mainBundle = objc.registerName("mainBundle");
final _objc_msgSend_34 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_bundleWithPath_ = objc.registerName("bundleWithPath:");
final _objc_msgSend_35 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithPath_ = objc.registerName("initWithPath:");
late final _sel_bundleWithURL_ = objc.registerName("bundleWithURL:");
final _objc_msgSend_36 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithURL_ = objc.registerName("initWithURL:");
late final _sel_bundleForClass_ = objc.registerName("bundleForClass:");
final _objc_msgSend_37 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_bundleWithIdentifier_ =
    objc.registerName("bundleWithIdentifier:");
final _objc_msgSend_38 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_allBundles = objc.registerName("allBundles");
late final _sel_allFrameworks = objc.registerName("allFrameworks");
late final _sel_load = objc.registerName("load");
late final _sel_isLoaded = objc.registerName("isLoaded");
late final _sel_unload = objc.registerName("unload");
late final _sel_preflightAndReturnError_ =
    objc.registerName("preflightAndReturnError:");
final _objc_msgSend_39 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_loadAndReturnError_ = objc.registerName("loadAndReturnError:");
late final _sel_bundleURL = objc.registerName("bundleURL");
final _objc_msgSend_40 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_resourceURL = objc.registerName("resourceURL");
late final _sel_executableURL = objc.registerName("executableURL");
late final _sel_URLForAuxiliaryExecutable_ =
    objc.registerName("URLForAuxiliaryExecutable:");
final _objc_msgSend_41 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_privateFrameworksURL =
    objc.registerName("privateFrameworksURL");
late final _sel_sharedFrameworksURL = objc.registerName("sharedFrameworksURL");
late final _sel_sharedSupportURL = objc.registerName("sharedSupportURL");
late final _sel_builtInPlugInsURL = objc.registerName("builtInPlugInsURL");
late final _sel_appStoreReceiptURL = objc.registerName("appStoreReceiptURL");
late final _sel_bundlePath = objc.registerName("bundlePath");
late final _sel_resourcePath = objc.registerName("resourcePath");
late final _sel_executablePath = objc.registerName("executablePath");
late final _sel_pathForAuxiliaryExecutable_ =
    objc.registerName("pathForAuxiliaryExecutable:");
final _objc_msgSend_42 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_privateFrameworksPath =
    objc.registerName("privateFrameworksPath");
late final _sel_sharedFrameworksPath =
    objc.registerName("sharedFrameworksPath");
late final _sel_sharedSupportPath = objc.registerName("sharedSupportPath");
late final _sel_builtInPlugInsPath = objc.registerName("builtInPlugInsPath");
late final _sel_URLForResource_withExtension_subdirectory_inBundleWithURL_ =
    objc.registerName(
        "URLForResource:withExtension:subdirectory:inBundleWithURL:");
final _objc_msgSend_43 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_ =
    objc.registerName(
        "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:");
final _objc_msgSend_44 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForResource_withExtension_ =
    objc.registerName("URLForResource:withExtension:");
final _objc_msgSend_45 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForResource_withExtension_subdirectory_ =
    objc.registerName("URLForResource:withExtension:subdirectory:");
final _objc_msgSend_46 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForResource_withExtension_subdirectory_localization_ = objc
    .registerName("URLForResource:withExtension:subdirectory:localization:");
final _objc_msgSend_47 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLsForResourcesWithExtension_subdirectory_ =
    objc.registerName("URLsForResourcesWithExtension:subdirectory:");
final _objc_msgSend_48 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLsForResourcesWithExtension_subdirectory_localization_ = objc
    .registerName("URLsForResourcesWithExtension:subdirectory:localization:");
final _objc_msgSend_49 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathForResource_ofType_inDirectory_ =
    objc.registerName("pathForResource:ofType:inDirectory:");
final _objc_msgSend_50 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathsForResourcesOfType_inDirectory_ =
    objc.registerName("pathsForResourcesOfType:inDirectory:");
final _objc_msgSend_51 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathForResource_ofType_ =
    objc.registerName("pathForResource:ofType:");
final _objc_msgSend_52 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathForResource_ofType_inDirectory_forLocalization_ =
    objc.registerName("pathForResource:ofType:inDirectory:forLocalization:");
final _objc_msgSend_53 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathsForResourcesOfType_inDirectory_forLocalization_ =
    objc.registerName("pathsForResourcesOfType:inDirectory:forLocalization:");
final _objc_msgSend_54 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localizedStringForKey_value_table_ =
    objc.registerName("localizedStringForKey:value:table:");
final _objc_msgSend_55 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSAttributedString
class NSAttributedString extends objc.NSObject {
  NSAttributedString._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSAttributedString] that points to the same underlying object as [other].
  NSAttributedString.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSAttributedString] that wraps the given raw object pointer.
  NSAttributedString.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSAttributedString].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSAttributedString);
  }

  /// string
  objc.NSString get string {
    final _ret = _objc_msgSend_11(this.pointer, _sel_string);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// attributesAtIndex:effectiveRange:
  objc.NSDictionary attributesAtIndex_effectiveRange_(
      int location, ffi.Pointer<_NSRange> range) {
    final _ret = _objc_msgSend_56(
        this.pointer, _sel_attributesAtIndex_effectiveRange_, location, range);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// length
  int get length {
    return _objc_msgSend_57(this.pointer, _sel_length);
  }

  /// attribute:atIndex:effectiveRange:
  objc.ObjCObjectBase? attribute_atIndex_effectiveRange_(
      objc.NSString attrName, int location, ffi.Pointer<_NSRange> range) {
    final _ret = _objc_msgSend_58(
        this.pointer,
        _sel_attribute_atIndex_effectiveRange_,
        attrName.pointer,
        location,
        range);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributedSubstringFromRange:
  NSAttributedString attributedSubstringFromRange_(_NSRange range) {
    final _ret = _objc_msgSend_59(
        this.pointer, _sel_attributedSubstringFromRange_, range);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// attributesAtIndex:longestEffectiveRange:inRange:
  objc.NSDictionary attributesAtIndex_longestEffectiveRange_inRange_(
      int location, ffi.Pointer<_NSRange> range, _NSRange rangeLimit) {
    final _ret = _objc_msgSend_60(
        this.pointer,
        _sel_attributesAtIndex_longestEffectiveRange_inRange_,
        location,
        range,
        rangeLimit);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// attribute:atIndex:longestEffectiveRange:inRange:
  objc.ObjCObjectBase? attribute_atIndex_longestEffectiveRange_inRange_(
      objc.NSString attrName,
      int location,
      ffi.Pointer<_NSRange> range,
      _NSRange rangeLimit) {
    final _ret = _objc_msgSend_61(
        this.pointer,
        _sel_attribute_atIndex_longestEffectiveRange_inRange_,
        attrName.pointer,
        location,
        range,
        rangeLimit);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// isEqualToAttributedString:
  bool isEqualToAttributedString_(NSAttributedString other) {
    return _objc_msgSend_62(
        this.pointer, _sel_isEqualToAttributedString_, other.pointer);
  }

  /// initWithString:
  NSAttributedString initWithString_(objc.NSString str) {
    final _ret =
        _objc_msgSend_63(this.pointer, _sel_initWithString_, str.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithString:attributes:
  NSAttributedString initWithString_attributes_(
      objc.NSString str, objc.NSDictionary? attrs) {
    final _ret = _objc_msgSend_64(this.pointer, _sel_initWithString_attributes_,
        str.pointer, attrs?.pointer ?? ffi.nullptr);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithAttributedString:
  NSAttributedString initWithAttributedString_(NSAttributedString attrStr) {
    final _ret = _objc_msgSend_65(
        this.pointer, _sel_initWithAttributedString_, attrStr.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// enumerateAttributesInRange:options:usingBlock:
  void enumerateAttributesInRange_options_usingBlock_(
      _NSRange enumerationRange,
      NSAttributedStringEnumerationOptions opts,
      objc.ObjCBlock<
              ffi.Void Function(
                  objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)>
          block) {
    _objc_msgSend_66(
        this.pointer,
        _sel_enumerateAttributesInRange_options_usingBlock_,
        enumerationRange,
        opts.value,
        block.pointer);
  }

  /// enumerateAttribute:inRange:options:usingBlock:
  void enumerateAttribute_inRange_options_usingBlock_(
      objc.NSString attrName,
      _NSRange enumerationRange,
      NSAttributedStringEnumerationOptions opts,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>, _NSRange,
                  ffi.Pointer<ffi.Bool>)>
          block) {
    _objc_msgSend_67(
        this.pointer,
        _sel_enumerateAttribute_inRange_options_usingBlock_,
        attrName.pointer,
        enumerationRange,
        opts.value,
        block.pointer);
  }

  /// initWithContentsOfMarkdownFileAtURL:options:baseURL:error:
  NSAttributedString?
      initWithContentsOfMarkdownFileAtURL_options_baseURL_error_(
          objc.NSURL markdownFile,
          NSAttributedStringMarkdownParsingOptions? options,
          objc.NSURL? baseURL,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_72(
        this.pointer,
        _sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_,
        markdownFile.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSAttributedString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithMarkdown:options:baseURL:error:
  NSAttributedString? initWithMarkdown_options_baseURL_error_(
      objc.NSData markdown,
      NSAttributedStringMarkdownParsingOptions? options,
      objc.NSURL? baseURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_73(
        this.pointer,
        _sel_initWithMarkdown_options_baseURL_error_,
        markdown.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSAttributedString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithMarkdownString:options:baseURL:error:
  NSAttributedString? initWithMarkdownString_options_baseURL_error_(
      objc.NSString markdownString,
      NSAttributedStringMarkdownParsingOptions? options,
      objc.NSURL? baseURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_74(
        this.pointer,
        _sel_initWithMarkdownString_options_baseURL_error_,
        markdownString.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSAttributedString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFormat:options:locale:
  NSAttributedString initWithFormat_options_locale_(NSAttributedString format,
      NSAttributedStringFormattingOptions options, objc.NSLocale? locale) {
    final _ret = _objc_msgSend_75(
        this.pointer,
        _sel_initWithFormat_options_locale_,
        format.pointer,
        options.value,
        locale?.pointer ?? ffi.nullptr);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithFormat:options:locale:arguments:
  NSAttributedString initWithFormat_options_locale_arguments_(
      NSAttributedString format,
      NSAttributedStringFormattingOptions options,
      objc.NSLocale? locale,
      ffi.Pointer<ffi.Char> arguments) {
    final _ret = _objc_msgSend_76(
        this.pointer,
        _sel_initWithFormat_options_locale_arguments_,
        format.pointer,
        options.value,
        locale?.pointer ?? ffi.nullptr,
        arguments);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// localizedAttributedStringWithFormat:
  static NSAttributedString localizedAttributedStringWithFormat_(
      NSAttributedString format) {
    final _ret = _objc_msgSend_65(_class_NSAttributedString,
        _sel_localizedAttributedStringWithFormat_, format.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// localizedAttributedStringWithFormat:options:
  static NSAttributedString localizedAttributedStringWithFormat_options_(
      NSAttributedString format, NSAttributedStringFormattingOptions options) {
    final _ret = _objc_msgSend_77(
        _class_NSAttributedString,
        _sel_localizedAttributedStringWithFormat_options_,
        format.pointer,
        options.value);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithFormat:options:locale:context:
  NSAttributedString initWithFormat_options_locale_context_(
      NSAttributedString format,
      NSAttributedStringFormattingOptions options,
      objc.NSLocale? locale,
      objc.NSDictionary context) {
    final _ret = _objc_msgSend_78(
        this.pointer,
        _sel_initWithFormat_options_locale_context_,
        format.pointer,
        options.value,
        locale?.pointer ?? ffi.nullptr,
        context.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithFormat:options:locale:context:arguments:
  NSAttributedString initWithFormat_options_locale_context_arguments_(
      NSAttributedString format,
      NSAttributedStringFormattingOptions options,
      objc.NSLocale? locale,
      objc.NSDictionary context,
      ffi.Pointer<ffi.Char> arguments) {
    final _ret = _objc_msgSend_79(
        this.pointer,
        _sel_initWithFormat_options_locale_context_arguments_,
        format.pointer,
        options.value,
        locale?.pointer ?? ffi.nullptr,
        context.pointer,
        arguments);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// localizedAttributedStringWithFormat:context:
  static NSAttributedString localizedAttributedStringWithFormat_context_(
      NSAttributedString format, objc.NSDictionary context) {
    final _ret = _objc_msgSend_80(
        _class_NSAttributedString,
        _sel_localizedAttributedStringWithFormat_context_,
        format.pointer,
        context.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// localizedAttributedStringWithFormat:options:context:
  static NSAttributedString
      localizedAttributedStringWithFormat_options_context_(
          NSAttributedString format,
          NSAttributedStringFormattingOptions options,
          objc.NSDictionary context) {
    final _ret = _objc_msgSend_81(
        _class_NSAttributedString,
        _sel_localizedAttributedStringWithFormat_options_context_,
        format.pointer,
        options.value,
        context.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// attributedStringByInflectingString
  NSAttributedString attributedStringByInflectingString() {
    final _ret =
        _objc_msgSend_82(this.pointer, _sel_attributedStringByInflectingString);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  NSAttributedString init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSAttributedString new1() {
    final _ret = _objc_msgSend_19(_class_NSAttributedString, _sel_new);
    return NSAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSAttributedString allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSAttributedString, _sel_allocWithZone_, zone);
    return NSAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSAttributedString alloc() {
    final _ret = _objc_msgSend_19(_class_NSAttributedString, _sel_alloc);
    return NSAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSAttributedString,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSAttributedString,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSAttributedString, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSAttributedString, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSAttributedString,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSAttributedString,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSAttributedString,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSAttributedString, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSAttributedString, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSAttributedString = objc.getClass("NSAttributedString");
late final _sel_string = objc.registerName("string");

final class _NSRange extends ffi.Struct {
  @ffi.UnsignedLong()
  external int location;

  @ffi.UnsignedLong()
  external int length;
}

late final _sel_attributesAtIndex_effectiveRange_ =
    objc.registerName("attributesAtIndex:effectiveRange:");
final _objc_msgSend_56 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<_NSRange>)>();
late final _sel_length = objc.registerName("length");
final _objc_msgSend_57 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_attribute_atIndex_effectiveRange_ =
    objc.registerName("attribute:atIndex:effectiveRange:");
final _objc_msgSend_58 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<_NSRange>)>();
late final _sel_attributedSubstringFromRange_ =
    objc.registerName("attributedSubstringFromRange:");
final _objc_msgSend_59 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_attributesAtIndex_longestEffectiveRange_inRange_ =
    objc.registerName("attributesAtIndex:longestEffectiveRange:inRange:");
final _objc_msgSend_60 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<_NSRange>,
                _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<_NSRange>,
            _NSRange)>();
late final _sel_attribute_atIndex_longestEffectiveRange_inRange_ =
    objc.registerName("attribute:atIndex:longestEffectiveRange:inRange:");
final _objc_msgSend_61 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<_NSRange>,
                _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<_NSRange>,
            _NSRange)>();
late final _sel_isEqualToAttributedString_ =
    objc.registerName("isEqualToAttributedString:");
final _objc_msgSend_62 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithString_ = objc.registerName("initWithString:");
final _objc_msgSend_63 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithString_attributes_ =
    objc.registerName("initWithString:attributes:");
final _objc_msgSend_64 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithAttributedString_ =
    objc.registerName("initWithAttributedString:");
final _objc_msgSend_65 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum NSAttributedStringEnumerationOptions {
  NSAttributedStringEnumerationReverse(2),
  NSAttributedStringEnumerationLongestEffectiveRangeNotRequired(1048576);

  final int value;
  const NSAttributedStringEnumerationOptions(this.value);

  static NSAttributedStringEnumerationOptions fromValue(int value) =>
      switch (value) {
        2 => NSAttributedStringEnumerationReverse,
        1048576 =>
          NSAttributedStringEnumerationLongestEffectiveRangeNotRequired,
        _ => throw ArgumentError(
            "Unknown value for NSAttributedStringEnumerationOptions: $value"),
      };
}

void _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        _NSRange arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    _NSRange arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, _NSRange,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        _NSRange arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        _NSRange, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)>`.
abstract final class ObjCBlock_ffiVoid_NSDictionary_NSRange_bool {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1, ffi.Pointer<ffi.Bool> arg2)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>(
                              _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)>
      fromFunction(void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>) fn) =>
          objc.ObjCBlock<ffi.Void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>(
                          _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureTrampoline)
                      .cast(),
                  (ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1, ffi.Pointer<ffi.Bool> arg2) =>
                      fn(objc.NSDictionary.castFromPointer(arg0, retain: true, release: true), arg1, arg2)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)> listener(
      void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        _NSRange,
                        ffi.Pointer<ffi.Bool>)>.listener(
                _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1,
                ffi.Pointer<ffi.Bool> arg2) =>
            fn(
                objc.NSDictionary.castFromPointer(arg0,
                    retain: false, release: true),
                arg1,
                arg2));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSDictionary_NSRange_bool(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
        ffi.Void Function(objc.NSDictionary, _NSRange,
            ffi.Pointer<ffi.Bool>)>(wrapper, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          _NSRange,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)>`.
extension ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>)> {
  void call(
          objc.NSDictionary arg0, _NSRange arg1, ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      _NSRange arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  _NSRange,
                  ffi.Pointer<ffi.Bool>)>()(pointer, arg0.pointer, arg1, arg2);
}

late final _sel_enumerateAttributesInRange_options_usingBlock_ =
    objc.registerName("enumerateAttributesInRange:options:usingBlock:");
final _objc_msgSend_66 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
void _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        _NSRange arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    _NSRange arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, _NSRange,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        _NSRange arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        _NSRange, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>`.
abstract final class ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>, _NSRange,
                      ffi.Pointer<ffi.Bool>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1, ffi.Pointer<ffi.Bool> arg2)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>(
                              _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>
      fromFunction(void Function(objc.ObjCObjectBase?, _NSRange, ffi.Pointer<ffi.Bool>) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>(
                          _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureTrampoline)
                      .cast(),
                  (ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1, ffi.Pointer<ffi.Bool> arg2) =>
                      fn(arg0.address == 0 ? null : objc.ObjCObjectBase(arg0, retain: true, release: true), arg1, arg2)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Pointer<objc.ObjCObject>, _NSRange,
          ffi.Pointer<ffi.Bool>)> listener(
      void Function(objc.ObjCObjectBase?, _NSRange, ffi.Pointer<ffi.Bool>) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        _NSRange,
                        ffi.Pointer<ffi.Bool>)>.listener(
                _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1,
                ffi.Pointer<ffi.Bool> arg2) =>
            fn(
                arg0.address == 0
                    ? null
                    : objc.ObjCObjectBase(arg0, retain: false, release: true),
                arg1,
                arg2));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<objc.ObjCObject>, _NSRange,
            ffi.Pointer<ffi.Bool>)>(wrapper, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          _NSRange,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>`.
extension ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)> {
  void call(objc.ObjCObjectBase? arg0, _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          _NSRange arg1,
                          ffi.Pointer<ffi.Bool> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      _NSRange,
                      ffi.Pointer<ffi.Bool>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1, arg2);
}

late final _sel_enumerateAttribute_inRange_options_usingBlock_ =
    objc.registerName("enumerateAttribute:inRange:options:usingBlock:");
final _objc_msgSend_67 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// NSAttributedStringMarkdownParsingOptions
class NSAttributedStringMarkdownParsingOptions extends objc.NSObject {
  NSAttributedStringMarkdownParsingOptions._(
      ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false,
      bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSAttributedStringMarkdownParsingOptions] that points to the same underlying object as [other].
  NSAttributedStringMarkdownParsingOptions.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSAttributedStringMarkdownParsingOptions] that wraps the given raw object pointer.
  NSAttributedStringMarkdownParsingOptions.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSAttributedStringMarkdownParsingOptions].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_NSAttributedStringMarkdownParsingOptions);
  }

  /// init
  NSAttributedStringMarkdownParsingOptions init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSAttributedStringMarkdownParsingOptions.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// allowsExtendedAttributes
  bool get allowsExtendedAttributes {
    return _objc_msgSend_13(this.pointer, _sel_allowsExtendedAttributes);
  }

  /// setAllowsExtendedAttributes:
  set allowsExtendedAttributes(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAllowsExtendedAttributes_, value);
  }

  /// interpretedSyntax
  NSAttributedStringMarkdownInterpretedSyntax get interpretedSyntax {
    final _ret = _objc_msgSend_68(this.pointer, _sel_interpretedSyntax);
    return NSAttributedStringMarkdownInterpretedSyntax.fromValue(_ret);
  }

  /// setInterpretedSyntax:
  set interpretedSyntax(NSAttributedStringMarkdownInterpretedSyntax value) {
    return _objc_msgSend_69(
        this.pointer, _sel_setInterpretedSyntax_, value.value);
  }

  /// failurePolicy
  NSAttributedStringMarkdownParsingFailurePolicy get failurePolicy {
    final _ret = _objc_msgSend_70(this.pointer, _sel_failurePolicy);
    return NSAttributedStringMarkdownParsingFailurePolicy.fromValue(_ret);
  }

  /// setFailurePolicy:
  set failurePolicy(NSAttributedStringMarkdownParsingFailurePolicy value) {
    return _objc_msgSend_71(this.pointer, _sel_setFailurePolicy_, value.value);
  }

  /// languageCode
  objc.NSString? get languageCode {
    final _ret = _objc_msgSend_20(this.pointer, _sel_languageCode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLanguageCode:
  set languageCode(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setLanguageCode_, value?.pointer ?? ffi.nullptr);
  }

  /// appliesSourcePositionAttributes
  bool get appliesSourcePositionAttributes {
    return _objc_msgSend_13(this.pointer, _sel_appliesSourcePositionAttributes);
  }

  /// setAppliesSourcePositionAttributes:
  set appliesSourcePositionAttributes(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAppliesSourcePositionAttributes_, value);
  }

  /// new
  static NSAttributedStringMarkdownParsingOptions new1() {
    final _ret = _objc_msgSend_19(
        _class_NSAttributedStringMarkdownParsingOptions, _sel_new);
    return NSAttributedStringMarkdownParsingOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSAttributedStringMarkdownParsingOptions allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_allocWithZone_,
        zone);
    return NSAttributedStringMarkdownParsingOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSAttributedStringMarkdownParsingOptions alloc() {
    final _ret = _objc_msgSend_19(
        _class_NSAttributedStringMarkdownParsingOptions, _sel_alloc);
    return NSAttributedStringMarkdownParsingOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSAttributedStringMarkdownParsingOptions,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_NSAttributedStringMarkdownParsingOptions,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSAttributedStringMarkdownParsingOptions,
        _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_keyPathsForValuesAffectingValueForKey_,
        key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSAttributedStringMarkdownParsingOptions,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSAttributedStringMarkdownParsingOptions =
    objc.getClass("NSAttributedStringMarkdownParsingOptions");
late final _sel_allowsExtendedAttributes =
    objc.registerName("allowsExtendedAttributes");
late final _sel_setAllowsExtendedAttributes_ =
    objc.registerName("setAllowsExtendedAttributes:");

enum NSAttributedStringMarkdownInterpretedSyntax {
  NSAttributedStringMarkdownInterpretedSyntaxFull(0),
  NSAttributedStringMarkdownInterpretedSyntaxInlineOnly(1),
  NSAttributedStringMarkdownInterpretedSyntaxInlineOnlyPreservingWhitespace(2);

  final int value;
  const NSAttributedStringMarkdownInterpretedSyntax(this.value);

  static NSAttributedStringMarkdownInterpretedSyntax fromValue(int value) =>
      switch (value) {
        0 => NSAttributedStringMarkdownInterpretedSyntaxFull,
        1 => NSAttributedStringMarkdownInterpretedSyntaxInlineOnly,
        2 =>
          NSAttributedStringMarkdownInterpretedSyntaxInlineOnlyPreservingWhitespace,
        _ => throw ArgumentError(
            "Unknown value for NSAttributedStringMarkdownInterpretedSyntax: $value"),
      };
}

late final _sel_interpretedSyntax = objc.registerName("interpretedSyntax");
final _objc_msgSend_68 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setInterpretedSyntax_ =
    objc.registerName("setInterpretedSyntax:");
final _objc_msgSend_69 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum NSAttributedStringMarkdownParsingFailurePolicy {
  NSAttributedStringMarkdownParsingFailureReturnError(0),
  NSAttributedStringMarkdownParsingFailureReturnPartiallyParsedIfPossible(1);

  final int value;
  const NSAttributedStringMarkdownParsingFailurePolicy(this.value);

  static NSAttributedStringMarkdownParsingFailurePolicy fromValue(int value) =>
      switch (value) {
        0 => NSAttributedStringMarkdownParsingFailureReturnError,
        1 =>
          NSAttributedStringMarkdownParsingFailureReturnPartiallyParsedIfPossible,
        _ => throw ArgumentError(
            "Unknown value for NSAttributedStringMarkdownParsingFailurePolicy: $value"),
      };
}

late final _sel_failurePolicy = objc.registerName("failurePolicy");
final _objc_msgSend_70 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFailurePolicy_ = objc.registerName("setFailurePolicy:");
final _objc_msgSend_71 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_languageCode = objc.registerName("languageCode");
late final _sel_setLanguageCode_ = objc.registerName("setLanguageCode:");
late final _sel_appliesSourcePositionAttributes =
    objc.registerName("appliesSourcePositionAttributes");
late final _sel_setAppliesSourcePositionAttributes_ =
    objc.registerName("setAppliesSourcePositionAttributes:");
late final _sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_ =
    objc.registerName(
        "initWithContentsOfMarkdownFileAtURL:options:baseURL:error:");
final _objc_msgSend_72 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithMarkdown_options_baseURL_error_ =
    objc.registerName("initWithMarkdown:options:baseURL:error:");
final _objc_msgSend_73 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithMarkdownString_options_baseURL_error_ =
    objc.registerName("initWithMarkdownString:options:baseURL:error:");
final _objc_msgSend_74 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

enum NSAttributedStringFormattingOptions {
  NSAttributedStringFormattingInsertArgumentAttributesWithoutMerging(1),
  NSAttributedStringFormattingApplyReplacementIndexAttribute(2);

  final int value;
  const NSAttributedStringFormattingOptions(this.value);

  static NSAttributedStringFormattingOptions fromValue(int value) =>
      switch (value) {
        1 => NSAttributedStringFormattingInsertArgumentAttributesWithoutMerging,
        2 => NSAttributedStringFormattingApplyReplacementIndexAttribute,
        _ => throw ArgumentError(
            "Unknown value for NSAttributedStringFormattingOptions: $value"),
      };
}

late final _sel_initWithFormat_options_locale_ =
    objc.registerName("initWithFormat:options:locale:");
final _objc_msgSend_75 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithFormat_options_locale_arguments_ =
    objc.registerName("initWithFormat:options:locale:arguments:");
final _objc_msgSend_76 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Char>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Char>)>();
late final _sel_localizedAttributedStringWithFormat_ =
    objc.registerName("localizedAttributedStringWithFormat:");
late final _sel_localizedAttributedStringWithFormat_options_ =
    objc.registerName("localizedAttributedStringWithFormat:options:");
final _objc_msgSend_77 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_initWithFormat_options_locale_context_ =
    objc.registerName("initWithFormat:options:locale:context:");
final _objc_msgSend_78 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithFormat_options_locale_context_arguments_ =
    objc.registerName("initWithFormat:options:locale:context:arguments:");
final _objc_msgSend_79 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Char>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Char>)>();
late final _sel_localizedAttributedStringWithFormat_context_ =
    objc.registerName("localizedAttributedStringWithFormat:context:");
final _objc_msgSend_80 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localizedAttributedStringWithFormat_options_context_ =
    objc.registerName("localizedAttributedStringWithFormat:options:context:");
final _objc_msgSend_81 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributedStringByInflectingString =
    objc.registerName("attributedStringByInflectingString");
final _objc_msgSend_82 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_localizedAttributedStringForKey_value_table_ =
    objc.registerName("localizedAttributedStringForKey:value:table:");
final _objc_msgSend_83 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_bundleIdentifier = objc.registerName("bundleIdentifier");
late final _sel_infoDictionary = objc.registerName("infoDictionary");
final _objc_msgSend_84 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_localizedInfoDictionary =
    objc.registerName("localizedInfoDictionary");
late final _sel_objectForInfoDictionaryKey_ =
    objc.registerName("objectForInfoDictionaryKey:");
late final _sel_classNamed_ = objc.registerName("classNamed:");
late final _sel_principalClass = objc.registerName("principalClass");
final _objc_msgSend_85 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_preferredLocalizations =
    objc.registerName("preferredLocalizations");
late final _sel_localizations = objc.registerName("localizations");
late final _sel_developmentLocalization =
    objc.registerName("developmentLocalization");
late final _sel_preferredLocalizationsFromArray_ =
    objc.registerName("preferredLocalizationsFromArray:");
final _objc_msgSend_86 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_preferredLocalizationsFromArray_forPreferences_ =
    objc.registerName("preferredLocalizationsFromArray:forPreferences:");
final _objc_msgSend_87 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_executableArchitectures =
    objc.registerName("executableArchitectures");
final _objc_msgSend_88 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPreservationPriority_forTags_ =
    objc.registerName("setPreservationPriority:forTags:");
final _objc_msgSend_89 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_preservationPriorityForTag_ =
    objc.registerName("preservationPriorityForTag:");
final _objc_msgSend_90 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_90Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSMutableAttributedString
class NSMutableAttributedString extends NSAttributedString {
  NSMutableAttributedString._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableAttributedString] that points to the same underlying object as [other].
  NSMutableAttributedString.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableAttributedString] that wraps the given raw object pointer.
  NSMutableAttributedString.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableAttributedString].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableAttributedString);
  }

  /// replaceCharactersInRange:withString:
  void replaceCharactersInRange_withString_(_NSRange range, objc.NSString str) {
    _objc_msgSend_91(this.pointer, _sel_replaceCharactersInRange_withString_,
        range, str.pointer);
  }

  /// setAttributes:range:
  void setAttributes_range_(objc.NSDictionary? attrs, _NSRange range) {
    _objc_msgSend_92(this.pointer, _sel_setAttributes_range_,
        attrs?.pointer ?? ffi.nullptr, range);
  }

  /// mutableString
  objc.NSMutableString get mutableString {
    final _ret = _objc_msgSend_93(this.pointer, _sel_mutableString);
    return objc.NSMutableString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// addAttribute:value:range:
  void addAttribute_value_range_(
      objc.NSString name, objc.ObjCObjectBase value, _NSRange range) {
    _objc_msgSend_94(this.pointer, _sel_addAttribute_value_range_, name.pointer,
        value.pointer, range);
  }

  /// addAttributes:range:
  void addAttributes_range_(objc.NSDictionary attrs, _NSRange range) {
    _objc_msgSend_95(
        this.pointer, _sel_addAttributes_range_, attrs.pointer, range);
  }

  /// removeAttribute:range:
  void removeAttribute_range_(objc.NSString name, _NSRange range) {
    _objc_msgSend_96(
        this.pointer, _sel_removeAttribute_range_, name.pointer, range);
  }

  /// replaceCharactersInRange:withAttributedString:
  void replaceCharactersInRange_withAttributedString_(
      _NSRange range, NSAttributedString attrString) {
    _objc_msgSend_97(
        this.pointer,
        _sel_replaceCharactersInRange_withAttributedString_,
        range,
        attrString.pointer);
  }

  /// insertAttributedString:atIndex:
  void insertAttributedString_atIndex_(NSAttributedString attrString, int loc) {
    _objc_msgSend_98(this.pointer, _sel_insertAttributedString_atIndex_,
        attrString.pointer, loc);
  }

  /// appendAttributedString:
  void appendAttributedString_(NSAttributedString attrString) {
    _objc_msgSend_99(
        this.pointer, _sel_appendAttributedString_, attrString.pointer);
  }

  /// deleteCharactersInRange:
  void deleteCharactersInRange_(_NSRange range) {
    _objc_msgSend_100(this.pointer, _sel_deleteCharactersInRange_, range);
  }

  /// setAttributedString:
  void setAttributedString_(NSAttributedString attrString) {
    _objc_msgSend_99(
        this.pointer, _sel_setAttributedString_, attrString.pointer);
  }

  /// beginEditing
  void beginEditing() {
    _objc_msgSend_7(this.pointer, _sel_beginEditing);
  }

  /// endEditing
  void endEditing() {
    _objc_msgSend_7(this.pointer, _sel_endEditing);
  }

  /// appendLocalizedFormat:
  void appendLocalizedFormat_(NSAttributedString format) {
    _objc_msgSend_99(this.pointer, _sel_appendLocalizedFormat_, format.pointer);
  }

  /// initWithString:
  NSMutableAttributedString initWithString_(objc.NSString str) {
    final _ret =
        _objc_msgSend_63(this.pointer, _sel_initWithString_, str.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithString:attributes:
  NSMutableAttributedString initWithString_attributes_(
      objc.NSString str, objc.NSDictionary? attrs) {
    final _ret = _objc_msgSend_64(this.pointer, _sel_initWithString_attributes_,
        str.pointer, attrs?.pointer ?? ffi.nullptr);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithAttributedString:
  NSMutableAttributedString initWithAttributedString_(
      NSAttributedString attrStr) {
    final _ret = _objc_msgSend_65(
        this.pointer, _sel_initWithAttributedString_, attrStr.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithContentsOfMarkdownFileAtURL:options:baseURL:error:
  NSMutableAttributedString?
      initWithContentsOfMarkdownFileAtURL_options_baseURL_error_(
          objc.NSURL markdownFile,
          NSAttributedStringMarkdownParsingOptions? options,
          objc.NSURL? baseURL,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_72(
        this.pointer,
        _sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_,
        markdownFile.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSMutableAttributedString.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithMarkdown:options:baseURL:error:
  NSMutableAttributedString? initWithMarkdown_options_baseURL_error_(
      objc.NSData markdown,
      NSAttributedStringMarkdownParsingOptions? options,
      objc.NSURL? baseURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_73(
        this.pointer,
        _sel_initWithMarkdown_options_baseURL_error_,
        markdown.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSMutableAttributedString.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithMarkdownString:options:baseURL:error:
  NSMutableAttributedString? initWithMarkdownString_options_baseURL_error_(
      objc.NSString markdownString,
      NSAttributedStringMarkdownParsingOptions? options,
      objc.NSURL? baseURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_74(
        this.pointer,
        _sel_initWithMarkdownString_options_baseURL_error_,
        markdownString.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSMutableAttributedString.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithFormat:options:locale:
  NSMutableAttributedString initWithFormat_options_locale_(
      NSAttributedString format,
      NSAttributedStringFormattingOptions options,
      objc.NSLocale? locale) {
    final _ret = _objc_msgSend_75(
        this.pointer,
        _sel_initWithFormat_options_locale_,
        format.pointer,
        options.value,
        locale?.pointer ?? ffi.nullptr);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithFormat:options:locale:arguments:
  NSMutableAttributedString initWithFormat_options_locale_arguments_(
      NSAttributedString format,
      NSAttributedStringFormattingOptions options,
      objc.NSLocale? locale,
      ffi.Pointer<ffi.Char> arguments) {
    final _ret = _objc_msgSend_76(
        this.pointer,
        _sel_initWithFormat_options_locale_arguments_,
        format.pointer,
        options.value,
        locale?.pointer ?? ffi.nullptr,
        arguments);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// localizedAttributedStringWithFormat:
  static NSMutableAttributedString localizedAttributedStringWithFormat_(
      NSAttributedString format) {
    final _ret = _objc_msgSend_65(_class_NSMutableAttributedString,
        _sel_localizedAttributedStringWithFormat_, format.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// localizedAttributedStringWithFormat:options:
  static NSMutableAttributedString localizedAttributedStringWithFormat_options_(
      NSAttributedString format, NSAttributedStringFormattingOptions options) {
    final _ret = _objc_msgSend_77(
        _class_NSMutableAttributedString,
        _sel_localizedAttributedStringWithFormat_options_,
        format.pointer,
        options.value);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithFormat:options:locale:context:
  NSMutableAttributedString initWithFormat_options_locale_context_(
      NSAttributedString format,
      NSAttributedStringFormattingOptions options,
      objc.NSLocale? locale,
      objc.NSDictionary context) {
    final _ret = _objc_msgSend_78(
        this.pointer,
        _sel_initWithFormat_options_locale_context_,
        format.pointer,
        options.value,
        locale?.pointer ?? ffi.nullptr,
        context.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithFormat:options:locale:context:arguments:
  NSMutableAttributedString initWithFormat_options_locale_context_arguments_(
      NSAttributedString format,
      NSAttributedStringFormattingOptions options,
      objc.NSLocale? locale,
      objc.NSDictionary context,
      ffi.Pointer<ffi.Char> arguments) {
    final _ret = _objc_msgSend_79(
        this.pointer,
        _sel_initWithFormat_options_locale_context_arguments_,
        format.pointer,
        options.value,
        locale?.pointer ?? ffi.nullptr,
        context.pointer,
        arguments);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// localizedAttributedStringWithFormat:context:
  static NSMutableAttributedString localizedAttributedStringWithFormat_context_(
      NSAttributedString format, objc.NSDictionary context) {
    final _ret = _objc_msgSend_80(
        _class_NSMutableAttributedString,
        _sel_localizedAttributedStringWithFormat_context_,
        format.pointer,
        context.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// localizedAttributedStringWithFormat:options:context:
  static NSMutableAttributedString
      localizedAttributedStringWithFormat_options_context_(
          NSAttributedString format,
          NSAttributedStringFormattingOptions options,
          objc.NSDictionary context) {
    final _ret = _objc_msgSend_81(
        _class_NSMutableAttributedString,
        _sel_localizedAttributedStringWithFormat_options_context_,
        format.pointer,
        options.value,
        context.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  NSMutableAttributedString init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSMutableAttributedString new1() {
    final _ret = _objc_msgSend_19(_class_NSMutableAttributedString, _sel_new);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSMutableAttributedString allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSMutableAttributedString, _sel_allocWithZone_, zone);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSMutableAttributedString alloc() {
    final _ret = _objc_msgSend_19(_class_NSMutableAttributedString, _sel_alloc);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSMutableAttributedString,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSMutableAttributedString,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSMutableAttributedString, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSMutableAttributedString, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSMutableAttributedString,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSMutableAttributedString,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSMutableAttributedString,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSMutableAttributedString, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSMutableAttributedString, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSMutableAttributedString =
    objc.getClass("NSMutableAttributedString");
late final _sel_replaceCharactersInRange_withString_ =
    objc.registerName("replaceCharactersInRange:withString:");
final _objc_msgSend_91 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setAttributes_range_ =
    objc.registerName("setAttributes:range:");
final _objc_msgSend_92 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_mutableString = objc.registerName("mutableString");
final _objc_msgSend_93 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_addAttribute_value_range_ =
    objc.registerName("addAttribute:value:range:");
final _objc_msgSend_94 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_addAttributes_range_ =
    objc.registerName("addAttributes:range:");
final _objc_msgSend_95 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_removeAttribute_range_ =
    objc.registerName("removeAttribute:range:");
final _objc_msgSend_96 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_replaceCharactersInRange_withAttributedString_ =
    objc.registerName("replaceCharactersInRange:withAttributedString:");
final _objc_msgSend_97 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_insertAttributedString_atIndex_ =
    objc.registerName("insertAttributedString:atIndex:");
final _objc_msgSend_98 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_appendAttributedString_ =
    objc.registerName("appendAttributedString:");
final _objc_msgSend_99 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_deleteCharactersInRange_ =
    objc.registerName("deleteCharactersInRange:");
final _objc_msgSend_100 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_setAttributedString_ =
    objc.registerName("setAttributedString:");
late final _sel_beginEditing = objc.registerName("beginEditing");
late final _sel_endEditing = objc.registerName("endEditing");
late final _sel_appendLocalizedFormat_ =
    objc.registerName("appendLocalizedFormat:");

/// NSDateFormatter
class NSDateFormatter extends NSFormatter {
  NSDateFormatter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDateFormatter] that points to the same underlying object as [other].
  NSDateFormatter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDateFormatter] that wraps the given raw object pointer.
  NSDateFormatter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDateFormatter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSDateFormatter);
  }

  /// formattingContext
  NSFormattingContext get formattingContext {
    final _ret = _objc_msgSend_101(this.pointer, _sel_formattingContext);
    return NSFormattingContext.fromValue(_ret);
  }

  /// setFormattingContext:
  set formattingContext(NSFormattingContext value) {
    return _objc_msgSend_102(
        this.pointer, _sel_setFormattingContext_, value.value);
  }

  /// getObjectValue:forString:range:error:
  bool getObjectValue_forString_range_error_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj,
      objc.NSString string,
      ffi.Pointer<_NSRange> rangep,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_103(
        this.pointer,
        _sel_getObjectValue_forString_range_error_,
        obj,
        string.pointer,
        rangep,
        error);
  }

  /// stringFromDate:
  objc.NSString stringFromDate_(objc.NSDate date) {
    final _ret =
        _objc_msgSend_104(this.pointer, _sel_stringFromDate_, date.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateFromString:
  objc.NSDate? dateFromString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_105(this.pointer, _sel_dateFromString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedStringFromDate:dateStyle:timeStyle:
  static objc.NSString localizedStringFromDate_dateStyle_timeStyle_(
      objc.NSDate date,
      NSDateFormatterStyle dstyle,
      NSDateFormatterStyle tstyle) {
    final _ret = _objc_msgSend_106(
        _class_NSDateFormatter,
        _sel_localizedStringFromDate_dateStyle_timeStyle_,
        date.pointer,
        dstyle.value,
        tstyle.value);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateFormatFromTemplate:options:locale:
  static objc.NSString? dateFormatFromTemplate_options_locale_(
      objc.NSString tmplate, int opts, objc.NSLocale? locale) {
    final _ret = _objc_msgSend_107(
        _class_NSDateFormatter,
        _sel_dateFormatFromTemplate_options_locale_,
        tmplate.pointer,
        opts,
        locale?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultFormatterBehavior
  static NSDateFormatterBehavior getDefaultFormatterBehavior() {
    final _ret = _objc_msgSend_108(
        _class_NSDateFormatter, _sel_defaultFormatterBehavior);
    return NSDateFormatterBehavior.fromValue(_ret);
  }

  /// setDefaultFormatterBehavior:
  static void setDefaultFormatterBehavior(NSDateFormatterBehavior value) {
    return _objc_msgSend_109(
        _class_NSDateFormatter, _sel_setDefaultFormatterBehavior_, value.value);
  }

  /// setLocalizedDateFormatFromTemplate:
  void setLocalizedDateFormatFromTemplate_(objc.NSString dateFormatTemplate) {
    _objc_msgSend_110(this.pointer, _sel_setLocalizedDateFormatFromTemplate_,
        dateFormatTemplate.pointer);
  }

  /// dateFormat
  objc.NSString get dateFormat {
    final _ret = _objc_msgSend_11(this.pointer, _sel_dateFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDateFormat:
  set dateFormat(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setDateFormat_, value.pointer);
  }

  /// dateStyle
  NSDateFormatterStyle get dateStyle {
    final _ret = _objc_msgSend_111(this.pointer, _sel_dateStyle);
    return NSDateFormatterStyle.fromValue(_ret);
  }

  /// setDateStyle:
  set dateStyle(NSDateFormatterStyle value) {
    return _objc_msgSend_112(this.pointer, _sel_setDateStyle_, value.value);
  }

  /// timeStyle
  NSDateFormatterStyle get timeStyle {
    final _ret = _objc_msgSend_111(this.pointer, _sel_timeStyle);
    return NSDateFormatterStyle.fromValue(_ret);
  }

  /// setTimeStyle:
  set timeStyle(NSDateFormatterStyle value) {
    return _objc_msgSend_112(this.pointer, _sel_setTimeStyle_, value.value);
  }

  /// locale
  objc.NSLocale get locale {
    final _ret = _objc_msgSend_113(this.pointer, _sel_locale);
    return objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLocale:
  set locale(objc.NSLocale value) {
    return _objc_msgSend_114(this.pointer, _sel_setLocale_, value.pointer);
  }

  /// generatesCalendarDates
  bool get generatesCalendarDates {
    return _objc_msgSend_13(this.pointer, _sel_generatesCalendarDates);
  }

  /// setGeneratesCalendarDates:
  set generatesCalendarDates(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setGeneratesCalendarDates_, value);
  }

  /// formatterBehavior
  NSDateFormatterBehavior get formatterBehavior {
    final _ret = _objc_msgSend_108(this.pointer, _sel_formatterBehavior);
    return NSDateFormatterBehavior.fromValue(_ret);
  }

  /// setFormatterBehavior:
  set formatterBehavior(NSDateFormatterBehavior value) {
    return _objc_msgSend_109(
        this.pointer, _sel_setFormatterBehavior_, value.value);
  }

  /// timeZone
  NSTimeZone get timeZone {
    final _ret = _objc_msgSend_121(this.pointer, _sel_timeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTimeZone:
  set timeZone(NSTimeZone value) {
    return _objc_msgSend_122(this.pointer, _sel_setTimeZone_, value.pointer);
  }

  /// calendar
  NSCalendar get calendar {
    final _ret = _objc_msgSend_131(this.pointer, _sel_calendar);
    return NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCalendar:
  set calendar(NSCalendar value) {
    return _objc_msgSend_171(this.pointer, _sel_setCalendar_, value.pointer);
  }

  /// isLenient
  bool get lenient {
    return _objc_msgSend_13(this.pointer, _sel_isLenient);
  }

  /// setLenient:
  set lenient(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setLenient_, value);
  }

  /// twoDigitStartDate
  objc.NSDate? get twoDigitStartDate {
    final _ret = _objc_msgSend_126(this.pointer, _sel_twoDigitStartDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTwoDigitStartDate:
  set twoDigitStartDate(objc.NSDate? value) {
    return _objc_msgSend_172(this.pointer, _sel_setTwoDigitStartDate_,
        value?.pointer ?? ffi.nullptr);
  }

  /// defaultDate
  objc.NSDate? get defaultDate {
    final _ret = _objc_msgSend_126(this.pointer, _sel_defaultDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDefaultDate:
  set defaultDate(objc.NSDate? value) {
    return _objc_msgSend_172(
        this.pointer, _sel_setDefaultDate_, value?.pointer ?? ffi.nullptr);
  }

  /// eraSymbols
  objc.NSArray get eraSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_eraSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setEraSymbols:
  set eraSymbols(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer, _sel_setEraSymbols_, value.pointer);
  }

  /// monthSymbols
  objc.NSArray get monthSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_monthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMonthSymbols:
  set monthSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setMonthSymbols_, value.pointer);
  }

  /// shortMonthSymbols
  objc.NSArray get shortMonthSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_shortMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setShortMonthSymbols:
  set shortMonthSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setShortMonthSymbols_, value.pointer);
  }

  /// weekdaySymbols
  objc.NSArray get weekdaySymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_weekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setWeekdaySymbols:
  set weekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setWeekdaySymbols_, value.pointer);
  }

  /// shortWeekdaySymbols
  objc.NSArray get shortWeekdaySymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_shortWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setShortWeekdaySymbols:
  set shortWeekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setShortWeekdaySymbols_, value.pointer);
  }

  /// AMSymbol
  objc.NSString get AMSymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_AMSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAMSymbol:
  set AMSymbol(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setAMSymbol_, value.pointer);
  }

  /// PMSymbol
  objc.NSString get PMSymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_PMSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPMSymbol:
  set PMSymbol(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setPMSymbol_, value.pointer);
  }

  /// longEraSymbols
  objc.NSArray get longEraSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_longEraSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLongEraSymbols:
  set longEraSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setLongEraSymbols_, value.pointer);
  }

  /// veryShortMonthSymbols
  objc.NSArray get veryShortMonthSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_veryShortMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVeryShortMonthSymbols:
  set veryShortMonthSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setVeryShortMonthSymbols_, value.pointer);
  }

  /// standaloneMonthSymbols
  objc.NSArray get standaloneMonthSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_standaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setStandaloneMonthSymbols:
  set standaloneMonthSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setStandaloneMonthSymbols_, value.pointer);
  }

  /// shortStandaloneMonthSymbols
  objc.NSArray get shortStandaloneMonthSymbols {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_shortStandaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setShortStandaloneMonthSymbols:
  set shortStandaloneMonthSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setShortStandaloneMonthSymbols_, value.pointer);
  }

  /// veryShortStandaloneMonthSymbols
  objc.NSArray get veryShortStandaloneMonthSymbols {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_veryShortStandaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVeryShortStandaloneMonthSymbols:
  set veryShortStandaloneMonthSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setVeryShortStandaloneMonthSymbols_, value.pointer);
  }

  /// veryShortWeekdaySymbols
  objc.NSArray get veryShortWeekdaySymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_veryShortWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVeryShortWeekdaySymbols:
  set veryShortWeekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setVeryShortWeekdaySymbols_, value.pointer);
  }

  /// standaloneWeekdaySymbols
  objc.NSArray get standaloneWeekdaySymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_standaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setStandaloneWeekdaySymbols:
  set standaloneWeekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setStandaloneWeekdaySymbols_, value.pointer);
  }

  /// shortStandaloneWeekdaySymbols
  objc.NSArray get shortStandaloneWeekdaySymbols {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_shortStandaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setShortStandaloneWeekdaySymbols:
  set shortStandaloneWeekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setShortStandaloneWeekdaySymbols_, value.pointer);
  }

  /// veryShortStandaloneWeekdaySymbols
  objc.NSArray get veryShortStandaloneWeekdaySymbols {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_veryShortStandaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVeryShortStandaloneWeekdaySymbols:
  set veryShortStandaloneWeekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer,
        _sel_setVeryShortStandaloneWeekdaySymbols_, value.pointer);
  }

  /// quarterSymbols
  objc.NSArray get quarterSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_quarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setQuarterSymbols:
  set quarterSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setQuarterSymbols_, value.pointer);
  }

  /// shortQuarterSymbols
  objc.NSArray get shortQuarterSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_shortQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setShortQuarterSymbols:
  set shortQuarterSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setShortQuarterSymbols_, value.pointer);
  }

  /// standaloneQuarterSymbols
  objc.NSArray get standaloneQuarterSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_standaloneQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setStandaloneQuarterSymbols:
  set standaloneQuarterSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setStandaloneQuarterSymbols_, value.pointer);
  }

  /// shortStandaloneQuarterSymbols
  objc.NSArray get shortStandaloneQuarterSymbols {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_shortStandaloneQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setShortStandaloneQuarterSymbols:
  set shortStandaloneQuarterSymbols(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setShortStandaloneQuarterSymbols_, value.pointer);
  }

  /// gregorianStartDate
  objc.NSDate? get gregorianStartDate {
    final _ret = _objc_msgSend_126(this.pointer, _sel_gregorianStartDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setGregorianStartDate:
  set gregorianStartDate(objc.NSDate? value) {
    return _objc_msgSend_172(this.pointer, _sel_setGregorianStartDate_,
        value?.pointer ?? ffi.nullptr);
  }

  /// doesRelativeDateFormatting
  bool get doesRelativeDateFormatting {
    return _objc_msgSend_13(this.pointer, _sel_doesRelativeDateFormatting);
  }

  /// setDoesRelativeDateFormatting:
  set doesRelativeDateFormatting(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setDoesRelativeDateFormatting_, value);
  }

  /// initWithDateFormat:allowNaturalLanguage:
  objc.ObjCObjectBase initWithDateFormat_allowNaturalLanguage_(
      objc.NSString format, bool flag) {
    final _ret = _objc_msgSend_174(this.pointer,
        _sel_initWithDateFormat_allowNaturalLanguage_, format.pointer, flag);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// allowsNaturalLanguage
  bool allowsNaturalLanguage() {
    return _objc_msgSend_13(this.pointer, _sel_allowsNaturalLanguage);
  }

  /// init
  NSDateFormatter init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSDateFormatter.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSDateFormatter new1() {
    final _ret = _objc_msgSend_19(_class_NSDateFormatter, _sel_new);
    return NSDateFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSDateFormatter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSDateFormatter, _sel_allocWithZone_, zone);
    return NSDateFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSDateFormatter alloc() {
    final _ret = _objc_msgSend_19(_class_NSDateFormatter, _sel_alloc);
    return NSDateFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSDateFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSDateFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSDateFormatter, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSDateFormatter, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSDateFormatter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSDateFormatter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSDateFormatter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSDateFormatter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSDateFormatter, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSDateFormatter = objc.getClass("NSDateFormatter");

enum NSFormattingContext {
  NSFormattingContextUnknown(0),
  NSFormattingContextDynamic(1),
  NSFormattingContextStandalone(2),
  NSFormattingContextListItem(3),
  NSFormattingContextBeginningOfSentence(4),
  NSFormattingContextMiddleOfSentence(5);

  final int value;
  const NSFormattingContext(this.value);

  static NSFormattingContext fromValue(int value) => switch (value) {
        0 => NSFormattingContextUnknown,
        1 => NSFormattingContextDynamic,
        2 => NSFormattingContextStandalone,
        3 => NSFormattingContextListItem,
        4 => NSFormattingContextBeginningOfSentence,
        5 => NSFormattingContextMiddleOfSentence,
        _ =>
          throw ArgumentError("Unknown value for NSFormattingContext: $value"),
      };
}

late final _sel_formattingContext = objc.registerName("formattingContext");
final _objc_msgSend_101 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFormattingContext_ =
    objc.registerName("setFormattingContext:");
final _objc_msgSend_102 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_getObjectValue_forString_range_error_ =
    objc.registerName("getObjectValue:forString:range:error:");
final _objc_msgSend_103 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<_NSRange>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<_NSRange>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_stringFromDate_ = objc.registerName("stringFromDate:");
final _objc_msgSend_104 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateFromString_ = objc.registerName("dateFromString:");
final _objc_msgSend_105 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum NSDateFormatterStyle {
  NSDateFormatterNoStyle(0),
  NSDateFormatterShortStyle(1),
  NSDateFormatterMediumStyle(2),
  NSDateFormatterLongStyle(3),
  NSDateFormatterFullStyle(4);

  final int value;
  const NSDateFormatterStyle(this.value);

  static NSDateFormatterStyle fromValue(int value) => switch (value) {
        0 => NSDateFormatterNoStyle,
        1 => NSDateFormatterShortStyle,
        2 => NSDateFormatterMediumStyle,
        3 => NSDateFormatterLongStyle,
        4 => NSDateFormatterFullStyle,
        _ =>
          throw ArgumentError("Unknown value for NSDateFormatterStyle: $value"),
      };
}

late final _sel_localizedStringFromDate_dateStyle_timeStyle_ =
    objc.registerName("localizedStringFromDate:dateStyle:timeStyle:");
final _objc_msgSend_106 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int)>();
late final _sel_dateFormatFromTemplate_options_locale_ =
    objc.registerName("dateFormatFromTemplate:options:locale:");
final _objc_msgSend_107 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

enum NSDateFormatterBehavior {
  NSDateFormatterBehaviorDefault(0),
  NSDateFormatterBehavior10_0(1000),
  NSDateFormatterBehavior10_4(1040);

  final int value;
  const NSDateFormatterBehavior(this.value);

  static NSDateFormatterBehavior fromValue(int value) => switch (value) {
        0 => NSDateFormatterBehaviorDefault,
        1000 => NSDateFormatterBehavior10_0,
        1040 => NSDateFormatterBehavior10_4,
        _ => throw ArgumentError(
            "Unknown value for NSDateFormatterBehavior: $value"),
      };
}

late final _sel_defaultFormatterBehavior =
    objc.registerName("defaultFormatterBehavior");
final _objc_msgSend_108 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDefaultFormatterBehavior_ =
    objc.registerName("setDefaultFormatterBehavior:");
final _objc_msgSend_109 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setLocalizedDateFormatFromTemplate_ =
    objc.registerName("setLocalizedDateFormatFromTemplate:");
final _objc_msgSend_110 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateFormat = objc.registerName("dateFormat");
late final _sel_setDateFormat_ = objc.registerName("setDateFormat:");
late final _sel_dateStyle = objc.registerName("dateStyle");
final _objc_msgSend_111 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDateStyle_ = objc.registerName("setDateStyle:");
final _objc_msgSend_112 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_timeStyle = objc.registerName("timeStyle");
late final _sel_setTimeStyle_ = objc.registerName("setTimeStyle:");
late final _sel_locale = objc.registerName("locale");
final _objc_msgSend_113 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setLocale_ = objc.registerName("setLocale:");
final _objc_msgSend_114 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_generatesCalendarDates =
    objc.registerName("generatesCalendarDates");
late final _sel_setGeneratesCalendarDates_ =
    objc.registerName("setGeneratesCalendarDates:");
late final _sel_formatterBehavior = objc.registerName("formatterBehavior");
late final _sel_setFormatterBehavior_ =
    objc.registerName("setFormatterBehavior:");

/// NSTimeZone
class NSTimeZone extends objc.NSObject {
  NSTimeZone._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSTimeZone] that points to the same underlying object as [other].
  NSTimeZone.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSTimeZone] that wraps the given raw object pointer.
  NSTimeZone.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSTimeZone].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSTimeZone);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_11(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// data
  objc.NSData get data {
    final _ret = _objc_msgSend_115(this.pointer, _sel_data);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// secondsFromGMTForDate:
  int secondsFromGMTForDate_(objc.NSDate aDate) {
    return _objc_msgSend_116(
        this.pointer, _sel_secondsFromGMTForDate_, aDate.pointer);
  }

  /// abbreviationForDate:
  objc.NSString? abbreviationForDate_(objc.NSDate aDate) {
    final _ret = _objc_msgSend_117(
        this.pointer, _sel_abbreviationForDate_, aDate.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// isDaylightSavingTimeForDate:
  bool isDaylightSavingTimeForDate_(objc.NSDate aDate) {
    return _objc_msgSend_118(
        this.pointer, _sel_isDaylightSavingTimeForDate_, aDate.pointer);
  }

  /// daylightSavingTimeOffsetForDate:
  double daylightSavingTimeOffsetForDate_(objc.NSDate aDate) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_119Fpret(
            this.pointer, _sel_daylightSavingTimeOffsetForDate_, aDate.pointer)
        : _objc_msgSend_119(
            this.pointer, _sel_daylightSavingTimeOffsetForDate_, aDate.pointer);
  }

  /// nextDaylightSavingTimeTransitionAfterDate:
  objc.NSDate? nextDaylightSavingTimeTransitionAfterDate_(objc.NSDate aDate) {
    final _ret = _objc_msgSend_120(this.pointer,
        _sel_nextDaylightSavingTimeTransitionAfterDate_, aDate.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemTimeZone
  static NSTimeZone getSystemTimeZone() {
    final _ret = _objc_msgSend_121(_class_NSTimeZone, _sel_systemTimeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// resetSystemTimeZone
  static void resetSystemTimeZone() {
    _objc_msgSend_7(_class_NSTimeZone, _sel_resetSystemTimeZone);
  }

  /// defaultTimeZone
  static NSTimeZone getDefaultTimeZone() {
    final _ret = _objc_msgSend_121(_class_NSTimeZone, _sel_defaultTimeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDefaultTimeZone:
  static void setDefaultTimeZone(NSTimeZone value) {
    return _objc_msgSend_122(
        _class_NSTimeZone, _sel_setDefaultTimeZone_, value.pointer);
  }

  /// localTimeZone
  static NSTimeZone getLocalTimeZone() {
    final _ret = _objc_msgSend_121(_class_NSTimeZone, _sel_localTimeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// knownTimeZoneNames
  static objc.NSArray getKnownTimeZoneNames() {
    final _ret = _objc_msgSend_33(_class_NSTimeZone, _sel_knownTimeZoneNames);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// abbreviationDictionary
  static objc.NSDictionary getAbbreviationDictionary() {
    final _ret =
        _objc_msgSend_123(_class_NSTimeZone, _sel_abbreviationDictionary);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAbbreviationDictionary:
  static void setAbbreviationDictionary(objc.NSDictionary value) {
    return _objc_msgSend_124(
        _class_NSTimeZone, _sel_setAbbreviationDictionary_, value.pointer);
  }

  /// timeZoneDataVersion
  static objc.NSString getTimeZoneDataVersion() {
    final _ret = _objc_msgSend_11(_class_NSTimeZone, _sel_timeZoneDataVersion);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// secondsFromGMT
  int get secondsFromGMT {
    return _objc_msgSend_125(this.pointer, _sel_secondsFromGMT);
  }

  /// abbreviation
  objc.NSString? get abbreviation {
    final _ret = _objc_msgSend_20(this.pointer, _sel_abbreviation);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// isDaylightSavingTime
  bool get daylightSavingTime {
    return _objc_msgSend_13(this.pointer, _sel_isDaylightSavingTime);
  }

  /// daylightSavingTimeOffset
  double get daylightSavingTimeOffset {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_daylightSavingTimeOffset)
        : _objc_msgSend_18(this.pointer, _sel_daylightSavingTimeOffset);
  }

  /// nextDaylightSavingTimeTransition
  objc.NSDate? get nextDaylightSavingTimeTransition {
    final _ret =
        _objc_msgSend_126(this.pointer, _sel_nextDaylightSavingTimeTransition);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// description
  objc.NSString get description {
    final _ret = _objc_msgSend_11(this.pointer, _sel_description);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// isEqualToTimeZone:
  bool isEqualToTimeZone_(NSTimeZone aTimeZone) {
    return _objc_msgSend_127(
        this.pointer, _sel_isEqualToTimeZone_, aTimeZone.pointer);
  }

  /// localizedName:locale:
  objc.NSString? localizedName_locale_(
      NSTimeZoneNameStyle style, objc.NSLocale? locale) {
    final _ret = _objc_msgSend_128(this.pointer, _sel_localizedName_locale_,
        style.value, locale?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeZoneWithName:
  static NSTimeZone? timeZoneWithName_(objc.NSString tzName) {
    final _ret = _objc_msgSend_35(
        _class_NSTimeZone, _sel_timeZoneWithName_, tzName.pointer);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeZoneWithName:data:
  static NSTimeZone? timeZoneWithName_data_(
      objc.NSString tzName, objc.NSData? aData) {
    final _ret = _objc_msgSend_129(
        _class_NSTimeZone,
        _sel_timeZoneWithName_data_,
        tzName.pointer,
        aData?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithName:
  NSTimeZone? initWithName_(objc.NSString tzName) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_initWithName_, tzName.pointer);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithName:data:
  NSTimeZone? initWithName_data_(objc.NSString tzName, objc.NSData? aData) {
    final _ret = _objc_msgSend_129(this.pointer, _sel_initWithName_data_,
        tzName.pointer, aData?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeZoneForSecondsFromGMT:
  static NSTimeZone timeZoneForSecondsFromGMT_(int seconds) {
    final _ret = _objc_msgSend_130(
        _class_NSTimeZone, _sel_timeZoneForSecondsFromGMT_, seconds);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeZoneWithAbbreviation:
  static NSTimeZone? timeZoneWithAbbreviation_(objc.NSString abbreviation) {
    final _ret = _objc_msgSend_35(_class_NSTimeZone,
        _sel_timeZoneWithAbbreviation_, abbreviation.pointer);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSTimeZone init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSTimeZone new1() {
    final _ret = _objc_msgSend_19(_class_NSTimeZone, _sel_new);
    return NSTimeZone.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSTimeZone allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSTimeZone, _sel_allocWithZone_, zone);
    return NSTimeZone.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSTimeZone alloc() {
    final _ret = _objc_msgSend_19(_class_NSTimeZone, _sel_alloc);
    return NSTimeZone.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSTimeZone,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSTimeZone,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSTimeZone, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSTimeZone, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSTimeZone,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSTimeZone,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSTimeZone,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSTimeZone, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSTimeZone, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSTimeZone = objc.getClass("NSTimeZone");
late final _sel_name = objc.registerName("name");
late final _sel_data = objc.registerName("data");
final _objc_msgSend_115 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_secondsFromGMTForDate_ =
    objc.registerName("secondsFromGMTForDate:");
final _objc_msgSend_116 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_abbreviationForDate_ =
    objc.registerName("abbreviationForDate:");
final _objc_msgSend_117 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isDaylightSavingTimeForDate_ =
    objc.registerName("isDaylightSavingTimeForDate:");
final _objc_msgSend_118 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_daylightSavingTimeOffsetForDate_ =
    objc.registerName("daylightSavingTimeOffsetForDate:");
final _objc_msgSend_119 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_119Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_nextDaylightSavingTimeTransitionAfterDate_ =
    objc.registerName("nextDaylightSavingTimeTransitionAfterDate:");
final _objc_msgSend_120 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_systemTimeZone = objc.registerName("systemTimeZone");
final _objc_msgSend_121 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_resetSystemTimeZone = objc.registerName("resetSystemTimeZone");
late final _sel_defaultTimeZone = objc.registerName("defaultTimeZone");
late final _sel_setDefaultTimeZone_ = objc.registerName("setDefaultTimeZone:");
final _objc_msgSend_122 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localTimeZone = objc.registerName("localTimeZone");
late final _sel_knownTimeZoneNames = objc.registerName("knownTimeZoneNames");
late final _sel_abbreviationDictionary =
    objc.registerName("abbreviationDictionary");
final _objc_msgSend_123 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAbbreviationDictionary_ =
    objc.registerName("setAbbreviationDictionary:");
final _objc_msgSend_124 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_timeZoneDataVersion = objc.registerName("timeZoneDataVersion");
late final _sel_secondsFromGMT = objc.registerName("secondsFromGMT");
final _objc_msgSend_125 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_abbreviation = objc.registerName("abbreviation");
late final _sel_isDaylightSavingTime =
    objc.registerName("isDaylightSavingTime");
late final _sel_daylightSavingTimeOffset =
    objc.registerName("daylightSavingTimeOffset");
late final _sel_nextDaylightSavingTimeTransition =
    objc.registerName("nextDaylightSavingTimeTransition");
final _objc_msgSend_126 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_description = objc.registerName("description");
late final _sel_isEqualToTimeZone_ = objc.registerName("isEqualToTimeZone:");
final _objc_msgSend_127 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum NSTimeZoneNameStyle {
  NSTimeZoneNameStyleStandard(0),
  NSTimeZoneNameStyleShortStandard(1),
  NSTimeZoneNameStyleDaylightSaving(2),
  NSTimeZoneNameStyleShortDaylightSaving(3),
  NSTimeZoneNameStyleGeneric(4),
  NSTimeZoneNameStyleShortGeneric(5);

  final int value;
  const NSTimeZoneNameStyle(this.value);

  static NSTimeZoneNameStyle fromValue(int value) => switch (value) {
        0 => NSTimeZoneNameStyleStandard,
        1 => NSTimeZoneNameStyleShortStandard,
        2 => NSTimeZoneNameStyleDaylightSaving,
        3 => NSTimeZoneNameStyleShortDaylightSaving,
        4 => NSTimeZoneNameStyleGeneric,
        5 => NSTimeZoneNameStyleShortGeneric,
        _ =>
          throw ArgumentError("Unknown value for NSTimeZoneNameStyle: $value"),
      };
}

late final _sel_localizedName_locale_ =
    objc.registerName("localizedName:locale:");
final _objc_msgSend_128 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_timeZoneWithName_ = objc.registerName("timeZoneWithName:");
late final _sel_timeZoneWithName_data_ =
    objc.registerName("timeZoneWithName:data:");
final _objc_msgSend_129 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithName_ = objc.registerName("initWithName:");
late final _sel_initWithName_data_ = objc.registerName("initWithName:data:");
late final _sel_timeZoneForSecondsFromGMT_ =
    objc.registerName("timeZoneForSecondsFromGMT:");
final _objc_msgSend_130 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_timeZoneWithAbbreviation_ =
    objc.registerName("timeZoneWithAbbreviation:");
late final _sel_timeZone = objc.registerName("timeZone");
late final _sel_setTimeZone_ = objc.registerName("setTimeZone:");

/// NSCalendar
class NSCalendar extends objc.NSObject {
  NSCalendar._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSCalendar] that points to the same underlying object as [other].
  NSCalendar.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSCalendar] that wraps the given raw object pointer.
  NSCalendar.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSCalendar].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSCalendar);
  }

  /// currentCalendar
  static NSCalendar getCurrentCalendar() {
    final _ret = _objc_msgSend_131(_class_NSCalendar, _sel_currentCalendar);
    return NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// autoupdatingCurrentCalendar
  static NSCalendar getAutoupdatingCurrentCalendar() {
    final _ret =
        _objc_msgSend_131(_class_NSCalendar, _sel_autoupdatingCurrentCalendar);
    return NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// calendarWithIdentifier:
  static NSCalendar? calendarWithIdentifier_(
      objc.NSString calendarIdentifierConstant) {
    final _ret = _objc_msgSend_132(_class_NSCalendar,
        _sel_calendarWithIdentifier_, calendarIdentifierConstant.pointer);
    return _ret.address == 0
        ? null
        : NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSCalendar init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCalendarIdentifier:
  objc.ObjCObjectBase? initWithCalendarIdentifier_(objc.NSString ident) {
    final _ret = _objc_msgSend_35(
        this.pointer, _sel_initWithCalendarIdentifier_, ident.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// calendarIdentifier
  objc.NSString get calendarIdentifier {
    final _ret = _objc_msgSend_11(this.pointer, _sel_calendarIdentifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// locale
  objc.NSLocale? get locale {
    final _ret = _objc_msgSend_133(this.pointer, _sel_locale);
    return _ret.address == 0
        ? null
        : objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLocale:
  set locale(objc.NSLocale? value) {
    return _objc_msgSend_134(
        this.pointer, _sel_setLocale_, value?.pointer ?? ffi.nullptr);
  }

  /// timeZone
  NSTimeZone get timeZone {
    final _ret = _objc_msgSend_121(this.pointer, _sel_timeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTimeZone:
  set timeZone(NSTimeZone value) {
    return _objc_msgSend_122(this.pointer, _sel_setTimeZone_, value.pointer);
  }

  /// firstWeekday
  int get firstWeekday {
    return _objc_msgSend_57(this.pointer, _sel_firstWeekday);
  }

  /// setFirstWeekday:
  set firstWeekday(int value) {
    return _objc_msgSend_135(this.pointer, _sel_setFirstWeekday_, value);
  }

  /// minimumDaysInFirstWeek
  int get minimumDaysInFirstWeek {
    return _objc_msgSend_57(this.pointer, _sel_minimumDaysInFirstWeek);
  }

  /// setMinimumDaysInFirstWeek:
  set minimumDaysInFirstWeek(int value) {
    return _objc_msgSend_135(
        this.pointer, _sel_setMinimumDaysInFirstWeek_, value);
  }

  /// eraSymbols
  objc.NSArray get eraSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_eraSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// longEraSymbols
  objc.NSArray get longEraSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_longEraSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// monthSymbols
  objc.NSArray get monthSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_monthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortMonthSymbols
  objc.NSArray get shortMonthSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_shortMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// veryShortMonthSymbols
  objc.NSArray get veryShortMonthSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_veryShortMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// standaloneMonthSymbols
  objc.NSArray get standaloneMonthSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_standaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortStandaloneMonthSymbols
  objc.NSArray get shortStandaloneMonthSymbols {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_shortStandaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// veryShortStandaloneMonthSymbols
  objc.NSArray get veryShortStandaloneMonthSymbols {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_veryShortStandaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// weekdaySymbols
  objc.NSArray get weekdaySymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_weekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortWeekdaySymbols
  objc.NSArray get shortWeekdaySymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_shortWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// veryShortWeekdaySymbols
  objc.NSArray get veryShortWeekdaySymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_veryShortWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// standaloneWeekdaySymbols
  objc.NSArray get standaloneWeekdaySymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_standaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortStandaloneWeekdaySymbols
  objc.NSArray get shortStandaloneWeekdaySymbols {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_shortStandaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// veryShortStandaloneWeekdaySymbols
  objc.NSArray get veryShortStandaloneWeekdaySymbols {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_veryShortStandaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// quarterSymbols
  objc.NSArray get quarterSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_quarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortQuarterSymbols
  objc.NSArray get shortQuarterSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_shortQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// standaloneQuarterSymbols
  objc.NSArray get standaloneQuarterSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_standaloneQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortStandaloneQuarterSymbols
  objc.NSArray get shortStandaloneQuarterSymbols {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_shortStandaloneQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// AMSymbol
  objc.NSString get AMSymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_AMSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// PMSymbol
  objc.NSString get PMSymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_PMSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// minimumRangeOfUnit:
  void minimumRangeOfUnit_(ffi.Pointer<_NSRange> stret, NSCalendarUnit unit) {
    objc.useMsgSendVariants
        ? _objc_msgSend_136Stret(
            stret, this.pointer, _sel_minimumRangeOfUnit_, unit.value)
        : stret.ref = _objc_msgSend_136(
            this.pointer, _sel_minimumRangeOfUnit_, unit.value);
  }

  /// maximumRangeOfUnit:
  void maximumRangeOfUnit_(ffi.Pointer<_NSRange> stret, NSCalendarUnit unit) {
    objc.useMsgSendVariants
        ? _objc_msgSend_136Stret(
            stret, this.pointer, _sel_maximumRangeOfUnit_, unit.value)
        : stret.ref = _objc_msgSend_136(
            this.pointer, _sel_maximumRangeOfUnit_, unit.value);
  }

  /// rangeOfUnit:inUnit:forDate:
  void rangeOfUnit_inUnit_forDate_(ffi.Pointer<_NSRange> stret,
      NSCalendarUnit smaller, NSCalendarUnit larger, objc.NSDate date) {
    objc.useMsgSendVariants
        ? _objc_msgSend_137Stret(
            stret,
            this.pointer,
            _sel_rangeOfUnit_inUnit_forDate_,
            smaller.value,
            larger.value,
            date.pointer)
        : stret.ref = _objc_msgSend_137(
            this.pointer,
            _sel_rangeOfUnit_inUnit_forDate_,
            smaller.value,
            larger.value,
            date.pointer);
  }

  /// ordinalityOfUnit:inUnit:forDate:
  int ordinalityOfUnit_inUnit_forDate_(
      NSCalendarUnit smaller, NSCalendarUnit larger, objc.NSDate date) {
    return _objc_msgSend_138(
        this.pointer,
        _sel_ordinalityOfUnit_inUnit_forDate_,
        smaller.value,
        larger.value,
        date.pointer);
  }

  /// rangeOfUnit:startDate:interval:forDate:
  bool rangeOfUnit_startDate_interval_forDate_(
      NSCalendarUnit unit,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
      ffi.Pointer<ffi.Double> tip,
      objc.NSDate date) {
    return _objc_msgSend_139(
        this.pointer,
        _sel_rangeOfUnit_startDate_interval_forDate_,
        unit.value,
        datep,
        tip,
        date.pointer);
  }

  /// dateFromComponents:
  objc.NSDate? dateFromComponents_(NSDateComponents comps) {
    final _ret = _objc_msgSend_149(
        this.pointer, _sel_dateFromComponents_, comps.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// components:fromDate:
  NSDateComponents components_fromDate_(
      NSCalendarUnit unitFlags, objc.NSDate date) {
    final _ret = _objc_msgSend_150(
        this.pointer, _sel_components_fromDate_, unitFlags.value, date.pointer);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateByAddingComponents:toDate:options:
  objc.NSDate? dateByAddingComponents_toDate_options_(
      NSDateComponents comps, objc.NSDate date, NSCalendarOptions opts) {
    final _ret = _objc_msgSend_151(
        this.pointer,
        _sel_dateByAddingComponents_toDate_options_,
        comps.pointer,
        date.pointer,
        opts.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// components:fromDate:toDate:options:
  NSDateComponents components_fromDate_toDate_options_(
      NSCalendarUnit unitFlags,
      objc.NSDate startingDate,
      objc.NSDate resultDate,
      NSCalendarOptions opts) {
    final _ret = _objc_msgSend_152(
        this.pointer,
        _sel_components_fromDate_toDate_options_,
        unitFlags.value,
        startingDate.pointer,
        resultDate.pointer,
        opts.value);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// getEra:year:month:day:fromDate:
  void getEra_year_month_day_fromDate_(
      ffi.Pointer<ffi.Long> eraValuePointer,
      ffi.Pointer<ffi.Long> yearValuePointer,
      ffi.Pointer<ffi.Long> monthValuePointer,
      ffi.Pointer<ffi.Long> dayValuePointer,
      objc.NSDate date) {
    _objc_msgSend_153(
        this.pointer,
        _sel_getEra_year_month_day_fromDate_,
        eraValuePointer,
        yearValuePointer,
        monthValuePointer,
        dayValuePointer,
        date.pointer);
  }

  /// getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:
  void getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_(
      ffi.Pointer<ffi.Long> eraValuePointer,
      ffi.Pointer<ffi.Long> yearValuePointer,
      ffi.Pointer<ffi.Long> weekValuePointer,
      ffi.Pointer<ffi.Long> weekdayValuePointer,
      objc.NSDate date) {
    _objc_msgSend_153(
        this.pointer,
        _sel_getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_,
        eraValuePointer,
        yearValuePointer,
        weekValuePointer,
        weekdayValuePointer,
        date.pointer);
  }

  /// getHour:minute:second:nanosecond:fromDate:
  void getHour_minute_second_nanosecond_fromDate_(
      ffi.Pointer<ffi.Long> hourValuePointer,
      ffi.Pointer<ffi.Long> minuteValuePointer,
      ffi.Pointer<ffi.Long> secondValuePointer,
      ffi.Pointer<ffi.Long> nanosecondValuePointer,
      objc.NSDate date) {
    _objc_msgSend_153(
        this.pointer,
        _sel_getHour_minute_second_nanosecond_fromDate_,
        hourValuePointer,
        minuteValuePointer,
        secondValuePointer,
        nanosecondValuePointer,
        date.pointer);
  }

  /// component:fromDate:
  int component_fromDate_(NSCalendarUnit unit, objc.NSDate date) {
    return _objc_msgSend_154(
        this.pointer, _sel_component_fromDate_, unit.value, date.pointer);
  }

  /// dateWithEra:year:month:day:hour:minute:second:nanosecond:
  objc.NSDate? dateWithEra_year_month_day_hour_minute_second_nanosecond_(
      int eraValue,
      int yearValue,
      int monthValue,
      int dayValue,
      int hourValue,
      int minuteValue,
      int secondValue,
      int nanosecondValue) {
    final _ret = _objc_msgSend_155(
        this.pointer,
        _sel_dateWithEra_year_month_day_hour_minute_second_nanosecond_,
        eraValue,
        yearValue,
        monthValue,
        dayValue,
        hourValue,
        minuteValue,
        secondValue,
        nanosecondValue);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:
  objc.NSDate?
      dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_(
          int eraValue,
          int yearValue,
          int weekValue,
          int weekdayValue,
          int hourValue,
          int minuteValue,
          int secondValue,
          int nanosecondValue) {
    final _ret = _objc_msgSend_155(
        this.pointer,
        _sel_dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_,
        eraValue,
        yearValue,
        weekValue,
        weekdayValue,
        hourValue,
        minuteValue,
        secondValue,
        nanosecondValue);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// startOfDayForDate:
  objc.NSDate startOfDayForDate_(objc.NSDate date) {
    final _ret =
        _objc_msgSend_156(this.pointer, _sel_startOfDayForDate_, date.pointer);
    return objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// componentsInTimeZone:fromDate:
  NSDateComponents componentsInTimeZone_fromDate_(
      NSTimeZone timezone, objc.NSDate date) {
    final _ret = _objc_msgSend_157(this.pointer,
        _sel_componentsInTimeZone_fromDate_, timezone.pointer, date.pointer);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// compareDate:toDate:toUnitGranularity:
  objc.NSComparisonResult compareDate_toDate_toUnitGranularity_(
      objc.NSDate date1, objc.NSDate date2, NSCalendarUnit unit) {
    final _ret = _objc_msgSend_158(
        this.pointer,
        _sel_compareDate_toDate_toUnitGranularity_,
        date1.pointer,
        date2.pointer,
        unit.value);
    return objc.NSComparisonResult.fromValue(_ret);
  }

  /// isDate:equalToDate:toUnitGranularity:
  bool isDate_equalToDate_toUnitGranularity_(
      objc.NSDate date1, objc.NSDate date2, NSCalendarUnit unit) {
    return _objc_msgSend_159(
        this.pointer,
        _sel_isDate_equalToDate_toUnitGranularity_,
        date1.pointer,
        date2.pointer,
        unit.value);
  }

  /// isDate:inSameDayAsDate:
  bool isDate_inSameDayAsDate_(objc.NSDate date1, objc.NSDate date2) {
    return _objc_msgSend_160(this.pointer, _sel_isDate_inSameDayAsDate_,
        date1.pointer, date2.pointer);
  }

  /// isDateInToday:
  bool isDateInToday_(objc.NSDate date) {
    return _objc_msgSend_118(this.pointer, _sel_isDateInToday_, date.pointer);
  }

  /// isDateInYesterday:
  bool isDateInYesterday_(objc.NSDate date) {
    return _objc_msgSend_118(
        this.pointer, _sel_isDateInYesterday_, date.pointer);
  }

  /// isDateInTomorrow:
  bool isDateInTomorrow_(objc.NSDate date) {
    return _objc_msgSend_118(
        this.pointer, _sel_isDateInTomorrow_, date.pointer);
  }

  /// isDateInWeekend:
  bool isDateInWeekend_(objc.NSDate date) {
    return _objc_msgSend_118(this.pointer, _sel_isDateInWeekend_, date.pointer);
  }

  /// rangeOfWeekendStartDate:interval:containingDate:
  bool rangeOfWeekendStartDate_interval_containingDate_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
      ffi.Pointer<ffi.Double> tip,
      objc.NSDate date) {
    return _objc_msgSend_161(
        this.pointer,
        _sel_rangeOfWeekendStartDate_interval_containingDate_,
        datep,
        tip,
        date.pointer);
  }

  /// nextWeekendStartDate:interval:options:afterDate:
  bool nextWeekendStartDate_interval_options_afterDate_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
      ffi.Pointer<ffi.Double> tip,
      NSCalendarOptions options,
      objc.NSDate date) {
    return _objc_msgSend_162(
        this.pointer,
        _sel_nextWeekendStartDate_interval_options_afterDate_,
        datep,
        tip,
        options.value,
        date.pointer);
  }

  /// components:fromDateComponents:toDateComponents:options:
  NSDateComponents components_fromDateComponents_toDateComponents_options_(
      NSCalendarUnit unitFlags,
      NSDateComponents startingDateComp,
      NSDateComponents resultDateComp,
      NSCalendarOptions options) {
    final _ret = _objc_msgSend_163(
        this.pointer,
        _sel_components_fromDateComponents_toDateComponents_options_,
        unitFlags.value,
        startingDateComp.pointer,
        resultDateComp.pointer,
        options.value);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateByAddingUnit:value:toDate:options:
  objc.NSDate? dateByAddingUnit_value_toDate_options_(NSCalendarUnit unit,
      int value, objc.NSDate date, NSCalendarOptions options) {
    final _ret = _objc_msgSend_164(
        this.pointer,
        _sel_dateByAddingUnit_value_toDate_options_,
        unit.value,
        value,
        date.pointer,
        options.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:
  void enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_(
      objc.NSDate start,
      NSDateComponents comps,
      NSCalendarOptions opts,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool,
                  ffi.Pointer<ffi.Bool>)>
          block) {
    _objc_msgSend_165(
        this.pointer,
        _sel_enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_,
        start.pointer,
        comps.pointer,
        opts.value,
        block.pointer);
  }

  /// nextDateAfterDate:matchingComponents:options:
  objc.NSDate? nextDateAfterDate_matchingComponents_options_(
      objc.NSDate date, NSDateComponents comps, NSCalendarOptions options) {
    final _ret = _objc_msgSend_166(
        this.pointer,
        _sel_nextDateAfterDate_matchingComponents_options_,
        date.pointer,
        comps.pointer,
        options.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// nextDateAfterDate:matchingUnit:value:options:
  objc.NSDate? nextDateAfterDate_matchingUnit_value_options_(objc.NSDate date,
      NSCalendarUnit unit, int value, NSCalendarOptions options) {
    final _ret = _objc_msgSend_167(
        this.pointer,
        _sel_nextDateAfterDate_matchingUnit_value_options_,
        date.pointer,
        unit.value,
        value,
        options.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// nextDateAfterDate:matchingHour:minute:second:options:
  objc.NSDate? nextDateAfterDate_matchingHour_minute_second_options_(
      objc.NSDate date,
      int hourValue,
      int minuteValue,
      int secondValue,
      NSCalendarOptions options) {
    final _ret = _objc_msgSend_168(
        this.pointer,
        _sel_nextDateAfterDate_matchingHour_minute_second_options_,
        date.pointer,
        hourValue,
        minuteValue,
        secondValue,
        options.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateBySettingUnit:value:ofDate:options:
  objc.NSDate? dateBySettingUnit_value_ofDate_options_(
      NSCalendarUnit unit, int v, objc.NSDate date, NSCalendarOptions opts) {
    final _ret = _objc_msgSend_164(
        this.pointer,
        _sel_dateBySettingUnit_value_ofDate_options_,
        unit.value,
        v,
        date.pointer,
        opts.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateBySettingHour:minute:second:ofDate:options:
  objc.NSDate? dateBySettingHour_minute_second_ofDate_options_(
      int h, int m, int s, objc.NSDate date, NSCalendarOptions opts) {
    final _ret = _objc_msgSend_169(
        this.pointer,
        _sel_dateBySettingHour_minute_second_ofDate_options_,
        h,
        m,
        s,
        date.pointer,
        opts.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// date:matchesComponents:
  bool date_matchesComponents_(objc.NSDate date, NSDateComponents components) {
    return _objc_msgSend_170(this.pointer, _sel_date_matchesComponents_,
        date.pointer, components.pointer);
  }

  /// new
  static NSCalendar new1() {
    final _ret = _objc_msgSend_19(_class_NSCalendar, _sel_new);
    return NSCalendar.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSCalendar allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSCalendar, _sel_allocWithZone_, zone);
    return NSCalendar.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSCalendar alloc() {
    final _ret = _objc_msgSend_19(_class_NSCalendar, _sel_alloc);
    return NSCalendar.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSCalendar,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSCalendar,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSCalendar, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSCalendar, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSCalendar,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSCalendar,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSCalendar,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSCalendar, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSCalendar, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSCalendar = objc.getClass("NSCalendar");
late final _sel_currentCalendar = objc.registerName("currentCalendar");
final _objc_msgSend_131 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_autoupdatingCurrentCalendar =
    objc.registerName("autoupdatingCurrentCalendar");
late final _sel_calendarWithIdentifier_ =
    objc.registerName("calendarWithIdentifier:");
final _objc_msgSend_132 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCalendarIdentifier_ =
    objc.registerName("initWithCalendarIdentifier:");
late final _sel_calendarIdentifier = objc.registerName("calendarIdentifier");
final _objc_msgSend_133 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_134 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_firstWeekday = objc.registerName("firstWeekday");
late final _sel_setFirstWeekday_ = objc.registerName("setFirstWeekday:");
final _objc_msgSend_135 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_minimumDaysInFirstWeek =
    objc.registerName("minimumDaysInFirstWeek");
late final _sel_setMinimumDaysInFirstWeek_ =
    objc.registerName("setMinimumDaysInFirstWeek:");
late final _sel_eraSymbols = objc.registerName("eraSymbols");
late final _sel_longEraSymbols = objc.registerName("longEraSymbols");
late final _sel_monthSymbols = objc.registerName("monthSymbols");
late final _sel_shortMonthSymbols = objc.registerName("shortMonthSymbols");
late final _sel_veryShortMonthSymbols =
    objc.registerName("veryShortMonthSymbols");
late final _sel_standaloneMonthSymbols =
    objc.registerName("standaloneMonthSymbols");
late final _sel_shortStandaloneMonthSymbols =
    objc.registerName("shortStandaloneMonthSymbols");
late final _sel_veryShortStandaloneMonthSymbols =
    objc.registerName("veryShortStandaloneMonthSymbols");
late final _sel_weekdaySymbols = objc.registerName("weekdaySymbols");
late final _sel_shortWeekdaySymbols = objc.registerName("shortWeekdaySymbols");
late final _sel_veryShortWeekdaySymbols =
    objc.registerName("veryShortWeekdaySymbols");
late final _sel_standaloneWeekdaySymbols =
    objc.registerName("standaloneWeekdaySymbols");
late final _sel_shortStandaloneWeekdaySymbols =
    objc.registerName("shortStandaloneWeekdaySymbols");
late final _sel_veryShortStandaloneWeekdaySymbols =
    objc.registerName("veryShortStandaloneWeekdaySymbols");
late final _sel_quarterSymbols = objc.registerName("quarterSymbols");
late final _sel_shortQuarterSymbols = objc.registerName("shortQuarterSymbols");
late final _sel_standaloneQuarterSymbols =
    objc.registerName("standaloneQuarterSymbols");
late final _sel_shortStandaloneQuarterSymbols =
    objc.registerName("shortStandaloneQuarterSymbols");
late final _sel_AMSymbol = objc.registerName("AMSymbol");
late final _sel_PMSymbol = objc.registerName("PMSymbol");

enum NSCalendarUnit {
  NSCalendarUnitEra(2),
  NSCalendarUnitYear(4),
  NSCalendarUnitMonth(8),
  NSCalendarUnitDay(16),
  NSCalendarUnitHour(32),
  NSCalendarUnitMinute(64),
  NSCalendarUnitSecond(128),
  NSCalendarUnitWeekday(512),
  NSCalendarUnitWeekdayOrdinal(1024),
  NSCalendarUnitQuarter(2048),
  NSCalendarUnitWeekOfMonth(4096),
  NSCalendarUnitWeekOfYear(8192),
  NSCalendarUnitYearForWeekOfYear(16384),
  NSCalendarUnitNanosecond(32768),
  NSCalendarUnitCalendar(1048576),
  NSCalendarUnitTimeZone(2097152),
  NSWeekCalendarUnit(256);

  static const NSEraCalendarUnit = NSCalendarUnitEra;
  static const NSYearCalendarUnit = NSCalendarUnitYear;
  static const NSMonthCalendarUnit = NSCalendarUnitMonth;
  static const NSDayCalendarUnit = NSCalendarUnitDay;
  static const NSHourCalendarUnit = NSCalendarUnitHour;
  static const NSMinuteCalendarUnit = NSCalendarUnitMinute;
  static const NSSecondCalendarUnit = NSCalendarUnitSecond;
  static const NSWeekdayCalendarUnit = NSCalendarUnitWeekday;
  static const NSWeekdayOrdinalCalendarUnit = NSCalendarUnitWeekdayOrdinal;
  static const NSQuarterCalendarUnit = NSCalendarUnitQuarter;
  static const NSWeekOfMonthCalendarUnit = NSCalendarUnitWeekOfMonth;
  static const NSWeekOfYearCalendarUnit = NSCalendarUnitWeekOfYear;
  static const NSYearForWeekOfYearCalendarUnit =
      NSCalendarUnitYearForWeekOfYear;
  static const NSCalendarCalendarUnit = NSCalendarUnitCalendar;
  static const NSTimeZoneCalendarUnit = NSCalendarUnitTimeZone;

  final int value;
  const NSCalendarUnit(this.value);

  static NSCalendarUnit fromValue(int value) => switch (value) {
        2 => NSCalendarUnitEra,
        4 => NSCalendarUnitYear,
        8 => NSCalendarUnitMonth,
        16 => NSCalendarUnitDay,
        32 => NSCalendarUnitHour,
        64 => NSCalendarUnitMinute,
        128 => NSCalendarUnitSecond,
        512 => NSCalendarUnitWeekday,
        1024 => NSCalendarUnitWeekdayOrdinal,
        2048 => NSCalendarUnitQuarter,
        4096 => NSCalendarUnitWeekOfMonth,
        8192 => NSCalendarUnitWeekOfYear,
        16384 => NSCalendarUnitYearForWeekOfYear,
        32768 => NSCalendarUnitNanosecond,
        1048576 => NSCalendarUnitCalendar,
        2097152 => NSCalendarUnitTimeZone,
        256 => NSWeekCalendarUnit,
        _ => throw ArgumentError("Unknown value for NSCalendarUnit: $value"),
      };

  @override
  String toString() {
    if (this == NSCalendarUnitEra)
      return "NSCalendarUnit.NSCalendarUnitEra, NSCalendarUnit.NSEraCalendarUnit";
    if (this == NSCalendarUnitYear)
      return "NSCalendarUnit.NSCalendarUnitYear, NSCalendarUnit.NSYearCalendarUnit";
    if (this == NSCalendarUnitMonth)
      return "NSCalendarUnit.NSCalendarUnitMonth, NSCalendarUnit.NSMonthCalendarUnit";
    if (this == NSCalendarUnitDay)
      return "NSCalendarUnit.NSCalendarUnitDay, NSCalendarUnit.NSDayCalendarUnit";
    if (this == NSCalendarUnitHour)
      return "NSCalendarUnit.NSCalendarUnitHour, NSCalendarUnit.NSHourCalendarUnit";
    if (this == NSCalendarUnitMinute)
      return "NSCalendarUnit.NSCalendarUnitMinute, NSCalendarUnit.NSMinuteCalendarUnit";
    if (this == NSCalendarUnitSecond)
      return "NSCalendarUnit.NSCalendarUnitSecond, NSCalendarUnit.NSSecondCalendarUnit";
    if (this == NSCalendarUnitWeekday)
      return "NSCalendarUnit.NSCalendarUnitWeekday, NSCalendarUnit.NSWeekdayCalendarUnit";
    if (this == NSCalendarUnitWeekdayOrdinal)
      return "NSCalendarUnit.NSCalendarUnitWeekdayOrdinal, NSCalendarUnit.NSWeekdayOrdinalCalendarUnit";
    if (this == NSCalendarUnitQuarter)
      return "NSCalendarUnit.NSCalendarUnitQuarter, NSCalendarUnit.NSQuarterCalendarUnit";
    if (this == NSCalendarUnitWeekOfMonth)
      return "NSCalendarUnit.NSCalendarUnitWeekOfMonth, NSCalendarUnit.NSWeekOfMonthCalendarUnit";
    if (this == NSCalendarUnitWeekOfYear)
      return "NSCalendarUnit.NSCalendarUnitWeekOfYear, NSCalendarUnit.NSWeekOfYearCalendarUnit";
    if (this == NSCalendarUnitYearForWeekOfYear)
      return "NSCalendarUnit.NSCalendarUnitYearForWeekOfYear, NSCalendarUnit.NSYearForWeekOfYearCalendarUnit";
    if (this == NSCalendarUnitCalendar)
      return "NSCalendarUnit.NSCalendarUnitCalendar, NSCalendarUnit.NSCalendarCalendarUnit";
    if (this == NSCalendarUnitTimeZone)
      return "NSCalendarUnit.NSCalendarUnitTimeZone, NSCalendarUnit.NSTimeZoneCalendarUnit";
    return super.toString();
  }
}

late final _sel_minimumRangeOfUnit_ = objc.registerName("minimumRangeOfUnit:");
final _objc_msgSend_136 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_136Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_maximumRangeOfUnit_ = objc.registerName("maximumRangeOfUnit:");
late final _sel_rangeOfUnit_inUnit_forDate_ =
    objc.registerName("rangeOfUnit:inUnit:forDate:");
final _objc_msgSend_137 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_137Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_ordinalityOfUnit_inUnit_forDate_ =
    objc.registerName("ordinalityOfUnit:inUnit:forDate:");
final _objc_msgSend_138 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_rangeOfUnit_startDate_interval_forDate_ =
    objc.registerName("rangeOfUnit:startDate:interval:forDate:");
final _objc_msgSend_139 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Double>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSDateComponents
class NSDateComponents extends objc.NSObject {
  NSDateComponents._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDateComponents] that points to the same underlying object as [other].
  NSDateComponents.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDateComponents] that wraps the given raw object pointer.
  NSDateComponents.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDateComponents].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSDateComponents);
  }

  /// calendar
  NSCalendar? get calendar {
    final _ret = _objc_msgSend_140(this.pointer, _sel_calendar);
    return _ret.address == 0
        ? null
        : NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCalendar:
  set calendar(NSCalendar? value) {
    return _objc_msgSend_141(
        this.pointer, _sel_setCalendar_, value?.pointer ?? ffi.nullptr);
  }

  /// timeZone
  NSTimeZone? get timeZone {
    final _ret = _objc_msgSend_142(this.pointer, _sel_timeZone);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTimeZone:
  set timeZone(NSTimeZone? value) {
    return _objc_msgSend_143(
        this.pointer, _sel_setTimeZone_, value?.pointer ?? ffi.nullptr);
  }

  /// era
  int get era {
    return _objc_msgSend_125(this.pointer, _sel_era);
  }

  /// setEra:
  set era(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setEra_, value);
  }

  /// year
  int get year {
    return _objc_msgSend_125(this.pointer, _sel_year);
  }

  /// setYear:
  set year(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setYear_, value);
  }

  /// month
  int get month {
    return _objc_msgSend_125(this.pointer, _sel_month);
  }

  /// setMonth:
  set month(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setMonth_, value);
  }

  /// day
  int get day {
    return _objc_msgSend_125(this.pointer, _sel_day);
  }

  /// setDay:
  set day(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setDay_, value);
  }

  /// hour
  int get hour {
    return _objc_msgSend_125(this.pointer, _sel_hour);
  }

  /// setHour:
  set hour(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setHour_, value);
  }

  /// minute
  int get minute {
    return _objc_msgSend_125(this.pointer, _sel_minute);
  }

  /// setMinute:
  set minute(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setMinute_, value);
  }

  /// second
  int get second {
    return _objc_msgSend_125(this.pointer, _sel_second);
  }

  /// setSecond:
  set second(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setSecond_, value);
  }

  /// nanosecond
  int get nanosecond {
    return _objc_msgSend_125(this.pointer, _sel_nanosecond);
  }

  /// setNanosecond:
  set nanosecond(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setNanosecond_, value);
  }

  /// weekday
  int get weekday {
    return _objc_msgSend_125(this.pointer, _sel_weekday);
  }

  /// setWeekday:
  set weekday(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setWeekday_, value);
  }

  /// weekdayOrdinal
  int get weekdayOrdinal {
    return _objc_msgSend_125(this.pointer, _sel_weekdayOrdinal);
  }

  /// setWeekdayOrdinal:
  set weekdayOrdinal(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setWeekdayOrdinal_, value);
  }

  /// quarter
  int get quarter {
    return _objc_msgSend_125(this.pointer, _sel_quarter);
  }

  /// setQuarter:
  set quarter(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setQuarter_, value);
  }

  /// weekOfMonth
  int get weekOfMonth {
    return _objc_msgSend_125(this.pointer, _sel_weekOfMonth);
  }

  /// setWeekOfMonth:
  set weekOfMonth(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setWeekOfMonth_, value);
  }

  /// weekOfYear
  int get weekOfYear {
    return _objc_msgSend_125(this.pointer, _sel_weekOfYear);
  }

  /// setWeekOfYear:
  set weekOfYear(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setWeekOfYear_, value);
  }

  /// yearForWeekOfYear
  int get yearForWeekOfYear {
    return _objc_msgSend_125(this.pointer, _sel_yearForWeekOfYear);
  }

  /// setYearForWeekOfYear:
  set yearForWeekOfYear(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setYearForWeekOfYear_, value);
  }

  /// isLeapMonth
  bool get leapMonth {
    return _objc_msgSend_13(this.pointer, _sel_isLeapMonth);
  }

  /// setLeapMonth:
  set leapMonth(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setLeapMonth_, value);
  }

  /// date
  objc.NSDate? get date {
    final _ret = _objc_msgSend_126(this.pointer, _sel_date);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// week
  int week() {
    return _objc_msgSend_125(this.pointer, _sel_week);
  }

  /// setWeek:
  void setWeek_(int v) {
    _objc_msgSend_145(this.pointer, _sel_setWeek_, v);
  }

  /// setValue:forComponent:
  void setValue_forComponent_(int value, NSCalendarUnit unit) {
    _objc_msgSend_146(
        this.pointer, _sel_setValue_forComponent_, value, unit.value);
  }

  /// valueForComponent:
  int valueForComponent_(NSCalendarUnit unit) {
    return _objc_msgSend_147(this.pointer, _sel_valueForComponent_, unit.value);
  }

  /// isValidDate
  bool get validDate {
    return _objc_msgSend_13(this.pointer, _sel_isValidDate);
  }

  /// isValidDateInCalendar:
  bool isValidDateInCalendar_(NSCalendar calendar) {
    return _objc_msgSend_148(
        this.pointer, _sel_isValidDateInCalendar_, calendar.pointer);
  }

  /// init
  NSDateComponents init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSDateComponents new1() {
    final _ret = _objc_msgSend_19(_class_NSDateComponents, _sel_new);
    return NSDateComponents.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSDateComponents allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSDateComponents, _sel_allocWithZone_, zone);
    return NSDateComponents.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSDateComponents alloc() {
    final _ret = _objc_msgSend_19(_class_NSDateComponents, _sel_alloc);
    return NSDateComponents.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSDateComponents,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSDateComponents,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSDateComponents, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSDateComponents, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSDateComponents,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSDateComponents,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSDateComponents,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSDateComponents, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSDateComponents, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSDateComponents = objc.getClass("NSDateComponents");
late final _sel_calendar = objc.registerName("calendar");
final _objc_msgSend_140 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCalendar_ = objc.registerName("setCalendar:");
final _objc_msgSend_141 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_142 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_143 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_era = objc.registerName("era");
late final _sel_setEra_ = objc.registerName("setEra:");
final _objc_msgSend_144 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_year = objc.registerName("year");
late final _sel_setYear_ = objc.registerName("setYear:");
late final _sel_month = objc.registerName("month");
late final _sel_setMonth_ = objc.registerName("setMonth:");
late final _sel_day = objc.registerName("day");
late final _sel_setDay_ = objc.registerName("setDay:");
late final _sel_hour = objc.registerName("hour");
late final _sel_setHour_ = objc.registerName("setHour:");
late final _sel_minute = objc.registerName("minute");
late final _sel_setMinute_ = objc.registerName("setMinute:");
late final _sel_second = objc.registerName("second");
late final _sel_setSecond_ = objc.registerName("setSecond:");
late final _sel_nanosecond = objc.registerName("nanosecond");
late final _sel_setNanosecond_ = objc.registerName("setNanosecond:");
late final _sel_weekday = objc.registerName("weekday");
late final _sel_setWeekday_ = objc.registerName("setWeekday:");
late final _sel_weekdayOrdinal = objc.registerName("weekdayOrdinal");
late final _sel_setWeekdayOrdinal_ = objc.registerName("setWeekdayOrdinal:");
late final _sel_quarter = objc.registerName("quarter");
late final _sel_setQuarter_ = objc.registerName("setQuarter:");
late final _sel_weekOfMonth = objc.registerName("weekOfMonth");
late final _sel_setWeekOfMonth_ = objc.registerName("setWeekOfMonth:");
late final _sel_weekOfYear = objc.registerName("weekOfYear");
late final _sel_setWeekOfYear_ = objc.registerName("setWeekOfYear:");
late final _sel_yearForWeekOfYear = objc.registerName("yearForWeekOfYear");
late final _sel_setYearForWeekOfYear_ =
    objc.registerName("setYearForWeekOfYear:");
late final _sel_isLeapMonth = objc.registerName("isLeapMonth");
late final _sel_setLeapMonth_ = objc.registerName("setLeapMonth:");
late final _sel_date = objc.registerName("date");
late final _sel_week = objc.registerName("week");
late final _sel_setWeek_ = objc.registerName("setWeek:");
final _objc_msgSend_145 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setValue_forComponent_ =
    objc.registerName("setValue:forComponent:");
final _objc_msgSend_146 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_valueForComponent_ = objc.registerName("valueForComponent:");
final _objc_msgSend_147 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isValidDate = objc.registerName("isValidDate");
late final _sel_isValidDateInCalendar_ =
    objc.registerName("isValidDateInCalendar:");
final _objc_msgSend_148 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateFromComponents_ = objc.registerName("dateFromComponents:");
final _objc_msgSend_149 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_components_fromDate_ =
    objc.registerName("components:fromDate:");
final _objc_msgSend_150 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

enum NSCalendarOptions {
  NSCalendarWrapComponents(1),
  NSCalendarMatchStrictly(2),
  NSCalendarSearchBackwards(4),
  NSCalendarMatchPreviousTimePreservingSmallerUnits(256),
  NSCalendarMatchNextTimePreservingSmallerUnits(512),
  NSCalendarMatchNextTime(1024),
  NSCalendarMatchFirst(4096),
  NSCalendarMatchLast(8192);

  final int value;
  const NSCalendarOptions(this.value);

  static NSCalendarOptions fromValue(int value) => switch (value) {
        1 => NSCalendarWrapComponents,
        2 => NSCalendarMatchStrictly,
        4 => NSCalendarSearchBackwards,
        256 => NSCalendarMatchPreviousTimePreservingSmallerUnits,
        512 => NSCalendarMatchNextTimePreservingSmallerUnits,
        1024 => NSCalendarMatchNextTime,
        4096 => NSCalendarMatchFirst,
        8192 => NSCalendarMatchLast,
        _ => throw ArgumentError("Unknown value for NSCalendarOptions: $value"),
      };
}

late final _sel_dateByAddingComponents_toDate_options_ =
    objc.registerName("dateByAddingComponents:toDate:options:");
final _objc_msgSend_151 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_components_fromDate_toDate_options_ =
    objc.registerName("components:fromDate:toDate:options:");
final _objc_msgSend_152 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_getEra_year_month_day_fromDate_ =
    objc.registerName("getEra:year:month:day:fromDate:");
final _objc_msgSend_153 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_ =
    objc.registerName("getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:");
late final _sel_getHour_minute_second_nanosecond_fromDate_ =
    objc.registerName("getHour:minute:second:nanosecond:fromDate:");
late final _sel_component_fromDate_ = objc.registerName("component:fromDate:");
final _objc_msgSend_154 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateWithEra_year_month_day_hour_minute_second_nanosecond_ = objc
    .registerName("dateWithEra:year:month:day:hour:minute:second:nanosecond:");
final _objc_msgSend_155 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int)>();
late final _sel_dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_ =
    objc.registerName(
        "dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:");
late final _sel_startOfDayForDate_ = objc.registerName("startOfDayForDate:");
final _objc_msgSend_156 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_componentsInTimeZone_fromDate_ =
    objc.registerName("componentsInTimeZone:fromDate:");
final _objc_msgSend_157 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_compareDate_toDate_toUnitGranularity_ =
    objc.registerName("compareDate:toDate:toUnitGranularity:");
final _objc_msgSend_158 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_isDate_equalToDate_toUnitGranularity_ =
    objc.registerName("isDate:equalToDate:toUnitGranularity:");
final _objc_msgSend_159 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_isDate_inSameDayAsDate_ =
    objc.registerName("isDate:inSameDayAsDate:");
final _objc_msgSend_160 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isDateInToday_ = objc.registerName("isDateInToday:");
late final _sel_isDateInYesterday_ = objc.registerName("isDateInYesterday:");
late final _sel_isDateInTomorrow_ = objc.registerName("isDateInTomorrow:");
late final _sel_isDateInWeekend_ = objc.registerName("isDateInWeekend:");
late final _sel_rangeOfWeekendStartDate_interval_containingDate_ =
    objc.registerName("rangeOfWeekendStartDate:interval:containingDate:");
final _objc_msgSend_161 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Double>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_nextWeekendStartDate_interval_options_afterDate_ =
    objc.registerName("nextWeekendStartDate:interval:options:afterDate:");
final _objc_msgSend_162 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Double>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Double>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_components_fromDateComponents_toDateComponents_options_ = objc
    .registerName("components:fromDateComponents:toDateComponents:options:");
final _objc_msgSend_163 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_dateByAddingUnit_value_toDate_options_ =
    objc.registerName("dateByAddingUnit:value:toDate:options:");
final _objc_msgSend_164 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
void _ObjCBlock_ffiVoid_NSDate_bool_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Bool arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, bool,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        bool, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>`.
abstract final class ObjCBlock_ffiVoid_NSDate_bool_bool {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool,
                      ffi.Pointer<ffi.Bool>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Bool arg1, ffi.Pointer<ffi.Bool> arg2)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>(
                              _ObjCBlock_ffiVoid_NSDate_bool_bool_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)> fromFunction(
          void Function(objc.NSDate?, bool, ffi.Pointer<ffi.Bool>) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>(
                          _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, bool arg1, ffi.Pointer<ffi.Bool> arg2) =>
                  fn(arg0.address == 0 ? null : objc.NSDate.castFromPointer(arg0, retain: true, release: true), arg1, arg2)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>
      listener(void Function(objc.NSDate?, bool, ffi.Pointer<ffi.Bool>) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Bool,
                        ffi.Pointer<ffi.Bool>)>.listener(
                _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, bool arg1, ffi.Pointer<ffi.Bool> arg2) =>
            fn(
                arg0.address == 0
                    ? null
                    : objc.NSDate.castFromPointer(arg0,
                        retain: false, release: true),
                arg1,
                arg2));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSDate_bool_bool(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool,
            ffi.Pointer<ffi.Bool>)>(wrapper, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>`.
extension ObjCBlock_ffiVoid_NSDate_bool_bool_CallExtension on objc.ObjCBlock<
    ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)> {
  void call(objc.NSDate? arg0, bool arg1, ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Bool arg1,
                          ffi.Pointer<ffi.Bool> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      bool,
                      ffi.Pointer<ffi.Bool>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1, arg2);
}

late final _sel_enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_ =
    objc.registerName(
        "enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:");
final _objc_msgSend_165 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_nextDateAfterDate_matchingComponents_options_ =
    objc.registerName("nextDateAfterDate:matchingComponents:options:");
final _objc_msgSend_166 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_nextDateAfterDate_matchingUnit_value_options_ =
    objc.registerName("nextDateAfterDate:matchingUnit:value:options:");
final _objc_msgSend_167 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Long,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int)>();
late final _sel_nextDateAfterDate_matchingHour_minute_second_options_ =
    objc.registerName("nextDateAfterDate:matchingHour:minute:second:options:");
final _objc_msgSend_168 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int,
            int)>();
late final _sel_dateBySettingUnit_value_ofDate_options_ =
    objc.registerName("dateBySettingUnit:value:ofDate:options:");
late final _sel_dateBySettingHour_minute_second_ofDate_options_ =
    objc.registerName("dateBySettingHour:minute:second:ofDate:options:");
final _objc_msgSend_169 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_date_matchesComponents_ =
    objc.registerName("date:matchesComponents:");
final _objc_msgSend_170 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_171 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isLenient = objc.registerName("isLenient");
late final _sel_setLenient_ = objc.registerName("setLenient:");
late final _sel_twoDigitStartDate = objc.registerName("twoDigitStartDate");
late final _sel_setTwoDigitStartDate_ =
    objc.registerName("setTwoDigitStartDate:");
final _objc_msgSend_172 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_defaultDate = objc.registerName("defaultDate");
late final _sel_setDefaultDate_ = objc.registerName("setDefaultDate:");
late final _sel_setEraSymbols_ = objc.registerName("setEraSymbols:");
final _objc_msgSend_173 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setMonthSymbols_ = objc.registerName("setMonthSymbols:");
late final _sel_setShortMonthSymbols_ =
    objc.registerName("setShortMonthSymbols:");
late final _sel_setWeekdaySymbols_ = objc.registerName("setWeekdaySymbols:");
late final _sel_setShortWeekdaySymbols_ =
    objc.registerName("setShortWeekdaySymbols:");
late final _sel_setAMSymbol_ = objc.registerName("setAMSymbol:");
late final _sel_setPMSymbol_ = objc.registerName("setPMSymbol:");
late final _sel_setLongEraSymbols_ = objc.registerName("setLongEraSymbols:");
late final _sel_setVeryShortMonthSymbols_ =
    objc.registerName("setVeryShortMonthSymbols:");
late final _sel_setStandaloneMonthSymbols_ =
    objc.registerName("setStandaloneMonthSymbols:");
late final _sel_setShortStandaloneMonthSymbols_ =
    objc.registerName("setShortStandaloneMonthSymbols:");
late final _sel_setVeryShortStandaloneMonthSymbols_ =
    objc.registerName("setVeryShortStandaloneMonthSymbols:");
late final _sel_setVeryShortWeekdaySymbols_ =
    objc.registerName("setVeryShortWeekdaySymbols:");
late final _sel_setStandaloneWeekdaySymbols_ =
    objc.registerName("setStandaloneWeekdaySymbols:");
late final _sel_setShortStandaloneWeekdaySymbols_ =
    objc.registerName("setShortStandaloneWeekdaySymbols:");
late final _sel_setVeryShortStandaloneWeekdaySymbols_ =
    objc.registerName("setVeryShortStandaloneWeekdaySymbols:");
late final _sel_setQuarterSymbols_ = objc.registerName("setQuarterSymbols:");
late final _sel_setShortQuarterSymbols_ =
    objc.registerName("setShortQuarterSymbols:");
late final _sel_setStandaloneQuarterSymbols_ =
    objc.registerName("setStandaloneQuarterSymbols:");
late final _sel_setShortStandaloneQuarterSymbols_ =
    objc.registerName("setShortStandaloneQuarterSymbols:");
late final _sel_gregorianStartDate = objc.registerName("gregorianStartDate");
late final _sel_setGregorianStartDate_ =
    objc.registerName("setGregorianStartDate:");
late final _sel_doesRelativeDateFormatting =
    objc.registerName("doesRelativeDateFormatting");
late final _sel_setDoesRelativeDateFormatting_ =
    objc.registerName("setDoesRelativeDateFormatting:");
late final _sel_initWithDateFormat_allowNaturalLanguage_ =
    objc.registerName("initWithDateFormat:allowNaturalLanguage:");
final _objc_msgSend_174 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_allowsNaturalLanguage =
    objc.registerName("allowsNaturalLanguage");

/// NSFormatter
class NSFormatter extends objc.NSObject {
  NSFormatter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSFormatter] that points to the same underlying object as [other].
  NSFormatter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSFormatter] that wraps the given raw object pointer.
  NSFormatter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSFormatter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSFormatter);
  }

  /// stringForObjectValue:
  objc.NSString? stringForObjectValue_(objc.ObjCObjectBase? obj) {
    final _ret = _objc_msgSend_175(
        this.pointer, _sel_stringForObjectValue_, obj?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// attributedStringForObjectValue:withDefaultAttributes:
  NSAttributedString? attributedStringForObjectValue_withDefaultAttributes_(
      objc.ObjCObjectBase obj, objc.NSDictionary? attrs) {
    final _ret = _objc_msgSend_176(
        this.pointer,
        _sel_attributedStringForObjectValue_withDefaultAttributes_,
        obj.pointer,
        attrs?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSAttributedString.castFromPointer(_ret, retain: true, release: true);
  }

  /// editingStringForObjectValue:
  objc.NSString? editingStringForObjectValue_(objc.ObjCObjectBase obj) {
    final _ret = _objc_msgSend_177(
        this.pointer, _sel_editingStringForObjectValue_, obj.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// getObjectValue:forString:errorDescription:
  bool getObjectValue_forString_errorDescription_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj,
      objc.NSString string,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_178(
        this.pointer,
        _sel_getObjectValue_forString_errorDescription_,
        obj,
        string.pointer,
        error);
  }

  /// isPartialStringValid:newEditingString:errorDescription:
  bool isPartialStringValid_newEditingString_errorDescription_(
      objc.NSString partialString,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> newString,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_179(
        this.pointer,
        _sel_isPartialStringValid_newEditingString_errorDescription_,
        partialString.pointer,
        newString,
        error);
  }

  /// isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:
  bool
      isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_(
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> partialStringPtr,
          ffi.Pointer<_NSRange> proposedSelRangePtr,
          objc.NSString origString,
          _NSRange origSelRange,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_180(
        this.pointer,
        _sel_isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_,
        partialStringPtr,
        proposedSelRangePtr,
        origString.pointer,
        origSelRange,
        error);
  }

  /// init
  NSFormatter init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSFormatter.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSFormatter new1() {
    final _ret = _objc_msgSend_19(_class_NSFormatter, _sel_new);
    return NSFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSFormatter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSFormatter, _sel_allocWithZone_, zone);
    return NSFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSFormatter alloc() {
    final _ret = _objc_msgSend_19(_class_NSFormatter, _sel_alloc);
    return NSFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSFormatter, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSFormatter, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSFormatter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSFormatter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSFormatter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSFormatter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSFormatter, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSFormatter = objc.getClass("NSFormatter");
late final _sel_stringForObjectValue_ =
    objc.registerName("stringForObjectValue:");
final _objc_msgSend_175 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributedStringForObjectValue_withDefaultAttributes_ =
    objc.registerName("attributedStringForObjectValue:withDefaultAttributes:");
final _objc_msgSend_176 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_editingStringForObjectValue_ =
    objc.registerName("editingStringForObjectValue:");
final _objc_msgSend_177 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getObjectValue_forString_errorDescription_ =
    objc.registerName("getObjectValue:forString:errorDescription:");
final _objc_msgSend_178 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isPartialStringValid_newEditingString_errorDescription_ = objc
    .registerName("isPartialStringValid:newEditingString:errorDescription:");
final _objc_msgSend_179 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_ =
    objc.registerName(
        "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:");
final _objc_msgSend_180 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

/// NSNumberFormatter
class NSNumberFormatter extends NSFormatter {
  NSNumberFormatter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSNumberFormatter] that points to the same underlying object as [other].
  NSNumberFormatter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSNumberFormatter] that wraps the given raw object pointer.
  NSNumberFormatter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSNumberFormatter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSNumberFormatter);
  }

  /// formattingContext
  NSFormattingContext get formattingContext {
    final _ret = _objc_msgSend_101(this.pointer, _sel_formattingContext);
    return NSFormattingContext.fromValue(_ret);
  }

  /// setFormattingContext:
  set formattingContext(NSFormattingContext value) {
    return _objc_msgSend_102(
        this.pointer, _sel_setFormattingContext_, value.value);
  }

  /// getObjectValue:forString:range:error:
  bool getObjectValue_forString_range_error_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj,
      objc.NSString string,
      ffi.Pointer<_NSRange> rangep,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_103(
        this.pointer,
        _sel_getObjectValue_forString_range_error_,
        obj,
        string.pointer,
        rangep,
        error);
  }

  /// stringFromNumber:
  objc.NSString? stringFromNumber_(objc.NSNumber number) {
    final _ret =
        _objc_msgSend_181(this.pointer, _sel_stringFromNumber_, number.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// numberFromString:
  objc.NSNumber? numberFromString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_182(this.pointer, _sel_numberFromString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedStringFromNumber:numberStyle:
  static objc.NSString localizedStringFromNumber_numberStyle_(
      objc.NSNumber num, NSNumberFormatterStyle nstyle) {
    final _ret = _objc_msgSend_183(_class_NSNumberFormatter,
        _sel_localizedStringFromNumber_numberStyle_, num.pointer, nstyle.value);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultFormatterBehavior
  static NSNumberFormatterBehavior defaultFormatterBehavior() {
    final _ret = _objc_msgSend_184(
        _class_NSNumberFormatter, _sel_defaultFormatterBehavior);
    return NSNumberFormatterBehavior.fromValue(_ret);
  }

  /// setDefaultFormatterBehavior:
  static void setDefaultFormatterBehavior_(NSNumberFormatterBehavior behavior) {
    _objc_msgSend_185(_class_NSNumberFormatter,
        _sel_setDefaultFormatterBehavior_, behavior.value);
  }

  /// numberStyle
  NSNumberFormatterStyle get numberStyle {
    final _ret = _objc_msgSend_186(this.pointer, _sel_numberStyle);
    return NSNumberFormatterStyle.fromValue(_ret);
  }

  /// setNumberStyle:
  set numberStyle(NSNumberFormatterStyle value) {
    return _objc_msgSend_187(this.pointer, _sel_setNumberStyle_, value.value);
  }

  /// locale
  objc.NSLocale get locale {
    final _ret = _objc_msgSend_113(this.pointer, _sel_locale);
    return objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLocale:
  set locale(objc.NSLocale value) {
    return _objc_msgSend_114(this.pointer, _sel_setLocale_, value.pointer);
  }

  /// generatesDecimalNumbers
  bool get generatesDecimalNumbers {
    return _objc_msgSend_13(this.pointer, _sel_generatesDecimalNumbers);
  }

  /// setGeneratesDecimalNumbers:
  set generatesDecimalNumbers(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setGeneratesDecimalNumbers_, value);
  }

  /// formatterBehavior
  NSNumberFormatterBehavior get formatterBehavior {
    final _ret = _objc_msgSend_184(this.pointer, _sel_formatterBehavior);
    return NSNumberFormatterBehavior.fromValue(_ret);
  }

  /// setFormatterBehavior:
  set formatterBehavior(NSNumberFormatterBehavior value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setFormatterBehavior_, value.value);
  }

  /// negativeFormat
  objc.NSString get negativeFormat {
    final _ret = _objc_msgSend_11(this.pointer, _sel_negativeFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setNegativeFormat:
  set negativeFormat(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setNegativeFormat_, value.pointer);
  }

  /// textAttributesForNegativeValues
  objc.NSDictionary? get textAttributesForNegativeValues {
    final _ret =
        _objc_msgSend_84(this.pointer, _sel_textAttributesForNegativeValues);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTextAttributesForNegativeValues:
  set textAttributesForNegativeValues(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer,
        _sel_setTextAttributesForNegativeValues_,
        value?.pointer ?? ffi.nullptr);
  }

  /// positiveFormat
  objc.NSString get positiveFormat {
    final _ret = _objc_msgSend_11(this.pointer, _sel_positiveFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPositiveFormat:
  set positiveFormat(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setPositiveFormat_, value.pointer);
  }

  /// textAttributesForPositiveValues
  objc.NSDictionary? get textAttributesForPositiveValues {
    final _ret =
        _objc_msgSend_84(this.pointer, _sel_textAttributesForPositiveValues);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTextAttributesForPositiveValues:
  set textAttributesForPositiveValues(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer,
        _sel_setTextAttributesForPositiveValues_,
        value?.pointer ?? ffi.nullptr);
  }

  /// allowsFloats
  bool get allowsFloats {
    return _objc_msgSend_13(this.pointer, _sel_allowsFloats);
  }

  /// setAllowsFloats:
  set allowsFloats(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setAllowsFloats_, value);
  }

  /// decimalSeparator
  objc.NSString get decimalSeparator {
    final _ret = _objc_msgSend_11(this.pointer, _sel_decimalSeparator);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDecimalSeparator:
  set decimalSeparator(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setDecimalSeparator_, value.pointer);
  }

  /// alwaysShowsDecimalSeparator
  bool get alwaysShowsDecimalSeparator {
    return _objc_msgSend_13(this.pointer, _sel_alwaysShowsDecimalSeparator);
  }

  /// setAlwaysShowsDecimalSeparator:
  set alwaysShowsDecimalSeparator(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAlwaysShowsDecimalSeparator_, value);
  }

  /// currencyDecimalSeparator
  objc.NSString get currencyDecimalSeparator {
    final _ret = _objc_msgSend_11(this.pointer, _sel_currencyDecimalSeparator);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCurrencyDecimalSeparator:
  set currencyDecimalSeparator(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setCurrencyDecimalSeparator_, value.pointer);
  }

  /// usesGroupingSeparator
  bool get usesGroupingSeparator {
    return _objc_msgSend_13(this.pointer, _sel_usesGroupingSeparator);
  }

  /// setUsesGroupingSeparator:
  set usesGroupingSeparator(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setUsesGroupingSeparator_, value);
  }

  /// groupingSeparator
  objc.NSString get groupingSeparator {
    final _ret = _objc_msgSend_11(this.pointer, _sel_groupingSeparator);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setGroupingSeparator:
  set groupingSeparator(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setGroupingSeparator_, value.pointer);
  }

  /// zeroSymbol
  objc.NSString? get zeroSymbol {
    final _ret = _objc_msgSend_20(this.pointer, _sel_zeroSymbol);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setZeroSymbol:
  set zeroSymbol(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setZeroSymbol_, value?.pointer ?? ffi.nullptr);
  }

  /// textAttributesForZero
  objc.NSDictionary? get textAttributesForZero {
    final _ret = _objc_msgSend_84(this.pointer, _sel_textAttributesForZero);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTextAttributesForZero:
  set textAttributesForZero(objc.NSDictionary? value) {
    return _objc_msgSend_189(this.pointer, _sel_setTextAttributesForZero_,
        value?.pointer ?? ffi.nullptr);
  }

  /// nilSymbol
  objc.NSString get nilSymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_nilSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setNilSymbol:
  set nilSymbol(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setNilSymbol_, value.pointer);
  }

  /// textAttributesForNil
  objc.NSDictionary? get textAttributesForNil {
    final _ret = _objc_msgSend_84(this.pointer, _sel_textAttributesForNil);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTextAttributesForNil:
  set textAttributesForNil(objc.NSDictionary? value) {
    return _objc_msgSend_189(this.pointer, _sel_setTextAttributesForNil_,
        value?.pointer ?? ffi.nullptr);
  }

  /// notANumberSymbol
  objc.NSString get notANumberSymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_notANumberSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setNotANumberSymbol:
  set notANumberSymbol(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setNotANumberSymbol_, value.pointer);
  }

  /// textAttributesForNotANumber
  objc.NSDictionary? get textAttributesForNotANumber {
    final _ret =
        _objc_msgSend_84(this.pointer, _sel_textAttributesForNotANumber);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTextAttributesForNotANumber:
  set textAttributesForNotANumber(objc.NSDictionary? value) {
    return _objc_msgSend_189(this.pointer, _sel_setTextAttributesForNotANumber_,
        value?.pointer ?? ffi.nullptr);
  }

  /// positiveInfinitySymbol
  objc.NSString get positiveInfinitySymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_positiveInfinitySymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPositiveInfinitySymbol:
  set positiveInfinitySymbol(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setPositiveInfinitySymbol_, value.pointer);
  }

  /// textAttributesForPositiveInfinity
  objc.NSDictionary? get textAttributesForPositiveInfinity {
    final _ret =
        _objc_msgSend_84(this.pointer, _sel_textAttributesForPositiveInfinity);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTextAttributesForPositiveInfinity:
  set textAttributesForPositiveInfinity(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer,
        _sel_setTextAttributesForPositiveInfinity_,
        value?.pointer ?? ffi.nullptr);
  }

  /// negativeInfinitySymbol
  objc.NSString get negativeInfinitySymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_negativeInfinitySymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setNegativeInfinitySymbol:
  set negativeInfinitySymbol(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setNegativeInfinitySymbol_, value.pointer);
  }

  /// textAttributesForNegativeInfinity
  objc.NSDictionary? get textAttributesForNegativeInfinity {
    final _ret =
        _objc_msgSend_84(this.pointer, _sel_textAttributesForNegativeInfinity);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTextAttributesForNegativeInfinity:
  set textAttributesForNegativeInfinity(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer,
        _sel_setTextAttributesForNegativeInfinity_,
        value?.pointer ?? ffi.nullptr);
  }

  /// positivePrefix
  objc.NSString get positivePrefix {
    final _ret = _objc_msgSend_11(this.pointer, _sel_positivePrefix);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPositivePrefix:
  set positivePrefix(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setPositivePrefix_, value.pointer);
  }

  /// positiveSuffix
  objc.NSString get positiveSuffix {
    final _ret = _objc_msgSend_11(this.pointer, _sel_positiveSuffix);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPositiveSuffix:
  set positiveSuffix(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setPositiveSuffix_, value.pointer);
  }

  /// negativePrefix
  objc.NSString get negativePrefix {
    final _ret = _objc_msgSend_11(this.pointer, _sel_negativePrefix);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setNegativePrefix:
  set negativePrefix(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setNegativePrefix_, value.pointer);
  }

  /// negativeSuffix
  objc.NSString get negativeSuffix {
    final _ret = _objc_msgSend_11(this.pointer, _sel_negativeSuffix);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setNegativeSuffix:
  set negativeSuffix(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setNegativeSuffix_, value.pointer);
  }

  /// currencyCode
  objc.NSString get currencyCode {
    final _ret = _objc_msgSend_11(this.pointer, _sel_currencyCode);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCurrencyCode:
  set currencyCode(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setCurrencyCode_, value.pointer);
  }

  /// currencySymbol
  objc.NSString get currencySymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_currencySymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCurrencySymbol:
  set currencySymbol(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setCurrencySymbol_, value.pointer);
  }

  /// internationalCurrencySymbol
  objc.NSString get internationalCurrencySymbol {
    final _ret =
        _objc_msgSend_11(this.pointer, _sel_internationalCurrencySymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setInternationalCurrencySymbol:
  set internationalCurrencySymbol(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setInternationalCurrencySymbol_, value.pointer);
  }

  /// percentSymbol
  objc.NSString get percentSymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_percentSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPercentSymbol:
  set percentSymbol(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setPercentSymbol_, value.pointer);
  }

  /// perMillSymbol
  objc.NSString get perMillSymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_perMillSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPerMillSymbol:
  set perMillSymbol(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setPerMillSymbol_, value.pointer);
  }

  /// minusSign
  objc.NSString get minusSign {
    final _ret = _objc_msgSend_11(this.pointer, _sel_minusSign);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMinusSign:
  set minusSign(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setMinusSign_, value.pointer);
  }

  /// plusSign
  objc.NSString get plusSign {
    final _ret = _objc_msgSend_11(this.pointer, _sel_plusSign);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPlusSign:
  set plusSign(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setPlusSign_, value.pointer);
  }

  /// exponentSymbol
  objc.NSString get exponentSymbol {
    final _ret = _objc_msgSend_11(this.pointer, _sel_exponentSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setExponentSymbol:
  set exponentSymbol(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setExponentSymbol_, value.pointer);
  }

  /// groupingSize
  int get groupingSize {
    return _objc_msgSend_57(this.pointer, _sel_groupingSize);
  }

  /// setGroupingSize:
  set groupingSize(int value) {
    return _objc_msgSend_135(this.pointer, _sel_setGroupingSize_, value);
  }

  /// secondaryGroupingSize
  int get secondaryGroupingSize {
    return _objc_msgSend_57(this.pointer, _sel_secondaryGroupingSize);
  }

  /// setSecondaryGroupingSize:
  set secondaryGroupingSize(int value) {
    return _objc_msgSend_135(
        this.pointer, _sel_setSecondaryGroupingSize_, value);
  }

  /// multiplier
  objc.NSNumber? get multiplier {
    final _ret = _objc_msgSend_22(this.pointer, _sel_multiplier);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMultiplier:
  set multiplier(objc.NSNumber? value) {
    return _objc_msgSend_23(
        this.pointer, _sel_setMultiplier_, value?.pointer ?? ffi.nullptr);
  }

  /// formatWidth
  int get formatWidth {
    return _objc_msgSend_57(this.pointer, _sel_formatWidth);
  }

  /// setFormatWidth:
  set formatWidth(int value) {
    return _objc_msgSend_135(this.pointer, _sel_setFormatWidth_, value);
  }

  /// paddingCharacter
  objc.NSString get paddingCharacter {
    final _ret = _objc_msgSend_11(this.pointer, _sel_paddingCharacter);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPaddingCharacter:
  set paddingCharacter(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setPaddingCharacter_, value.pointer);
  }

  /// paddingPosition
  NSNumberFormatterPadPosition get paddingPosition {
    final _ret = _objc_msgSend_190(this.pointer, _sel_paddingPosition);
    return NSNumberFormatterPadPosition.fromValue(_ret);
  }

  /// setPaddingPosition:
  set paddingPosition(NSNumberFormatterPadPosition value) {
    return _objc_msgSend_191(
        this.pointer, _sel_setPaddingPosition_, value.value);
  }

  /// roundingMode
  NSNumberFormatterRoundingMode get roundingMode {
    final _ret = _objc_msgSend_192(this.pointer, _sel_roundingMode);
    return NSNumberFormatterRoundingMode.fromValue(_ret);
  }

  /// setRoundingMode:
  set roundingMode(NSNumberFormatterRoundingMode value) {
    return _objc_msgSend_193(this.pointer, _sel_setRoundingMode_, value.value);
  }

  /// roundingIncrement
  objc.NSNumber get roundingIncrement {
    final _ret = _objc_msgSend_194(this.pointer, _sel_roundingIncrement);
    return objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRoundingIncrement:
  set roundingIncrement(objc.NSNumber value) {
    return _objc_msgSend_195(
        this.pointer, _sel_setRoundingIncrement_, value.pointer);
  }

  /// minimumIntegerDigits
  int get minimumIntegerDigits {
    return _objc_msgSend_57(this.pointer, _sel_minimumIntegerDigits);
  }

  /// setMinimumIntegerDigits:
  set minimumIntegerDigits(int value) {
    return _objc_msgSend_135(
        this.pointer, _sel_setMinimumIntegerDigits_, value);
  }

  /// maximumIntegerDigits
  int get maximumIntegerDigits {
    return _objc_msgSend_57(this.pointer, _sel_maximumIntegerDigits);
  }

  /// setMaximumIntegerDigits:
  set maximumIntegerDigits(int value) {
    return _objc_msgSend_135(
        this.pointer, _sel_setMaximumIntegerDigits_, value);
  }

  /// minimumFractionDigits
  int get minimumFractionDigits {
    return _objc_msgSend_57(this.pointer, _sel_minimumFractionDigits);
  }

  /// setMinimumFractionDigits:
  set minimumFractionDigits(int value) {
    return _objc_msgSend_135(
        this.pointer, _sel_setMinimumFractionDigits_, value);
  }

  /// maximumFractionDigits
  int get maximumFractionDigits {
    return _objc_msgSend_57(this.pointer, _sel_maximumFractionDigits);
  }

  /// setMaximumFractionDigits:
  set maximumFractionDigits(int value) {
    return _objc_msgSend_135(
        this.pointer, _sel_setMaximumFractionDigits_, value);
  }

  /// minimum
  objc.NSNumber? get minimum {
    final _ret = _objc_msgSend_22(this.pointer, _sel_minimum);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMinimum:
  set minimum(objc.NSNumber? value) {
    return _objc_msgSend_23(
        this.pointer, _sel_setMinimum_, value?.pointer ?? ffi.nullptr);
  }

  /// maximum
  objc.NSNumber? get maximum {
    final _ret = _objc_msgSend_22(this.pointer, _sel_maximum);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMaximum:
  set maximum(objc.NSNumber? value) {
    return _objc_msgSend_23(
        this.pointer, _sel_setMaximum_, value?.pointer ?? ffi.nullptr);
  }

  /// currencyGroupingSeparator
  objc.NSString get currencyGroupingSeparator {
    final _ret = _objc_msgSend_11(this.pointer, _sel_currencyGroupingSeparator);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCurrencyGroupingSeparator:
  set currencyGroupingSeparator(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setCurrencyGroupingSeparator_, value.pointer);
  }

  /// isLenient
  bool get lenient {
    return _objc_msgSend_13(this.pointer, _sel_isLenient);
  }

  /// setLenient:
  set lenient(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setLenient_, value);
  }

  /// usesSignificantDigits
  bool get usesSignificantDigits {
    return _objc_msgSend_13(this.pointer, _sel_usesSignificantDigits);
  }

  /// setUsesSignificantDigits:
  set usesSignificantDigits(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setUsesSignificantDigits_, value);
  }

  /// minimumSignificantDigits
  int get minimumSignificantDigits {
    return _objc_msgSend_57(this.pointer, _sel_minimumSignificantDigits);
  }

  /// setMinimumSignificantDigits:
  set minimumSignificantDigits(int value) {
    return _objc_msgSend_135(
        this.pointer, _sel_setMinimumSignificantDigits_, value);
  }

  /// maximumSignificantDigits
  int get maximumSignificantDigits {
    return _objc_msgSend_57(this.pointer, _sel_maximumSignificantDigits);
  }

  /// setMaximumSignificantDigits:
  set maximumSignificantDigits(int value) {
    return _objc_msgSend_135(
        this.pointer, _sel_setMaximumSignificantDigits_, value);
  }

  /// isPartialStringValidationEnabled
  bool get partialStringValidationEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isPartialStringValidationEnabled);
  }

  /// setPartialStringValidationEnabled:
  set partialStringValidationEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setPartialStringValidationEnabled_, value);
  }

  /// hasThousandSeparators
  bool get hasThousandSeparators {
    return _objc_msgSend_13(this.pointer, _sel_hasThousandSeparators);
  }

  /// setHasThousandSeparators:
  set hasThousandSeparators(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setHasThousandSeparators_, value);
  }

  /// thousandSeparator
  objc.NSString get thousandSeparator {
    final _ret = _objc_msgSend_11(this.pointer, _sel_thousandSeparator);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setThousandSeparator:
  set thousandSeparator(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setThousandSeparator_, value.pointer);
  }

  /// localizesFormat
  bool get localizesFormat {
    return _objc_msgSend_13(this.pointer, _sel_localizesFormat);
  }

  /// setLocalizesFormat:
  set localizesFormat(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setLocalizesFormat_, value);
  }

  /// format
  objc.NSString get format {
    final _ret = _objc_msgSend_11(this.pointer, _sel_format);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFormat:
  set format(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setFormat_, value.pointer);
  }

  /// attributedStringForZero
  NSAttributedString get attributedStringForZero {
    final _ret = _objc_msgSend_82(this.pointer, _sel_attributedStringForZero);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setAttributedStringForZero:
  set attributedStringForZero(NSAttributedString value) {
    return _objc_msgSend_196(
        this.pointer, _sel_setAttributedStringForZero_, value.pointer);
  }

  /// attributedStringForNil
  NSAttributedString get attributedStringForNil {
    final _ret = _objc_msgSend_82(this.pointer, _sel_attributedStringForNil);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setAttributedStringForNil:
  set attributedStringForNil(NSAttributedString value) {
    return _objc_msgSend_196(
        this.pointer, _sel_setAttributedStringForNil_, value.pointer);
  }

  /// attributedStringForNotANumber
  NSAttributedString get attributedStringForNotANumber {
    final _ret =
        _objc_msgSend_82(this.pointer, _sel_attributedStringForNotANumber);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setAttributedStringForNotANumber:
  set attributedStringForNotANumber(NSAttributedString value) {
    return _objc_msgSend_196(
        this.pointer, _sel_setAttributedStringForNotANumber_, value.pointer);
  }

  /// roundingBehavior
  NSDecimalNumberHandler get roundingBehavior {
    final _ret = _objc_msgSend_197(this.pointer, _sel_roundingBehavior);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setRoundingBehavior:
  set roundingBehavior(NSDecimalNumberHandler value) {
    return _objc_msgSend_199(
        this.pointer, _sel_setRoundingBehavior_, value.pointer);
  }

  /// init
  NSNumberFormatter init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSNumberFormatter.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSNumberFormatter new1() {
    final _ret = _objc_msgSend_19(_class_NSNumberFormatter, _sel_new);
    return NSNumberFormatter.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSNumberFormatter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSNumberFormatter, _sel_allocWithZone_, zone);
    return NSNumberFormatter.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSNumberFormatter alloc() {
    final _ret = _objc_msgSend_19(_class_NSNumberFormatter, _sel_alloc);
    return NSNumberFormatter.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSNumberFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSNumberFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSNumberFormatter, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSNumberFormatter, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSNumberFormatter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSNumberFormatter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSNumberFormatter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSNumberFormatter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSNumberFormatter, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSNumberFormatter = objc.getClass("NSNumberFormatter");
late final _sel_stringFromNumber_ = objc.registerName("stringFromNumber:");
final _objc_msgSend_181 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_numberFromString_ = objc.registerName("numberFromString:");
final _objc_msgSend_182 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum NSNumberFormatterStyle {
  NSNumberFormatterNoStyle(0),
  NSNumberFormatterDecimalStyle(1),
  NSNumberFormatterCurrencyStyle(2),
  NSNumberFormatterPercentStyle(3),
  NSNumberFormatterScientificStyle(4),
  NSNumberFormatterSpellOutStyle(5),
  NSNumberFormatterOrdinalStyle(6),
  NSNumberFormatterCurrencyISOCodeStyle(8),
  NSNumberFormatterCurrencyPluralStyle(9),
  NSNumberFormatterCurrencyAccountingStyle(10);

  final int value;
  const NSNumberFormatterStyle(this.value);

  static NSNumberFormatterStyle fromValue(int value) => switch (value) {
        0 => NSNumberFormatterNoStyle,
        1 => NSNumberFormatterDecimalStyle,
        2 => NSNumberFormatterCurrencyStyle,
        3 => NSNumberFormatterPercentStyle,
        4 => NSNumberFormatterScientificStyle,
        5 => NSNumberFormatterSpellOutStyle,
        6 => NSNumberFormatterOrdinalStyle,
        8 => NSNumberFormatterCurrencyISOCodeStyle,
        9 => NSNumberFormatterCurrencyPluralStyle,
        10 => NSNumberFormatterCurrencyAccountingStyle,
        _ => throw ArgumentError(
            "Unknown value for NSNumberFormatterStyle: $value"),
      };
}

late final _sel_localizedStringFromNumber_numberStyle_ =
    objc.registerName("localizedStringFromNumber:numberStyle:");
final _objc_msgSend_183 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

enum NSNumberFormatterBehavior {
  NSNumberFormatterBehaviorDefault(0),
  NSNumberFormatterBehavior10_0(1000),
  NSNumberFormatterBehavior10_4(1040);

  final int value;
  const NSNumberFormatterBehavior(this.value);

  static NSNumberFormatterBehavior fromValue(int value) => switch (value) {
        0 => NSNumberFormatterBehaviorDefault,
        1000 => NSNumberFormatterBehavior10_0,
        1040 => NSNumberFormatterBehavior10_4,
        _ => throw ArgumentError(
            "Unknown value for NSNumberFormatterBehavior: $value"),
      };
}

final _objc_msgSend_184 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_185 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_numberStyle = objc.registerName("numberStyle");
final _objc_msgSend_186 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setNumberStyle_ = objc.registerName("setNumberStyle:");
final _objc_msgSend_187 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_generatesDecimalNumbers =
    objc.registerName("generatesDecimalNumbers");
late final _sel_setGeneratesDecimalNumbers_ =
    objc.registerName("setGeneratesDecimalNumbers:");
final _objc_msgSend_188 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_negativeFormat = objc.registerName("negativeFormat");
late final _sel_setNegativeFormat_ = objc.registerName("setNegativeFormat:");
late final _sel_textAttributesForNegativeValues =
    objc.registerName("textAttributesForNegativeValues");
late final _sel_setTextAttributesForNegativeValues_ =
    objc.registerName("setTextAttributesForNegativeValues:");
final _objc_msgSend_189 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_positiveFormat = objc.registerName("positiveFormat");
late final _sel_setPositiveFormat_ = objc.registerName("setPositiveFormat:");
late final _sel_textAttributesForPositiveValues =
    objc.registerName("textAttributesForPositiveValues");
late final _sel_setTextAttributesForPositiveValues_ =
    objc.registerName("setTextAttributesForPositiveValues:");
late final _sel_allowsFloats = objc.registerName("allowsFloats");
late final _sel_setAllowsFloats_ = objc.registerName("setAllowsFloats:");
late final _sel_decimalSeparator = objc.registerName("decimalSeparator");
late final _sel_setDecimalSeparator_ =
    objc.registerName("setDecimalSeparator:");
late final _sel_alwaysShowsDecimalSeparator =
    objc.registerName("alwaysShowsDecimalSeparator");
late final _sel_setAlwaysShowsDecimalSeparator_ =
    objc.registerName("setAlwaysShowsDecimalSeparator:");
late final _sel_currencyDecimalSeparator =
    objc.registerName("currencyDecimalSeparator");
late final _sel_setCurrencyDecimalSeparator_ =
    objc.registerName("setCurrencyDecimalSeparator:");
late final _sel_usesGroupingSeparator =
    objc.registerName("usesGroupingSeparator");
late final _sel_setUsesGroupingSeparator_ =
    objc.registerName("setUsesGroupingSeparator:");
late final _sel_groupingSeparator = objc.registerName("groupingSeparator");
late final _sel_setGroupingSeparator_ =
    objc.registerName("setGroupingSeparator:");
late final _sel_zeroSymbol = objc.registerName("zeroSymbol");
late final _sel_setZeroSymbol_ = objc.registerName("setZeroSymbol:");
late final _sel_textAttributesForZero =
    objc.registerName("textAttributesForZero");
late final _sel_setTextAttributesForZero_ =
    objc.registerName("setTextAttributesForZero:");
late final _sel_nilSymbol = objc.registerName("nilSymbol");
late final _sel_setNilSymbol_ = objc.registerName("setNilSymbol:");
late final _sel_textAttributesForNil =
    objc.registerName("textAttributesForNil");
late final _sel_setTextAttributesForNil_ =
    objc.registerName("setTextAttributesForNil:");
late final _sel_notANumberSymbol = objc.registerName("notANumberSymbol");
late final _sel_setNotANumberSymbol_ =
    objc.registerName("setNotANumberSymbol:");
late final _sel_textAttributesForNotANumber =
    objc.registerName("textAttributesForNotANumber");
late final _sel_setTextAttributesForNotANumber_ =
    objc.registerName("setTextAttributesForNotANumber:");
late final _sel_positiveInfinitySymbol =
    objc.registerName("positiveInfinitySymbol");
late final _sel_setPositiveInfinitySymbol_ =
    objc.registerName("setPositiveInfinitySymbol:");
late final _sel_textAttributesForPositiveInfinity =
    objc.registerName("textAttributesForPositiveInfinity");
late final _sel_setTextAttributesForPositiveInfinity_ =
    objc.registerName("setTextAttributesForPositiveInfinity:");
late final _sel_negativeInfinitySymbol =
    objc.registerName("negativeInfinitySymbol");
late final _sel_setNegativeInfinitySymbol_ =
    objc.registerName("setNegativeInfinitySymbol:");
late final _sel_textAttributesForNegativeInfinity =
    objc.registerName("textAttributesForNegativeInfinity");
late final _sel_setTextAttributesForNegativeInfinity_ =
    objc.registerName("setTextAttributesForNegativeInfinity:");
late final _sel_positivePrefix = objc.registerName("positivePrefix");
late final _sel_setPositivePrefix_ = objc.registerName("setPositivePrefix:");
late final _sel_positiveSuffix = objc.registerName("positiveSuffix");
late final _sel_setPositiveSuffix_ = objc.registerName("setPositiveSuffix:");
late final _sel_negativePrefix = objc.registerName("negativePrefix");
late final _sel_setNegativePrefix_ = objc.registerName("setNegativePrefix:");
late final _sel_negativeSuffix = objc.registerName("negativeSuffix");
late final _sel_setNegativeSuffix_ = objc.registerName("setNegativeSuffix:");
late final _sel_currencyCode = objc.registerName("currencyCode");
late final _sel_setCurrencyCode_ = objc.registerName("setCurrencyCode:");
late final _sel_currencySymbol = objc.registerName("currencySymbol");
late final _sel_setCurrencySymbol_ = objc.registerName("setCurrencySymbol:");
late final _sel_internationalCurrencySymbol =
    objc.registerName("internationalCurrencySymbol");
late final _sel_setInternationalCurrencySymbol_ =
    objc.registerName("setInternationalCurrencySymbol:");
late final _sel_percentSymbol = objc.registerName("percentSymbol");
late final _sel_setPercentSymbol_ = objc.registerName("setPercentSymbol:");
late final _sel_perMillSymbol = objc.registerName("perMillSymbol");
late final _sel_setPerMillSymbol_ = objc.registerName("setPerMillSymbol:");
late final _sel_minusSign = objc.registerName("minusSign");
late final _sel_setMinusSign_ = objc.registerName("setMinusSign:");
late final _sel_plusSign = objc.registerName("plusSign");
late final _sel_setPlusSign_ = objc.registerName("setPlusSign:");
late final _sel_exponentSymbol = objc.registerName("exponentSymbol");
late final _sel_setExponentSymbol_ = objc.registerName("setExponentSymbol:");
late final _sel_groupingSize = objc.registerName("groupingSize");
late final _sel_setGroupingSize_ = objc.registerName("setGroupingSize:");
late final _sel_secondaryGroupingSize =
    objc.registerName("secondaryGroupingSize");
late final _sel_setSecondaryGroupingSize_ =
    objc.registerName("setSecondaryGroupingSize:");
late final _sel_multiplier = objc.registerName("multiplier");
late final _sel_setMultiplier_ = objc.registerName("setMultiplier:");
late final _sel_formatWidth = objc.registerName("formatWidth");
late final _sel_setFormatWidth_ = objc.registerName("setFormatWidth:");
late final _sel_paddingCharacter = objc.registerName("paddingCharacter");
late final _sel_setPaddingCharacter_ =
    objc.registerName("setPaddingCharacter:");

enum NSNumberFormatterPadPosition {
  NSNumberFormatterPadBeforePrefix(0),
  NSNumberFormatterPadAfterPrefix(1),
  NSNumberFormatterPadBeforeSuffix(2),
  NSNumberFormatterPadAfterSuffix(3);

  final int value;
  const NSNumberFormatterPadPosition(this.value);

  static NSNumberFormatterPadPosition fromValue(int value) => switch (value) {
        0 => NSNumberFormatterPadBeforePrefix,
        1 => NSNumberFormatterPadAfterPrefix,
        2 => NSNumberFormatterPadBeforeSuffix,
        3 => NSNumberFormatterPadAfterSuffix,
        _ => throw ArgumentError(
            "Unknown value for NSNumberFormatterPadPosition: $value"),
      };
}

late final _sel_paddingPosition = objc.registerName("paddingPosition");
final _objc_msgSend_190 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPaddingPosition_ = objc.registerName("setPaddingPosition:");
final _objc_msgSend_191 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum NSNumberFormatterRoundingMode {
  NSNumberFormatterRoundCeiling(0),
  NSNumberFormatterRoundFloor(1),
  NSNumberFormatterRoundDown(2),
  NSNumberFormatterRoundUp(3),
  NSNumberFormatterRoundHalfEven(4),
  NSNumberFormatterRoundHalfDown(5),
  NSNumberFormatterRoundHalfUp(6);

  final int value;
  const NSNumberFormatterRoundingMode(this.value);

  static NSNumberFormatterRoundingMode fromValue(int value) => switch (value) {
        0 => NSNumberFormatterRoundCeiling,
        1 => NSNumberFormatterRoundFloor,
        2 => NSNumberFormatterRoundDown,
        3 => NSNumberFormatterRoundUp,
        4 => NSNumberFormatterRoundHalfEven,
        5 => NSNumberFormatterRoundHalfDown,
        6 => NSNumberFormatterRoundHalfUp,
        _ => throw ArgumentError(
            "Unknown value for NSNumberFormatterRoundingMode: $value"),
      };
}

late final _sel_roundingMode = objc.registerName("roundingMode");
final _objc_msgSend_192 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setRoundingMode_ = objc.registerName("setRoundingMode:");
final _objc_msgSend_193 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_roundingIncrement = objc.registerName("roundingIncrement");
final _objc_msgSend_194 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setRoundingIncrement_ =
    objc.registerName("setRoundingIncrement:");
final _objc_msgSend_195 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_minimumIntegerDigits =
    objc.registerName("minimumIntegerDigits");
late final _sel_setMinimumIntegerDigits_ =
    objc.registerName("setMinimumIntegerDigits:");
late final _sel_maximumIntegerDigits =
    objc.registerName("maximumIntegerDigits");
late final _sel_setMaximumIntegerDigits_ =
    objc.registerName("setMaximumIntegerDigits:");
late final _sel_minimumFractionDigits =
    objc.registerName("minimumFractionDigits");
late final _sel_setMinimumFractionDigits_ =
    objc.registerName("setMinimumFractionDigits:");
late final _sel_maximumFractionDigits =
    objc.registerName("maximumFractionDigits");
late final _sel_setMaximumFractionDigits_ =
    objc.registerName("setMaximumFractionDigits:");
late final _sel_minimum = objc.registerName("minimum");
late final _sel_setMinimum_ = objc.registerName("setMinimum:");
late final _sel_maximum = objc.registerName("maximum");
late final _sel_setMaximum_ = objc.registerName("setMaximum:");
late final _sel_currencyGroupingSeparator =
    objc.registerName("currencyGroupingSeparator");
late final _sel_setCurrencyGroupingSeparator_ =
    objc.registerName("setCurrencyGroupingSeparator:");
late final _sel_usesSignificantDigits =
    objc.registerName("usesSignificantDigits");
late final _sel_setUsesSignificantDigits_ =
    objc.registerName("setUsesSignificantDigits:");
late final _sel_minimumSignificantDigits =
    objc.registerName("minimumSignificantDigits");
late final _sel_setMinimumSignificantDigits_ =
    objc.registerName("setMinimumSignificantDigits:");
late final _sel_maximumSignificantDigits =
    objc.registerName("maximumSignificantDigits");
late final _sel_setMaximumSignificantDigits_ =
    objc.registerName("setMaximumSignificantDigits:");
late final _sel_isPartialStringValidationEnabled =
    objc.registerName("isPartialStringValidationEnabled");
late final _sel_setPartialStringValidationEnabled_ =
    objc.registerName("setPartialStringValidationEnabled:");
late final _sel_hasThousandSeparators =
    objc.registerName("hasThousandSeparators");
late final _sel_setHasThousandSeparators_ =
    objc.registerName("setHasThousandSeparators:");
late final _sel_thousandSeparator = objc.registerName("thousandSeparator");
late final _sel_setThousandSeparator_ =
    objc.registerName("setThousandSeparator:");
late final _sel_localizesFormat = objc.registerName("localizesFormat");
late final _sel_setLocalizesFormat_ = objc.registerName("setLocalizesFormat:");
late final _sel_format = objc.registerName("format");
late final _sel_setFormat_ = objc.registerName("setFormat:");
late final _sel_attributedStringForZero =
    objc.registerName("attributedStringForZero");
late final _sel_setAttributedStringForZero_ =
    objc.registerName("setAttributedStringForZero:");
final _objc_msgSend_196 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributedStringForNil =
    objc.registerName("attributedStringForNil");
late final _sel_setAttributedStringForNil_ =
    objc.registerName("setAttributedStringForNil:");
late final _sel_attributedStringForNotANumber =
    objc.registerName("attributedStringForNotANumber");
late final _sel_setAttributedStringForNotANumber_ =
    objc.registerName("setAttributedStringForNotANumber:");

/// NSDecimalNumberHandler
class NSDecimalNumberHandler extends objc.NSObject {
  NSDecimalNumberHandler._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDecimalNumberHandler] that points to the same underlying object as [other].
  NSDecimalNumberHandler.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDecimalNumberHandler] that wraps the given raw object pointer.
  NSDecimalNumberHandler.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDecimalNumberHandler].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSDecimalNumberHandler);
  }

  /// defaultDecimalNumberHandler
  static NSDecimalNumberHandler getDefaultDecimalNumberHandler() {
    final _ret = _objc_msgSend_197(
        _class_NSDecimalNumberHandler, _sel_defaultDecimalNumberHandler);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:
  NSDecimalNumberHandler
      initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(
          NSRoundingMode roundingMode,
          int scale,
          bool exact,
          bool overflow,
          bool underflow,
          bool divideByZero) {
    final _ret = _objc_msgSend_198(
        this.pointer,
        _sel_initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_,
        roundingMode.value,
        scale,
        exact,
        overflow,
        underflow,
        divideByZero);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:
  static NSDecimalNumberHandler
      decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(
          NSRoundingMode roundingMode,
          int scale,
          bool exact,
          bool overflow,
          bool underflow,
          bool divideByZero) {
    final _ret = _objc_msgSend_198(
        _class_NSDecimalNumberHandler,
        _sel_decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_,
        roundingMode.value,
        scale,
        exact,
        overflow,
        underflow,
        divideByZero);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  NSDecimalNumberHandler init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSDecimalNumberHandler new1() {
    final _ret = _objc_msgSend_19(_class_NSDecimalNumberHandler, _sel_new);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSDecimalNumberHandler allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSDecimalNumberHandler, _sel_allocWithZone_, zone);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSDecimalNumberHandler alloc() {
    final _ret = _objc_msgSend_19(_class_NSDecimalNumberHandler, _sel_alloc);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSDecimalNumberHandler,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSDecimalNumberHandler,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSDecimalNumberHandler, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSDecimalNumberHandler, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSDecimalNumberHandler,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSDecimalNumberHandler,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSDecimalNumberHandler,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSDecimalNumberHandler, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSDecimalNumberHandler, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSDecimalNumberHandler =
    objc.getClass("NSDecimalNumberHandler");
late final _sel_defaultDecimalNumberHandler =
    objc.registerName("defaultDecimalNumberHandler");
final _objc_msgSend_197 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum NSRoundingMode {
  NSRoundPlain(0),
  NSRoundDown(1),
  NSRoundUp(2),
  NSRoundBankers(3);

  final int value;
  const NSRoundingMode(this.value);

  static NSRoundingMode fromValue(int value) => switch (value) {
        0 => NSRoundPlain,
        1 => NSRoundDown,
        2 => NSRoundUp,
        3 => NSRoundBankers,
        _ => throw ArgumentError("Unknown value for NSRoundingMode: $value"),
      };
}

late final _sel_initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_ =
    objc.registerName(
        "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:");
final _objc_msgSend_198 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Short,
                ffi.Bool,
                ffi.Bool,
                ffi.Bool,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            bool,
            bool,
            bool,
            bool)>();
late final _sel_decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_ =
    objc.registerName(
        "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:");
late final _sel_roundingBehavior = objc.registerName("roundingBehavior");
late final _sel_setRoundingBehavior_ =
    objc.registerName("setRoundingBehavior:");
final _objc_msgSend_199 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum NSLocaleLanguageDirection {
  NSLocaleLanguageDirectionUnknown(0),
  NSLocaleLanguageDirectionLeftToRight(1),
  NSLocaleLanguageDirectionRightToLeft(2),
  NSLocaleLanguageDirectionTopToBottom(3),
  NSLocaleLanguageDirectionBottomToTop(4);

  final int value;
  const NSLocaleLanguageDirection(this.value);

  static NSLocaleLanguageDirection fromValue(int value) => switch (value) {
        0 => NSLocaleLanguageDirectionUnknown,
        1 => NSLocaleLanguageDirectionLeftToRight,
        2 => NSLocaleLanguageDirectionRightToLeft,
        3 => NSLocaleLanguageDirectionTopToBottom,
        4 => NSLocaleLanguageDirectionBottomToTop,
        _ => throw ArgumentError(
            "Unknown value for NSLocaleLanguageDirection: $value"),
      };
}

/// NSScanner
class NSScanner extends objc.NSObject {
  NSScanner._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSScanner] that points to the same underlying object as [other].
  NSScanner.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSScanner] that wraps the given raw object pointer.
  NSScanner.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSScanner].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSScanner);
  }

  /// string
  objc.NSString get string {
    final _ret = _objc_msgSend_11(this.pointer, _sel_string);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// scanLocation
  int get scanLocation {
    return _objc_msgSend_57(this.pointer, _sel_scanLocation);
  }

  /// setScanLocation:
  set scanLocation(int value) {
    return _objc_msgSend_135(this.pointer, _sel_setScanLocation_, value);
  }

  /// charactersToBeSkipped
  objc.NSCharacterSet? get charactersToBeSkipped {
    final _ret = _objc_msgSend_200(this.pointer, _sel_charactersToBeSkipped);
    return _ret.address == 0
        ? null
        : objc.NSCharacterSet.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setCharactersToBeSkipped:
  set charactersToBeSkipped(objc.NSCharacterSet? value) {
    return _objc_msgSend_201(this.pointer, _sel_setCharactersToBeSkipped_,
        value?.pointer ?? ffi.nullptr);
  }

  /// caseSensitive
  bool get caseSensitive {
    return _objc_msgSend_13(this.pointer, _sel_caseSensitive);
  }

  /// setCaseSensitive:
  set caseSensitive(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setCaseSensitive_, value);
  }

  /// locale
  objc.ObjCObjectBase? get locale {
    final _ret = _objc_msgSend_85(this.pointer, _sel_locale);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setLocale:
  set locale(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setLocale_, value?.pointer ?? ffi.nullptr);
  }

  /// initWithString:
  NSScanner initWithString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_63(this.pointer, _sel_initWithString_, string.pointer);
    return NSScanner.castFromPointer(_ret, retain: true, release: true);
  }

  /// scanInt:
  bool scanInt_(ffi.Pointer<ffi.Int> result) {
    return _objc_msgSend_203(this.pointer, _sel_scanInt_, result);
  }

  /// scanInteger:
  bool scanInteger_(ffi.Pointer<ffi.Long> result) {
    return _objc_msgSend_204(this.pointer, _sel_scanInteger_, result);
  }

  /// scanLongLong:
  bool scanLongLong_(ffi.Pointer<ffi.LongLong> result) {
    return _objc_msgSend_205(this.pointer, _sel_scanLongLong_, result);
  }

  /// scanUnsignedLongLong:
  bool scanUnsignedLongLong_(ffi.Pointer<ffi.UnsignedLongLong> result) {
    return _objc_msgSend_206(this.pointer, _sel_scanUnsignedLongLong_, result);
  }

  /// scanFloat:
  bool scanFloat_(ffi.Pointer<ffi.Float> result) {
    return _objc_msgSend_207(this.pointer, _sel_scanFloat_, result);
  }

  /// scanDouble:
  bool scanDouble_(ffi.Pointer<ffi.Double> result) {
    return _objc_msgSend_208(this.pointer, _sel_scanDouble_, result);
  }

  /// scanHexInt:
  bool scanHexInt_(ffi.Pointer<ffi.UnsignedInt> result) {
    return _objc_msgSend_209(this.pointer, _sel_scanHexInt_, result);
  }

  /// scanHexLongLong:
  bool scanHexLongLong_(ffi.Pointer<ffi.UnsignedLongLong> result) {
    return _objc_msgSend_206(this.pointer, _sel_scanHexLongLong_, result);
  }

  /// scanHexFloat:
  bool scanHexFloat_(ffi.Pointer<ffi.Float> result) {
    return _objc_msgSend_207(this.pointer, _sel_scanHexFloat_, result);
  }

  /// scanHexDouble:
  bool scanHexDouble_(ffi.Pointer<ffi.Double> result) {
    return _objc_msgSend_208(this.pointer, _sel_scanHexDouble_, result);
  }

  /// scanString:intoString:
  bool scanString_intoString_(
      objc.NSString string, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result) {
    return _objc_msgSend_210(
        this.pointer, _sel_scanString_intoString_, string.pointer, result);
  }

  /// scanCharactersFromSet:intoString:
  bool scanCharactersFromSet_intoString_(objc.NSCharacterSet set,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result) {
    return _objc_msgSend_211(this.pointer,
        _sel_scanCharactersFromSet_intoString_, set.pointer, result);
  }

  /// scanUpToString:intoString:
  bool scanUpToString_intoString_(
      objc.NSString string, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result) {
    return _objc_msgSend_210(
        this.pointer, _sel_scanUpToString_intoString_, string.pointer, result);
  }

  /// scanUpToCharactersFromSet:intoString:
  bool scanUpToCharactersFromSet_intoString_(objc.NSCharacterSet set,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result) {
    return _objc_msgSend_211(this.pointer,
        _sel_scanUpToCharactersFromSet_intoString_, set.pointer, result);
  }

  /// isAtEnd
  bool get atEnd {
    return _objc_msgSend_13(this.pointer, _sel_isAtEnd);
  }

  /// scannerWithString:
  static NSScanner scannerWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_63(
        _class_NSScanner, _sel_scannerWithString_, string.pointer);
    return NSScanner.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedScannerWithString:
  static objc.ObjCObjectBase localizedScannerWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_63(
        _class_NSScanner, _sel_localizedScannerWithString_, string.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// scanDecimal:
  bool scanDecimal_(ffi.Pointer<NSDecimal> dcm) {
    return _objc_msgSend_212(this.pointer, _sel_scanDecimal_, dcm);
  }

  /// init
  NSScanner init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSScanner.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSScanner new1() {
    final _ret = _objc_msgSend_19(_class_NSScanner, _sel_new);
    return NSScanner.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSScanner allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSScanner, _sel_allocWithZone_, zone);
    return NSScanner.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSScanner alloc() {
    final _ret = _objc_msgSend_19(_class_NSScanner, _sel_alloc);
    return NSScanner.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSScanner,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSScanner,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSScanner, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSScanner, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSScanner,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSScanner,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSScanner,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSScanner, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSScanner, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSScanner = objc.getClass("NSScanner");
late final _sel_scanLocation = objc.registerName("scanLocation");
late final _sel_setScanLocation_ = objc.registerName("setScanLocation:");
late final _sel_charactersToBeSkipped =
    objc.registerName("charactersToBeSkipped");
final _objc_msgSend_200 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCharactersToBeSkipped_ =
    objc.registerName("setCharactersToBeSkipped:");
final _objc_msgSend_201 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_caseSensitive = objc.registerName("caseSensitive");
late final _sel_setCaseSensitive_ = objc.registerName("setCaseSensitive:");
final _objc_msgSend_202 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_scanInt_ = objc.registerName("scanInt:");
final _objc_msgSend_203 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Int>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Int>)>();
late final _sel_scanInteger_ = objc.registerName("scanInteger:");
final _objc_msgSend_204 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Long>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Long>)>();
late final _sel_scanLongLong_ = objc.registerName("scanLongLong:");
final _objc_msgSend_205 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.LongLong>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.LongLong>)>();
late final _sel_scanUnsignedLongLong_ =
    objc.registerName("scanUnsignedLongLong:");
final _objc_msgSend_206 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLongLong>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLongLong>)>();
late final _sel_scanFloat_ = objc.registerName("scanFloat:");
final _objc_msgSend_207 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Float>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Float>)>();
late final _sel_scanDouble_ = objc.registerName("scanDouble:");
final _objc_msgSend_208 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Double>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Double>)>();
late final _sel_scanHexInt_ = objc.registerName("scanHexInt:");
final _objc_msgSend_209 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedInt>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.UnsignedInt>)>();
late final _sel_scanHexLongLong_ = objc.registerName("scanHexLongLong:");
late final _sel_scanHexFloat_ = objc.registerName("scanHexFloat:");
late final _sel_scanHexDouble_ = objc.registerName("scanHexDouble:");
late final _sel_scanString_intoString_ =
    objc.registerName("scanString:intoString:");
final _objc_msgSend_210 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_scanCharactersFromSet_intoString_ =
    objc.registerName("scanCharactersFromSet:intoString:");
final _objc_msgSend_211 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_scanUpToString_intoString_ =
    objc.registerName("scanUpToString:intoString:");
late final _sel_scanUpToCharactersFromSet_intoString_ =
    objc.registerName("scanUpToCharactersFromSet:intoString:");
late final _sel_isAtEnd = objc.registerName("isAtEnd");
late final _sel_scannerWithString_ = objc.registerName("scannerWithString:");
late final _sel_localizedScannerWithString_ =
    objc.registerName("localizedScannerWithString:");

final class NSDecimal extends ffi.Opaque {}

late final _sel_scanDecimal_ = objc.registerName("scanDecimal:");
final _objc_msgSend_212 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<NSDecimal>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<NSDecimal>)>();

/// NSException
class NSException extends objc.NSObject {
  NSException._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSException] that points to the same underlying object as [other].
  NSException.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSException] that wraps the given raw object pointer.
  NSException.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSException].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSException);
  }

  /// exceptionWithName:reason:userInfo:
  static NSException exceptionWithName_reason_userInfo_(
      objc.NSString name, objc.NSString? reason, objc.NSDictionary? userInfo) {
    final _ret = _objc_msgSend_213(
        _class_NSException,
        _sel_exceptionWithName_reason_userInfo_,
        name.pointer,
        reason?.pointer ?? ffi.nullptr,
        userInfo?.pointer ?? ffi.nullptr);
    return NSException.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithName:reason:userInfo:
  NSException initWithName_reason_userInfo_(objc.NSString aName,
      objc.NSString? aReason, objc.NSDictionary? aUserInfo) {
    final _ret = _objc_msgSend_214(
        this.pointer,
        _sel_initWithName_reason_userInfo_,
        aName.pointer,
        aReason?.pointer ?? ffi.nullptr,
        aUserInfo?.pointer ?? ffi.nullptr);
    return NSException.castFromPointer(_ret, retain: true, release: true);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_11(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// reason
  objc.NSString? get reason {
    final _ret = _objc_msgSend_20(this.pointer, _sel_reason);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// userInfo
  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_84(this.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// callStackReturnAddresses
  objc.NSArray get callStackReturnAddresses {
    final _ret = _objc_msgSend_33(this.pointer, _sel_callStackReturnAddresses);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// callStackSymbols
  objc.NSArray get callStackSymbols {
    final _ret = _objc_msgSend_33(this.pointer, _sel_callStackSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// raise
  void raise() {
    _objc_msgSend_7(this.pointer, _sel_raise);
  }

  /// raise:format:
  static void raise_format_(objc.NSString name, objc.NSString format) {
    _objc_msgSend_215(
        _class_NSException, _sel_raise_format_, name.pointer, format.pointer);
  }

  /// raise:format:arguments:
  static void raise_format_arguments_(
      objc.NSString name, objc.NSString format, ffi.Pointer<ffi.Char> argList) {
    _objc_msgSend_216(_class_NSException, _sel_raise_format_arguments_,
        name.pointer, format.pointer, argList);
  }

  /// init
  NSException init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSException.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSException new1() {
    final _ret = _objc_msgSend_19(_class_NSException, _sel_new);
    return NSException.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSException allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSException, _sel_allocWithZone_, zone);
    return NSException.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSException alloc() {
    final _ret = _objc_msgSend_19(_class_NSException, _sel_alloc);
    return NSException.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSException,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSException,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSException, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSException, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSException,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSException,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSException,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSException, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSException, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSException = objc.getClass("NSException");
late final _sel_exceptionWithName_reason_userInfo_ =
    objc.registerName("exceptionWithName:reason:userInfo:");
final _objc_msgSend_213 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithName_reason_userInfo_ =
    objc.registerName("initWithName:reason:userInfo:");
final _objc_msgSend_214 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_reason = objc.registerName("reason");
late final _sel_callStackReturnAddresses =
    objc.registerName("callStackReturnAddresses");
late final _sel_callStackSymbols = objc.registerName("callStackSymbols");
late final _sel_raise = objc.registerName("raise");
late final _sel_raise_format_ = objc.registerName("raise:format:");
final _objc_msgSend_215 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_raise_format_arguments_ =
    objc.registerName("raise:format:arguments:");
final _objc_msgSend_216 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Char>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Char>)>();

/// NSRunLoop
class NSRunLoop extends objc.NSObject {
  NSRunLoop._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSRunLoop] that points to the same underlying object as [other].
  NSRunLoop.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSRunLoop] that wraps the given raw object pointer.
  NSRunLoop.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSRunLoop].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSRunLoop);
  }

  /// currentRunLoop
  static NSRunLoop getCurrentRunLoop() {
    final _ret = _objc_msgSend_217(_class_NSRunLoop, _sel_currentRunLoop);
    return NSRunLoop.castFromPointer(_ret, retain: true, release: true);
  }

  /// mainRunLoop
  static NSRunLoop getMainRunLoop() {
    final _ret = _objc_msgSend_217(_class_NSRunLoop, _sel_mainRunLoop);
    return NSRunLoop.castFromPointer(_ret, retain: true, release: true);
  }

  /// currentMode
  objc.NSString? get currentMode {
    final _ret = _objc_msgSend_20(this.pointer, _sel_currentMode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// getCFRunLoop
  ffi.Pointer<__CFRunLoop> getCFRunLoop() {
    return _objc_msgSend_218(this.pointer, _sel_getCFRunLoop);
  }

  /// addTimer:forMode:
  void addTimer_forMode_(NSTimer timer, objc.NSString mode) {
    _objc_msgSend_227(
        this.pointer, _sel_addTimer_forMode_, timer.pointer, mode.pointer);
  }

  /// addPort:forMode:
  void addPort_forMode_(NSPort aPort, objc.NSString mode) {
    _objc_msgSend_256(
        this.pointer, _sel_addPort_forMode_, aPort.pointer, mode.pointer);
  }

  /// removePort:forMode:
  void removePort_forMode_(NSPort aPort, objc.NSString mode) {
    _objc_msgSend_256(
        this.pointer, _sel_removePort_forMode_, aPort.pointer, mode.pointer);
  }

  /// limitDateForMode:
  objc.NSDate? limitDateForMode_(objc.NSString mode) {
    final _ret =
        _objc_msgSend_105(this.pointer, _sel_limitDateForMode_, mode.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// acceptInputForMode:beforeDate:
  void acceptInputForMode_beforeDate_(
      objc.NSString mode, objc.NSDate limitDate) {
    _objc_msgSend_257(this.pointer, _sel_acceptInputForMode_beforeDate_,
        mode.pointer, limitDate.pointer);
  }

  /// run
  void run() {
    _objc_msgSend_7(this.pointer, _sel_run);
  }

  /// runUntilDate:
  void runUntilDate_(objc.NSDate limitDate) {
    _objc_msgSend_258(this.pointer, _sel_runUntilDate_, limitDate.pointer);
  }

  /// runMode:beforeDate:
  bool runMode_beforeDate_(objc.NSString mode, objc.NSDate limitDate) {
    return _objc_msgSend_259(this.pointer, _sel_runMode_beforeDate_,
        mode.pointer, limitDate.pointer);
  }

  /// configureAsServer
  void configureAsServer() {
    _objc_msgSend_7(this.pointer, _sel_configureAsServer);
  }

  /// performInModes:block:
  void performInModes_block_(
      objc.NSArray modes, objc.ObjCBlock<ffi.Void Function()> block) {
    _objc_msgSend_260(
        this.pointer, _sel_performInModes_block_, modes.pointer, block.pointer);
  }

  /// performBlock:
  void performBlock_(objc.ObjCBlock<ffi.Void Function()> block) {
    _objc_msgSend_261(this.pointer, _sel_performBlock_, block.pointer);
  }

  /// performSelector:target:argument:order:modes:
  void performSelector_target_argument_order_modes_(
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase target,
      objc.ObjCObjectBase? arg,
      int order,
      objc.NSArray modes) {
    _objc_msgSend_262(
        this.pointer,
        _sel_performSelector_target_argument_order_modes_,
        aSelector,
        target.pointer,
        arg?.pointer ?? ffi.nullptr,
        order,
        modes.pointer);
  }

  /// cancelPerformSelector:target:argument:
  void cancelPerformSelector_target_argument_(
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase target,
      objc.ObjCObjectBase? arg) {
    _objc_msgSend_263(this.pointer, _sel_cancelPerformSelector_target_argument_,
        aSelector, target.pointer, arg?.pointer ?? ffi.nullptr);
  }

  /// cancelPerformSelectorsWithTarget:
  void cancelPerformSelectorsWithTarget_(objc.ObjCObjectBase target) {
    _objc_msgSend_27(
        this.pointer, _sel_cancelPerformSelectorsWithTarget_, target.pointer);
  }

  /// init
  NSRunLoop init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSRunLoop.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSRunLoop new1() {
    final _ret = _objc_msgSend_19(_class_NSRunLoop, _sel_new);
    return NSRunLoop.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSRunLoop allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSRunLoop, _sel_allocWithZone_, zone);
    return NSRunLoop.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSRunLoop alloc() {
    final _ret = _objc_msgSend_19(_class_NSRunLoop, _sel_alloc);
    return NSRunLoop.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSRunLoop,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSRunLoop,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSRunLoop, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSRunLoop, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSRunLoop,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSRunLoop,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSRunLoop,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSRunLoop, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSRunLoop, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSRunLoop = objc.getClass("NSRunLoop");
late final _sel_currentRunLoop = objc.registerName("currentRunLoop");
final _objc_msgSend_217 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mainRunLoop = objc.registerName("mainRunLoop");
late final _sel_currentMode = objc.registerName("currentMode");

final class __CFRunLoop extends ffi.Opaque {}

late final _sel_getCFRunLoop = objc.registerName("getCFRunLoop");
final _objc_msgSend_218 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<__CFRunLoop> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<__CFRunLoop> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSTimer
class NSTimer extends objc.NSObject {
  NSTimer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSTimer] that points to the same underlying object as [other].
  NSTimer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSTimer] that wraps the given raw object pointer.
  NSTimer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSTimer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSTimer);
  }

  /// timerWithTimeInterval:invocation:repeats:
  static NSTimer timerWithTimeInterval_invocation_repeats_(
      double ti, objc.NSInvocation invocation, bool yesOrNo) {
    final _ret = _objc_msgSend_219(
        _class_NSTimer,
        _sel_timerWithTimeInterval_invocation_repeats_,
        ti,
        invocation.pointer,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// scheduledTimerWithTimeInterval:invocation:repeats:
  static NSTimer scheduledTimerWithTimeInterval_invocation_repeats_(
      double ti, objc.NSInvocation invocation, bool yesOrNo) {
    final _ret = _objc_msgSend_219(
        _class_NSTimer,
        _sel_scheduledTimerWithTimeInterval_invocation_repeats_,
        ti,
        invocation.pointer,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// timerWithTimeInterval:target:selector:userInfo:repeats:
  static NSTimer timerWithTimeInterval_target_selector_userInfo_repeats_(
      double ti,
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? userInfo,
      bool yesOrNo) {
    final _ret = _objc_msgSend_220(
        _class_NSTimer,
        _sel_timerWithTimeInterval_target_selector_userInfo_repeats_,
        ti,
        aTarget.pointer,
        aSelector,
        userInfo?.pointer ?? ffi.nullptr,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
  static NSTimer
      scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
          double ti,
          objc.ObjCObjectBase aTarget,
          ffi.Pointer<objc.ObjCSelector> aSelector,
          objc.ObjCObjectBase? userInfo,
          bool yesOrNo) {
    final _ret = _objc_msgSend_220(
        _class_NSTimer,
        _sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_,
        ti,
        aTarget.pointer,
        aSelector,
        userInfo?.pointer ?? ffi.nullptr,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// timerWithTimeInterval:repeats:block:
  static NSTimer timerWithTimeInterval_repeats_block_(double interval,
      bool repeats, objc.ObjCBlock<ffi.Void Function(NSTimer)> block) {
    final _ret = _objc_msgSend_221(
        _class_NSTimer,
        _sel_timerWithTimeInterval_repeats_block_,
        interval,
        repeats,
        block.pointer);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// scheduledTimerWithTimeInterval:repeats:block:
  static NSTimer scheduledTimerWithTimeInterval_repeats_block_(double interval,
      bool repeats, objc.ObjCBlock<ffi.Void Function(NSTimer)> block) {
    final _ret = _objc_msgSend_221(
        _class_NSTimer,
        _sel_scheduledTimerWithTimeInterval_repeats_block_,
        interval,
        repeats,
        block.pointer);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFireDate:interval:repeats:block:
  NSTimer initWithFireDate_interval_repeats_block_(
      objc.NSDate date,
      double interval,
      bool repeats,
      objc.ObjCBlock<ffi.Void Function(NSTimer)> block) {
    final _ret = _objc_msgSend_222(
        this.pointer,
        _sel_initWithFireDate_interval_repeats_block_,
        date.pointer,
        interval,
        repeats,
        block.pointer);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFireDate:interval:target:selector:userInfo:repeats:
  NSTimer initWithFireDate_interval_target_selector_userInfo_repeats_(
      objc.NSDate date,
      double ti,
      objc.ObjCObjectBase t,
      ffi.Pointer<objc.ObjCSelector> s,
      objc.ObjCObjectBase? ui,
      bool rep) {
    final _ret = _objc_msgSend_223(
        this.pointer,
        _sel_initWithFireDate_interval_target_selector_userInfo_repeats_,
        date.pointer,
        ti,
        t.pointer,
        s,
        ui?.pointer ?? ffi.nullptr,
        rep);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// fire
  void fire() {
    _objc_msgSend_7(this.pointer, _sel_fire);
  }

  /// fireDate
  objc.NSDate get fireDate {
    final _ret = _objc_msgSend_224(this.pointer, _sel_fireDate);
    return objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFireDate:
  set fireDate(objc.NSDate value) {
    return _objc_msgSend_225(this.pointer, _sel_setFireDate_, value.pointer);
  }

  /// timeInterval
  double get timeInterval {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_timeInterval)
        : _objc_msgSend_18(this.pointer, _sel_timeInterval);
  }

  /// tolerance
  double get tolerance {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_tolerance)
        : _objc_msgSend_18(this.pointer, _sel_tolerance);
  }

  /// setTolerance:
  set tolerance(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setTolerance_, value);
  }

  /// invalidate
  void invalidate() {
    _objc_msgSend_7(this.pointer, _sel_invalidate);
  }

  /// isValid
  bool get valid {
    return _objc_msgSend_13(this.pointer, _sel_isValid);
  }

  /// userInfo
  objc.ObjCObjectBase? get userInfo {
    final _ret = _objc_msgSend_85(this.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// init
  NSTimer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSTimer new1() {
    final _ret = _objc_msgSend_19(_class_NSTimer, _sel_new);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSTimer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSTimer, _sel_allocWithZone_, zone);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSTimer alloc() {
    final _ret = _objc_msgSend_19(_class_NSTimer, _sel_alloc);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSTimer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSTimer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSTimer, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSTimer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSTimer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSTimer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSTimer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSTimer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_NSTimer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSTimer = objc.getClass("NSTimer");
late final _sel_timerWithTimeInterval_invocation_repeats_ =
    objc.registerName("timerWithTimeInterval:invocation:repeats:");
final _objc_msgSend_219 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_scheduledTimerWithTimeInterval_invocation_repeats_ =
    objc.registerName("scheduledTimerWithTimeInterval:invocation:repeats:");
late final _sel_timerWithTimeInterval_target_selector_userInfo_repeats_ = objc
    .registerName("timerWithTimeInterval:target:selector:userInfo:repeats:");
final _objc_msgSend_220 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_ =
    objc.registerName(
        "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
void _ObjCBlock_ffiVoid_NSTimer_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSTimer_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(NSTimer)>`.
abstract final class ObjCBlock_ffiVoid_NSTimer {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(NSTimer)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(NSTimer)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(NSTimer)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(NSTimer)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                                  ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSTimer_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(NSTimer)> fromFunction(
          void Function(NSTimer) fn) =>
      objc.ObjCBlock<ffi.Void Function(NSTimer)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_NSTimer_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(NSTimer.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(NSTimer)> listener(
      void Function(NSTimer) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSTimer_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) =>
            fn(NSTimer.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSTimer(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(NSTimer)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(NSTimer)>`.
extension ObjCBlock_ffiVoid_NSTimer_CallExtension
    on objc.ObjCBlock<ffi.Void Function(NSTimer)> {
  void call(NSTimer arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_timerWithTimeInterval_repeats_block_ =
    objc.registerName("timerWithTimeInterval:repeats:block:");
final _objc_msgSend_221 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_scheduledTimerWithTimeInterval_repeats_block_ =
    objc.registerName("scheduledTimerWithTimeInterval:repeats:block:");
late final _sel_initWithFireDate_interval_repeats_block_ =
    objc.registerName("initWithFireDate:interval:repeats:block:");
final _objc_msgSend_222 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_initWithFireDate_interval_target_selector_userInfo_repeats_ =
    objc.registerName(
        "initWithFireDate:interval:target:selector:userInfo:repeats:");
final _objc_msgSend_223 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_fire = objc.registerName("fire");
late final _sel_fireDate = objc.registerName("fireDate");
final _objc_msgSend_224 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFireDate_ = objc.registerName("setFireDate:");
final _objc_msgSend_225 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_timeInterval = objc.registerName("timeInterval");
late final _sel_tolerance = objc.registerName("tolerance");
late final _sel_setTolerance_ = objc.registerName("setTolerance:");
final _objc_msgSend_226 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_invalidate = objc.registerName("invalidate");
late final _sel_isValid = objc.registerName("isValid");
late final _sel_addTimer_forMode_ = objc.registerName("addTimer:forMode:");
final _objc_msgSend_227 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSPort
class NSPort extends objc.NSObject {
  NSPort._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPort] that points to the same underlying object as [other].
  NSPort.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPort] that wraps the given raw object pointer.
  NSPort.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPort].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSPort);
  }

  /// port
  static NSPort port() {
    final _ret = _objc_msgSend_228(_class_NSPort, _sel_port);
    return NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  /// invalidate
  void invalidate() {
    _objc_msgSend_7(this.pointer, _sel_invalidate);
  }

  /// isValid
  bool get valid {
    return _objc_msgSend_13(this.pointer, _sel_isValid);
  }

  /// setDelegate:
  void setDelegate_(objc.ObjCObjectBase? anObject) {
    _objc_msgSend_229(
        this.pointer, _sel_setDelegate_, anObject?.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? delegate() {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// scheduleInRunLoop:forMode:
  void scheduleInRunLoop_forMode_(NSRunLoop runLoop, objc.NSString mode) {
    _objc_msgSend_230(this.pointer, _sel_scheduleInRunLoop_forMode_,
        runLoop.pointer, mode.pointer);
  }

  /// removeFromRunLoop:forMode:
  void removeFromRunLoop_forMode_(NSRunLoop runLoop, objc.NSString mode) {
    _objc_msgSend_230(this.pointer, _sel_removeFromRunLoop_forMode_,
        runLoop.pointer, mode.pointer);
  }

  /// reservedSpaceLength
  int get reservedSpaceLength {
    return _objc_msgSend_57(this.pointer, _sel_reservedSpaceLength);
  }

  /// sendBeforeDate:components:from:reserved:
  bool sendBeforeDate_components_from_reserved_(
      objc.NSDate limitDate,
      objc.NSMutableArray? components,
      NSPort? receivePort,
      int headerSpaceReserved) {
    return _objc_msgSend_231(
        this.pointer,
        _sel_sendBeforeDate_components_from_reserved_,
        limitDate.pointer,
        components?.pointer ?? ffi.nullptr,
        receivePort?.pointer ?? ffi.nullptr,
        headerSpaceReserved);
  }

  /// sendBeforeDate:msgid:components:from:reserved:
  bool sendBeforeDate_msgid_components_from_reserved_(
      objc.NSDate limitDate,
      int msgID,
      objc.NSMutableArray? components,
      NSPort? receivePort,
      int headerSpaceReserved) {
    return _objc_msgSend_232(
        this.pointer,
        _sel_sendBeforeDate_msgid_components_from_reserved_,
        limitDate.pointer,
        msgID,
        components?.pointer ?? ffi.nullptr,
        receivePort?.pointer ?? ffi.nullptr,
        headerSpaceReserved);
  }

  /// addConnection:toRunLoop:forMode:
  void addConnection_toRunLoop_forMode_(
      NSConnection conn, NSRunLoop runLoop, objc.NSString mode) {
    _objc_msgSend_255(this.pointer, _sel_addConnection_toRunLoop_forMode_,
        conn.pointer, runLoop.pointer, mode.pointer);
  }

  /// removeConnection:fromRunLoop:forMode:
  void removeConnection_fromRunLoop_forMode_(
      NSConnection conn, NSRunLoop runLoop, objc.NSString mode) {
    _objc_msgSend_255(this.pointer, _sel_removeConnection_fromRunLoop_forMode_,
        conn.pointer, runLoop.pointer, mode.pointer);
  }

  /// init
  NSPort init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSPort new1() {
    final _ret = _objc_msgSend_19(_class_NSPort, _sel_new);
    return NSPort.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSPort allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSPort, _sel_allocWithZone_, zone);
    return NSPort.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSPort alloc() {
    final _ret = _objc_msgSend_19(_class_NSPort, _sel_alloc);
    return NSPort.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSPort,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSPort,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSPort, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSPort, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSPort,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        _class_NSPort, _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSPort,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSPort, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_NSPort, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSPort = objc.getClass("NSPort");
late final _sel_port = objc.registerName("port");
final _objc_msgSend_228 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDelegate_ = objc.registerName("setDelegate:");
final _objc_msgSend_229 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_delegate = objc.registerName("delegate");
late final _sel_scheduleInRunLoop_forMode_ =
    objc.registerName("scheduleInRunLoop:forMode:");
final _objc_msgSend_230 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeFromRunLoop_forMode_ =
    objc.registerName("removeFromRunLoop:forMode:");
late final _sel_reservedSpaceLength = objc.registerName("reservedSpaceLength");
late final _sel_sendBeforeDate_components_from_reserved_ =
    objc.registerName("sendBeforeDate:components:from:reserved:");
final _objc_msgSend_231 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_sendBeforeDate_msgid_components_from_reserved_ =
    objc.registerName("sendBeforeDate:msgid:components:from:reserved:");
final _objc_msgSend_232 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

/// NSConnection
class NSConnection extends objc.NSObject {
  NSConnection._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSConnection] that points to the same underlying object as [other].
  NSConnection.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSConnection] that wraps the given raw object pointer.
  NSConnection.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSConnection].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSConnection);
  }

  /// statistics
  objc.NSDictionary get statistics {
    final _ret = _objc_msgSend_123(this.pointer, _sel_statistics);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// allConnections
  static objc.NSArray allConnections() {
    final _ret = _objc_msgSend_33(_class_NSConnection, _sel_allConnections);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultConnection
  static NSConnection defaultConnection() {
    final _ret = _objc_msgSend_233(_class_NSConnection, _sel_defaultConnection);
    return NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// connectionWithRegisteredName:host:
  static NSConnection? connectionWithRegisteredName_host_(
      objc.NSString name, objc.NSString? hostName) {
    final _ret = _objc_msgSend_234(
        _class_NSConnection,
        _sel_connectionWithRegisteredName_host_,
        name.pointer,
        hostName?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// connectionWithRegisteredName:host:usingNameServer:
  static NSConnection? connectionWithRegisteredName_host_usingNameServer_(
      objc.NSString name, objc.NSString? hostName, NSPortNameServer server) {
    final _ret = _objc_msgSend_239(
        _class_NSConnection,
        _sel_connectionWithRegisteredName_host_usingNameServer_,
        name.pointer,
        hostName?.pointer ?? ffi.nullptr,
        server.pointer);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// rootProxyForConnectionWithRegisteredName:host:
  static NSDistantObject? rootProxyForConnectionWithRegisteredName_host_(
      objc.NSString name, objc.NSString? hostName) {
    final _ret = _objc_msgSend_245(
        _class_NSConnection,
        _sel_rootProxyForConnectionWithRegisteredName_host_,
        name.pointer,
        hostName?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// rootProxyForConnectionWithRegisteredName:host:usingNameServer:
  static NSDistantObject?
      rootProxyForConnectionWithRegisteredName_host_usingNameServer_(
          objc.NSString name,
          objc.NSString? hostName,
          NSPortNameServer server) {
    final _ret = _objc_msgSend_246(
        _class_NSConnection,
        _sel_rootProxyForConnectionWithRegisteredName_host_usingNameServer_,
        name.pointer,
        hostName?.pointer ?? ffi.nullptr,
        server.pointer);
    return _ret.address == 0
        ? null
        : NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// serviceConnectionWithName:rootObject:usingNameServer:
  static NSConnection? serviceConnectionWithName_rootObject_usingNameServer_(
      objc.NSString name, objc.ObjCObjectBase root, NSPortNameServer server) {
    final _ret = _objc_msgSend_247(
        _class_NSConnection,
        _sel_serviceConnectionWithName_rootObject_usingNameServer_,
        name.pointer,
        root.pointer,
        server.pointer);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// serviceConnectionWithName:rootObject:
  static NSConnection? serviceConnectionWithName_rootObject_(
      objc.NSString name, objc.ObjCObjectBase root) {
    final _ret = _objc_msgSend_248(_class_NSConnection,
        _sel_serviceConnectionWithName_rootObject_, name.pointer, root.pointer);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// requestTimeout
  double get requestTimeout {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_requestTimeout)
        : _objc_msgSend_18(this.pointer, _sel_requestTimeout);
  }

  /// setRequestTimeout:
  set requestTimeout(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setRequestTimeout_, value);
  }

  /// replyTimeout
  double get replyTimeout {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_replyTimeout)
        : _objc_msgSend_18(this.pointer, _sel_replyTimeout);
  }

  /// setReplyTimeout:
  set replyTimeout(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setReplyTimeout_, value);
  }

  /// rootObject
  objc.ObjCObjectBase? get rootObject {
    final _ret = _objc_msgSend_85(this.pointer, _sel_rootObject);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setRootObject:
  set rootObject(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setRootObject_, value?.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// independentConversationQueueing
  bool get independentConversationQueueing {
    return _objc_msgSend_13(this.pointer, _sel_independentConversationQueueing);
  }

  /// setIndependentConversationQueueing:
  set independentConversationQueueing(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setIndependentConversationQueueing_, value);
  }

  /// isValid
  bool get valid {
    return _objc_msgSend_13(this.pointer, _sel_isValid);
  }

  /// rootProxy
  NSDistantObject get rootProxy {
    final _ret = _objc_msgSend_249(this.pointer, _sel_rootProxy);
    return NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// invalidate
  void invalidate() {
    _objc_msgSend_7(this.pointer, _sel_invalidate);
  }

  /// addRequestMode:
  void addRequestMode_(objc.NSString rmode) {
    _objc_msgSend_110(this.pointer, _sel_addRequestMode_, rmode.pointer);
  }

  /// removeRequestMode:
  void removeRequestMode_(objc.NSString rmode) {
    _objc_msgSend_110(this.pointer, _sel_removeRequestMode_, rmode.pointer);
  }

  /// requestModes
  objc.NSArray get requestModes {
    final _ret = _objc_msgSend_33(this.pointer, _sel_requestModes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// registerName:
  bool registerName_(objc.NSString? name) {
    return _objc_msgSend_250(
        this.pointer, _sel_registerName_, name?.pointer ?? ffi.nullptr);
  }

  /// registerName:withNameServer:
  bool registerName_withNameServer_(
      objc.NSString? name, NSPortNameServer server) {
    return _objc_msgSend_251(this.pointer, _sel_registerName_withNameServer_,
        name?.pointer ?? ffi.nullptr, server.pointer);
  }

  /// connectionWithReceivePort:sendPort:
  static NSConnection? connectionWithReceivePort_sendPort_(
      NSPort? receivePort, NSPort? sendPort) {
    final _ret = _objc_msgSend_252(
        _class_NSConnection,
        _sel_connectionWithReceivePort_sendPort_,
        receivePort?.pointer ?? ffi.nullptr,
        sendPort?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// currentConversation
  static objc.ObjCObjectBase? currentConversation() {
    final _ret =
        _objc_msgSend_85(_class_NSConnection, _sel_currentConversation);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initWithReceivePort:sendPort:
  NSConnection? initWithReceivePort_sendPort_(
      NSPort? receivePort, NSPort? sendPort) {
    final _ret = _objc_msgSend_252(
        this.pointer,
        _sel_initWithReceivePort_sendPort_,
        receivePort?.pointer ?? ffi.nullptr,
        sendPort?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// sendPort
  NSPort get sendPort {
    final _ret = _objc_msgSend_228(this.pointer, _sel_sendPort);
    return NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  /// receivePort
  NSPort get receivePort {
    final _ret = _objc_msgSend_228(this.pointer, _sel_receivePort);
    return NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  /// enableMultipleThreads
  void enableMultipleThreads() {
    _objc_msgSend_7(this.pointer, _sel_enableMultipleThreads);
  }

  /// multipleThreadsEnabled
  bool get multipleThreadsEnabled {
    return _objc_msgSend_13(this.pointer, _sel_multipleThreadsEnabled);
  }

  /// addRunLoop:
  void addRunLoop_(NSRunLoop runloop) {
    _objc_msgSend_253(this.pointer, _sel_addRunLoop_, runloop.pointer);
  }

  /// removeRunLoop:
  void removeRunLoop_(NSRunLoop runloop) {
    _objc_msgSend_253(this.pointer, _sel_removeRunLoop_, runloop.pointer);
  }

  /// runInNewThread
  void runInNewThread() {
    _objc_msgSend_7(this.pointer, _sel_runInNewThread);
  }

  /// remoteObjects
  objc.NSArray get remoteObjects {
    final _ret = _objc_msgSend_33(this.pointer, _sel_remoteObjects);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// localObjects
  objc.NSArray get localObjects {
    final _ret = _objc_msgSend_33(this.pointer, _sel_localObjects);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// dispatchWithComponents:
  void dispatchWithComponents_(objc.NSArray components) {
    _objc_msgSend_254(
        this.pointer, _sel_dispatchWithComponents_, components.pointer);
  }

  /// init
  NSConnection init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSConnection new1() {
    final _ret = _objc_msgSend_19(_class_NSConnection, _sel_new);
    return NSConnection.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSConnection allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSConnection, _sel_allocWithZone_, zone);
    return NSConnection.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSConnection alloc() {
    final _ret = _objc_msgSend_19(_class_NSConnection, _sel_alloc);
    return NSConnection.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSConnection,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSConnection,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSConnection, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSConnection, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSConnection,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSConnection,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSConnection,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSConnection, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSConnection, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSConnection = objc.getClass("NSConnection");
late final _sel_statistics = objc.registerName("statistics");
late final _sel_allConnections = objc.registerName("allConnections");
late final _sel_defaultConnection = objc.registerName("defaultConnection");
final _objc_msgSend_233 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_connectionWithRegisteredName_host_ =
    objc.registerName("connectionWithRegisteredName:host:");
final _objc_msgSend_234 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSPortNameServer
class NSPortNameServer extends objc.NSObject {
  NSPortNameServer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPortNameServer] that points to the same underlying object as [other].
  NSPortNameServer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPortNameServer] that wraps the given raw object pointer.
  NSPortNameServer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPortNameServer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSPortNameServer);
  }

  /// systemDefaultPortNameServer
  static NSPortNameServer systemDefaultPortNameServer() {
    final _ret = _objc_msgSend_235(
        _class_NSPortNameServer, _sel_systemDefaultPortNameServer);
    return NSPortNameServer.castFromPointer(_ret, retain: true, release: true);
  }

  /// portForName:
  NSPort? portForName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_236(this.pointer, _sel_portForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  /// portForName:host:
  NSPort? portForName_host_(objc.NSString name, objc.NSString? host) {
    final _ret = _objc_msgSend_237(this.pointer, _sel_portForName_host_,
        name.pointer, host?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  /// registerPort:name:
  bool registerPort_name_(NSPort port, objc.NSString name) {
    return _objc_msgSend_238(
        this.pointer, _sel_registerPort_name_, port.pointer, name.pointer);
  }

  /// removePortForName:
  bool removePortForName_(objc.NSString name) {
    return _objc_msgSend_31(
        this.pointer, _sel_removePortForName_, name.pointer);
  }

  /// init
  NSPortNameServer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSPortNameServer.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSPortNameServer new1() {
    final _ret = _objc_msgSend_19(_class_NSPortNameServer, _sel_new);
    return NSPortNameServer.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSPortNameServer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSPortNameServer, _sel_allocWithZone_, zone);
    return NSPortNameServer.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSPortNameServer alloc() {
    final _ret = _objc_msgSend_19(_class_NSPortNameServer, _sel_alloc);
    return NSPortNameServer.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSPortNameServer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSPortNameServer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSPortNameServer, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSPortNameServer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSPortNameServer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSPortNameServer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSPortNameServer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSPortNameServer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSPortNameServer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSPortNameServer = objc.getClass("NSPortNameServer");
late final _sel_systemDefaultPortNameServer =
    objc.registerName("systemDefaultPortNameServer");
final _objc_msgSend_235 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_portForName_ = objc.registerName("portForName:");
final _objc_msgSend_236 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_portForName_host_ = objc.registerName("portForName:host:");
final _objc_msgSend_237 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_registerPort_name_ = objc.registerName("registerPort:name:");
final _objc_msgSend_238 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removePortForName_ = objc.registerName("removePortForName:");
late final _sel_connectionWithRegisteredName_host_usingNameServer_ =
    objc.registerName("connectionWithRegisteredName:host:usingNameServer:");
final _objc_msgSend_239 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSDistantObject
class NSDistantObject extends objc.NSProxy {
  NSDistantObject._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDistantObject] that points to the same underlying object as [other].
  NSDistantObject.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDistantObject] that wraps the given raw object pointer.
  NSDistantObject.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDistantObject].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSDistantObject);
  }

  /// proxyWithTarget:connection:
  static objc.ObjCObjectBase? proxyWithTarget_connection_(
      objc.ObjCObjectBase target, NSConnection connection) {
    final _ret = _objc_msgSend_240(_class_NSDistantObject,
        _sel_proxyWithTarget_connection_, target.pointer, connection.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initWithTarget:connection:
  NSDistantObject? initWithTarget_connection_(
      objc.ObjCObjectBase target, NSConnection connection) {
    final _ret = _objc_msgSend_240(this.pointer,
        _sel_initWithTarget_connection_, target.pointer, connection.pointer);
    return _ret.address == 0
        ? null
        : NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// proxyWithLocal:connection:
  static objc.ObjCObjectBase proxyWithLocal_connection_(
      objc.ObjCObjectBase target, NSConnection connection) {
    final _ret = _objc_msgSend_241(_class_NSDistantObject,
        _sel_proxyWithLocal_connection_, target.pointer, connection.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initWithLocal:connection:
  NSDistantObject initWithLocal_connection_(
      objc.ObjCObjectBase target, NSConnection connection) {
    final _ret = _objc_msgSend_241(this.pointer, _sel_initWithLocal_connection_,
        target.pointer, connection.pointer);
    return NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCoder:
  NSDistantObject? initWithCoder_(objc.NSCoder inCoder) {
    final _ret =
        _objc_msgSend_242(this.pointer, _sel_initWithCoder_, inCoder.pointer);
    return _ret.address == 0
        ? null
        : NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// setProtocolForProxy:
  void setProtocolForProxy_(objc.Protocol? proto) {
    _objc_msgSend_243(
        this.pointer, _sel_setProtocolForProxy_, proto?.pointer ?? ffi.nullptr);
  }

  /// connectionForProxy
  NSConnection get connectionForProxy {
    final _ret = _objc_msgSend_233(this.pointer, _sel_connectionForProxy);
    return NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// alloc
  static objc.ObjCObjectBase alloc() {
    final _ret = _objc_msgSend_19(_class_NSDistantObject, _sel_alloc);
    return objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  /// respondsToSelector:
  static bool respondsToSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    return _objc_msgSend_244(
        _class_NSDistantObject, _sel_respondsToSelector_, aSelector);
  }
}

late final _class_NSDistantObject = objc.getClass("NSDistantObject");
late final _sel_proxyWithTarget_connection_ =
    objc.registerName("proxyWithTarget:connection:");
final _objc_msgSend_240 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithTarget_connection_ =
    objc.registerName("initWithTarget:connection:");
late final _sel_proxyWithLocal_connection_ =
    objc.registerName("proxyWithLocal:connection:");
final _objc_msgSend_241 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithLocal_connection_ =
    objc.registerName("initWithLocal:connection:");
late final _sel_initWithCoder_ = objc.registerName("initWithCoder:");
final _objc_msgSend_242 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setProtocolForProxy_ =
    objc.registerName("setProtocolForProxy:");
final _objc_msgSend_243 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_connectionForProxy = objc.registerName("connectionForProxy");
late final _sel_respondsToSelector_ = objc.registerName("respondsToSelector:");
final _objc_msgSend_244 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_rootProxyForConnectionWithRegisteredName_host_ =
    objc.registerName("rootProxyForConnectionWithRegisteredName:host:");
final _objc_msgSend_245 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_rootProxyForConnectionWithRegisteredName_host_usingNameServer_ =
    objc.registerName(
        "rootProxyForConnectionWithRegisteredName:host:usingNameServer:");
final _objc_msgSend_246 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_serviceConnectionWithName_rootObject_usingNameServer_ =
    objc.registerName("serviceConnectionWithName:rootObject:usingNameServer:");
final _objc_msgSend_247 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_serviceConnectionWithName_rootObject_ =
    objc.registerName("serviceConnectionWithName:rootObject:");
final _objc_msgSend_248 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_requestTimeout = objc.registerName("requestTimeout");
late final _sel_setRequestTimeout_ = objc.registerName("setRequestTimeout:");
late final _sel_replyTimeout = objc.registerName("replyTimeout");
late final _sel_setReplyTimeout_ = objc.registerName("setReplyTimeout:");
late final _sel_rootObject = objc.registerName("rootObject");
late final _sel_setRootObject_ = objc.registerName("setRootObject:");
late final _sel_independentConversationQueueing =
    objc.registerName("independentConversationQueueing");
late final _sel_setIndependentConversationQueueing_ =
    objc.registerName("setIndependentConversationQueueing:");
late final _sel_rootProxy = objc.registerName("rootProxy");
final _objc_msgSend_249 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_addRequestMode_ = objc.registerName("addRequestMode:");
late final _sel_removeRequestMode_ = objc.registerName("removeRequestMode:");
late final _sel_requestModes = objc.registerName("requestModes");
late final _sel_registerName_ = objc.registerName("registerName:");
final _objc_msgSend_250 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_registerName_withNameServer_ =
    objc.registerName("registerName:withNameServer:");
final _objc_msgSend_251 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_connectionWithReceivePort_sendPort_ =
    objc.registerName("connectionWithReceivePort:sendPort:");
final _objc_msgSend_252 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_currentConversation = objc.registerName("currentConversation");
late final _sel_initWithReceivePort_sendPort_ =
    objc.registerName("initWithReceivePort:sendPort:");
late final _sel_sendPort = objc.registerName("sendPort");
late final _sel_receivePort = objc.registerName("receivePort");
late final _sel_enableMultipleThreads =
    objc.registerName("enableMultipleThreads");
late final _sel_multipleThreadsEnabled =
    objc.registerName("multipleThreadsEnabled");
late final _sel_addRunLoop_ = objc.registerName("addRunLoop:");
final _objc_msgSend_253 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeRunLoop_ = objc.registerName("removeRunLoop:");
late final _sel_runInNewThread = objc.registerName("runInNewThread");
late final _sel_remoteObjects = objc.registerName("remoteObjects");
late final _sel_localObjects = objc.registerName("localObjects");
late final _sel_dispatchWithComponents_ =
    objc.registerName("dispatchWithComponents:");
final _objc_msgSend_254 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addConnection_toRunLoop_forMode_ =
    objc.registerName("addConnection:toRunLoop:forMode:");
final _objc_msgSend_255 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeConnection_fromRunLoop_forMode_ =
    objc.registerName("removeConnection:fromRunLoop:forMode:");
late final _sel_addPort_forMode_ = objc.registerName("addPort:forMode:");
final _objc_msgSend_256 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removePort_forMode_ = objc.registerName("removePort:forMode:");
late final _sel_limitDateForMode_ = objc.registerName("limitDateForMode:");
late final _sel_acceptInputForMode_beforeDate_ =
    objc.registerName("acceptInputForMode:beforeDate:");
final _objc_msgSend_257 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_run = objc.registerName("run");
late final _sel_runUntilDate_ = objc.registerName("runUntilDate:");
final _objc_msgSend_258 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_runMode_beforeDate_ = objc.registerName("runMode:beforeDate:");
final _objc_msgSend_259 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_configureAsServer = objc.registerName("configureAsServer");
late final _sel_performInModes_block_ =
    objc.registerName("performInModes:block:");
final _objc_msgSend_260 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_performBlock_ = objc.registerName("performBlock:");
final _objc_msgSend_261 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_performSelector_target_argument_order_modes_ =
    objc.registerName("performSelector:target:argument:order:modes:");
final _objc_msgSend_262 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cancelPerformSelector_target_argument_ =
    objc.registerName("cancelPerformSelector:target:argument:");
final _objc_msgSend_263 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cancelPerformSelectorsWithTarget_ =
    objc.registerName("cancelPerformSelectorsWithTarget:");

/// NSFileHandle
class NSFileHandle extends objc.NSObject {
  NSFileHandle._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSFileHandle] that points to the same underlying object as [other].
  NSFileHandle.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSFileHandle] that wraps the given raw object pointer.
  NSFileHandle.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSFileHandle].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSFileHandle);
  }

  /// availableData
  objc.NSData get availableData {
    final _ret = _objc_msgSend_115(this.pointer, _sel_availableData);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFileDescriptor:closeOnDealloc:
  NSFileHandle initWithFileDescriptor_closeOnDealloc_(int fd, bool closeopt) {
    final _ret = _objc_msgSend_264(this.pointer,
        _sel_initWithFileDescriptor_closeOnDealloc_, fd, closeopt);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCoder:
  NSFileHandle? initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_242(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// readDataToEndOfFileAndReturnError:
  objc.NSData? readDataToEndOfFileAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_265(
        this.pointer, _sel_readDataToEndOfFileAndReturnError_, error);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// readDataUpToLength:error:
  objc.NSData? readDataUpToLength_error_(
      int length, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_266(
        this.pointer, _sel_readDataUpToLength_error_, length, error);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// writeData:error:
  bool writeData_error_(
      objc.NSData data, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_267(
        this.pointer, _sel_writeData_error_, data.pointer, error);
  }

  /// getOffset:error:
  bool getOffset_error_(ffi.Pointer<ffi.UnsignedLongLong> offsetInFile,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_268(
        this.pointer, _sel_getOffset_error_, offsetInFile, error);
  }

  /// seekToEndReturningOffset:error:
  bool seekToEndReturningOffset_error_(
      ffi.Pointer<ffi.UnsignedLongLong> offsetInFile,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_268(this.pointer, _sel_seekToEndReturningOffset_error_,
        offsetInFile, error);
  }

  /// seekToOffset:error:
  bool seekToOffset_error_(
      int offset, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_269(
        this.pointer, _sel_seekToOffset_error_, offset, error);
  }

  /// truncateAtOffset:error:
  bool truncateAtOffset_error_(
      int offset, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_269(
        this.pointer, _sel_truncateAtOffset_error_, offset, error);
  }

  /// synchronizeAndReturnError:
  bool synchronizeAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_39(
        this.pointer, _sel_synchronizeAndReturnError_, error);
  }

  /// closeAndReturnError:
  bool closeAndReturnError_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_39(this.pointer, _sel_closeAndReturnError_, error);
  }

  /// fileHandleWithStandardInput
  static NSFileHandle getFileHandleWithStandardInput() {
    final _ret = _objc_msgSend_270(
        _class_NSFileHandle, _sel_fileHandleWithStandardInput);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileHandleWithStandardOutput
  static NSFileHandle getFileHandleWithStandardOutput() {
    final _ret = _objc_msgSend_270(
        _class_NSFileHandle, _sel_fileHandleWithStandardOutput);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileHandleWithStandardError
  static NSFileHandle getFileHandleWithStandardError() {
    final _ret = _objc_msgSend_270(
        _class_NSFileHandle, _sel_fileHandleWithStandardError);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileHandleWithNullDevice
  static NSFileHandle getFileHandleWithNullDevice() {
    final _ret =
        _objc_msgSend_270(_class_NSFileHandle, _sel_fileHandleWithNullDevice);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileHandleForReadingAtPath:
  static NSFileHandle? fileHandleForReadingAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_35(
        _class_NSFileHandle, _sel_fileHandleForReadingAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileHandleForWritingAtPath:
  static NSFileHandle? fileHandleForWritingAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_35(
        _class_NSFileHandle, _sel_fileHandleForWritingAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileHandleForUpdatingAtPath:
  static NSFileHandle? fileHandleForUpdatingAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_35(
        _class_NSFileHandle, _sel_fileHandleForUpdatingAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileHandleForReadingFromURL:error:
  static NSFileHandle? fileHandleForReadingFromURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_271(_class_NSFileHandle,
        _sel_fileHandleForReadingFromURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileHandleForWritingToURL:error:
  static NSFileHandle? fileHandleForWritingToURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_271(_class_NSFileHandle,
        _sel_fileHandleForWritingToURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileHandleForUpdatingURL:error:
  static NSFileHandle? fileHandleForUpdatingURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_271(_class_NSFileHandle,
        _sel_fileHandleForUpdatingURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// readInBackgroundAndNotifyForModes:
  void readInBackgroundAndNotifyForModes_(objc.NSArray? modes) {
    _objc_msgSend_272(this.pointer, _sel_readInBackgroundAndNotifyForModes_,
        modes?.pointer ?? ffi.nullptr);
  }

  /// readInBackgroundAndNotify
  void readInBackgroundAndNotify() {
    _objc_msgSend_7(this.pointer, _sel_readInBackgroundAndNotify);
  }

  /// readToEndOfFileInBackgroundAndNotifyForModes:
  void readToEndOfFileInBackgroundAndNotifyForModes_(objc.NSArray? modes) {
    _objc_msgSend_272(
        this.pointer,
        _sel_readToEndOfFileInBackgroundAndNotifyForModes_,
        modes?.pointer ?? ffi.nullptr);
  }

  /// readToEndOfFileInBackgroundAndNotify
  void readToEndOfFileInBackgroundAndNotify() {
    _objc_msgSend_7(this.pointer, _sel_readToEndOfFileInBackgroundAndNotify);
  }

  /// acceptConnectionInBackgroundAndNotifyForModes:
  void acceptConnectionInBackgroundAndNotifyForModes_(objc.NSArray? modes) {
    _objc_msgSend_272(
        this.pointer,
        _sel_acceptConnectionInBackgroundAndNotifyForModes_,
        modes?.pointer ?? ffi.nullptr);
  }

  /// acceptConnectionInBackgroundAndNotify
  void acceptConnectionInBackgroundAndNotify() {
    _objc_msgSend_7(this.pointer, _sel_acceptConnectionInBackgroundAndNotify);
  }

  /// waitForDataInBackgroundAndNotifyForModes:
  void waitForDataInBackgroundAndNotifyForModes_(objc.NSArray? modes) {
    _objc_msgSend_272(
        this.pointer,
        _sel_waitForDataInBackgroundAndNotifyForModes_,
        modes?.pointer ?? ffi.nullptr);
  }

  /// waitForDataInBackgroundAndNotify
  void waitForDataInBackgroundAndNotify() {
    _objc_msgSend_7(this.pointer, _sel_waitForDataInBackgroundAndNotify);
  }

  /// readabilityHandler
  objc.ObjCBlock<ffi.Void Function(NSFileHandle)>? get readabilityHandler {
    final _ret = _objc_msgSend_273(this.pointer, _sel_readabilityHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_NSFileHandle.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setReadabilityHandler:
  set readabilityHandler(
      objc.ObjCBlock<ffi.Void Function(NSFileHandle)>? value) {
    return _objc_msgSend_274(this.pointer, _sel_setReadabilityHandler_,
        value?.pointer ?? ffi.nullptr);
  }

  /// writeabilityHandler
  objc.ObjCBlock<ffi.Void Function(NSFileHandle)>? get writeabilityHandler {
    final _ret = _objc_msgSend_273(this.pointer, _sel_writeabilityHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_NSFileHandle.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setWriteabilityHandler:
  set writeabilityHandler(
      objc.ObjCBlock<ffi.Void Function(NSFileHandle)>? value) {
    return _objc_msgSend_274(this.pointer, _sel_setWriteabilityHandler_,
        value?.pointer ?? ffi.nullptr);
  }

  /// initWithFileDescriptor:
  NSFileHandle initWithFileDescriptor_(int fd) {
    final _ret =
        _objc_msgSend_275(this.pointer, _sel_initWithFileDescriptor_, fd);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileDescriptor
  int get fileDescriptor {
    return _objc_msgSend_276(this.pointer, _sel_fileDescriptor);
  }

  /// readDataToEndOfFile
  objc.NSData readDataToEndOfFile() {
    final _ret = _objc_msgSend_115(this.pointer, _sel_readDataToEndOfFile);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// readDataOfLength:
  objc.NSData readDataOfLength_(int length) {
    final _ret =
        _objc_msgSend_277(this.pointer, _sel_readDataOfLength_, length);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// writeData:
  void writeData_(objc.NSData data) {
    _objc_msgSend_278(this.pointer, _sel_writeData_, data.pointer);
  }

  /// offsetInFile
  int get offsetInFile {
    return _objc_msgSend_279(this.pointer, _sel_offsetInFile);
  }

  /// seekToEndOfFile
  int seekToEndOfFile() {
    return _objc_msgSend_279(this.pointer, _sel_seekToEndOfFile);
  }

  /// seekToFileOffset:
  void seekToFileOffset_(int offset) {
    _objc_msgSend_280(this.pointer, _sel_seekToFileOffset_, offset);
  }

  /// truncateFileAtOffset:
  void truncateFileAtOffset_(int offset) {
    _objc_msgSend_280(this.pointer, _sel_truncateFileAtOffset_, offset);
  }

  /// synchronizeFile
  void synchronizeFile() {
    _objc_msgSend_7(this.pointer, _sel_synchronizeFile);
  }

  /// closeFile
  void closeFile() {
    _objc_msgSend_7(this.pointer, _sel_closeFile);
  }

  /// init
  NSFileHandle init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSFileHandle new1() {
    final _ret = _objc_msgSend_19(_class_NSFileHandle, _sel_new);
    return NSFileHandle.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSFileHandle allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSFileHandle, _sel_allocWithZone_, zone);
    return NSFileHandle.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSFileHandle alloc() {
    final _ret = _objc_msgSend_19(_class_NSFileHandle, _sel_alloc);
    return NSFileHandle.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSFileHandle,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSFileHandle,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSFileHandle, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSFileHandle, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSFileHandle,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSFileHandle,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSFileHandle,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSFileHandle, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSFileHandle, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSFileHandle = objc.getClass("NSFileHandle");
late final _sel_availableData = objc.registerName("availableData");
late final _sel_initWithFileDescriptor_closeOnDealloc_ =
    objc.registerName("initWithFileDescriptor:closeOnDealloc:");
final _objc_msgSend_264 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int, ffi.Bool)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, bool)>();
late final _sel_readDataToEndOfFileAndReturnError_ =
    objc.registerName("readDataToEndOfFileAndReturnError:");
final _objc_msgSend_265 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_readDataUpToLength_error_ =
    objc.registerName("readDataUpToLength:error:");
final _objc_msgSend_266 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_writeData_error_ = objc.registerName("writeData:error:");
final _objc_msgSend_267 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_getOffset_error_ = objc.registerName("getOffset:error:");
final _objc_msgSend_268 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLongLong>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLongLong>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_seekToEndReturningOffset_error_ =
    objc.registerName("seekToEndReturningOffset:error:");
late final _sel_seekToOffset_error_ = objc.registerName("seekToOffset:error:");
final _objc_msgSend_269 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLongLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_truncateAtOffset_error_ =
    objc.registerName("truncateAtOffset:error:");
late final _sel_synchronizeAndReturnError_ =
    objc.registerName("synchronizeAndReturnError:");
late final _sel_closeAndReturnError_ =
    objc.registerName("closeAndReturnError:");
late final _sel_fileHandleWithStandardInput =
    objc.registerName("fileHandleWithStandardInput");
final _objc_msgSend_270 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_fileHandleWithStandardOutput =
    objc.registerName("fileHandleWithStandardOutput");
late final _sel_fileHandleWithStandardError =
    objc.registerName("fileHandleWithStandardError");
late final _sel_fileHandleWithNullDevice =
    objc.registerName("fileHandleWithNullDevice");
late final _sel_fileHandleForReadingAtPath_ =
    objc.registerName("fileHandleForReadingAtPath:");
late final _sel_fileHandleForWritingAtPath_ =
    objc.registerName("fileHandleForWritingAtPath:");
late final _sel_fileHandleForUpdatingAtPath_ =
    objc.registerName("fileHandleForUpdatingAtPath:");
late final _sel_fileHandleForReadingFromURL_error_ =
    objc.registerName("fileHandleForReadingFromURL:error:");
final _objc_msgSend_271 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_fileHandleForWritingToURL_error_ =
    objc.registerName("fileHandleForWritingToURL:error:");
late final _sel_fileHandleForUpdatingURL_error_ =
    objc.registerName("fileHandleForUpdatingURL:error:");
late final _sel_readInBackgroundAndNotifyForModes_ =
    objc.registerName("readInBackgroundAndNotifyForModes:");
final _objc_msgSend_272 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_readInBackgroundAndNotify =
    objc.registerName("readInBackgroundAndNotify");
late final _sel_readToEndOfFileInBackgroundAndNotifyForModes_ =
    objc.registerName("readToEndOfFileInBackgroundAndNotifyForModes:");
late final _sel_readToEndOfFileInBackgroundAndNotify =
    objc.registerName("readToEndOfFileInBackgroundAndNotify");
late final _sel_acceptConnectionInBackgroundAndNotifyForModes_ =
    objc.registerName("acceptConnectionInBackgroundAndNotifyForModes:");
late final _sel_acceptConnectionInBackgroundAndNotify =
    objc.registerName("acceptConnectionInBackgroundAndNotify");
late final _sel_waitForDataInBackgroundAndNotifyForModes_ =
    objc.registerName("waitForDataInBackgroundAndNotifyForModes:");
late final _sel_waitForDataInBackgroundAndNotify =
    objc.registerName("waitForDataInBackgroundAndNotify");
void _ObjCBlock_ffiVoid_NSFileHandle_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSFileHandle_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(NSFileHandle)>`.
abstract final class ObjCBlock_ffiVoid_NSFileHandle {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(NSFileHandle)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(NSFileHandle)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(NSFileHandle)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(NSFileHandle)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                                  ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSFileHandle_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(NSFileHandle)> fromFunction(
          void Function(NSFileHandle) fn) =>
      objc.ObjCBlock<ffi.Void Function(NSFileHandle)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_NSFileHandle_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(NSFileHandle.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(NSFileHandle)> listener(
      void Function(NSFileHandle) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSFileHandle_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(
            NSFileHandle.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSFileHandle(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(NSFileHandle)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(NSFileHandle)>`.
extension ObjCBlock_ffiVoid_NSFileHandle_CallExtension
    on objc.ObjCBlock<ffi.Void Function(NSFileHandle)> {
  void call(NSFileHandle arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_readabilityHandler = objc.registerName("readabilityHandler");
final _objc_msgSend_273 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setReadabilityHandler_ =
    objc.registerName("setReadabilityHandler:");
final _objc_msgSend_274 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_writeabilityHandler = objc.registerName("writeabilityHandler");
late final _sel_setWriteabilityHandler_ =
    objc.registerName("setWriteabilityHandler:");
late final _sel_initWithFileDescriptor_ =
    objc.registerName("initWithFileDescriptor:");
final _objc_msgSend_275 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_fileDescriptor = objc.registerName("fileDescriptor");
final _objc_msgSend_276 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_readDataToEndOfFile = objc.registerName("readDataToEndOfFile");
late final _sel_readDataOfLength_ = objc.registerName("readDataOfLength:");
final _objc_msgSend_277 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_writeData_ = objc.registerName("writeData:");
final _objc_msgSend_278 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_offsetInFile = objc.registerName("offsetInFile");
final _objc_msgSend_279 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLongLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_seekToEndOfFile = objc.registerName("seekToEndOfFile");
late final _sel_seekToFileOffset_ = objc.registerName("seekToFileOffset:");
final _objc_msgSend_280 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLongLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_truncateFileAtOffset_ =
    objc.registerName("truncateFileAtOffset:");
late final _sel_synchronizeFile = objc.registerName("synchronizeFile");
late final _sel_closeFile = objc.registerName("closeFile");

/// NSFileManager
class NSFileManager extends objc.NSObject {
  NSFileManager._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSFileManager] that points to the same underlying object as [other].
  NSFileManager.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSFileManager] that wraps the given raw object pointer.
  NSFileManager.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSFileManager].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSFileManager);
  }

  /// defaultManager
  static NSFileManager getDefaultManager() {
    final _ret = _objc_msgSend_281(_class_NSFileManager, _sel_defaultManager);
    return NSFileManager.castFromPointer(_ret, retain: true, release: true);
  }

  /// mountedVolumeURLsIncludingResourceValuesForKeys:options:
  objc.NSArray? mountedVolumeURLsIncludingResourceValuesForKeys_options_(
      objc.NSArray? propertyKeys, NSVolumeEnumerationOptions options) {
    final _ret = _objc_msgSend_282(
        this.pointer,
        _sel_mountedVolumeURLsIncludingResourceValuesForKeys_options_,
        propertyKeys?.pointer ?? ffi.nullptr,
        options.value);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// unmountVolumeAtURL:options:completionHandler:
  void unmountVolumeAtURL_options_completionHandler_(
      objc.NSURL url,
      NSFileManagerUnmountOptions mask,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_283(
        this.pointer,
        _sel_unmountVolumeAtURL_options_completionHandler_,
        url.pointer,
        mask.value,
        completionHandler.pointer);
  }

  /// contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
  objc.NSArray?
      contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(
          objc.NSURL url,
          objc.NSArray? keys,
          NSDirectoryEnumerationOptions mask,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_284(
        this.pointer,
        _sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_,
        url.pointer,
        keys?.pointer ?? ffi.nullptr,
        mask.value,
        error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLsForDirectory:inDomains:
  objc.NSArray URLsForDirectory_inDomains_(
      NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask) {
    final _ret = _objc_msgSend_285(this.pointer,
        _sel_URLsForDirectory_inDomains_, directory.value, domainMask.value);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForDirectory:inDomain:appropriateForURL:create:error:
  objc.NSURL? URLForDirectory_inDomain_appropriateForURL_create_error_(
      NSSearchPathDirectory directory,
      NSSearchPathDomainMask domain,
      objc.NSURL? url,
      bool shouldCreate,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_286(
        this.pointer,
        _sel_URLForDirectory_inDomain_appropriateForURL_create_error_,
        directory.value,
        domain.value,
        url?.pointer ?? ffi.nullptr,
        shouldCreate,
        error);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// getRelationship:ofDirectoryAtURL:toItemAtURL:error:
  bool getRelationship_ofDirectoryAtURL_toItemAtURL_error_(
      ffi.Pointer<ffi.UnsignedLong> outRelationship,
      objc.NSURL directoryURL,
      objc.NSURL otherURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_287(
        this.pointer,
        _sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_,
        outRelationship,
        directoryURL.pointer,
        otherURL.pointer,
        error);
  }

  /// getRelationship:ofDirectory:inDomain:toItemAtURL:error:
  bool getRelationship_ofDirectory_inDomain_toItemAtURL_error_(
      ffi.Pointer<ffi.UnsignedLong> outRelationship,
      NSSearchPathDirectory directory,
      NSSearchPathDomainMask domainMask,
      objc.NSURL url,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_288(
        this.pointer,
        _sel_getRelationship_ofDirectory_inDomain_toItemAtURL_error_,
        outRelationship,
        directory.value,
        domainMask.value,
        url.pointer,
        error);
  }

  /// createDirectoryAtURL:withIntermediateDirectories:attributes:error:
  bool createDirectoryAtURL_withIntermediateDirectories_attributes_error_(
      objc.NSURL url,
      bool createIntermediates,
      objc.NSDictionary? attributes,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_289(
        this.pointer,
        _sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_,
        url.pointer,
        createIntermediates,
        attributes?.pointer ?? ffi.nullptr,
        error);
  }

  /// createSymbolicLinkAtURL:withDestinationURL:error:
  bool createSymbolicLinkAtURL_withDestinationURL_error_(objc.NSURL url,
      objc.NSURL destURL, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_290(
        this.pointer,
        _sel_createSymbolicLinkAtURL_withDestinationURL_error_,
        url.pointer,
        destURL.pointer,
        error);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// setAttributes:ofItemAtPath:error:
  bool setAttributes_ofItemAtPath_error_(objc.NSDictionary attributes,
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_291(
        this.pointer,
        _sel_setAttributes_ofItemAtPath_error_,
        attributes.pointer,
        path.pointer,
        error);
  }

  /// createDirectoryAtPath:withIntermediateDirectories:attributes:error:
  bool createDirectoryAtPath_withIntermediateDirectories_attributes_error_(
      objc.NSString path,
      bool createIntermediates,
      objc.NSDictionary? attributes,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_292(
        this.pointer,
        _sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_,
        path.pointer,
        createIntermediates,
        attributes?.pointer ?? ffi.nullptr,
        error);
  }

  /// contentsOfDirectoryAtPath:error:
  objc.NSArray? contentsOfDirectoryAtPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_293(this.pointer,
        _sel_contentsOfDirectoryAtPath_error_, path.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// subpathsOfDirectoryAtPath:error:
  objc.NSArray? subpathsOfDirectoryAtPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_293(this.pointer,
        _sel_subpathsOfDirectoryAtPath_error_, path.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// attributesOfItemAtPath:error:
  objc.NSDictionary? attributesOfItemAtPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_294(
        this.pointer, _sel_attributesOfItemAtPath_error_, path.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// attributesOfFileSystemForPath:error:
  objc.NSDictionary? attributesOfFileSystemForPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_294(this.pointer,
        _sel_attributesOfFileSystemForPath_error_, path.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// createSymbolicLinkAtPath:withDestinationPath:error:
  bool createSymbolicLinkAtPath_withDestinationPath_error_(objc.NSString path,
      objc.NSString destPath, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_295(
        this.pointer,
        _sel_createSymbolicLinkAtPath_withDestinationPath_error_,
        path.pointer,
        destPath.pointer,
        error);
  }

  /// destinationOfSymbolicLinkAtPath:error:
  objc.NSString? destinationOfSymbolicLinkAtPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_296(this.pointer,
        _sel_destinationOfSymbolicLinkAtPath_error_, path.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// copyItemAtPath:toPath:error:
  bool copyItemAtPath_toPath_error_(objc.NSString srcPath,
      objc.NSString dstPath, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_295(this.pointer, _sel_copyItemAtPath_toPath_error_,
        srcPath.pointer, dstPath.pointer, error);
  }

  /// moveItemAtPath:toPath:error:
  bool moveItemAtPath_toPath_error_(objc.NSString srcPath,
      objc.NSString dstPath, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_295(this.pointer, _sel_moveItemAtPath_toPath_error_,
        srcPath.pointer, dstPath.pointer, error);
  }

  /// linkItemAtPath:toPath:error:
  bool linkItemAtPath_toPath_error_(objc.NSString srcPath,
      objc.NSString dstPath, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_295(this.pointer, _sel_linkItemAtPath_toPath_error_,
        srcPath.pointer, dstPath.pointer, error);
  }

  /// removeItemAtPath:error:
  bool removeItemAtPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_297(
        this.pointer, _sel_removeItemAtPath_error_, path.pointer, error);
  }

  /// copyItemAtURL:toURL:error:
  bool copyItemAtURL_toURL_error_(objc.NSURL srcURL, objc.NSURL dstURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_290(this.pointer, _sel_copyItemAtURL_toURL_error_,
        srcURL.pointer, dstURL.pointer, error);
  }

  /// moveItemAtURL:toURL:error:
  bool moveItemAtURL_toURL_error_(objc.NSURL srcURL, objc.NSURL dstURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_290(this.pointer, _sel_moveItemAtURL_toURL_error_,
        srcURL.pointer, dstURL.pointer, error);
  }

  /// linkItemAtURL:toURL:error:
  bool linkItemAtURL_toURL_error_(objc.NSURL srcURL, objc.NSURL dstURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_290(this.pointer, _sel_linkItemAtURL_toURL_error_,
        srcURL.pointer, dstURL.pointer, error);
  }

  /// removeItemAtURL:error:
  bool removeItemAtURL_error_(
      objc.NSURL URL, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_298(
        this.pointer, _sel_removeItemAtURL_error_, URL.pointer, error);
  }

  /// trashItemAtURL:resultingItemURL:error:
  bool trashItemAtURL_resultingItemURL_error_(
      objc.NSURL url,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outResultingURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_299(
        this.pointer,
        _sel_trashItemAtURL_resultingItemURL_error_,
        url.pointer,
        outResultingURL,
        error);
  }

  /// fileAttributesAtPath:traverseLink:
  objc.NSDictionary? fileAttributesAtPath_traverseLink_(
      objc.NSString path, bool yorn) {
    final _ret = _objc_msgSend_300(this.pointer,
        _sel_fileAttributesAtPath_traverseLink_, path.pointer, yorn);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// changeFileAttributes:atPath:
  bool changeFileAttributes_atPath_(
      objc.NSDictionary attributes, objc.NSString path) {
    return _objc_msgSend_301(this.pointer, _sel_changeFileAttributes_atPath_,
        attributes.pointer, path.pointer);
  }

  /// directoryContentsAtPath:
  objc.NSArray? directoryContentsAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_302(
        this.pointer, _sel_directoryContentsAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileSystemAttributesAtPath:
  objc.NSDictionary? fileSystemAttributesAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_303(
        this.pointer, _sel_fileSystemAttributesAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathContentOfSymbolicLinkAtPath:
  objc.NSString? pathContentOfSymbolicLinkAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_42(
        this.pointer, _sel_pathContentOfSymbolicLinkAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// createSymbolicLinkAtPath:pathContent:
  bool createSymbolicLinkAtPath_pathContent_(
      objc.NSString path, objc.NSString otherpath) {
    return _objc_msgSend_304(
        this.pointer,
        _sel_createSymbolicLinkAtPath_pathContent_,
        path.pointer,
        otherpath.pointer);
  }

  /// createDirectoryAtPath:attributes:
  bool createDirectoryAtPath_attributes_(
      objc.NSString path, objc.NSDictionary attributes) {
    return _objc_msgSend_305(
        this.pointer,
        _sel_createDirectoryAtPath_attributes_,
        path.pointer,
        attributes.pointer);
  }

  /// linkPath:toPath:handler:
  bool linkPath_toPath_handler_(
      objc.NSString src, objc.NSString dest, objc.ObjCObjectBase? handler) {
    return _objc_msgSend_306(this.pointer, _sel_linkPath_toPath_handler_,
        src.pointer, dest.pointer, handler?.pointer ?? ffi.nullptr);
  }

  /// copyPath:toPath:handler:
  bool copyPath_toPath_handler_(
      objc.NSString src, objc.NSString dest, objc.ObjCObjectBase? handler) {
    return _objc_msgSend_306(this.pointer, _sel_copyPath_toPath_handler_,
        src.pointer, dest.pointer, handler?.pointer ?? ffi.nullptr);
  }

  /// movePath:toPath:handler:
  bool movePath_toPath_handler_(
      objc.NSString src, objc.NSString dest, objc.ObjCObjectBase? handler) {
    return _objc_msgSend_306(this.pointer, _sel_movePath_toPath_handler_,
        src.pointer, dest.pointer, handler?.pointer ?? ffi.nullptr);
  }

  /// removeFileAtPath:handler:
  bool removeFileAtPath_handler_(
      objc.NSString path, objc.ObjCObjectBase? handler) {
    return _objc_msgSend_307(this.pointer, _sel_removeFileAtPath_handler_,
        path.pointer, handler?.pointer ?? ffi.nullptr);
  }

  /// currentDirectoryPath
  objc.NSString get currentDirectoryPath {
    final _ret = _objc_msgSend_11(this.pointer, _sel_currentDirectoryPath);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// changeCurrentDirectoryPath:
  bool changeCurrentDirectoryPath_(objc.NSString path) {
    return _objc_msgSend_31(
        this.pointer, _sel_changeCurrentDirectoryPath_, path.pointer);
  }

  /// fileExistsAtPath:
  bool fileExistsAtPath_(objc.NSString path) {
    return _objc_msgSend_31(this.pointer, _sel_fileExistsAtPath_, path.pointer);
  }

  /// fileExistsAtPath:isDirectory:
  bool fileExistsAtPath_isDirectory_(
      objc.NSString path, ffi.Pointer<ffi.Bool> isDirectory) {
    return _objc_msgSend_308(this.pointer, _sel_fileExistsAtPath_isDirectory_,
        path.pointer, isDirectory);
  }

  /// isReadableFileAtPath:
  bool isReadableFileAtPath_(objc.NSString path) {
    return _objc_msgSend_31(
        this.pointer, _sel_isReadableFileAtPath_, path.pointer);
  }

  /// isWritableFileAtPath:
  bool isWritableFileAtPath_(objc.NSString path) {
    return _objc_msgSend_31(
        this.pointer, _sel_isWritableFileAtPath_, path.pointer);
  }

  /// isExecutableFileAtPath:
  bool isExecutableFileAtPath_(objc.NSString path) {
    return _objc_msgSend_31(
        this.pointer, _sel_isExecutableFileAtPath_, path.pointer);
  }

  /// isDeletableFileAtPath:
  bool isDeletableFileAtPath_(objc.NSString path) {
    return _objc_msgSend_31(
        this.pointer, _sel_isDeletableFileAtPath_, path.pointer);
  }

  /// contentsEqualAtPath:andPath:
  bool contentsEqualAtPath_andPath_(objc.NSString path1, objc.NSString path2) {
    return _objc_msgSend_304(this.pointer, _sel_contentsEqualAtPath_andPath_,
        path1.pointer, path2.pointer);
  }

  /// displayNameAtPath:
  objc.NSString displayNameAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_309(this.pointer, _sel_displayNameAtPath_, path.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// componentsToDisplayForPath:
  objc.NSArray? componentsToDisplayForPath_(objc.NSString path) {
    final _ret = _objc_msgSend_302(
        this.pointer, _sel_componentsToDisplayForPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// enumeratorAtPath:
  objc.ObjCObjectBase? enumeratorAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_enumeratorAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:
  objc.ObjCObjectBase?
      enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(
          objc.NSURL url,
          objc.NSArray? keys,
          NSDirectoryEnumerationOptions mask,
          objc.ObjCBlock<ffi.Bool Function(objc.NSURL, objc.NSError)>?
              handler) {
    final _ret = _objc_msgSend_310(
        this.pointer,
        _sel_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_,
        url.pointer,
        keys?.pointer ?? ffi.nullptr,
        mask.value,
        handler?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// subpathsAtPath:
  objc.NSArray? subpathsAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_302(this.pointer, _sel_subpathsAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// contentsAtPath:
  objc.NSData? contentsAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_311(this.pointer, _sel_contentsAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// createFileAtPath:contents:attributes:
  bool createFileAtPath_contents_attributes_(
      objc.NSString path, objc.NSData? data, objc.NSDictionary? attr) {
    return _objc_msgSend_312(
        this.pointer,
        _sel_createFileAtPath_contents_attributes_,
        path.pointer,
        data?.pointer ?? ffi.nullptr,
        attr?.pointer ?? ffi.nullptr);
  }

  /// fileSystemRepresentationWithPath:
  ffi.Pointer<ffi.Char> fileSystemRepresentationWithPath_(objc.NSString path) {
    return _objc_msgSend_313(
        this.pointer, _sel_fileSystemRepresentationWithPath_, path.pointer);
  }

  /// stringWithFileSystemRepresentation:length:
  objc.NSString stringWithFileSystemRepresentation_length_(
      ffi.Pointer<ffi.Char> str, int len) {
    final _ret = _objc_msgSend_314(this.pointer,
        _sel_stringWithFileSystemRepresentation_length_, str, len);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:
  bool
      replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(
          objc.NSURL originalItemURL,
          objc.NSURL newItemURL,
          objc.NSString? backupItemName,
          NSFileManagerItemReplacementOptions options,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> resultingURL,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_315(
        this.pointer,
        _sel_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_,
        originalItemURL.pointer,
        newItemURL.pointer,
        backupItemName?.pointer ?? ffi.nullptr,
        options.value,
        resultingURL,
        error);
  }

  /// setUbiquitous:itemAtURL:destinationURL:error:
  bool setUbiquitous_itemAtURL_destinationURL_error_(
      bool flag,
      objc.NSURL url,
      objc.NSURL destinationURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_316(
        this.pointer,
        _sel_setUbiquitous_itemAtURL_destinationURL_error_,
        flag,
        url.pointer,
        destinationURL.pointer,
        error);
  }

  /// isUbiquitousItemAtURL:
  bool isUbiquitousItemAtURL_(objc.NSURL url) {
    return _objc_msgSend_317(
        this.pointer, _sel_isUbiquitousItemAtURL_, url.pointer);
  }

  /// startDownloadingUbiquitousItemAtURL:error:
  bool startDownloadingUbiquitousItemAtURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_298(this.pointer,
        _sel_startDownloadingUbiquitousItemAtURL_error_, url.pointer, error);
  }

  /// evictUbiquitousItemAtURL:error:
  bool evictUbiquitousItemAtURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_298(
        this.pointer, _sel_evictUbiquitousItemAtURL_error_, url.pointer, error);
  }

  /// URLForUbiquityContainerIdentifier:
  objc.NSURL? URLForUbiquityContainerIdentifier_(
      objc.NSString? containerIdentifier) {
    final _ret = _objc_msgSend_318(
        this.pointer,
        _sel_URLForUbiquityContainerIdentifier_,
        containerIdentifier?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForPublishingUbiquitousItemAtURL:expirationDate:error:
  objc.NSURL? URLForPublishingUbiquitousItemAtURL_expirationDate_error_(
      objc.NSURL url,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outDate,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_319(
        this.pointer,
        _sel_URLForPublishingUbiquitousItemAtURL_expirationDate_error_,
        url.pointer,
        outDate,
        error);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// ubiquityIdentityToken
  objc.ObjCObjectBase? get ubiquityIdentityToken {
    final _ret = _objc_msgSend_85(this.pointer, _sel_ubiquityIdentityToken);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// getFileProviderServicesForItemAtURL:completionHandler:
  void getFileProviderServicesForItemAtURL_completionHandler_(
      objc.NSURL url,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_320(
        this.pointer,
        _sel_getFileProviderServicesForItemAtURL_completionHandler_,
        url.pointer,
        completionHandler.pointer);
  }

  /// containerURLForSecurityApplicationGroupIdentifier:
  objc.NSURL? containerURLForSecurityApplicationGroupIdentifier_(
      objc.NSString groupIdentifier) {
    final _ret = _objc_msgSend_41(
        this.pointer,
        _sel_containerURLForSecurityApplicationGroupIdentifier_,
        groupIdentifier.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// homeDirectoryForCurrentUser
  objc.NSURL get homeDirectoryForCurrentUser {
    final _ret =
        _objc_msgSend_40(this.pointer, _sel_homeDirectoryForCurrentUser);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// temporaryDirectory
  objc.NSURL get temporaryDirectory {
    final _ret = _objc_msgSend_40(this.pointer, _sel_temporaryDirectory);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// homeDirectoryForUser:
  objc.NSURL? homeDirectoryForUser_(objc.NSString userName) {
    final _ret = _objc_msgSend_41(
        this.pointer, _sel_homeDirectoryForUser_, userName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSFileManager init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSFileManager.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSFileManager new1() {
    final _ret = _objc_msgSend_19(_class_NSFileManager, _sel_new);
    return NSFileManager.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSFileManager allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSFileManager, _sel_allocWithZone_, zone);
    return NSFileManager.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSFileManager alloc() {
    final _ret = _objc_msgSend_19(_class_NSFileManager, _sel_alloc);
    return NSFileManager.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSFileManager,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSFileManager,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSFileManager, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSFileManager, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSFileManager,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSFileManager,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSFileManager,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSFileManager, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSFileManager, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSFileManager = objc.getClass("NSFileManager");
late final _sel_defaultManager = objc.registerName("defaultManager");
final _objc_msgSend_281 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum NSVolumeEnumerationOptions {
  NSVolumeEnumerationSkipHiddenVolumes(2),
  NSVolumeEnumerationProduceFileReferenceURLs(4);

  final int value;
  const NSVolumeEnumerationOptions(this.value);

  static NSVolumeEnumerationOptions fromValue(int value) => switch (value) {
        2 => NSVolumeEnumerationSkipHiddenVolumes,
        4 => NSVolumeEnumerationProduceFileReferenceURLs,
        _ => throw ArgumentError(
            "Unknown value for NSVolumeEnumerationOptions: $value"),
      };
}

late final _sel_mountedVolumeURLsIncludingResourceValuesForKeys_options_ = objc
    .registerName("mountedVolumeURLsIncludingResourceValuesForKeys:options:");
final _objc_msgSend_282 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

enum NSFileManagerUnmountOptions {
  NSFileManagerUnmountAllPartitionsAndEjectDisk(1),
  NSFileManagerUnmountWithoutUI(2);

  final int value;
  const NSFileManagerUnmountOptions(this.value);

  static NSFileManagerUnmountOptions fromValue(int value) => switch (value) {
        1 => NSFileManagerUnmountAllPartitionsAndEjectDisk,
        2 => NSFileManagerUnmountWithoutUI,
        _ => throw ArgumentError(
            "Unknown value for NSFileManagerUnmountOptions: $value"),
      };
}

void _ObjCBlock_ffiVoid_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSError_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(arg0.address == 0 ? null : objc.NSError.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
            ? null
            : objc.NSError.castFromPointer(arg0,
                retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSError_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSError? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_unmountVolumeAtURL_options_completionHandler_ =
    objc.registerName("unmountVolumeAtURL:options:completionHandler:");
final _objc_msgSend_283 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

enum NSDirectoryEnumerationOptions {
  NSDirectoryEnumerationSkipsSubdirectoryDescendants(1),
  NSDirectoryEnumerationSkipsPackageDescendants(2),
  NSDirectoryEnumerationSkipsHiddenFiles(4),
  NSDirectoryEnumerationIncludesDirectoriesPostOrder(8),
  NSDirectoryEnumerationProducesRelativePathURLs(16);

  final int value;
  const NSDirectoryEnumerationOptions(this.value);

  static NSDirectoryEnumerationOptions fromValue(int value) => switch (value) {
        1 => NSDirectoryEnumerationSkipsSubdirectoryDescendants,
        2 => NSDirectoryEnumerationSkipsPackageDescendants,
        4 => NSDirectoryEnumerationSkipsHiddenFiles,
        8 => NSDirectoryEnumerationIncludesDirectoriesPostOrder,
        16 => NSDirectoryEnumerationProducesRelativePathURLs,
        _ => throw ArgumentError(
            "Unknown value for NSDirectoryEnumerationOptions: $value"),
      };
}

late final _sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_ =
    objc.registerName(
        "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
final _objc_msgSend_284 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

enum NSSearchPathDirectory {
  NSApplicationDirectory(1),
  NSDemoApplicationDirectory(2),
  NSDeveloperApplicationDirectory(3),
  NSAdminApplicationDirectory(4),
  NSLibraryDirectory(5),
  NSDeveloperDirectory(6),
  NSUserDirectory(7),
  NSDocumentationDirectory(8),
  NSDocumentDirectory(9),
  NSCoreServiceDirectory(10),
  NSAutosavedInformationDirectory(11),
  NSDesktopDirectory(12),
  NSCachesDirectory(13),
  NSApplicationSupportDirectory(14),
  NSDownloadsDirectory(15),
  NSInputMethodsDirectory(16),
  NSMoviesDirectory(17),
  NSMusicDirectory(18),
  NSPicturesDirectory(19),
  NSPrinterDescriptionDirectory(20),
  NSSharedPublicDirectory(21),
  NSPreferencePanesDirectory(22),
  NSApplicationScriptsDirectory(23),
  NSItemReplacementDirectory(99),
  NSAllApplicationsDirectory(100),
  NSAllLibrariesDirectory(101),
  NSTrashDirectory(102);

  final int value;
  const NSSearchPathDirectory(this.value);

  static NSSearchPathDirectory fromValue(int value) => switch (value) {
        1 => NSApplicationDirectory,
        2 => NSDemoApplicationDirectory,
        3 => NSDeveloperApplicationDirectory,
        4 => NSAdminApplicationDirectory,
        5 => NSLibraryDirectory,
        6 => NSDeveloperDirectory,
        7 => NSUserDirectory,
        8 => NSDocumentationDirectory,
        9 => NSDocumentDirectory,
        10 => NSCoreServiceDirectory,
        11 => NSAutosavedInformationDirectory,
        12 => NSDesktopDirectory,
        13 => NSCachesDirectory,
        14 => NSApplicationSupportDirectory,
        15 => NSDownloadsDirectory,
        16 => NSInputMethodsDirectory,
        17 => NSMoviesDirectory,
        18 => NSMusicDirectory,
        19 => NSPicturesDirectory,
        20 => NSPrinterDescriptionDirectory,
        21 => NSSharedPublicDirectory,
        22 => NSPreferencePanesDirectory,
        23 => NSApplicationScriptsDirectory,
        99 => NSItemReplacementDirectory,
        100 => NSAllApplicationsDirectory,
        101 => NSAllLibrariesDirectory,
        102 => NSTrashDirectory,
        _ => throw ArgumentError(
            "Unknown value for NSSearchPathDirectory: $value"),
      };
}

enum NSSearchPathDomainMask {
  NSUserDomainMask(1),
  NSLocalDomainMask(2),
  NSNetworkDomainMask(4),
  NSSystemDomainMask(8),
  NSAllDomainsMask(65535);

  final int value;
  const NSSearchPathDomainMask(this.value);

  static NSSearchPathDomainMask fromValue(int value) => switch (value) {
        1 => NSUserDomainMask,
        2 => NSLocalDomainMask,
        4 => NSNetworkDomainMask,
        8 => NSSystemDomainMask,
        65535 => NSAllDomainsMask,
        _ => throw ArgumentError(
            "Unknown value for NSSearchPathDomainMask: $value"),
      };
}

late final _sel_URLsForDirectory_inDomains_ =
    objc.registerName("URLsForDirectory:inDomains:");
final _objc_msgSend_285 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_URLForDirectory_inDomain_appropriateForURL_create_error_ = objc
    .registerName("URLForDirectory:inDomain:appropriateForURL:create:error:");
final _objc_msgSend_286 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

enum NSURLRelationship {
  NSURLRelationshipContains(0),
  NSURLRelationshipSame(1),
  NSURLRelationshipOther(2);

  final int value;
  const NSURLRelationship(this.value);

  static NSURLRelationship fromValue(int value) => switch (value) {
        0 => NSURLRelationshipContains,
        1 => NSURLRelationshipSame,
        2 => NSURLRelationshipOther,
        _ => throw ArgumentError("Unknown value for NSURLRelationship: $value"),
      };
}

late final _sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_ =
    objc.registerName("getRelationship:ofDirectoryAtURL:toItemAtURL:error:");
final _objc_msgSend_287 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLong>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_getRelationship_ofDirectory_inDomain_toItemAtURL_error_ = objc
    .registerName("getRelationship:ofDirectory:inDomain:toItemAtURL:error:");
final _objc_msgSend_288 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLong>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_ =
    objc.registerName(
        "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
final _objc_msgSend_289 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_createSymbolicLinkAtURL_withDestinationURL_error_ =
    objc.registerName("createSymbolicLinkAtURL:withDestinationURL:error:");
final _objc_msgSend_290 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setAttributes_ofItemAtPath_error_ =
    objc.registerName("setAttributes:ofItemAtPath:error:");
final _objc_msgSend_291 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_ =
    objc.registerName(
        "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
final _objc_msgSend_292 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_contentsOfDirectoryAtPath_error_ =
    objc.registerName("contentsOfDirectoryAtPath:error:");
final _objc_msgSend_293 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_subpathsOfDirectoryAtPath_error_ =
    objc.registerName("subpathsOfDirectoryAtPath:error:");
late final _sel_attributesOfItemAtPath_error_ =
    objc.registerName("attributesOfItemAtPath:error:");
final _objc_msgSend_294 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_attributesOfFileSystemForPath_error_ =
    objc.registerName("attributesOfFileSystemForPath:error:");
late final _sel_createSymbolicLinkAtPath_withDestinationPath_error_ =
    objc.registerName("createSymbolicLinkAtPath:withDestinationPath:error:");
final _objc_msgSend_295 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_destinationOfSymbolicLinkAtPath_error_ =
    objc.registerName("destinationOfSymbolicLinkAtPath:error:");
final _objc_msgSend_296 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_copyItemAtPath_toPath_error_ =
    objc.registerName("copyItemAtPath:toPath:error:");
late final _sel_moveItemAtPath_toPath_error_ =
    objc.registerName("moveItemAtPath:toPath:error:");
late final _sel_linkItemAtPath_toPath_error_ =
    objc.registerName("linkItemAtPath:toPath:error:");
late final _sel_removeItemAtPath_error_ =
    objc.registerName("removeItemAtPath:error:");
final _objc_msgSend_297 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_copyItemAtURL_toURL_error_ =
    objc.registerName("copyItemAtURL:toURL:error:");
late final _sel_moveItemAtURL_toURL_error_ =
    objc.registerName("moveItemAtURL:toURL:error:");
late final _sel_linkItemAtURL_toURL_error_ =
    objc.registerName("linkItemAtURL:toURL:error:");
late final _sel_removeItemAtURL_error_ =
    objc.registerName("removeItemAtURL:error:");
final _objc_msgSend_298 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_trashItemAtURL_resultingItemURL_error_ =
    objc.registerName("trashItemAtURL:resultingItemURL:error:");
final _objc_msgSend_299 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_fileAttributesAtPath_traverseLink_ =
    objc.registerName("fileAttributesAtPath:traverseLink:");
final _objc_msgSend_300 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_changeFileAttributes_atPath_ =
    objc.registerName("changeFileAttributes:atPath:");
final _objc_msgSend_301 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_directoryContentsAtPath_ =
    objc.registerName("directoryContentsAtPath:");
final _objc_msgSend_302 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileSystemAttributesAtPath_ =
    objc.registerName("fileSystemAttributesAtPath:");
final _objc_msgSend_303 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathContentOfSymbolicLinkAtPath_ =
    objc.registerName("pathContentOfSymbolicLinkAtPath:");
late final _sel_createSymbolicLinkAtPath_pathContent_ =
    objc.registerName("createSymbolicLinkAtPath:pathContent:");
final _objc_msgSend_304 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_createDirectoryAtPath_attributes_ =
    objc.registerName("createDirectoryAtPath:attributes:");
final _objc_msgSend_305 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_linkPath_toPath_handler_ =
    objc.registerName("linkPath:toPath:handler:");
final _objc_msgSend_306 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_copyPath_toPath_handler_ =
    objc.registerName("copyPath:toPath:handler:");
late final _sel_movePath_toPath_handler_ =
    objc.registerName("movePath:toPath:handler:");
late final _sel_removeFileAtPath_handler_ =
    objc.registerName("removeFileAtPath:handler:");
final _objc_msgSend_307 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_currentDirectoryPath =
    objc.registerName("currentDirectoryPath");
late final _sel_changeCurrentDirectoryPath_ =
    objc.registerName("changeCurrentDirectoryPath:");
late final _sel_fileExistsAtPath_ = objc.registerName("fileExistsAtPath:");
late final _sel_fileExistsAtPath_isDirectory_ =
    objc.registerName("fileExistsAtPath:isDirectory:");
final _objc_msgSend_308 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Bool>)>();
late final _sel_isReadableFileAtPath_ =
    objc.registerName("isReadableFileAtPath:");
late final _sel_isWritableFileAtPath_ =
    objc.registerName("isWritableFileAtPath:");
late final _sel_isExecutableFileAtPath_ =
    objc.registerName("isExecutableFileAtPath:");
late final _sel_isDeletableFileAtPath_ =
    objc.registerName("isDeletableFileAtPath:");
late final _sel_contentsEqualAtPath_andPath_ =
    objc.registerName("contentsEqualAtPath:andPath:");
late final _sel_displayNameAtPath_ = objc.registerName("displayNameAtPath:");
final _objc_msgSend_309 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_componentsToDisplayForPath_ =
    objc.registerName("componentsToDisplayForPath:");
late final _sel_enumeratorAtPath_ = objc.registerName("enumeratorAtPath:");
bool _ObjCBlock_bool_NSURL_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
bool _ObjCBlock_bool_NSURL_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as bool Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(objc.NSURL, objc.NSError)>`.
abstract final class ObjCBlock_bool_NSURL_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Bool Function(objc.NSURL, objc.NSError)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Bool Function(objc.NSURL, objc.NSError)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(objc.NSURL, objc.NSError)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>>
              ptr) =>
      objc.ObjCBlock<ffi.Bool Function(objc.NSURL, objc.NSError)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_bool_NSURL_NSError_fnPtrTrampoline, false)
                  .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(objc.NSURL, objc.NSError)> fromFunction(
          bool Function(objc.NSURL, objc.NSError) fn) =>
      objc.ObjCBlock<ffi.Bool Function(objc.NSURL, objc.NSError)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_bool_NSURL_NSError_closureTrampoline, false)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  objc.NSURL.castFromPointer(arg0, retain: true, release: true),
                  objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(objc.NSURL, objc.NSError)>`.
extension ObjCBlock_bool_NSURL_NSError_CallExtension
    on objc.ObjCBlock<ffi.Bool Function(objc.NSURL, objc.NSError)> {
  bool call(objc.NSURL arg0, objc.NSError arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1.pointer);
}

late final _sel_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_ =
    objc.registerName(
        "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
final _objc_msgSend_310 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_subpathsAtPath_ = objc.registerName("subpathsAtPath:");
late final _sel_contentsAtPath_ = objc.registerName("contentsAtPath:");
final _objc_msgSend_311 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_createFileAtPath_contents_attributes_ =
    objc.registerName("createFileAtPath:contents:attributes:");
final _objc_msgSend_312 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileSystemRepresentationWithPath_ =
    objc.registerName("fileSystemRepresentationWithPath:");
final _objc_msgSend_313 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Char> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_stringWithFileSystemRepresentation_length_ =
    objc.registerName("stringWithFileSystemRepresentation:length:");
final _objc_msgSend_314 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>, int)>();

enum NSFileManagerItemReplacementOptions {
  NSFileManagerItemReplacementUsingNewMetadataOnly(1),
  NSFileManagerItemReplacementWithoutDeletingBackupItem(2);

  final int value;
  const NSFileManagerItemReplacementOptions(this.value);

  static NSFileManagerItemReplacementOptions fromValue(int value) =>
      switch (value) {
        1 => NSFileManagerItemReplacementUsingNewMetadataOnly,
        2 => NSFileManagerItemReplacementWithoutDeletingBackupItem,
        _ => throw ArgumentError(
            "Unknown value for NSFileManagerItemReplacementOptions: $value"),
      };
}

late final _sel_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_ =
    objc.registerName(
        "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:");
final _objc_msgSend_315 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setUbiquitous_itemAtURL_destinationURL_error_ =
    objc.registerName("setUbiquitous:itemAtURL:destinationURL:error:");
final _objc_msgSend_316 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isUbiquitousItemAtURL_ =
    objc.registerName("isUbiquitousItemAtURL:");
final _objc_msgSend_317 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_startDownloadingUbiquitousItemAtURL_error_ =
    objc.registerName("startDownloadingUbiquitousItemAtURL:error:");
late final _sel_evictUbiquitousItemAtURL_error_ =
    objc.registerName("evictUbiquitousItemAtURL:error:");
late final _sel_URLForUbiquityContainerIdentifier_ =
    objc.registerName("URLForUbiquityContainerIdentifier:");
final _objc_msgSend_318 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForPublishingUbiquitousItemAtURL_expirationDate_error_ = objc
    .registerName("URLForPublishingUbiquitousItemAtURL:expirationDate:error:");
final _objc_msgSend_319 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_ubiquityIdentityToken =
    objc.registerName("ubiquityIdentityToken");
void _ObjCBlock_ffiVoid_NSDictionary_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSDictionary_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSDictionary_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_NSDictionary_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSDictionary?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSDictionary_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(arg0.address == 0 ? null : objc.NSDictionary.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(objc.NSDictionary?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSDictionary_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0.address == 0
                ? null
                : objc.NSDictionary.castFromPointer(arg0,
                    retain: false, release: true),
            arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSDictionary_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSDictionary_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSDictionary? arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_getFileProviderServicesForItemAtURL_completionHandler_ =
    objc.registerName("getFileProviderServicesForItemAtURL:completionHandler:");
final _objc_msgSend_320 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_containerURLForSecurityApplicationGroupIdentifier_ =
    objc.registerName("containerURLForSecurityApplicationGroupIdentifier:");
late final _sel_homeDirectoryForCurrentUser =
    objc.registerName("homeDirectoryForCurrentUser");
late final _sel_temporaryDirectory = objc.registerName("temporaryDirectory");
late final _sel_homeDirectoryForUser_ =
    objc.registerName("homeDirectoryForUser:");

/// NSHTTPCookieStorage
class NSHTTPCookieStorage extends objc.NSObject {
  NSHTTPCookieStorage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSHTTPCookieStorage] that points to the same underlying object as [other].
  NSHTTPCookieStorage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSHTTPCookieStorage] that wraps the given raw object pointer.
  NSHTTPCookieStorage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSHTTPCookieStorage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSHTTPCookieStorage);
  }

  /// sharedHTTPCookieStorage
  static NSHTTPCookieStorage getSharedHTTPCookieStorage() {
    final _ret = _objc_msgSend_321(
        _class_NSHTTPCookieStorage, _sel_sharedHTTPCookieStorage);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// sharedCookieStorageForGroupContainerIdentifier:
  static NSHTTPCookieStorage sharedCookieStorageForGroupContainerIdentifier_(
      objc.NSString identifier) {
    final _ret = _objc_msgSend_322(
        _class_NSHTTPCookieStorage,
        _sel_sharedCookieStorageForGroupContainerIdentifier_,
        identifier.pointer);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// cookies
  objc.NSArray? get cookies {
    final _ret = _objc_msgSend_88(this.pointer, _sel_cookies);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCookie:
  void setCookie_(NSHTTPCookie cookie) {
    _objc_msgSend_327(this.pointer, _sel_setCookie_, cookie.pointer);
  }

  /// deleteCookie:
  void deleteCookie_(NSHTTPCookie cookie) {
    _objc_msgSend_327(this.pointer, _sel_deleteCookie_, cookie.pointer);
  }

  /// removeCookiesSinceDate:
  void removeCookiesSinceDate_(objc.NSDate date) {
    _objc_msgSend_258(this.pointer, _sel_removeCookiesSinceDate_, date.pointer);
  }

  /// cookiesForURL:
  objc.NSArray? cookiesForURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_328(this.pointer, _sel_cookiesForURL_, URL.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCookies:forURL:mainDocumentURL:
  void setCookies_forURL_mainDocumentURL_(
      objc.NSArray cookies, objc.NSURL? URL, objc.NSURL? mainDocumentURL) {
    _objc_msgSend_329(
        this.pointer,
        _sel_setCookies_forURL_mainDocumentURL_,
        cookies.pointer,
        URL?.pointer ?? ffi.nullptr,
        mainDocumentURL?.pointer ?? ffi.nullptr);
  }

  /// cookieAcceptPolicy
  NSHTTPCookieAcceptPolicy get cookieAcceptPolicy {
    final _ret = _objc_msgSend_330(this.pointer, _sel_cookieAcceptPolicy);
    return NSHTTPCookieAcceptPolicy.fromValue(_ret);
  }

  /// setCookieAcceptPolicy:
  set cookieAcceptPolicy(NSHTTPCookieAcceptPolicy value) {
    return _objc_msgSend_331(
        this.pointer, _sel_setCookieAcceptPolicy_, value.value);
  }

  /// sortedCookiesUsingDescriptors:
  objc.NSArray sortedCookiesUsingDescriptors_(objc.NSArray sortOrder) {
    final _ret = _objc_msgSend_86(
        this.pointer, _sel_sortedCookiesUsingDescriptors_, sortOrder.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// storeCookies:forTask:
  void storeCookies_forTask_(objc.NSArray cookies, NSURLSessionTask task) {
    _objc_msgSend_363(this.pointer, _sel_storeCookies_forTask_, cookies.pointer,
        task.pointer);
  }

  /// getCookiesForTask:completionHandler:
  void getCookiesForTask_completionHandler_(
      NSURLSessionTask task,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_364(this.pointer, _sel_getCookiesForTask_completionHandler_,
        task.pointer, completionHandler.pointer);
  }

  /// init
  NSHTTPCookieStorage init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSHTTPCookieStorage new1() {
    final _ret = _objc_msgSend_19(_class_NSHTTPCookieStorage, _sel_new);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSHTTPCookieStorage allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSHTTPCookieStorage, _sel_allocWithZone_, zone);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSHTTPCookieStorage alloc() {
    final _ret = _objc_msgSend_19(_class_NSHTTPCookieStorage, _sel_alloc);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSHTTPCookieStorage,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSHTTPCookieStorage,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSHTTPCookieStorage, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSHTTPCookieStorage, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSHTTPCookieStorage,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSHTTPCookieStorage,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSHTTPCookieStorage,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSHTTPCookieStorage, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSHTTPCookieStorage, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSHTTPCookieStorage = objc.getClass("NSHTTPCookieStorage");
late final _sel_sharedHTTPCookieStorage =
    objc.registerName("sharedHTTPCookieStorage");
final _objc_msgSend_321 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sharedCookieStorageForGroupContainerIdentifier_ =
    objc.registerName("sharedCookieStorageForGroupContainerIdentifier:");
final _objc_msgSend_322 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cookies = objc.registerName("cookies");

/// NSHTTPCookie
class NSHTTPCookie extends objc.NSObject {
  NSHTTPCookie._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSHTTPCookie] that points to the same underlying object as [other].
  NSHTTPCookie.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSHTTPCookie] that wraps the given raw object pointer.
  NSHTTPCookie.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSHTTPCookie].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSHTTPCookie);
  }

  /// initWithProperties:
  NSHTTPCookie? initWithProperties_(objc.NSDictionary properties) {
    final _ret = _objc_msgSend_323(
        this.pointer, _sel_initWithProperties_, properties.pointer);
    return _ret.address == 0
        ? null
        : NSHTTPCookie.castFromPointer(_ret, retain: true, release: true);
  }

  /// cookieWithProperties:
  static NSHTTPCookie? cookieWithProperties_(objc.NSDictionary properties) {
    final _ret = _objc_msgSend_324(
        _class_NSHTTPCookie, _sel_cookieWithProperties_, properties.pointer);
    return _ret.address == 0
        ? null
        : NSHTTPCookie.castFromPointer(_ret, retain: true, release: true);
  }

  /// requestHeaderFieldsWithCookies:
  static objc.NSDictionary requestHeaderFieldsWithCookies_(
      objc.NSArray cookies) {
    final _ret = _objc_msgSend_325(_class_NSHTTPCookie,
        _sel_requestHeaderFieldsWithCookies_, cookies.pointer);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// cookiesWithResponseHeaderFields:forURL:
  static objc.NSArray cookiesWithResponseHeaderFields_forURL_(
      objc.NSDictionary headerFields, objc.NSURL URL) {
    final _ret = _objc_msgSend_326(
        _class_NSHTTPCookie,
        _sel_cookiesWithResponseHeaderFields_forURL_,
        headerFields.pointer,
        URL.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// properties
  objc.NSDictionary? get properties {
    final _ret = _objc_msgSend_84(this.pointer, _sel_properties);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// version
  int get version {
    return _objc_msgSend_57(this.pointer, _sel_version);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_11(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// value
  objc.NSString get value {
    final _ret = _objc_msgSend_11(this.pointer, _sel_value);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// expiresDate
  objc.NSDate? get expiresDate {
    final _ret = _objc_msgSend_126(this.pointer, _sel_expiresDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// isSessionOnly
  bool get sessionOnly {
    return _objc_msgSend_13(this.pointer, _sel_isSessionOnly);
  }

  /// domain
  objc.NSString get domain {
    final _ret = _objc_msgSend_11(this.pointer, _sel_domain);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// path
  objc.NSString get path {
    final _ret = _objc_msgSend_11(this.pointer, _sel_path);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// isSecure
  bool get secure {
    return _objc_msgSend_13(this.pointer, _sel_isSecure);
  }

  /// isHTTPOnly
  bool get HTTPOnly {
    return _objc_msgSend_13(this.pointer, _sel_isHTTPOnly);
  }

  /// comment
  objc.NSString? get comment {
    final _ret = _objc_msgSend_20(this.pointer, _sel_comment);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// commentURL
  objc.NSURL? get commentURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_commentURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// portList
  objc.NSArray? get portList {
    final _ret = _objc_msgSend_88(this.pointer, _sel_portList);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// sameSitePolicy
  objc.NSString? get sameSitePolicy {
    final _ret = _objc_msgSend_20(this.pointer, _sel_sameSitePolicy);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSHTTPCookie init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSHTTPCookie.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSHTTPCookie new1() {
    final _ret = _objc_msgSend_19(_class_NSHTTPCookie, _sel_new);
    return NSHTTPCookie.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSHTTPCookie allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSHTTPCookie, _sel_allocWithZone_, zone);
    return NSHTTPCookie.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSHTTPCookie alloc() {
    final _ret = _objc_msgSend_19(_class_NSHTTPCookie, _sel_alloc);
    return NSHTTPCookie.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSHTTPCookie,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSHTTPCookie,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSHTTPCookie, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSHTTPCookie, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSHTTPCookie,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSHTTPCookie,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSHTTPCookie,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSHTTPCookie, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSHTTPCookie, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSHTTPCookie = objc.getClass("NSHTTPCookie");
late final _sel_initWithProperties_ = objc.registerName("initWithProperties:");
final _objc_msgSend_323 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cookieWithProperties_ =
    objc.registerName("cookieWithProperties:");
final _objc_msgSend_324 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_requestHeaderFieldsWithCookies_ =
    objc.registerName("requestHeaderFieldsWithCookies:");
final _objc_msgSend_325 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cookiesWithResponseHeaderFields_forURL_ =
    objc.registerName("cookiesWithResponseHeaderFields:forURL:");
final _objc_msgSend_326 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_properties = objc.registerName("properties");
late final _sel_version = objc.registerName("version");
late final _sel_value = objc.registerName("value");
late final _sel_expiresDate = objc.registerName("expiresDate");
late final _sel_isSessionOnly = objc.registerName("isSessionOnly");
late final _sel_domain = objc.registerName("domain");
late final _sel_path = objc.registerName("path");
late final _sel_isSecure = objc.registerName("isSecure");
late final _sel_isHTTPOnly = objc.registerName("isHTTPOnly");
late final _sel_comment = objc.registerName("comment");
late final _sel_commentURL = objc.registerName("commentURL");
late final _sel_portList = objc.registerName("portList");
late final _sel_sameSitePolicy = objc.registerName("sameSitePolicy");
late final _sel_setCookie_ = objc.registerName("setCookie:");
final _objc_msgSend_327 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_deleteCookie_ = objc.registerName("deleteCookie:");
late final _sel_removeCookiesSinceDate_ =
    objc.registerName("removeCookiesSinceDate:");
late final _sel_cookiesForURL_ = objc.registerName("cookiesForURL:");
final _objc_msgSend_328 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setCookies_forURL_mainDocumentURL_ =
    objc.registerName("setCookies:forURL:mainDocumentURL:");
final _objc_msgSend_329 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

enum NSHTTPCookieAcceptPolicy {
  NSHTTPCookieAcceptPolicyAlways(0),
  NSHTTPCookieAcceptPolicyNever(1),
  NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain(2);

  final int value;
  const NSHTTPCookieAcceptPolicy(this.value);

  static NSHTTPCookieAcceptPolicy fromValue(int value) => switch (value) {
        0 => NSHTTPCookieAcceptPolicyAlways,
        1 => NSHTTPCookieAcceptPolicyNever,
        2 => NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain,
        _ => throw ArgumentError(
            "Unknown value for NSHTTPCookieAcceptPolicy: $value"),
      };
}

late final _sel_cookieAcceptPolicy = objc.registerName("cookieAcceptPolicy");
final _objc_msgSend_330 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCookieAcceptPolicy_ =
    objc.registerName("setCookieAcceptPolicy:");
final _objc_msgSend_331 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_sortedCookiesUsingDescriptors_ =
    objc.registerName("sortedCookiesUsingDescriptors:");

/// NSURLSessionTask
class NSURLSessionTask extends objc.NSObject {
  NSURLSessionTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionTask] that points to the same underlying object as [other].
  NSURLSessionTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionTask] that wraps the given raw object pointer.
  NSURLSessionTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionTask);
  }

  /// taskIdentifier
  int get taskIdentifier {
    return _objc_msgSend_57(this.pointer, _sel_taskIdentifier);
  }

  /// originalRequest
  NSURLRequest? get originalRequest {
    final _ret = _objc_msgSend_355(this.pointer, _sel_originalRequest);
    return _ret.address == 0
        ? null
        : NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// currentRequest
  NSURLRequest? get currentRequest {
    final _ret = _objc_msgSend_355(this.pointer, _sel_currentRequest);
    return _ret.address == 0
        ? null
        : NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// response
  NSURLResponse? get response {
    final _ret = _objc_msgSend_358(this.pointer, _sel_response);
    return _ret.address == 0
        ? null
        : NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// progress
  NSProgress get progress {
    final _ret = _objc_msgSend_359(this.pointer, _sel_progress);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// earliestBeginDate
  objc.NSDate? get earliestBeginDate {
    final _ret = _objc_msgSend_126(this.pointer, _sel_earliestBeginDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setEarliestBeginDate:
  set earliestBeginDate(objc.NSDate? value) {
    return _objc_msgSend_172(this.pointer, _sel_setEarliestBeginDate_,
        value?.pointer ?? ffi.nullptr);
  }

  /// countOfBytesClientExpectsToSend
  int get countOfBytesClientExpectsToSend {
    return _objc_msgSend_9(this.pointer, _sel_countOfBytesClientExpectsToSend);
  }

  /// setCountOfBytesClientExpectsToSend:
  set countOfBytesClientExpectsToSend(int value) {
    return _objc_msgSend_10(
        this.pointer, _sel_setCountOfBytesClientExpectsToSend_, value);
  }

  /// countOfBytesClientExpectsToReceive
  int get countOfBytesClientExpectsToReceive {
    return _objc_msgSend_9(
        this.pointer, _sel_countOfBytesClientExpectsToReceive);
  }

  /// setCountOfBytesClientExpectsToReceive:
  set countOfBytesClientExpectsToReceive(int value) {
    return _objc_msgSend_10(
        this.pointer, _sel_setCountOfBytesClientExpectsToReceive_, value);
  }

  /// countOfBytesSent
  int get countOfBytesSent {
    return _objc_msgSend_9(this.pointer, _sel_countOfBytesSent);
  }

  /// countOfBytesReceived
  int get countOfBytesReceived {
    return _objc_msgSend_9(this.pointer, _sel_countOfBytesReceived);
  }

  /// countOfBytesExpectedToSend
  int get countOfBytesExpectedToSend {
    return _objc_msgSend_9(this.pointer, _sel_countOfBytesExpectedToSend);
  }

  /// countOfBytesExpectedToReceive
  int get countOfBytesExpectedToReceive {
    return _objc_msgSend_9(this.pointer, _sel_countOfBytesExpectedToReceive);
  }

  /// taskDescription
  objc.NSString? get taskDescription {
    final _ret = _objc_msgSend_20(this.pointer, _sel_taskDescription);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTaskDescription:
  set taskDescription(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setTaskDescription_, value?.pointer ?? ffi.nullptr);
  }

  /// cancel
  void cancel() {
    _objc_msgSend_7(this.pointer, _sel_cancel);
  }

  /// state
  NSURLSessionTaskState get state {
    final _ret = _objc_msgSend_360(this.pointer, _sel_state);
    return NSURLSessionTaskState.fromValue(_ret);
  }

  /// error
  objc.NSError? get error {
    final _ret = _objc_msgSend_344(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// suspend
  void suspend() {
    _objc_msgSend_7(this.pointer, _sel_suspend);
  }

  /// resume
  void resume() {
    _objc_msgSend_7(this.pointer, _sel_resume);
  }

  /// priority
  double get priority {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_priority)
        : _objc_msgSend_361(this.pointer, _sel_priority);
  }

  /// setPriority:
  set priority(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setPriority_, value);
  }

  /// prefersIncrementalDelivery
  bool get prefersIncrementalDelivery {
    return _objc_msgSend_13(this.pointer, _sel_prefersIncrementalDelivery);
  }

  /// setPrefersIncrementalDelivery:
  set prefersIncrementalDelivery(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setPrefersIncrementalDelivery_, value);
  }

  /// init
  NSURLSessionTask init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLSessionTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLSessionTask new1() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionTask, _sel_new);
    return NSURLSessionTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSURLSessionTask, _sel_allocWithZone_, zone);
    return NSURLSessionTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLSessionTask alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionTask, _sel_alloc);
    return NSURLSessionTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLSessionTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLSessionTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLSessionTask, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSURLSessionTask, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLSessionTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLSessionTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLSessionTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLSessionTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSURLSessionTask, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionTask = objc.getClass("NSURLSessionTask");
late final _sel_taskIdentifier = objc.registerName("taskIdentifier");

/// NSURLRequest
class NSURLRequest extends objc.NSObject {
  NSURLRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLRequest] that points to the same underlying object as [other].
  NSURLRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLRequest] that wraps the given raw object pointer.
  NSURLRequest.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLRequest);
  }

  /// requestWithURL:
  static NSURLRequest requestWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_332(
        _class_NSURLRequest, _sel_requestWithURL_, URL.pointer);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportsSecureCoding
  static bool getSupportsSecureCoding() {
    return _objc_msgSend_13(_class_NSURLRequest, _sel_supportsSecureCoding);
  }

  /// requestWithURL:cachePolicy:timeoutInterval:
  static NSURLRequest requestWithURL_cachePolicy_timeoutInterval_(
      objc.NSURL URL,
      NSURLRequestCachePolicy cachePolicy,
      double timeoutInterval) {
    final _ret = _objc_msgSend_333(
        _class_NSURLRequest,
        _sel_requestWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy.value,
        timeoutInterval);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:
  NSURLRequest initWithURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_332(this.pointer, _sel_initWithURL_, URL.pointer);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:cachePolicy:timeoutInterval:
  NSURLRequest initWithURL_cachePolicy_timeoutInterval_(objc.NSURL URL,
      NSURLRequestCachePolicy cachePolicy, double timeoutInterval) {
    final _ret = _objc_msgSend_333(
        this.pointer,
        _sel_initWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy.value,
        timeoutInterval);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// URL
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// cachePolicy
  NSURLRequestCachePolicy get cachePolicy {
    final _ret = _objc_msgSend_334(this.pointer, _sel_cachePolicy);
    return NSURLRequestCachePolicy.fromValue(_ret);
  }

  /// timeoutInterval
  double get timeoutInterval {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_timeoutInterval)
        : _objc_msgSend_18(this.pointer, _sel_timeoutInterval);
  }

  /// mainDocumentURL
  objc.NSURL? get mainDocumentURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_mainDocumentURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// networkServiceType
  NSURLRequestNetworkServiceType get networkServiceType {
    final _ret = _objc_msgSend_335(this.pointer, _sel_networkServiceType);
    return NSURLRequestNetworkServiceType.fromValue(_ret);
  }

  /// allowsCellularAccess
  bool get allowsCellularAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsCellularAccess);
  }

  /// allowsExpensiveNetworkAccess
  bool get allowsExpensiveNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsExpensiveNetworkAccess);
  }

  /// allowsConstrainedNetworkAccess
  bool get allowsConstrainedNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsConstrainedNetworkAccess);
  }

  /// assumesHTTP3Capable
  bool get assumesHTTP3Capable {
    return _objc_msgSend_13(this.pointer, _sel_assumesHTTP3Capable);
  }

  /// attribution
  NSURLRequestAttribution get attribution {
    final _ret = _objc_msgSend_336(this.pointer, _sel_attribution);
    return NSURLRequestAttribution.fromValue(_ret);
  }

  /// requiresDNSSECValidation
  bool get requiresDNSSECValidation {
    return _objc_msgSend_13(this.pointer, _sel_requiresDNSSECValidation);
  }

  /// HTTPMethod
  objc.NSString? get HTTPMethod {
    final _ret = _objc_msgSend_20(this.pointer, _sel_HTTPMethod);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// allHTTPHeaderFields
  objc.NSDictionary? get allHTTPHeaderFields {
    final _ret = _objc_msgSend_84(this.pointer, _sel_allHTTPHeaderFields);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// valueForHTTPHeaderField:
  objc.NSString? valueForHTTPHeaderField_(objc.NSString field) {
    final _ret = _objc_msgSend_42(
        this.pointer, _sel_valueForHTTPHeaderField_, field.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// HTTPBody
  objc.NSData? get HTTPBody {
    final _ret = _objc_msgSend_337(this.pointer, _sel_HTTPBody);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// HTTPBodyStream
  NSInputStream? get HTTPBodyStream {
    final _ret = _objc_msgSend_354(this.pointer, _sel_HTTPBodyStream);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// HTTPShouldHandleCookies
  bool get HTTPShouldHandleCookies {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldHandleCookies);
  }

  /// HTTPShouldUsePipelining
  bool get HTTPShouldUsePipelining {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldUsePipelining);
  }

  /// init
  NSURLRequest init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLRequest new1() {
    final _ret = _objc_msgSend_19(_class_NSURLRequest, _sel_new);
    return NSURLRequest.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLRequest allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSURLRequest, _sel_allocWithZone_, zone);
    return NSURLRequest.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLRequest alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLRequest, _sel_alloc);
    return NSURLRequest.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLRequest, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSURLRequest, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLRequest,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLRequest,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLRequest,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLRequest, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSURLRequest, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLRequest = objc.getClass("NSURLRequest");
late final _sel_requestWithURL_ = objc.registerName("requestWithURL:");
final _objc_msgSend_332 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_supportsSecureCoding =
    objc.registerName("supportsSecureCoding");

enum NSURLRequestCachePolicy {
  NSURLRequestUseProtocolCachePolicy(0),
  NSURLRequestReloadIgnoringLocalCacheData(1),
  NSURLRequestReloadIgnoringLocalAndRemoteCacheData(4),
  NSURLRequestReturnCacheDataElseLoad(2),
  NSURLRequestReturnCacheDataDontLoad(3),
  NSURLRequestReloadRevalidatingCacheData(5);

  static const NSURLRequestReloadIgnoringCacheData =
      NSURLRequestReloadIgnoringLocalCacheData;

  final int value;
  const NSURLRequestCachePolicy(this.value);

  static NSURLRequestCachePolicy fromValue(int value) => switch (value) {
        0 => NSURLRequestUseProtocolCachePolicy,
        1 => NSURLRequestReloadIgnoringLocalCacheData,
        4 => NSURLRequestReloadIgnoringLocalAndRemoteCacheData,
        2 => NSURLRequestReturnCacheDataElseLoad,
        3 => NSURLRequestReturnCacheDataDontLoad,
        5 => NSURLRequestReloadRevalidatingCacheData,
        _ => throw ArgumentError(
            "Unknown value for NSURLRequestCachePolicy: $value"),
      };

  @override
  String toString() {
    if (this == NSURLRequestReloadIgnoringLocalCacheData)
      return "NSURLRequestCachePolicy.NSURLRequestReloadIgnoringLocalCacheData, NSURLRequestCachePolicy.NSURLRequestReloadIgnoringCacheData";
    return super.toString();
  }
}

late final _sel_requestWithURL_cachePolicy_timeoutInterval_ =
    objc.registerName("requestWithURL:cachePolicy:timeoutInterval:");
final _objc_msgSend_333 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Double)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            double)>();
late final _sel_initWithURL_cachePolicy_timeoutInterval_ =
    objc.registerName("initWithURL:cachePolicy:timeoutInterval:");
late final _sel_URL = objc.registerName("URL");
late final _sel_cachePolicy = objc.registerName("cachePolicy");
final _objc_msgSend_334 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_timeoutInterval = objc.registerName("timeoutInterval");
late final _sel_mainDocumentURL = objc.registerName("mainDocumentURL");

enum NSURLRequestNetworkServiceType {
  NSURLNetworkServiceTypeDefault(0),
  NSURLNetworkServiceTypeVoIP(1),
  NSURLNetworkServiceTypeVideo(2),
  NSURLNetworkServiceTypeBackground(3),
  NSURLNetworkServiceTypeVoice(4),
  NSURLNetworkServiceTypeResponsiveData(6),
  NSURLNetworkServiceTypeAVStreaming(8),
  NSURLNetworkServiceTypeResponsiveAV(9),
  NSURLNetworkServiceTypeCallSignaling(11);

  final int value;
  const NSURLRequestNetworkServiceType(this.value);

  static NSURLRequestNetworkServiceType fromValue(int value) => switch (value) {
        0 => NSURLNetworkServiceTypeDefault,
        1 => NSURLNetworkServiceTypeVoIP,
        2 => NSURLNetworkServiceTypeVideo,
        3 => NSURLNetworkServiceTypeBackground,
        4 => NSURLNetworkServiceTypeVoice,
        6 => NSURLNetworkServiceTypeResponsiveData,
        8 => NSURLNetworkServiceTypeAVStreaming,
        9 => NSURLNetworkServiceTypeResponsiveAV,
        11 => NSURLNetworkServiceTypeCallSignaling,
        _ => throw ArgumentError(
            "Unknown value for NSURLRequestNetworkServiceType: $value"),
      };
}

late final _sel_networkServiceType = objc.registerName("networkServiceType");
final _objc_msgSend_335 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_allowsCellularAccess =
    objc.registerName("allowsCellularAccess");
late final _sel_allowsExpensiveNetworkAccess =
    objc.registerName("allowsExpensiveNetworkAccess");
late final _sel_allowsConstrainedNetworkAccess =
    objc.registerName("allowsConstrainedNetworkAccess");
late final _sel_assumesHTTP3Capable = objc.registerName("assumesHTTP3Capable");

enum NSURLRequestAttribution {
  NSURLRequestAttributionDeveloper(0),
  NSURLRequestAttributionUser(1);

  final int value;
  const NSURLRequestAttribution(this.value);

  static NSURLRequestAttribution fromValue(int value) => switch (value) {
        0 => NSURLRequestAttributionDeveloper,
        1 => NSURLRequestAttributionUser,
        _ => throw ArgumentError(
            "Unknown value for NSURLRequestAttribution: $value"),
      };
}

late final _sel_attribution = objc.registerName("attribution");
final _objc_msgSend_336 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_requiresDNSSECValidation =
    objc.registerName("requiresDNSSECValidation");
late final _sel_HTTPMethod = objc.registerName("HTTPMethod");
late final _sel_allHTTPHeaderFields = objc.registerName("allHTTPHeaderFields");
late final _sel_valueForHTTPHeaderField_ =
    objc.registerName("valueForHTTPHeaderField:");
late final _sel_HTTPBody = objc.registerName("HTTPBody");
final _objc_msgSend_337 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSInputStream
class NSInputStream extends NSStream {
  NSInputStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSInputStream] that points to the same underlying object as [other].
  NSInputStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSInputStream] that wraps the given raw object pointer.
  NSInputStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSInputStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSInputStream);
  }

  /// read:maxLength:
  int read_maxLength_(ffi.Pointer<ffi.Uint8> buffer, int len) {
    return _objc_msgSend_338(this.pointer, _sel_read_maxLength_, buffer, len);
  }

  /// getBuffer:length:
  bool getBuffer_length_(ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
      ffi.Pointer<ffi.UnsignedLong> len) {
    return _objc_msgSend_339(this.pointer, _sel_getBuffer_length_, buffer, len);
  }

  /// hasBytesAvailable
  bool get hasBytesAvailable {
    return _objc_msgSend_13(this.pointer, _sel_hasBytesAvailable);
  }

  /// initWithData:
  NSInputStream initWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_340(this.pointer, _sel_initWithData_, data.pointer);
    return NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:
  NSInputStream? initWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_36(this.pointer, _sel_initWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFileAtPath:
  NSInputStream? initWithFileAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_initWithFileAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// inputStreamWithData:
  static NSInputStream? inputStreamWithData_(objc.NSData data) {
    final _ret = _objc_msgSend_341(
        _class_NSInputStream, _sel_inputStreamWithData_, data.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// inputStreamWithFileAtPath:
  static NSInputStream? inputStreamWithFileAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_35(
        _class_NSInputStream, _sel_inputStreamWithFileAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// inputStreamWithURL:
  static NSInputStream? inputStreamWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_36(
        _class_NSInputStream, _sel_inputStreamWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// getStreamsToHostWithName:port:inputStream:outputStream:
  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      objc.NSString hostname,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_348(
        _class_NSInputStream,
        _sel_getStreamsToHostWithName_port_inputStream_outputStream_,
        hostname.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getStreamsToHost:port:inputStream:outputStream:
  static void getStreamsToHost_port_inputStream_outputStream_(
      NSHost host,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_352(
        _class_NSInputStream,
        _sel_getStreamsToHost_port_inputStream_outputStream_,
        host.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getBoundStreamsWithBufferSize:inputStream:outputStream:
  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      int bufferSize,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_353(
        _class_NSInputStream,
        _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_,
        bufferSize,
        inputStream,
        outputStream);
  }

  /// init
  NSInputStream init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSInputStream new1() {
    final _ret = _objc_msgSend_19(_class_NSInputStream, _sel_new);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSInputStream allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSInputStream, _sel_allocWithZone_, zone);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSInputStream alloc() {
    final _ret = _objc_msgSend_19(_class_NSInputStream, _sel_alloc);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSInputStream,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSInputStream,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSInputStream, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSInputStream, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSInputStream,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSInputStream,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSInputStream,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSInputStream, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSInputStream, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSInputStream = objc.getClass("NSInputStream");
late final _sel_read_maxLength_ = objc.registerName("read:maxLength:");
final _objc_msgSend_338 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Uint8>,
                ffi.UnsignedLong)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Uint8>, int)>();
late final _sel_getBuffer_length_ = objc.registerName("getBuffer:length:");
final _objc_msgSend_339 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
                ffi.Pointer<ffi.UnsignedLong>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.UnsignedLong>)>();
late final _sel_hasBytesAvailable = objc.registerName("hasBytesAvailable");
late final _sel_initWithData_ = objc.registerName("initWithData:");
final _objc_msgSend_340 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithFileAtPath_ = objc.registerName("initWithFileAtPath:");
late final _sel_inputStreamWithData_ =
    objc.registerName("inputStreamWithData:");
final _objc_msgSend_341 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_inputStreamWithFileAtPath_ =
    objc.registerName("inputStreamWithFileAtPath:");
late final _sel_inputStreamWithURL_ = objc.registerName("inputStreamWithURL:");

/// NSStream
class NSStream extends objc.NSObject {
  NSStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSStream] that points to the same underlying object as [other].
  NSStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSStream] that wraps the given raw object pointer.
  NSStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSStream);
  }

  /// open
  void open() {
    _objc_msgSend_7(this.pointer, _sel_open);
  }

  /// close
  void close() {
    _objc_msgSend_7(this.pointer, _sel_close);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// propertyForKey:
  objc.ObjCObjectBase? propertyForKey_(objc.NSString key) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_propertyForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setProperty:forKey:
  bool setProperty_forKey_(objc.ObjCObjectBase? property, objc.NSString key) {
    return _objc_msgSend_342(this.pointer, _sel_setProperty_forKey_,
        property?.pointer ?? ffi.nullptr, key.pointer);
  }

  /// scheduleInRunLoop:forMode:
  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_230(this.pointer, _sel_scheduleInRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  /// removeFromRunLoop:forMode:
  void removeFromRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_230(this.pointer, _sel_removeFromRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  /// streamStatus
  NSStreamStatus get streamStatus {
    final _ret = _objc_msgSend_343(this.pointer, _sel_streamStatus);
    return NSStreamStatus.fromValue(_ret);
  }

  /// streamError
  objc.NSError? get streamError {
    final _ret = _objc_msgSend_344(this.pointer, _sel_streamError);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// getStreamsToHostWithName:port:inputStream:outputStream:
  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      objc.NSString hostname,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_348(
        _class_NSStream,
        _sel_getStreamsToHostWithName_port_inputStream_outputStream_,
        hostname.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getStreamsToHost:port:inputStream:outputStream:
  static void getStreamsToHost_port_inputStream_outputStream_(
      NSHost host,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_352(
        _class_NSStream,
        _sel_getStreamsToHost_port_inputStream_outputStream_,
        host.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getBoundStreamsWithBufferSize:inputStream:outputStream:
  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      int bufferSize,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_353(
        _class_NSStream,
        _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_,
        bufferSize,
        inputStream,
        outputStream);
  }

  /// init
  NSStream init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSStream new1() {
    final _ret = _objc_msgSend_19(_class_NSStream, _sel_new);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSStream allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSStream, _sel_allocWithZone_, zone);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSStream alloc() {
    final _ret = _objc_msgSend_19(_class_NSStream, _sel_alloc);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSStream,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSStream,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSStream, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSStream, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSStream,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSStream,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSStream,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSStream, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSStream, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSStream = objc.getClass("NSStream");
late final _sel_open = objc.registerName("open");
late final _sel_close = objc.registerName("close");
late final _sel_propertyForKey_ = objc.registerName("propertyForKey:");
late final _sel_setProperty_forKey_ = objc.registerName("setProperty:forKey:");
final _objc_msgSend_342 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

enum NSStreamStatus {
  NSStreamStatusNotOpen(0),
  NSStreamStatusOpening(1),
  NSStreamStatusOpen(2),
  NSStreamStatusReading(3),
  NSStreamStatusWriting(4),
  NSStreamStatusAtEnd(5),
  NSStreamStatusClosed(6),
  NSStreamStatusError(7);

  final int value;
  const NSStreamStatus(this.value);

  static NSStreamStatus fromValue(int value) => switch (value) {
        0 => NSStreamStatusNotOpen,
        1 => NSStreamStatusOpening,
        2 => NSStreamStatusOpen,
        3 => NSStreamStatusReading,
        4 => NSStreamStatusWriting,
        5 => NSStreamStatusAtEnd,
        6 => NSStreamStatusClosed,
        7 => NSStreamStatusError,
        _ => throw ArgumentError("Unknown value for NSStreamStatus: $value"),
      };
}

late final _sel_streamStatus = objc.registerName("streamStatus");
final _objc_msgSend_343 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_streamError = objc.registerName("streamError");
final _objc_msgSend_344 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSOutputStream
class NSOutputStream extends NSStream {
  NSOutputStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOutputStream] that points to the same underlying object as [other].
  NSOutputStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOutputStream] that wraps the given raw object pointer.
  NSOutputStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOutputStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOutputStream);
  }

  /// write:maxLength:
  int write_maxLength_(ffi.Pointer<ffi.Uint8> buffer, int len) {
    return _objc_msgSend_338(this.pointer, _sel_write_maxLength_, buffer, len);
  }

  /// hasSpaceAvailable
  bool get hasSpaceAvailable {
    return _objc_msgSend_13(this.pointer, _sel_hasSpaceAvailable);
  }

  /// initToMemory
  NSOutputStream initToMemory() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_initToMemory);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// initToBuffer:capacity:
  NSOutputStream initToBuffer_capacity_(
      ffi.Pointer<ffi.Uint8> buffer, int capacity) {
    final _ret = _objc_msgSend_345(
        this.pointer, _sel_initToBuffer_capacity_, buffer, capacity);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:append:
  NSOutputStream? initWithURL_append_(objc.NSURL url, bool shouldAppend) {
    final _ret = _objc_msgSend_346(
        this.pointer, _sel_initWithURL_append_, url.pointer, shouldAppend);
    return _ret.address == 0
        ? null
        : NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// initToFileAtPath:append:
  NSOutputStream? initToFileAtPath_append_(
      objc.NSString path, bool shouldAppend) {
    final _ret = _objc_msgSend_347(this.pointer, _sel_initToFileAtPath_append_,
        path.pointer, shouldAppend);
    return _ret.address == 0
        ? null
        : NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputStreamToMemory
  static NSOutputStream outputStreamToMemory() {
    final _ret =
        _objc_msgSend_19(_class_NSOutputStream, _sel_outputStreamToMemory);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputStreamToBuffer:capacity:
  static NSOutputStream outputStreamToBuffer_capacity_(
      ffi.Pointer<ffi.Uint8> buffer, int capacity) {
    final _ret = _objc_msgSend_345(_class_NSOutputStream,
        _sel_outputStreamToBuffer_capacity_, buffer, capacity);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputStreamToFileAtPath:append:
  static NSOutputStream outputStreamToFileAtPath_append_(
      objc.NSString path, bool shouldAppend) {
    final _ret = _objc_msgSend_174(_class_NSOutputStream,
        _sel_outputStreamToFileAtPath_append_, path.pointer, shouldAppend);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputStreamWithURL:append:
  static NSOutputStream? outputStreamWithURL_append_(
      objc.NSURL url, bool shouldAppend) {
    final _ret = _objc_msgSend_346(_class_NSOutputStream,
        _sel_outputStreamWithURL_append_, url.pointer, shouldAppend);
    return _ret.address == 0
        ? null
        : NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// getStreamsToHostWithName:port:inputStream:outputStream:
  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      objc.NSString hostname,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_348(
        _class_NSOutputStream,
        _sel_getStreamsToHostWithName_port_inputStream_outputStream_,
        hostname.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getStreamsToHost:port:inputStream:outputStream:
  static void getStreamsToHost_port_inputStream_outputStream_(
      NSHost host,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_352(
        _class_NSOutputStream,
        _sel_getStreamsToHost_port_inputStream_outputStream_,
        host.pointer,
        port,
        inputStream,
        outputStream);
  }

  /// getBoundStreamsWithBufferSize:inputStream:outputStream:
  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      int bufferSize,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_353(
        _class_NSOutputStream,
        _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_,
        bufferSize,
        inputStream,
        outputStream);
  }
}

late final _class_NSOutputStream = objc.getClass("NSOutputStream");
late final _sel_write_maxLength_ = objc.registerName("write:maxLength:");
late final _sel_hasSpaceAvailable = objc.registerName("hasSpaceAvailable");
late final _sel_initToMemory = objc.registerName("initToMemory");
late final _sel_initToBuffer_capacity_ =
    objc.registerName("initToBuffer:capacity:");
final _objc_msgSend_345 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Uint8>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Uint8>, int)>();
late final _sel_initWithURL_append_ = objc.registerName("initWithURL:append:");
final _objc_msgSend_346 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initToFileAtPath_append_ =
    objc.registerName("initToFileAtPath:append:");
final _objc_msgSend_347 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_outputStreamToMemory =
    objc.registerName("outputStreamToMemory");
late final _sel_outputStreamToBuffer_capacity_ =
    objc.registerName("outputStreamToBuffer:capacity:");
late final _sel_outputStreamToFileAtPath_append_ =
    objc.registerName("outputStreamToFileAtPath:append:");
late final _sel_outputStreamWithURL_append_ =
    objc.registerName("outputStreamWithURL:append:");
late final _sel_getStreamsToHostWithName_port_inputStream_outputStream_ = objc
    .registerName("getStreamsToHostWithName:port:inputStream:outputStream:");
final _objc_msgSend_348 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

/// NSHost
class NSHost extends objc.NSObject {
  NSHost._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSHost] that points to the same underlying object as [other].
  NSHost.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSHost] that wraps the given raw object pointer.
  NSHost.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSHost].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSHost);
  }

  /// currentHost
  static NSHost currentHost() {
    final _ret = _objc_msgSend_19(_class_NSHost, _sel_currentHost);
    return NSHost.castFromPointer(_ret, retain: true, release: true);
  }

  /// hostWithName:
  static NSHost hostWithName_(objc.NSString? name) {
    final _ret = _objc_msgSend_349(
        _class_NSHost, _sel_hostWithName_, name?.pointer ?? ffi.nullptr);
    return NSHost.castFromPointer(_ret, retain: true, release: true);
  }

  /// hostWithAddress:
  static NSHost hostWithAddress_(objc.NSString address) {
    final _ret =
        _objc_msgSend_63(_class_NSHost, _sel_hostWithAddress_, address.pointer);
    return NSHost.castFromPointer(_ret, retain: true, release: true);
  }

  /// isEqualToHost:
  bool isEqualToHost_(NSHost aHost) {
    return _objc_msgSend_350(this.pointer, _sel_isEqualToHost_, aHost.pointer);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_20(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// names
  objc.NSArray get names {
    final _ret = _objc_msgSend_33(this.pointer, _sel_names);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// address
  objc.NSString? get address {
    final _ret = _objc_msgSend_20(this.pointer, _sel_address);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// addresses
  objc.NSArray get addresses {
    final _ret = _objc_msgSend_33(this.pointer, _sel_addresses);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedName
  objc.NSString? get localizedName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_localizedName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setHostCacheEnabled:
  static void setHostCacheEnabled_(bool flag) {
    _objc_msgSend_351(_class_NSHost, _sel_setHostCacheEnabled_, flag);
  }

  /// isHostCacheEnabled
  static bool isHostCacheEnabled() {
    return _objc_msgSend_13(_class_NSHost, _sel_isHostCacheEnabled);
  }

  /// flushHostCache
  static void flushHostCache() {
    _objc_msgSend_7(_class_NSHost, _sel_flushHostCache);
  }

  /// init
  NSHost init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSHost.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSHost new1() {
    final _ret = _objc_msgSend_19(_class_NSHost, _sel_new);
    return NSHost.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSHost allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSHost, _sel_allocWithZone_, zone);
    return NSHost.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSHost alloc() {
    final _ret = _objc_msgSend_19(_class_NSHost, _sel_alloc);
    return NSHost.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSHost,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSHost,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSHost, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSHost, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSHost,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        _class_NSHost, _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSHost,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSHost, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_NSHost, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSHost = objc.getClass("NSHost");
late final _sel_currentHost = objc.registerName("currentHost");
late final _sel_hostWithName_ = objc.registerName("hostWithName:");
final _objc_msgSend_349 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_hostWithAddress_ = objc.registerName("hostWithAddress:");
late final _sel_isEqualToHost_ = objc.registerName("isEqualToHost:");
final _objc_msgSend_350 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_names = objc.registerName("names");
late final _sel_address = objc.registerName("address");
late final _sel_addresses = objc.registerName("addresses");
late final _sel_localizedName = objc.registerName("localizedName");
late final _sel_setHostCacheEnabled_ =
    objc.registerName("setHostCacheEnabled:");
final _objc_msgSend_351 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_isHostCacheEnabled = objc.registerName("isHostCacheEnabled");
late final _sel_flushHostCache = objc.registerName("flushHostCache");
late final _sel_getStreamsToHost_port_inputStream_outputStream_ =
    objc.registerName("getStreamsToHost:port:inputStream:outputStream:");
final _objc_msgSend_352 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_ = objc
    .registerName("getBoundStreamsWithBufferSize:inputStream:outputStream:");
final _objc_msgSend_353 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_HTTPBodyStream = objc.registerName("HTTPBodyStream");
final _objc_msgSend_354 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_HTTPShouldHandleCookies =
    objc.registerName("HTTPShouldHandleCookies");
late final _sel_HTTPShouldUsePipelining =
    objc.registerName("HTTPShouldUsePipelining");
late final _sel_originalRequest = objc.registerName("originalRequest");
final _objc_msgSend_355 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_currentRequest = objc.registerName("currentRequest");

/// NSURLResponse
class NSURLResponse extends objc.NSObject {
  NSURLResponse._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLResponse] that points to the same underlying object as [other].
  NSURLResponse.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLResponse] that wraps the given raw object pointer.
  NSURLResponse.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLResponse].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLResponse);
  }

  /// initWithURL:MIMEType:expectedContentLength:textEncodingName:
  NSURLResponse initWithURL_MIMEType_expectedContentLength_textEncodingName_(
      objc.NSURL URL,
      objc.NSString? MIMEType,
      int length,
      objc.NSString? name) {
    final _ret = _objc_msgSend_356(
        this.pointer,
        _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_,
        URL.pointer,
        MIMEType?.pointer ?? ffi.nullptr,
        length,
        name?.pointer ?? ffi.nullptr);
    return NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// URL
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// MIMEType
  objc.NSString? get MIMEType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_MIMEType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// expectedContentLength
  int get expectedContentLength {
    return _objc_msgSend_357(this.pointer, _sel_expectedContentLength);
  }

  /// textEncodingName
  objc.NSString? get textEncodingName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_textEncodingName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// suggestedFilename
  objc.NSString? get suggestedFilename {
    final _ret = _objc_msgSend_20(this.pointer, _sel_suggestedFilename);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSURLResponse init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLResponse new1() {
    final _ret = _objc_msgSend_19(_class_NSURLResponse, _sel_new);
    return NSURLResponse.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLResponse allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSURLResponse, _sel_allocWithZone_, zone);
    return NSURLResponse.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLResponse alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLResponse, _sel_alloc);
    return NSURLResponse.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLResponse,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLResponse,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLResponse, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSURLResponse, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLResponse,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLResponse,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLResponse,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLResponse, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSURLResponse, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLResponse = objc.getClass("NSURLResponse");
late final _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_ =
    objc.registerName(
        "initWithURL:MIMEType:expectedContentLength:textEncodingName:");
final _objc_msgSend_356 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_MIMEType = objc.registerName("MIMEType");
late final _sel_expectedContentLength =
    objc.registerName("expectedContentLength");
final _objc_msgSend_357 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.LongLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_textEncodingName = objc.registerName("textEncodingName");
late final _sel_suggestedFilename = objc.registerName("suggestedFilename");
late final _sel_response = objc.registerName("response");
final _objc_msgSend_358 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_progress = objc.registerName("progress");
final _objc_msgSend_359 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_earliestBeginDate = objc.registerName("earliestBeginDate");
late final _sel_setEarliestBeginDate_ =
    objc.registerName("setEarliestBeginDate:");
late final _sel_countOfBytesClientExpectsToSend =
    objc.registerName("countOfBytesClientExpectsToSend");
late final _sel_setCountOfBytesClientExpectsToSend_ =
    objc.registerName("setCountOfBytesClientExpectsToSend:");
late final _sel_countOfBytesClientExpectsToReceive =
    objc.registerName("countOfBytesClientExpectsToReceive");
late final _sel_setCountOfBytesClientExpectsToReceive_ =
    objc.registerName("setCountOfBytesClientExpectsToReceive:");
late final _sel_countOfBytesSent = objc.registerName("countOfBytesSent");
late final _sel_countOfBytesReceived =
    objc.registerName("countOfBytesReceived");
late final _sel_countOfBytesExpectedToSend =
    objc.registerName("countOfBytesExpectedToSend");
late final _sel_countOfBytesExpectedToReceive =
    objc.registerName("countOfBytesExpectedToReceive");
late final _sel_taskDescription = objc.registerName("taskDescription");
late final _sel_setTaskDescription_ = objc.registerName("setTaskDescription:");

enum NSURLSessionTaskState {
  NSURLSessionTaskStateRunning(0),
  NSURLSessionTaskStateSuspended(1),
  NSURLSessionTaskStateCanceling(2),
  NSURLSessionTaskStateCompleted(3);

  final int value;
  const NSURLSessionTaskState(this.value);

  static NSURLSessionTaskState fromValue(int value) => switch (value) {
        0 => NSURLSessionTaskStateRunning,
        1 => NSURLSessionTaskStateSuspended,
        2 => NSURLSessionTaskStateCanceling,
        3 => NSURLSessionTaskStateCompleted,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionTaskState: $value"),
      };
}

late final _sel_state = objc.registerName("state");
final _objc_msgSend_360 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_error = objc.registerName("error");
late final _sel_suspend = objc.registerName("suspend");
late final _sel_priority = objc.registerName("priority");
final _objc_msgSend_361 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_361Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPriority_ = objc.registerName("setPriority:");
final _objc_msgSend_362 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_prefersIncrementalDelivery =
    objc.registerName("prefersIncrementalDelivery");
late final _sel_setPrefersIncrementalDelivery_ =
    objc.registerName("setPrefersIncrementalDelivery:");
late final _sel_storeCookies_forTask_ =
    objc.registerName("storeCookies:forTask:");
final _objc_msgSend_363 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSArray_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSArray_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSArray {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSArray_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSArray?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSArray_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(arg0.address == 0 ? null : objc.NSArray.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(objc.NSArray?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSArray_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
            ? null
            : objc.NSArray.castFromPointer(arg0,
                retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSArray(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSArray_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSArray? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_getCookiesForTask_completionHandler_ =
    objc.registerName("getCookiesForTask:completionHandler:");
final _objc_msgSend_364 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// NSIndexPath
class NSIndexPath extends objc.NSObject {
  NSIndexPath._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSIndexPath] that points to the same underlying object as [other].
  NSIndexPath.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSIndexPath] that wraps the given raw object pointer.
  NSIndexPath.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSIndexPath].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSIndexPath);
  }

  /// indexPathWithIndex:
  static NSIndexPath indexPathWithIndex_(int index) {
    final _ret =
        _objc_msgSend_365(_class_NSIndexPath, _sel_indexPathWithIndex_, index);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  /// indexPathWithIndexes:length:
  static NSIndexPath indexPathWithIndexes_length_(
      ffi.Pointer<ffi.UnsignedLong> indexes, int length) {
    final _ret = _objc_msgSend_366(
        _class_NSIndexPath, _sel_indexPathWithIndexes_length_, indexes, length);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithIndexes:length:
  NSIndexPath initWithIndexes_length_(
      ffi.Pointer<ffi.UnsignedLong> indexes, int length) {
    final _ret = _objc_msgSend_366(
        this.pointer, _sel_initWithIndexes_length_, indexes, length);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithIndex:
  NSIndexPath initWithIndex_(int index) {
    final _ret = _objc_msgSend_365(this.pointer, _sel_initWithIndex_, index);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  /// indexPathByAddingIndex:
  NSIndexPath indexPathByAddingIndex_(int index) {
    final _ret =
        _objc_msgSend_367(this.pointer, _sel_indexPathByAddingIndex_, index);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  /// indexPathByRemovingLastIndex
  NSIndexPath indexPathByRemovingLastIndex() {
    final _ret =
        _objc_msgSend_368(this.pointer, _sel_indexPathByRemovingLastIndex);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  /// indexAtPosition:
  int indexAtPosition_(int position) {
    return _objc_msgSend_369(this.pointer, _sel_indexAtPosition_, position);
  }

  /// length
  int get length {
    return _objc_msgSend_57(this.pointer, _sel_length);
  }

  /// getIndexes:range:
  void getIndexes_range_(
      ffi.Pointer<ffi.UnsignedLong> indexes, _NSRange positionRange) {
    _objc_msgSend_370(
        this.pointer, _sel_getIndexes_range_, indexes, positionRange);
  }

  /// compare:
  objc.NSComparisonResult compare_(NSIndexPath otherObject) {
    final _ret =
        _objc_msgSend_371(this.pointer, _sel_compare_, otherObject.pointer);
    return objc.NSComparisonResult.fromValue(_ret);
  }

  /// getIndexes:
  void getIndexes_(ffi.Pointer<ffi.UnsignedLong> indexes) {
    _objc_msgSend_372(this.pointer, _sel_getIndexes_, indexes);
  }

  /// init
  NSIndexPath init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSIndexPath new1() {
    final _ret = _objc_msgSend_19(_class_NSIndexPath, _sel_new);
    return NSIndexPath.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSIndexPath allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSIndexPath, _sel_allocWithZone_, zone);
    return NSIndexPath.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSIndexPath alloc() {
    final _ret = _objc_msgSend_19(_class_NSIndexPath, _sel_alloc);
    return NSIndexPath.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSIndexPath,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSIndexPath,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSIndexPath, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSIndexPath, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSIndexPath,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSIndexPath,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSIndexPath,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSIndexPath, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSIndexPath, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSIndexPath = objc.getClass("NSIndexPath");
late final _sel_indexPathWithIndex_ = objc.registerName("indexPathWithIndex:");
final _objc_msgSend_365 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_indexPathWithIndexes_length_ =
    objc.registerName("indexPathWithIndexes:length:");
final _objc_msgSend_366 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLong>,
            int)>();
late final _sel_initWithIndexes_length_ =
    objc.registerName("initWithIndexes:length:");
late final _sel_initWithIndex_ = objc.registerName("initWithIndex:");
late final _sel_indexPathByAddingIndex_ =
    objc.registerName("indexPathByAddingIndex:");
final _objc_msgSend_367 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_indexPathByRemovingLastIndex =
    objc.registerName("indexPathByRemovingLastIndex");
final _objc_msgSend_368 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_indexAtPosition_ = objc.registerName("indexAtPosition:");
final _objc_msgSend_369 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_getIndexes_range_ = objc.registerName("getIndexes:range:");
final _objc_msgSend_370 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLong>,
            _NSRange)>();
late final _sel_compare_ = objc.registerName("compare:");
final _objc_msgSend_371 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getIndexes_ = objc.registerName("getIndexes:");
final _objc_msgSend_372 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.UnsignedLong>)>();

/// NSInflectionRule
class NSInflectionRule extends objc.NSObject {
  NSInflectionRule._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSInflectionRule] that points to the same underlying object as [other].
  NSInflectionRule.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSInflectionRule] that wraps the given raw object pointer.
  NSInflectionRule.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSInflectionRule].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSInflectionRule);
  }

  /// init
  NSInflectionRule init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSInflectionRule.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticRule
  static NSInflectionRule getAutomaticRule() {
    final _ret = _objc_msgSend_373(_class_NSInflectionRule, _sel_automaticRule);
    return NSInflectionRule.castFromPointer(_ret, retain: true, release: true);
  }

  /// canInflectLanguage:
  static bool canInflectLanguage_(objc.NSString language) {
    return _objc_msgSend_31(
        _class_NSInflectionRule, _sel_canInflectLanguage_, language.pointer);
  }

  /// canInflectPreferredLocalization
  static bool getCanInflectPreferredLocalization() {
    return _objc_msgSend_13(
        _class_NSInflectionRule, _sel_canInflectPreferredLocalization);
  }

  /// new
  static NSInflectionRule new1() {
    final _ret = _objc_msgSend_19(_class_NSInflectionRule, _sel_new);
    return NSInflectionRule.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSInflectionRule allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSInflectionRule, _sel_allocWithZone_, zone);
    return NSInflectionRule.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSInflectionRule alloc() {
    final _ret = _objc_msgSend_19(_class_NSInflectionRule, _sel_alloc);
    return NSInflectionRule.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSInflectionRule,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSInflectionRule,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSInflectionRule, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSInflectionRule, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSInflectionRule,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSInflectionRule,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSInflectionRule,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSInflectionRule, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSInflectionRule, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSInflectionRule = objc.getClass("NSInflectionRule");
late final _sel_automaticRule = objc.registerName("automaticRule");
final _objc_msgSend_373 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_canInflectLanguage_ = objc.registerName("canInflectLanguage:");
late final _sel_canInflectPreferredLocalization =
    objc.registerName("canInflectPreferredLocalization");

/// NSMorphology
class NSMorphology extends objc.NSObject {
  NSMorphology._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMorphology] that points to the same underlying object as [other].
  NSMorphology.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMorphology] that wraps the given raw object pointer.
  NSMorphology.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMorphology].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMorphology);
  }

  /// grammaticalGender
  NSGrammaticalGender get grammaticalGender {
    final _ret = _objc_msgSend_374(this.pointer, _sel_grammaticalGender);
    return NSGrammaticalGender.fromValue(_ret);
  }

  /// setGrammaticalGender:
  set grammaticalGender(NSGrammaticalGender value) {
    return _objc_msgSend_375(
        this.pointer, _sel_setGrammaticalGender_, value.value);
  }

  /// partOfSpeech
  NSGrammaticalPartOfSpeech get partOfSpeech {
    final _ret = _objc_msgSend_376(this.pointer, _sel_partOfSpeech);
    return NSGrammaticalPartOfSpeech.fromValue(_ret);
  }

  /// setPartOfSpeech:
  set partOfSpeech(NSGrammaticalPartOfSpeech value) {
    return _objc_msgSend_377(this.pointer, _sel_setPartOfSpeech_, value.value);
  }

  /// number
  NSGrammaticalNumber get number {
    final _ret = _objc_msgSend_378(this.pointer, _sel_number);
    return NSGrammaticalNumber.fromValue(_ret);
  }

  /// setNumber:
  set number(NSGrammaticalNumber value) {
    return _objc_msgSend_379(this.pointer, _sel_setNumber_, value.value);
  }

  /// grammaticalCase
  NSGrammaticalCase get grammaticalCase {
    final _ret = _objc_msgSend_380(this.pointer, _sel_grammaticalCase);
    return NSGrammaticalCase.fromValue(_ret);
  }

  /// setGrammaticalCase:
  set grammaticalCase(NSGrammaticalCase value) {
    return _objc_msgSend_381(
        this.pointer, _sel_setGrammaticalCase_, value.value);
  }

  /// determination
  NSGrammaticalDetermination get determination {
    final _ret = _objc_msgSend_382(this.pointer, _sel_determination);
    return NSGrammaticalDetermination.fromValue(_ret);
  }

  /// setDetermination:
  set determination(NSGrammaticalDetermination value) {
    return _objc_msgSend_383(this.pointer, _sel_setDetermination_, value.value);
  }

  /// grammaticalPerson
  NSGrammaticalPerson get grammaticalPerson {
    final _ret = _objc_msgSend_384(this.pointer, _sel_grammaticalPerson);
    return NSGrammaticalPerson.fromValue(_ret);
  }

  /// setGrammaticalPerson:
  set grammaticalPerson(NSGrammaticalPerson value) {
    return _objc_msgSend_385(
        this.pointer, _sel_setGrammaticalPerson_, value.value);
  }

  /// pronounType
  NSGrammaticalPronounType get pronounType {
    final _ret = _objc_msgSend_386(this.pointer, _sel_pronounType);
    return NSGrammaticalPronounType.fromValue(_ret);
  }

  /// setPronounType:
  set pronounType(NSGrammaticalPronounType value) {
    return _objc_msgSend_387(this.pointer, _sel_setPronounType_, value.value);
  }

  /// definiteness
  NSGrammaticalDefiniteness get definiteness {
    final _ret = _objc_msgSend_388(this.pointer, _sel_definiteness);
    return NSGrammaticalDefiniteness.fromValue(_ret);
  }

  /// setDefiniteness:
  set definiteness(NSGrammaticalDefiniteness value) {
    return _objc_msgSend_389(this.pointer, _sel_setDefiniteness_, value.value);
  }

  /// customPronounForLanguage:
  NSMorphologyCustomPronoun? customPronounForLanguage_(objc.NSString language) {
    final _ret = _objc_msgSend_391(
        this.pointer, _sel_customPronounForLanguage_, language.pointer);
    return _ret.address == 0
        ? null
        : NSMorphologyCustomPronoun.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setCustomPronoun:forLanguage:error:
  bool setCustomPronoun_forLanguage_error_(NSMorphologyCustomPronoun? features,
      objc.NSString language, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_392(
        this.pointer,
        _sel_setCustomPronoun_forLanguage_error_,
        features?.pointer ?? ffi.nullptr,
        language.pointer,
        error);
  }

  /// isUnspecified
  bool get unspecified {
    return _objc_msgSend_13(this.pointer, _sel_isUnspecified);
  }

  /// userMorphology
  static NSMorphology getUserMorphology() {
    final _ret = _objc_msgSend_393(_class_NSMorphology, _sel_userMorphology);
    return NSMorphology.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSMorphology init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSMorphology.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSMorphology new1() {
    final _ret = _objc_msgSend_19(_class_NSMorphology, _sel_new);
    return NSMorphology.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSMorphology allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSMorphology, _sel_allocWithZone_, zone);
    return NSMorphology.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSMorphology alloc() {
    final _ret = _objc_msgSend_19(_class_NSMorphology, _sel_alloc);
    return NSMorphology.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSMorphology,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSMorphology,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSMorphology, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSMorphology, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSMorphology,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSMorphology,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSMorphology,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSMorphology, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSMorphology, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSMorphology = objc.getClass("NSMorphology");

enum NSGrammaticalGender {
  NSGrammaticalGenderNotSet(0),
  NSGrammaticalGenderFeminine(1),
  NSGrammaticalGenderMasculine(2),
  NSGrammaticalGenderNeuter(3);

  final int value;
  const NSGrammaticalGender(this.value);

  static NSGrammaticalGender fromValue(int value) => switch (value) {
        0 => NSGrammaticalGenderNotSet,
        1 => NSGrammaticalGenderFeminine,
        2 => NSGrammaticalGenderMasculine,
        3 => NSGrammaticalGenderNeuter,
        _ =>
          throw ArgumentError("Unknown value for NSGrammaticalGender: $value"),
      };
}

late final _sel_grammaticalGender = objc.registerName("grammaticalGender");
final _objc_msgSend_374 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setGrammaticalGender_ =
    objc.registerName("setGrammaticalGender:");
final _objc_msgSend_375 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum NSGrammaticalPartOfSpeech {
  NSGrammaticalPartOfSpeechNotSet(0),
  NSGrammaticalPartOfSpeechDeterminer(1),
  NSGrammaticalPartOfSpeechPronoun(2),
  NSGrammaticalPartOfSpeechLetter(3),
  NSGrammaticalPartOfSpeechAdverb(4),
  NSGrammaticalPartOfSpeechParticle(5),
  NSGrammaticalPartOfSpeechAdjective(6),
  NSGrammaticalPartOfSpeechAdposition(7),
  NSGrammaticalPartOfSpeechVerb(8),
  NSGrammaticalPartOfSpeechNoun(9),
  NSGrammaticalPartOfSpeechConjunction(10),
  NSGrammaticalPartOfSpeechNumeral(11),
  NSGrammaticalPartOfSpeechInterjection(12),
  NSGrammaticalPartOfSpeechPreposition(13),
  NSGrammaticalPartOfSpeechAbbreviation(14);

  final int value;
  const NSGrammaticalPartOfSpeech(this.value);

  static NSGrammaticalPartOfSpeech fromValue(int value) => switch (value) {
        0 => NSGrammaticalPartOfSpeechNotSet,
        1 => NSGrammaticalPartOfSpeechDeterminer,
        2 => NSGrammaticalPartOfSpeechPronoun,
        3 => NSGrammaticalPartOfSpeechLetter,
        4 => NSGrammaticalPartOfSpeechAdverb,
        5 => NSGrammaticalPartOfSpeechParticle,
        6 => NSGrammaticalPartOfSpeechAdjective,
        7 => NSGrammaticalPartOfSpeechAdposition,
        8 => NSGrammaticalPartOfSpeechVerb,
        9 => NSGrammaticalPartOfSpeechNoun,
        10 => NSGrammaticalPartOfSpeechConjunction,
        11 => NSGrammaticalPartOfSpeechNumeral,
        12 => NSGrammaticalPartOfSpeechInterjection,
        13 => NSGrammaticalPartOfSpeechPreposition,
        14 => NSGrammaticalPartOfSpeechAbbreviation,
        _ => throw ArgumentError(
            "Unknown value for NSGrammaticalPartOfSpeech: $value"),
      };
}

late final _sel_partOfSpeech = objc.registerName("partOfSpeech");
final _objc_msgSend_376 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPartOfSpeech_ = objc.registerName("setPartOfSpeech:");
final _objc_msgSend_377 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum NSGrammaticalNumber {
  NSGrammaticalNumberNotSet(0),
  NSGrammaticalNumberSingular(1),
  NSGrammaticalNumberZero(2),
  NSGrammaticalNumberPlural(3),
  NSGrammaticalNumberPluralTwo(4),
  NSGrammaticalNumberPluralFew(5),
  NSGrammaticalNumberPluralMany(6);

  final int value;
  const NSGrammaticalNumber(this.value);

  static NSGrammaticalNumber fromValue(int value) => switch (value) {
        0 => NSGrammaticalNumberNotSet,
        1 => NSGrammaticalNumberSingular,
        2 => NSGrammaticalNumberZero,
        3 => NSGrammaticalNumberPlural,
        4 => NSGrammaticalNumberPluralTwo,
        5 => NSGrammaticalNumberPluralFew,
        6 => NSGrammaticalNumberPluralMany,
        _ =>
          throw ArgumentError("Unknown value for NSGrammaticalNumber: $value"),
      };
}

late final _sel_number = objc.registerName("number");
final _objc_msgSend_378 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setNumber_ = objc.registerName("setNumber:");
final _objc_msgSend_379 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum NSGrammaticalCase {
  NSGrammaticalCaseNotSet(0),
  NSGrammaticalCaseNominative(1),
  NSGrammaticalCaseAccusative(2),
  NSGrammaticalCaseDative(3),
  NSGrammaticalCaseGenitive(4),
  NSGrammaticalCasePrepositional(5),
  NSGrammaticalCaseAblative(6),
  NSGrammaticalCaseAdessive(7),
  NSGrammaticalCaseAllative(8),
  NSGrammaticalCaseElative(9),
  NSGrammaticalCaseIllative(10),
  NSGrammaticalCaseEssive(11),
  NSGrammaticalCaseInessive(12),
  NSGrammaticalCaseLocative(13),
  NSGrammaticalCaseTranslative(14);

  final int value;
  const NSGrammaticalCase(this.value);

  static NSGrammaticalCase fromValue(int value) => switch (value) {
        0 => NSGrammaticalCaseNotSet,
        1 => NSGrammaticalCaseNominative,
        2 => NSGrammaticalCaseAccusative,
        3 => NSGrammaticalCaseDative,
        4 => NSGrammaticalCaseGenitive,
        5 => NSGrammaticalCasePrepositional,
        6 => NSGrammaticalCaseAblative,
        7 => NSGrammaticalCaseAdessive,
        8 => NSGrammaticalCaseAllative,
        9 => NSGrammaticalCaseElative,
        10 => NSGrammaticalCaseIllative,
        11 => NSGrammaticalCaseEssive,
        12 => NSGrammaticalCaseInessive,
        13 => NSGrammaticalCaseLocative,
        14 => NSGrammaticalCaseTranslative,
        _ => throw ArgumentError("Unknown value for NSGrammaticalCase: $value"),
      };
}

late final _sel_grammaticalCase = objc.registerName("grammaticalCase");
final _objc_msgSend_380 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setGrammaticalCase_ = objc.registerName("setGrammaticalCase:");
final _objc_msgSend_381 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum NSGrammaticalDetermination {
  NSGrammaticalDeterminationNotSet(0),
  NSGrammaticalDeterminationIndependent(1),
  NSGrammaticalDeterminationDependent(2);

  final int value;
  const NSGrammaticalDetermination(this.value);

  static NSGrammaticalDetermination fromValue(int value) => switch (value) {
        0 => NSGrammaticalDeterminationNotSet,
        1 => NSGrammaticalDeterminationIndependent,
        2 => NSGrammaticalDeterminationDependent,
        _ => throw ArgumentError(
            "Unknown value for NSGrammaticalDetermination: $value"),
      };
}

late final _sel_determination = objc.registerName("determination");
final _objc_msgSend_382 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDetermination_ = objc.registerName("setDetermination:");
final _objc_msgSend_383 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum NSGrammaticalPerson {
  NSGrammaticalPersonNotSet(0),
  NSGrammaticalPersonFirst(1),
  NSGrammaticalPersonSecond(2),
  NSGrammaticalPersonThird(3);

  final int value;
  const NSGrammaticalPerson(this.value);

  static NSGrammaticalPerson fromValue(int value) => switch (value) {
        0 => NSGrammaticalPersonNotSet,
        1 => NSGrammaticalPersonFirst,
        2 => NSGrammaticalPersonSecond,
        3 => NSGrammaticalPersonThird,
        _ =>
          throw ArgumentError("Unknown value for NSGrammaticalPerson: $value"),
      };
}

late final _sel_grammaticalPerson = objc.registerName("grammaticalPerson");
final _objc_msgSend_384 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setGrammaticalPerson_ =
    objc.registerName("setGrammaticalPerson:");
final _objc_msgSend_385 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum NSGrammaticalPronounType {
  NSGrammaticalPronounTypeNotSet(0),
  NSGrammaticalPronounTypePersonal(1),
  NSGrammaticalPronounTypeReflexive(2),
  NSGrammaticalPronounTypePossessive(3);

  final int value;
  const NSGrammaticalPronounType(this.value);

  static NSGrammaticalPronounType fromValue(int value) => switch (value) {
        0 => NSGrammaticalPronounTypeNotSet,
        1 => NSGrammaticalPronounTypePersonal,
        2 => NSGrammaticalPronounTypeReflexive,
        3 => NSGrammaticalPronounTypePossessive,
        _ => throw ArgumentError(
            "Unknown value for NSGrammaticalPronounType: $value"),
      };
}

late final _sel_pronounType = objc.registerName("pronounType");
final _objc_msgSend_386 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPronounType_ = objc.registerName("setPronounType:");
final _objc_msgSend_387 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum NSGrammaticalDefiniteness {
  NSGrammaticalDefinitenessNotSet(0),
  NSGrammaticalDefinitenessIndefinite(1),
  NSGrammaticalDefinitenessDefinite(2);

  final int value;
  const NSGrammaticalDefiniteness(this.value);

  static NSGrammaticalDefiniteness fromValue(int value) => switch (value) {
        0 => NSGrammaticalDefinitenessNotSet,
        1 => NSGrammaticalDefinitenessIndefinite,
        2 => NSGrammaticalDefinitenessDefinite,
        _ => throw ArgumentError(
            "Unknown value for NSGrammaticalDefiniteness: $value"),
      };
}

late final _sel_definiteness = objc.registerName("definiteness");
final _objc_msgSend_388 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDefiniteness_ = objc.registerName("setDefiniteness:");
final _objc_msgSend_389 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

/// NSMorphologyCustomPronoun
class NSMorphologyCustomPronoun extends objc.NSObject {
  NSMorphologyCustomPronoun._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMorphologyCustomPronoun] that points to the same underlying object as [other].
  NSMorphologyCustomPronoun.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMorphologyCustomPronoun] that wraps the given raw object pointer.
  NSMorphologyCustomPronoun.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMorphologyCustomPronoun].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMorphologyCustomPronoun);
  }

  /// isSupportedForLanguage:
  static bool isSupportedForLanguage_(objc.NSString language) {
    return _objc_msgSend_31(_class_NSMorphologyCustomPronoun,
        _sel_isSupportedForLanguage_, language.pointer);
  }

  /// requiredKeysForLanguage:
  static objc.NSArray requiredKeysForLanguage_(objc.NSString language) {
    final _ret = _objc_msgSend_390(_class_NSMorphologyCustomPronoun,
        _sel_requiredKeysForLanguage_, language.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// subjectForm
  objc.NSString? get subjectForm {
    final _ret = _objc_msgSend_20(this.pointer, _sel_subjectForm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSubjectForm:
  set subjectForm(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setSubjectForm_, value?.pointer ?? ffi.nullptr);
  }

  /// objectForm
  objc.NSString? get objectForm {
    final _ret = _objc_msgSend_20(this.pointer, _sel_objectForm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setObjectForm:
  set objectForm(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setObjectForm_, value?.pointer ?? ffi.nullptr);
  }

  /// possessiveForm
  objc.NSString? get possessiveForm {
    final _ret = _objc_msgSend_20(this.pointer, _sel_possessiveForm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPossessiveForm:
  set possessiveForm(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setPossessiveForm_, value?.pointer ?? ffi.nullptr);
  }

  /// possessiveAdjectiveForm
  objc.NSString? get possessiveAdjectiveForm {
    final _ret = _objc_msgSend_20(this.pointer, _sel_possessiveAdjectiveForm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPossessiveAdjectiveForm:
  set possessiveAdjectiveForm(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setPossessiveAdjectiveForm_,
        value?.pointer ?? ffi.nullptr);
  }

  /// reflexiveForm
  objc.NSString? get reflexiveForm {
    final _ret = _objc_msgSend_20(this.pointer, _sel_reflexiveForm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setReflexiveForm:
  set reflexiveForm(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setReflexiveForm_, value?.pointer ?? ffi.nullptr);
  }

  /// init
  NSMorphologyCustomPronoun init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSMorphologyCustomPronoun.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSMorphologyCustomPronoun new1() {
    final _ret = _objc_msgSend_19(_class_NSMorphologyCustomPronoun, _sel_new);
    return NSMorphologyCustomPronoun.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSMorphologyCustomPronoun allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSMorphologyCustomPronoun, _sel_allocWithZone_, zone);
    return NSMorphologyCustomPronoun.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSMorphologyCustomPronoun alloc() {
    final _ret = _objc_msgSend_19(_class_NSMorphologyCustomPronoun, _sel_alloc);
    return NSMorphologyCustomPronoun.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSMorphologyCustomPronoun,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSMorphologyCustomPronoun,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSMorphologyCustomPronoun, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSMorphologyCustomPronoun, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSMorphologyCustomPronoun,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSMorphologyCustomPronoun,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSMorphologyCustomPronoun,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSMorphologyCustomPronoun, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSMorphologyCustomPronoun, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSMorphologyCustomPronoun =
    objc.getClass("NSMorphologyCustomPronoun");
late final _sel_isSupportedForLanguage_ =
    objc.registerName("isSupportedForLanguage:");
late final _sel_requiredKeysForLanguage_ =
    objc.registerName("requiredKeysForLanguage:");
final _objc_msgSend_390 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_subjectForm = objc.registerName("subjectForm");
late final _sel_setSubjectForm_ = objc.registerName("setSubjectForm:");
late final _sel_objectForm = objc.registerName("objectForm");
late final _sel_setObjectForm_ = objc.registerName("setObjectForm:");
late final _sel_possessiveForm = objc.registerName("possessiveForm");
late final _sel_setPossessiveForm_ = objc.registerName("setPossessiveForm:");
late final _sel_possessiveAdjectiveForm =
    objc.registerName("possessiveAdjectiveForm");
late final _sel_setPossessiveAdjectiveForm_ =
    objc.registerName("setPossessiveAdjectiveForm:");
late final _sel_reflexiveForm = objc.registerName("reflexiveForm");
late final _sel_setReflexiveForm_ = objc.registerName("setReflexiveForm:");
late final _sel_customPronounForLanguage_ =
    objc.registerName("customPronounForLanguage:");
final _objc_msgSend_391 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setCustomPronoun_forLanguage_error_ =
    objc.registerName("setCustomPronoun:forLanguage:error:");
final _objc_msgSend_392 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isUnspecified = objc.registerName("isUnspecified");
late final _sel_userMorphology = objc.registerName("userMorphology");
final _objc_msgSend_393 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSOperationQueue
class NSOperationQueue extends objc.NSObject {
  NSOperationQueue._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOperationQueue] that points to the same underlying object as [other].
  NSOperationQueue.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOperationQueue] that wraps the given raw object pointer.
  NSOperationQueue.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOperationQueue].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOperationQueue);
  }

  /// progress
  NSProgress get progress {
    final _ret = _objc_msgSend_359(this.pointer, _sel_progress);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  /// addOperation:
  void addOperation_(NSOperation op) {
    _objc_msgSend_394(this.pointer, _sel_addOperation_, op.pointer);
  }

  /// addOperations:waitUntilFinished:
  void addOperations_waitUntilFinished_(objc.NSArray ops, bool wait) {
    _objc_msgSend_399(
        this.pointer, _sel_addOperations_waitUntilFinished_, ops.pointer, wait);
  }

  /// addOperationWithBlock:
  void addOperationWithBlock_(objc.ObjCBlock<ffi.Void Function()> block) {
    _objc_msgSend_261(this.pointer, _sel_addOperationWithBlock_, block.pointer);
  }

  /// addBarrierBlock:
  void addBarrierBlock_(objc.ObjCBlock<ffi.Void Function()> barrier) {
    _objc_msgSend_261(this.pointer, _sel_addBarrierBlock_, barrier.pointer);
  }

  /// maxConcurrentOperationCount
  int get maxConcurrentOperationCount {
    return _objc_msgSend_125(this.pointer, _sel_maxConcurrentOperationCount);
  }

  /// setMaxConcurrentOperationCount:
  set maxConcurrentOperationCount(int value) {
    return _objc_msgSend_144(
        this.pointer, _sel_setMaxConcurrentOperationCount_, value);
  }

  /// isSuspended
  bool get suspended {
    return _objc_msgSend_13(this.pointer, _sel_isSuspended);
  }

  /// setSuspended:
  set suspended(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setSuspended_, value);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_20(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  /// qualityOfService
  NSQualityOfService get qualityOfService {
    final _ret = _objc_msgSend_397(this.pointer, _sel_qualityOfService);
    return NSQualityOfService.fromValue(_ret);
  }

  /// setQualityOfService:
  set qualityOfService(NSQualityOfService value) {
    return _objc_msgSend_398(
        this.pointer, _sel_setQualityOfService_, value.value);
  }

  /// underlyingQueue
  objc.NSObject? get underlyingQueue {
    final _ret = _objc_msgSend_400(this.pointer, _sel_underlyingQueue);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// setUnderlyingQueue:
  set underlyingQueue(objc.NSObject? value) {
    return _objc_msgSend_401(
        this.pointer, _sel_setUnderlyingQueue_, value?.pointer ?? ffi.nullptr);
  }

  /// cancelAllOperations
  void cancelAllOperations() {
    _objc_msgSend_7(this.pointer, _sel_cancelAllOperations);
  }

  /// waitUntilAllOperationsAreFinished
  void waitUntilAllOperationsAreFinished() {
    _objc_msgSend_7(this.pointer, _sel_waitUntilAllOperationsAreFinished);
  }

  /// currentQueue
  static NSOperationQueue? getCurrentQueue() {
    final _ret = _objc_msgSend_402(_class_NSOperationQueue, _sel_currentQueue);
    return _ret.address == 0
        ? null
        : NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  /// mainQueue
  static NSOperationQueue getMainQueue() {
    final _ret = _objc_msgSend_403(_class_NSOperationQueue, _sel_mainQueue);
    return NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  /// operations
  objc.NSArray get operations {
    final _ret = _objc_msgSend_33(this.pointer, _sel_operations);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// operationCount
  int get operationCount {
    return _objc_msgSend_57(this.pointer, _sel_operationCount);
  }

  /// init
  NSOperationQueue init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSOperationQueue new1() {
    final _ret = _objc_msgSend_19(_class_NSOperationQueue, _sel_new);
    return NSOperationQueue.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSOperationQueue allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSOperationQueue, _sel_allocWithZone_, zone);
    return NSOperationQueue.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSOperationQueue alloc() {
    final _ret = _objc_msgSend_19(_class_NSOperationQueue, _sel_alloc);
    return NSOperationQueue.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSOperationQueue,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSOperationQueue,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSOperationQueue, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSOperationQueue, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSOperationQueue,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSOperationQueue,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSOperationQueue,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSOperationQueue, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSOperationQueue, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSOperationQueue = objc.getClass("NSOperationQueue");

/// NSOperation
class NSOperation extends objc.NSObject {
  NSOperation._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOperation] that points to the same underlying object as [other].
  NSOperation.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOperation] that wraps the given raw object pointer.
  NSOperation.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOperation].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOperation);
  }

  /// start
  void start() {
    _objc_msgSend_7(this.pointer, _sel_start);
  }

  /// main
  void main() {
    _objc_msgSend_7(this.pointer, _sel_main);
  }

  /// isCancelled
  bool get cancelled {
    return _objc_msgSend_13(this.pointer, _sel_isCancelled);
  }

  /// cancel
  void cancel() {
    _objc_msgSend_7(this.pointer, _sel_cancel);
  }

  /// isExecuting
  bool get executing {
    return _objc_msgSend_13(this.pointer, _sel_isExecuting);
  }

  /// isFinished
  bool get finished {
    return _objc_msgSend_13(this.pointer, _sel_isFinished);
  }

  /// isConcurrent
  bool get concurrent {
    return _objc_msgSend_13(this.pointer, _sel_isConcurrent);
  }

  /// isAsynchronous
  bool get asynchronous {
    return _objc_msgSend_13(this.pointer, _sel_isAsynchronous);
  }

  /// isReady
  bool get ready {
    return _objc_msgSend_13(this.pointer, _sel_isReady);
  }

  /// addDependency:
  void addDependency_(NSOperation op) {
    _objc_msgSend_394(this.pointer, _sel_addDependency_, op.pointer);
  }

  /// removeDependency:
  void removeDependency_(NSOperation op) {
    _objc_msgSend_394(this.pointer, _sel_removeDependency_, op.pointer);
  }

  /// dependencies
  objc.NSArray get dependencies {
    final _ret = _objc_msgSend_33(this.pointer, _sel_dependencies);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// queuePriority
  NSOperationQueuePriority get queuePriority {
    final _ret = _objc_msgSend_395(this.pointer, _sel_queuePriority);
    return NSOperationQueuePriority.fromValue(_ret);
  }

  /// setQueuePriority:
  set queuePriority(NSOperationQueuePriority value) {
    return _objc_msgSend_396(this.pointer, _sel_setQueuePriority_, value.value);
  }

  /// completionBlock
  objc.ObjCBlock<ffi.Void Function()>? get completionBlock {
    final _ret = _objc_msgSend_15(this.pointer, _sel_completionBlock);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCompletionBlock:
  set completionBlock(objc.ObjCBlock<ffi.Void Function()>? value) {
    return _objc_msgSend_16(
        this.pointer, _sel_setCompletionBlock_, value?.pointer ?? ffi.nullptr);
  }

  /// waitUntilFinished
  void waitUntilFinished() {
    _objc_msgSend_7(this.pointer, _sel_waitUntilFinished);
  }

  /// threadPriority
  double get threadPriority {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_threadPriority)
        : _objc_msgSend_18(this.pointer, _sel_threadPriority);
  }

  /// setThreadPriority:
  set threadPriority(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setThreadPriority_, value);
  }

  /// qualityOfService
  NSQualityOfService get qualityOfService {
    final _ret = _objc_msgSend_397(this.pointer, _sel_qualityOfService);
    return NSQualityOfService.fromValue(_ret);
  }

  /// setQualityOfService:
  set qualityOfService(NSQualityOfService value) {
    return _objc_msgSend_398(
        this.pointer, _sel_setQualityOfService_, value.value);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_20(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  /// init
  NSOperation init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSOperation.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSOperation new1() {
    final _ret = _objc_msgSend_19(_class_NSOperation, _sel_new);
    return NSOperation.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSOperation allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSOperation, _sel_allocWithZone_, zone);
    return NSOperation.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSOperation alloc() {
    final _ret = _objc_msgSend_19(_class_NSOperation, _sel_alloc);
    return NSOperation.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSOperation,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSOperation,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSOperation, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSOperation, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSOperation,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSOperation,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSOperation,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSOperation, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSOperation, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSOperation = objc.getClass("NSOperation");
late final _sel_start = objc.registerName("start");
late final _sel_main = objc.registerName("main");
late final _sel_isExecuting = objc.registerName("isExecuting");
late final _sel_isConcurrent = objc.registerName("isConcurrent");
late final _sel_isAsynchronous = objc.registerName("isAsynchronous");
late final _sel_isReady = objc.registerName("isReady");
late final _sel_addDependency_ = objc.registerName("addDependency:");
final _objc_msgSend_394 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeDependency_ = objc.registerName("removeDependency:");
late final _sel_dependencies = objc.registerName("dependencies");

enum NSOperationQueuePriority {
  NSOperationQueuePriorityVeryLow(-8),
  NSOperationQueuePriorityLow(-4),
  NSOperationQueuePriorityNormal(0),
  NSOperationQueuePriorityHigh(4),
  NSOperationQueuePriorityVeryHigh(8);

  final int value;
  const NSOperationQueuePriority(this.value);

  static NSOperationQueuePriority fromValue(int value) => switch (value) {
        -8 => NSOperationQueuePriorityVeryLow,
        -4 => NSOperationQueuePriorityLow,
        0 => NSOperationQueuePriorityNormal,
        4 => NSOperationQueuePriorityHigh,
        8 => NSOperationQueuePriorityVeryHigh,
        _ => throw ArgumentError(
            "Unknown value for NSOperationQueuePriority: $value"),
      };
}

late final _sel_queuePriority = objc.registerName("queuePriority");
final _objc_msgSend_395 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setQueuePriority_ = objc.registerName("setQueuePriority:");
final _objc_msgSend_396 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_completionBlock = objc.registerName("completionBlock");
late final _sel_setCompletionBlock_ = objc.registerName("setCompletionBlock:");
late final _sel_waitUntilFinished = objc.registerName("waitUntilFinished");
late final _sel_threadPriority = objc.registerName("threadPriority");
late final _sel_setThreadPriority_ = objc.registerName("setThreadPriority:");

enum NSQualityOfService {
  NSQualityOfServiceUserInteractive(33),
  NSQualityOfServiceUserInitiated(25),
  NSQualityOfServiceUtility(17),
  NSQualityOfServiceBackground(9),
  NSQualityOfServiceDefault(-1);

  final int value;
  const NSQualityOfService(this.value);

  static NSQualityOfService fromValue(int value) => switch (value) {
        33 => NSQualityOfServiceUserInteractive,
        25 => NSQualityOfServiceUserInitiated,
        17 => NSQualityOfServiceUtility,
        9 => NSQualityOfServiceBackground,
        -1 => NSQualityOfServiceDefault,
        _ =>
          throw ArgumentError("Unknown value for NSQualityOfService: $value"),
      };
}

late final _sel_qualityOfService = objc.registerName("qualityOfService");
final _objc_msgSend_397 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setQualityOfService_ =
    objc.registerName("setQualityOfService:");
final _objc_msgSend_398 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setName_ = objc.registerName("setName:");
late final _sel_addOperation_ = objc.registerName("addOperation:");
late final _sel_addOperations_waitUntilFinished_ =
    objc.registerName("addOperations:waitUntilFinished:");
final _objc_msgSend_399 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_addOperationWithBlock_ =
    objc.registerName("addOperationWithBlock:");
late final _sel_addBarrierBlock_ = objc.registerName("addBarrierBlock:");
late final _sel_maxConcurrentOperationCount =
    objc.registerName("maxConcurrentOperationCount");
late final _sel_setMaxConcurrentOperationCount_ =
    objc.registerName("setMaxConcurrentOperationCount:");
late final _sel_isSuspended = objc.registerName("isSuspended");
late final _sel_setSuspended_ = objc.registerName("setSuspended:");
late final _sel_underlyingQueue = objc.registerName("underlyingQueue");
final _objc_msgSend_400 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setUnderlyingQueue_ = objc.registerName("setUnderlyingQueue:");
final _objc_msgSend_401 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cancelAllOperations = objc.registerName("cancelAllOperations");
late final _sel_waitUntilAllOperationsAreFinished =
    objc.registerName("waitUntilAllOperationsAreFinished");
late final _sel_currentQueue = objc.registerName("currentQueue");
final _objc_msgSend_402 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mainQueue = objc.registerName("mainQueue");
final _objc_msgSend_403 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_operations = objc.registerName("operations");
late final _sel_operationCount = objc.registerName("operationCount");

/// NSOrthography
class NSOrthography extends objc.NSObject {
  NSOrthography._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOrthography] that points to the same underlying object as [other].
  NSOrthography.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOrthography] that wraps the given raw object pointer.
  NSOrthography.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOrthography].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOrthography);
  }

  /// dominantScript
  objc.NSString get dominantScript {
    final _ret = _objc_msgSend_11(this.pointer, _sel_dominantScript);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// languageMap
  objc.NSDictionary get languageMap {
    final _ret = _objc_msgSend_123(this.pointer, _sel_languageMap);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithDominantScript:languageMap:
  NSOrthography initWithDominantScript_languageMap_(
      objc.NSString script, objc.NSDictionary map) {
    final _ret = _objc_msgSend_404(this.pointer,
        _sel_initWithDominantScript_languageMap_, script.pointer, map.pointer);
    return NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCoder:
  NSOrthography? initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_242(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  /// languagesForScript:
  objc.NSArray? languagesForScript_(objc.NSString script) {
    final _ret = _objc_msgSend_302(
        this.pointer, _sel_languagesForScript_, script.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// dominantLanguageForScript:
  objc.NSString? dominantLanguageForScript_(objc.NSString script) {
    final _ret = _objc_msgSend_42(
        this.pointer, _sel_dominantLanguageForScript_, script.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// dominantLanguage
  objc.NSString get dominantLanguage {
    final _ret = _objc_msgSend_11(this.pointer, _sel_dominantLanguage);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// allScripts
  objc.NSArray get allScripts {
    final _ret = _objc_msgSend_33(this.pointer, _sel_allScripts);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allLanguages
  objc.NSArray get allLanguages {
    final _ret = _objc_msgSend_33(this.pointer, _sel_allLanguages);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultOrthographyForLanguage:
  static NSOrthography defaultOrthographyForLanguage_(objc.NSString language) {
    final _ret = _objc_msgSend_63(_class_NSOrthography,
        _sel_defaultOrthographyForLanguage_, language.pointer);
    return NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  /// orthographyWithDominantScript:languageMap:
  static NSOrthography orthographyWithDominantScript_languageMap_(
      objc.NSString script, objc.NSDictionary map) {
    final _ret = _objc_msgSend_404(
        _class_NSOrthography,
        _sel_orthographyWithDominantScript_languageMap_,
        script.pointer,
        map.pointer);
    return NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSOrthography init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSOrthography new1() {
    final _ret = _objc_msgSend_19(_class_NSOrthography, _sel_new);
    return NSOrthography.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSOrthography allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSOrthography, _sel_allocWithZone_, zone);
    return NSOrthography.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSOrthography alloc() {
    final _ret = _objc_msgSend_19(_class_NSOrthography, _sel_alloc);
    return NSOrthography.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSOrthography,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSOrthography,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSOrthography, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSOrthography, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSOrthography,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSOrthography,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSOrthography,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSOrthography, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSOrthography, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSOrthography = objc.getClass("NSOrthography");
late final _sel_dominantScript = objc.registerName("dominantScript");
late final _sel_languageMap = objc.registerName("languageMap");
late final _sel_initWithDominantScript_languageMap_ =
    objc.registerName("initWithDominantScript:languageMap:");
final _objc_msgSend_404 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_languagesForScript_ = objc.registerName("languagesForScript:");
late final _sel_dominantLanguageForScript_ =
    objc.registerName("dominantLanguageForScript:");
late final _sel_dominantLanguage = objc.registerName("dominantLanguage");
late final _sel_allScripts = objc.registerName("allScripts");
late final _sel_allLanguages = objc.registerName("allLanguages");
late final _sel_defaultOrthographyForLanguage_ =
    objc.registerName("defaultOrthographyForLanguage:");
late final _sel_orthographyWithDominantScript_languageMap_ =
    objc.registerName("orthographyWithDominantScript:languageMap:");

/// NSPointerArray
class NSPointerArray extends objc.NSObject {
  NSPointerArray._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPointerArray] that points to the same underlying object as [other].
  NSPointerArray.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPointerArray] that wraps the given raw object pointer.
  NSPointerArray.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPointerArray].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSPointerArray);
  }

  /// initWithOptions:
  NSPointerArray initWithOptions_(NSPointerFunctionsOptions options) {
    final _ret =
        _objc_msgSend_405(this.pointer, _sel_initWithOptions_, options.value);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithPointerFunctions:
  NSPointerArray initWithPointerFunctions_(NSPointerFunctions functions) {
    final _ret = _objc_msgSend_419(
        this.pointer, _sel_initWithPointerFunctions_, functions.pointer);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// pointerArrayWithOptions:
  static NSPointerArray pointerArrayWithOptions_(
      NSPointerFunctionsOptions options) {
    final _ret = _objc_msgSend_420(
        _class_NSPointerArray, _sel_pointerArrayWithOptions_, options.value);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// pointerArrayWithPointerFunctions:
  static NSPointerArray pointerArrayWithPointerFunctions_(
      NSPointerFunctions functions) {
    final _ret = _objc_msgSend_421(_class_NSPointerArray,
        _sel_pointerArrayWithPointerFunctions_, functions.pointer);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// pointerFunctions
  NSPointerFunctions get pointerFunctions {
    final _ret = _objc_msgSend_422(this.pointer, _sel_pointerFunctions);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// pointerAtIndex:
  ffi.Pointer<ffi.Void> pointerAtIndex_(int index) {
    return _objc_msgSend_423(this.pointer, _sel_pointerAtIndex_, index);
  }

  /// addPointer:
  void addPointer_(ffi.Pointer<ffi.Void> pointer) {
    _objc_msgSend_424(this.pointer, _sel_addPointer_, pointer);
  }

  /// removePointerAtIndex:
  void removePointerAtIndex_(int index) {
    _objc_msgSend_425(this.pointer, _sel_removePointerAtIndex_, index);
  }

  /// insertPointer:atIndex:
  void insertPointer_atIndex_(ffi.Pointer<ffi.Void> item, int index) {
    _objc_msgSend_426(this.pointer, _sel_insertPointer_atIndex_, item, index);
  }

  /// replacePointerAtIndex:withPointer:
  void replacePointerAtIndex_withPointer_(
      int index, ffi.Pointer<ffi.Void> item) {
    _objc_msgSend_427(
        this.pointer, _sel_replacePointerAtIndex_withPointer_, index, item);
  }

  /// compact
  void compact() {
    _objc_msgSend_7(this.pointer, _sel_compact);
  }

  /// count
  int get count {
    return _objc_msgSend_57(this.pointer, _sel_count);
  }

  /// setCount:
  set count(int value) {
    return _objc_msgSend_135(this.pointer, _sel_setCount_, value);
  }

  /// pointerArrayWithStrongObjects
  static objc.ObjCObjectBase pointerArrayWithStrongObjects() {
    final _ret = _objc_msgSend_19(
        _class_NSPointerArray, _sel_pointerArrayWithStrongObjects);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// pointerArrayWithWeakObjects
  static objc.ObjCObjectBase pointerArrayWithWeakObjects() {
    final _ret = _objc_msgSend_19(
        _class_NSPointerArray, _sel_pointerArrayWithWeakObjects);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// strongObjectsPointerArray
  static NSPointerArray strongObjectsPointerArray() {
    final _ret = _objc_msgSend_428(
        _class_NSPointerArray, _sel_strongObjectsPointerArray);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// weakObjectsPointerArray
  static NSPointerArray weakObjectsPointerArray() {
    final _ret =
        _objc_msgSend_428(_class_NSPointerArray, _sel_weakObjectsPointerArray);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allObjects
  objc.NSArray get allObjects {
    final _ret = _objc_msgSend_33(this.pointer, _sel_allObjects);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSPointerArray init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSPointerArray new1() {
    final _ret = _objc_msgSend_19(_class_NSPointerArray, _sel_new);
    return NSPointerArray.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSPointerArray allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSPointerArray, _sel_allocWithZone_, zone);
    return NSPointerArray.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSPointerArray alloc() {
    final _ret = _objc_msgSend_19(_class_NSPointerArray, _sel_alloc);
    return NSPointerArray.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSPointerArray,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSPointerArray,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSPointerArray, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSPointerArray, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSPointerArray,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSPointerArray,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSPointerArray,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSPointerArray, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSPointerArray, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSPointerArray = objc.getClass("NSPointerArray");

enum NSPointerFunctionsOptions {
  NSPointerFunctionsStrongMemory(0),
  NSPointerFunctionsZeroingWeakMemory(1),
  NSPointerFunctionsOpaqueMemory(2),
  NSPointerFunctionsMallocMemory(3),
  NSPointerFunctionsMachVirtualMemory(4),
  NSPointerFunctionsWeakMemory(5),
  NSPointerFunctionsOpaquePersonality(256),
  NSPointerFunctionsObjectPointerPersonality(512),
  NSPointerFunctionsCStringPersonality(768),
  NSPointerFunctionsStructPersonality(1024),
  NSPointerFunctionsIntegerPersonality(1280),
  NSPointerFunctionsCopyIn(65536);

  static const NSPointerFunctionsObjectPersonality =
      NSPointerFunctionsStrongMemory;

  final int value;
  const NSPointerFunctionsOptions(this.value);

  static NSPointerFunctionsOptions fromValue(int value) => switch (value) {
        0 => NSPointerFunctionsStrongMemory,
        1 => NSPointerFunctionsZeroingWeakMemory,
        2 => NSPointerFunctionsOpaqueMemory,
        3 => NSPointerFunctionsMallocMemory,
        4 => NSPointerFunctionsMachVirtualMemory,
        5 => NSPointerFunctionsWeakMemory,
        256 => NSPointerFunctionsOpaquePersonality,
        512 => NSPointerFunctionsObjectPointerPersonality,
        768 => NSPointerFunctionsCStringPersonality,
        1024 => NSPointerFunctionsStructPersonality,
        1280 => NSPointerFunctionsIntegerPersonality,
        65536 => NSPointerFunctionsCopyIn,
        _ => throw ArgumentError(
            "Unknown value for NSPointerFunctionsOptions: $value"),
      };

  @override
  String toString() {
    if (this == NSPointerFunctionsStrongMemory)
      return "NSPointerFunctionsOptions.NSPointerFunctionsStrongMemory, NSPointerFunctionsOptions.NSPointerFunctionsObjectPersonality";
    return super.toString();
  }
}

late final _sel_initWithOptions_ = objc.registerName("initWithOptions:");
final _objc_msgSend_405 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

/// NSPointerFunctions
class NSPointerFunctions extends objc.NSObject {
  NSPointerFunctions._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPointerFunctions] that points to the same underlying object as [other].
  NSPointerFunctions.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPointerFunctions] that wraps the given raw object pointer.
  NSPointerFunctions.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPointerFunctions].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSPointerFunctions);
  }

  /// initWithOptions:
  NSPointerFunctions initWithOptions_(NSPointerFunctionsOptions options) {
    final _ret =
        _objc_msgSend_405(this.pointer, _sel_initWithOptions_, options.value);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// pointerFunctionsWithOptions:
  static NSPointerFunctions pointerFunctionsWithOptions_(
      NSPointerFunctionsOptions options) {
    final _ret = _objc_msgSend_406(_class_NSPointerFunctions,
        _sel_pointerFunctionsWithOptions_, options.value);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// hashFunction
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedLong Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>>
      get hashFunction {
    return _objc_msgSend_407(this.pointer, _sel_hashFunction);
  }

  /// setHashFunction:
  set hashFunction(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.UnsignedLong Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.UnsignedLong Function(
                                  ffi.Pointer<ffi.Void>)>>)>>
          value) {
    return _objc_msgSend_408(this.pointer, _sel_setHashFunction_, value);
  }

  /// isEqualFunction
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>>
      get isEqualFunction {
    return _objc_msgSend_409(this.pointer, _sel_isEqualFunction);
  }

  /// setIsEqualFunction:
  set isEqualFunction(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.UnsignedLong Function(
                                  ffi.Pointer<ffi.Void>)>>)>>
          value) {
    return _objc_msgSend_410(this.pointer, _sel_setIsEqualFunction_, value);
  }

  /// sizeFunction
  ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>
      get sizeFunction {
    return _objc_msgSend_411(this.pointer, _sel_sizeFunction);
  }

  /// setSizeFunction:
  set sizeFunction(
      ffi.Pointer<
              ffi
              .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>
          value) {
    return _objc_msgSend_412(this.pointer, _sel_setSizeFunction_, value);
  }

  /// descriptionFunction
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>>
      get descriptionFunction {
    return _objc_msgSend_413(this.pointer, _sel_descriptionFunction);
  }

  /// setDescriptionFunction:
  set descriptionFunction(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>>
          value) {
    return _objc_msgSend_414(this.pointer, _sel_setDescriptionFunction_, value);
  }

  /// relinquishFunction
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>>
      get relinquishFunction {
    return _objc_msgSend_415(this.pointer, _sel_relinquishFunction);
  }

  /// setRelinquishFunction:
  set relinquishFunction(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.UnsignedLong Function(
                                  ffi.Pointer<ffi.Void>)>>)>>
          value) {
    return _objc_msgSend_416(this.pointer, _sel_setRelinquishFunction_, value);
  }

  /// acquireFunction
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Bool)>> get acquireFunction {
    return _objc_msgSend_417(this.pointer, _sel_acquireFunction);
  }

  /// setAcquireFunction:
  set acquireFunction(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.UnsignedLong Function(
                                  ffi.Pointer<ffi.Void>)>>,
                      ffi.Bool)>>
          value) {
    return _objc_msgSend_418(this.pointer, _sel_setAcquireFunction_, value);
  }

  /// usesStrongWriteBarrier
  bool get usesStrongWriteBarrier {
    return _objc_msgSend_13(this.pointer, _sel_usesStrongWriteBarrier);
  }

  /// setUsesStrongWriteBarrier:
  set usesStrongWriteBarrier(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setUsesStrongWriteBarrier_, value);
  }

  /// usesWeakReadAndWriteBarriers
  bool get usesWeakReadAndWriteBarriers {
    return _objc_msgSend_13(this.pointer, _sel_usesWeakReadAndWriteBarriers);
  }

  /// setUsesWeakReadAndWriteBarriers:
  set usesWeakReadAndWriteBarriers(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setUsesWeakReadAndWriteBarriers_, value);
  }

  /// init
  NSPointerFunctions init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSPointerFunctions new1() {
    final _ret = _objc_msgSend_19(_class_NSPointerFunctions, _sel_new);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSPointerFunctions allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSPointerFunctions, _sel_allocWithZone_, zone);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSPointerFunctions alloc() {
    final _ret = _objc_msgSend_19(_class_NSPointerFunctions, _sel_alloc);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSPointerFunctions,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSPointerFunctions,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSPointerFunctions, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSPointerFunctions, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSPointerFunctions,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSPointerFunctions,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSPointerFunctions,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSPointerFunctions, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSPointerFunctions, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSPointerFunctions = objc.getClass("NSPointerFunctions");
late final _sel_pointerFunctionsWithOptions_ =
    objc.registerName("pointerFunctionsWithOptions:");
final _objc_msgSend_406 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_hashFunction = objc.registerName("hashFunction");
final _objc_msgSend_407 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.UnsignedLong Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setHashFunction_ = objc.registerName("setHashFunction:");
final _objc_msgSend_408 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.UnsignedLong Function(
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<
                                ffi.NativeFunction<
                                    ffi.UnsignedLong Function(
                                        ffi.Pointer<ffi.Void>)>>)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.UnsignedLong Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>)>>)>();
late final _sel_isEqualFunction = objc.registerName("isEqualFunction");
final _objc_msgSend_409 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Bool Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setIsEqualFunction_ = objc.registerName("setIsEqualFunction:");
final _objc_msgSend_410 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Bool Function(
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<
                                ffi.NativeFunction<
                                    ffi.UnsignedLong Function(
                                        ffi.Pointer<ffi.Void>)>>)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Bool Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>>)>();
late final _sel_sizeFunction = objc.registerName("sizeFunction");
final _objc_msgSend_411 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setSizeFunction_ = objc.registerName("setSizeFunction:");
final _objc_msgSend_412 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>();
late final _sel_descriptionFunction = objc.registerName("descriptionFunction");
final _objc_msgSend_413 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void>)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDescriptionFunction_ =
    objc.registerName("setDescriptionFunction:");
final _objc_msgSend_414 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<ffi.Void>)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void>)>>)>();
late final _sel_relinquishFunction = objc.registerName("relinquishFunction");
final _objc_msgSend_415 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setRelinquishFunction_ =
    objc.registerName("setRelinquishFunction:");
final _objc_msgSend_416 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<
                                ffi.NativeFunction<
                                    ffi.UnsignedLong Function(
                                        ffi.Pointer<ffi.Void>)>>)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>)>>)>();
late final _sel_acquireFunction = objc.registerName("acquireFunction");
final _objc_msgSend_417 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>, ffi.Bool)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Void> Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>,
                        ffi.Bool)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAcquireFunction_ = objc.registerName("setAcquireFunction:");
final _objc_msgSend_418 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Pointer<ffi.Void> Function(
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<
                                ffi.NativeFunction<
                                    ffi.UnsignedLong Function(
                                        ffi.Pointer<ffi.Void>)>>,
                            ffi.Bool)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Void> Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi
                            .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>,
                        ffi.Bool)>>)>();
late final _sel_usesStrongWriteBarrier =
    objc.registerName("usesStrongWriteBarrier");
late final _sel_setUsesStrongWriteBarrier_ =
    objc.registerName("setUsesStrongWriteBarrier:");
late final _sel_usesWeakReadAndWriteBarriers =
    objc.registerName("usesWeakReadAndWriteBarriers");
late final _sel_setUsesWeakReadAndWriteBarriers_ =
    objc.registerName("setUsesWeakReadAndWriteBarriers:");
late final _sel_initWithPointerFunctions_ =
    objc.registerName("initWithPointerFunctions:");
final _objc_msgSend_419 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pointerArrayWithOptions_ =
    objc.registerName("pointerArrayWithOptions:");
final _objc_msgSend_420 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_pointerArrayWithPointerFunctions_ =
    objc.registerName("pointerArrayWithPointerFunctions:");
final _objc_msgSend_421 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pointerFunctions = objc.registerName("pointerFunctions");
final _objc_msgSend_422 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_pointerAtIndex_ = objc.registerName("pointerAtIndex:");
final _objc_msgSend_423 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_addPointer_ = objc.registerName("addPointer:");
final _objc_msgSend_424 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>)>();
late final _sel_removePointerAtIndex_ =
    objc.registerName("removePointerAtIndex:");
final _objc_msgSend_425 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_insertPointer_atIndex_ =
    objc.registerName("insertPointer:atIndex:");
final _objc_msgSend_426 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>, int)>();
late final _sel_replacePointerAtIndex_withPointer_ =
    objc.registerName("replacePointerAtIndex:withPointer:");
final _objc_msgSend_427 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<ffi.Void>)>();
late final _sel_compact = objc.registerName("compact");
late final _sel_count = objc.registerName("count");
late final _sel_setCount_ = objc.registerName("setCount:");
late final _sel_pointerArrayWithStrongObjects =
    objc.registerName("pointerArrayWithStrongObjects");
late final _sel_pointerArrayWithWeakObjects =
    objc.registerName("pointerArrayWithWeakObjects");
late final _sel_strongObjectsPointerArray =
    objc.registerName("strongObjectsPointerArray");
final _objc_msgSend_428 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_weakObjectsPointerArray =
    objc.registerName("weakObjectsPointerArray");
late final _sel_allObjects = objc.registerName("allObjects");

/// NSProcessInfo
class NSProcessInfo extends objc.NSObject {
  NSProcessInfo._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSProcessInfo] that points to the same underlying object as [other].
  NSProcessInfo.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSProcessInfo] that wraps the given raw object pointer.
  NSProcessInfo.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSProcessInfo].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSProcessInfo);
  }

  /// processInfo
  static NSProcessInfo getProcessInfo() {
    final _ret = _objc_msgSend_429(_class_NSProcessInfo, _sel_processInfo);
    return NSProcessInfo.castFromPointer(_ret, retain: true, release: true);
  }

  /// environment
  objc.NSDictionary get environment {
    final _ret = _objc_msgSend_123(this.pointer, _sel_environment);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// arguments
  objc.NSArray get arguments {
    final _ret = _objc_msgSend_33(this.pointer, _sel_arguments);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// hostName
  objc.NSString get hostName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_hostName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// processName
  objc.NSString get processName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_processName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setProcessName:
  set processName(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setProcessName_, value.pointer);
  }

  /// processIdentifier
  int get processIdentifier {
    return _objc_msgSend_276(this.pointer, _sel_processIdentifier);
  }

  /// globallyUniqueString
  objc.NSString get globallyUniqueString {
    final _ret = _objc_msgSend_11(this.pointer, _sel_globallyUniqueString);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// operatingSystem
  int operatingSystem() {
    return _objc_msgSend_57(this.pointer, _sel_operatingSystem);
  }

  /// operatingSystemName
  objc.NSString operatingSystemName() {
    final _ret = _objc_msgSend_11(this.pointer, _sel_operatingSystemName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// operatingSystemVersionString
  objc.NSString get operatingSystemVersionString {
    final _ret =
        _objc_msgSend_11(this.pointer, _sel_operatingSystemVersionString);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// operatingSystemVersion
  void getOperatingSystemVersion(ffi.Pointer<NSOperatingSystemVersion> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_430Stret(
            stret, this.pointer, _sel_operatingSystemVersion)
        : stret.ref =
            _objc_msgSend_430(this.pointer, _sel_operatingSystemVersion);
  }

  /// processorCount
  int get processorCount {
    return _objc_msgSend_57(this.pointer, _sel_processorCount);
  }

  /// activeProcessorCount
  int get activeProcessorCount {
    return _objc_msgSend_57(this.pointer, _sel_activeProcessorCount);
  }

  /// physicalMemory
  int get physicalMemory {
    return _objc_msgSend_279(this.pointer, _sel_physicalMemory);
  }

  /// isOperatingSystemAtLeastVersion:
  bool isOperatingSystemAtLeastVersion_(NSOperatingSystemVersion version) {
    return _objc_msgSend_431(
        this.pointer, _sel_isOperatingSystemAtLeastVersion_, version);
  }

  /// systemUptime
  double get systemUptime {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_systemUptime)
        : _objc_msgSend_18(this.pointer, _sel_systemUptime);
  }

  /// disableSuddenTermination
  void disableSuddenTermination() {
    _objc_msgSend_7(this.pointer, _sel_disableSuddenTermination);
  }

  /// enableSuddenTermination
  void enableSuddenTermination() {
    _objc_msgSend_7(this.pointer, _sel_enableSuddenTermination);
  }

  /// disableAutomaticTermination:
  void disableAutomaticTermination_(objc.NSString reason) {
    _objc_msgSend_110(
        this.pointer, _sel_disableAutomaticTermination_, reason.pointer);
  }

  /// enableAutomaticTermination:
  void enableAutomaticTermination_(objc.NSString reason) {
    _objc_msgSend_110(
        this.pointer, _sel_enableAutomaticTermination_, reason.pointer);
  }

  /// automaticTerminationSupportEnabled
  bool get automaticTerminationSupportEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticTerminationSupportEnabled);
  }

  /// setAutomaticTerminationSupportEnabled:
  set automaticTerminationSupportEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutomaticTerminationSupportEnabled_, value);
  }

  /// beginActivityWithOptions:reason:
  objc.ObjCObjectBase beginActivityWithOptions_reason_(
      NSActivityOptions options, objc.NSString reason) {
    final _ret = _objc_msgSend_432(this.pointer,
        _sel_beginActivityWithOptions_reason_, options.value, reason.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// endActivity:
  void endActivity_(objc.ObjCObjectBase activity) {
    _objc_msgSend_27(this.pointer, _sel_endActivity_, activity.pointer);
  }

  /// performActivityWithOptions:reason:usingBlock:
  void performActivityWithOptions_reason_usingBlock_(NSActivityOptions options,
      objc.NSString reason, objc.ObjCBlock<ffi.Void Function()> block) {
    _objc_msgSend_433(
        this.pointer,
        _sel_performActivityWithOptions_reason_usingBlock_,
        options.value,
        reason.pointer,
        block.pointer);
  }

  /// performExpiringActivityWithReason:usingBlock:
  void performExpiringActivityWithReason_usingBlock_(
      objc.NSString reason, objc.ObjCBlock<ffi.Void Function(ffi.Bool)> block) {
    _objc_msgSend_434(
        this.pointer,
        _sel_performExpiringActivityWithReason_usingBlock_,
        reason.pointer,
        block.pointer);
  }

  /// userName
  objc.NSString get userName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_userName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// fullUserName
  objc.NSString get fullUserName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_fullUserName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// thermalState
  NSProcessInfoThermalState get thermalState {
    final _ret = _objc_msgSend_435(this.pointer, _sel_thermalState);
    return NSProcessInfoThermalState.fromValue(_ret);
  }

  /// isLowPowerModeEnabled
  bool get lowPowerModeEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isLowPowerModeEnabled);
  }

  /// isMacCatalystApp
  bool get macCatalystApp {
    return _objc_msgSend_13(this.pointer, _sel_isMacCatalystApp);
  }

  /// isiOSAppOnMac
  bool get iOSAppOnMac {
    return _objc_msgSend_13(this.pointer, _sel_isiOSAppOnMac);
  }

  /// init
  NSProcessInfo init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSProcessInfo.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSProcessInfo new1() {
    final _ret = _objc_msgSend_19(_class_NSProcessInfo, _sel_new);
    return NSProcessInfo.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSProcessInfo allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSProcessInfo, _sel_allocWithZone_, zone);
    return NSProcessInfo.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSProcessInfo alloc() {
    final _ret = _objc_msgSend_19(_class_NSProcessInfo, _sel_alloc);
    return NSProcessInfo.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSProcessInfo,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSProcessInfo,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSProcessInfo, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSProcessInfo, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSProcessInfo,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSProcessInfo,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSProcessInfo,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSProcessInfo, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSProcessInfo, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSProcessInfo = objc.getClass("NSProcessInfo");
late final _sel_processInfo = objc.registerName("processInfo");
final _objc_msgSend_429 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_environment = objc.registerName("environment");
late final _sel_arguments = objc.registerName("arguments");
late final _sel_hostName = objc.registerName("hostName");
late final _sel_processName = objc.registerName("processName");
late final _sel_setProcessName_ = objc.registerName("setProcessName:");
late final _sel_processIdentifier = objc.registerName("processIdentifier");
late final _sel_globallyUniqueString =
    objc.registerName("globallyUniqueString");
late final _sel_operatingSystem = objc.registerName("operatingSystem");
late final _sel_operatingSystemName = objc.registerName("operatingSystemName");
late final _sel_operatingSystemVersionString =
    objc.registerName("operatingSystemVersionString");

final class NSOperatingSystemVersion extends ffi.Struct {
  @ffi.Long()
  external int majorVersion;

  @ffi.Long()
  external int minorVersion;

  @ffi.Long()
  external int patchVersion;
}

late final _sel_operatingSystemVersion =
    objc.registerName("operatingSystemVersion");
final _objc_msgSend_430 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSOperatingSystemVersion Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        NSOperatingSystemVersion Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_430Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<NSOperatingSystemVersion>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<NSOperatingSystemVersion>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_processorCount = objc.registerName("processorCount");
late final _sel_activeProcessorCount =
    objc.registerName("activeProcessorCount");
late final _sel_physicalMemory = objc.registerName("physicalMemory");
late final _sel_isOperatingSystemAtLeastVersion_ =
    objc.registerName("isOperatingSystemAtLeastVersion:");
final _objc_msgSend_431 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSOperatingSystemVersion)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, NSOperatingSystemVersion)>();
late final _sel_systemUptime = objc.registerName("systemUptime");
late final _sel_disableSuddenTermination =
    objc.registerName("disableSuddenTermination");
late final _sel_enableSuddenTermination =
    objc.registerName("enableSuddenTermination");
late final _sel_disableAutomaticTermination_ =
    objc.registerName("disableAutomaticTermination:");
late final _sel_enableAutomaticTermination_ =
    objc.registerName("enableAutomaticTermination:");
late final _sel_automaticTerminationSupportEnabled =
    objc.registerName("automaticTerminationSupportEnabled");
late final _sel_setAutomaticTerminationSupportEnabled_ =
    objc.registerName("setAutomaticTerminationSupportEnabled:");

enum NSActivityOptions {
  NSActivityIdleDisplaySleepDisabled(1099511627776),
  NSActivityIdleSystemSleepDisabled(1048576),
  NSActivitySuddenTerminationDisabled(16384),
  NSActivityAutomaticTerminationDisabled(32768),
  NSActivityAnimationTrackingEnabled(35184372088832),
  NSActivityTrackingEnabled(70368744177664),
  NSActivityUserInitiated(16777215),
  NSActivityUserInitiatedAllowingIdleSystemSleep(15728639),
  NSActivityBackground(255),
  NSActivityLatencyCritical(1095216660480),
  NSActivityUserInteractive(1095233437695);

  final int value;
  const NSActivityOptions(this.value);

  static NSActivityOptions fromValue(int value) => switch (value) {
        1099511627776 => NSActivityIdleDisplaySleepDisabled,
        1048576 => NSActivityIdleSystemSleepDisabled,
        16384 => NSActivitySuddenTerminationDisabled,
        32768 => NSActivityAutomaticTerminationDisabled,
        35184372088832 => NSActivityAnimationTrackingEnabled,
        70368744177664 => NSActivityTrackingEnabled,
        16777215 => NSActivityUserInitiated,
        15728639 => NSActivityUserInitiatedAllowingIdleSystemSleep,
        255 => NSActivityBackground,
        1095216660480 => NSActivityLatencyCritical,
        1095233437695 => NSActivityUserInteractive,
        _ => throw ArgumentError("Unknown value for NSActivityOptions: $value"),
      };
}

late final _sel_beginActivityWithOptions_reason_ =
    objc.registerName("beginActivityWithOptions:reason:");
final _objc_msgSend_432 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Uint64,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_endActivity_ = objc.registerName("endActivity:");
late final _sel_performActivityWithOptions_reason_usingBlock_ =
    objc.registerName("performActivityWithOptions:reason:usingBlock:");
final _objc_msgSend_433 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Uint64,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
void _ObjCBlock_ffiVoid_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, bool arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>>()
        .asFunction<void Function(bool)>()(arg0);
void _ObjCBlock_ffiVoid_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, bool arg0) =>
    (objc.getBlockClosure(block) as void Function(bool))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Bool)>`.
abstract final class ObjCBlock_ffiVoid_bool {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Bool)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Bool)>(_ObjCBlock_ffiVoid_bool_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool)> fromFunction(
          void Function(bool) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Bool)>(_ObjCBlock_ffiVoid_bool_closureTrampoline)
                  .cast(),
              (bool arg0) => fn(arg0)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool)> listener(
      void Function(bool) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool)>.listener(
                _ObjCBlock_ffiVoid_bool_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (bool arg0) => fn(arg0));
    return objc.ObjCBlock<ffi.Void Function(ffi.Bool)>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Bool)>`.
extension ObjCBlock_ffiVoid_bool_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Bool)> {
  void call(bool arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Bool arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlockImpl>, bool)>()(
      pointer, arg0);
}

late final _sel_performExpiringActivityWithReason_usingBlock_ =
    objc.registerName("performExpiringActivityWithReason:usingBlock:");
final _objc_msgSend_434 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_userName = objc.registerName("userName");
late final _sel_fullUserName = objc.registerName("fullUserName");

enum NSProcessInfoThermalState {
  NSProcessInfoThermalStateNominal(0),
  NSProcessInfoThermalStateFair(1),
  NSProcessInfoThermalStateSerious(2),
  NSProcessInfoThermalStateCritical(3);

  final int value;
  const NSProcessInfoThermalState(this.value);

  static NSProcessInfoThermalState fromValue(int value) => switch (value) {
        0 => NSProcessInfoThermalStateNominal,
        1 => NSProcessInfoThermalStateFair,
        2 => NSProcessInfoThermalStateSerious,
        3 => NSProcessInfoThermalStateCritical,
        _ => throw ArgumentError(
            "Unknown value for NSProcessInfoThermalState: $value"),
      };
}

late final _sel_thermalState = objc.registerName("thermalState");
final _objc_msgSend_435 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isLowPowerModeEnabled =
    objc.registerName("isLowPowerModeEnabled");
late final _sel_isMacCatalystApp = objc.registerName("isMacCatalystApp");
late final _sel_isiOSAppOnMac = objc.registerName("isiOSAppOnMac");

/// NSTextCheckingResult
class NSTextCheckingResult extends objc.NSObject {
  NSTextCheckingResult._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSTextCheckingResult] that points to the same underlying object as [other].
  NSTextCheckingResult.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSTextCheckingResult] that wraps the given raw object pointer.
  NSTextCheckingResult.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSTextCheckingResult].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSTextCheckingResult);
  }

  /// resultType
  NSTextCheckingType get resultType {
    final _ret = _objc_msgSend_436(this.pointer, _sel_resultType);
    return NSTextCheckingType.fromValue(_ret);
  }

  /// range
  void getRange(ffi.Pointer<_NSRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_437Stret(stret, this.pointer, _sel_range)
        : stret.ref = _objc_msgSend_437(this.pointer, _sel_range);
  }

  /// orthography
  NSOrthography? get orthography {
    final _ret = _objc_msgSend_438(this.pointer, _sel_orthography);
    return _ret.address == 0
        ? null
        : NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  /// grammarDetails
  objc.NSArray? get grammarDetails {
    final _ret = _objc_msgSend_88(this.pointer, _sel_grammarDetails);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// date
  objc.NSDate? get date {
    final _ret = _objc_msgSend_126(this.pointer, _sel_date);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeZone
  NSTimeZone? get timeZone {
    final _ret = _objc_msgSend_142(this.pointer, _sel_timeZone);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// duration
  double get duration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_duration)
        : _objc_msgSend_18(this.pointer, _sel_duration);
  }

  /// components
  objc.NSDictionary? get components {
    final _ret = _objc_msgSend_84(this.pointer, _sel_components);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// URL
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// replacementString
  objc.NSString? get replacementString {
    final _ret = _objc_msgSend_20(this.pointer, _sel_replacementString);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// alternativeStrings
  objc.NSArray? get alternativeStrings {
    final _ret = _objc_msgSend_88(this.pointer, _sel_alternativeStrings);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// regularExpression
  NSRegularExpression? get regularExpression {
    final _ret = _objc_msgSend_450(this.pointer, _sel_regularExpression);
    return _ret.address == 0
        ? null
        : NSRegularExpression.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// phoneNumber
  objc.NSString? get phoneNumber {
    final _ret = _objc_msgSend_20(this.pointer, _sel_phoneNumber);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// numberOfRanges
  int get numberOfRanges {
    return _objc_msgSend_57(this.pointer, _sel_numberOfRanges);
  }

  /// rangeAtIndex:
  void rangeAtIndex_(ffi.Pointer<_NSRange> stret, int idx) {
    objc.useMsgSendVariants
        ? _objc_msgSend_451Stret(stret, this.pointer, _sel_rangeAtIndex_, idx)
        : stret.ref = _objc_msgSend_451(this.pointer, _sel_rangeAtIndex_, idx);
  }

  /// rangeWithName:
  void rangeWithName_(ffi.Pointer<_NSRange> stret, objc.NSString name) {
    objc.useMsgSendVariants
        ? _objc_msgSend_452Stret(
            stret, this.pointer, _sel_rangeWithName_, name.pointer)
        : stret.ref =
            _objc_msgSend_452(this.pointer, _sel_rangeWithName_, name.pointer);
  }

  /// resultByAdjustingRangesWithOffset:
  NSTextCheckingResult resultByAdjustingRangesWithOffset_(int offset) {
    final _ret = _objc_msgSend_453(
        this.pointer, _sel_resultByAdjustingRangesWithOffset_, offset);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// addressComponents
  objc.NSDictionary? get addressComponents {
    final _ret = _objc_msgSend_84(this.pointer, _sel_addressComponents);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// orthographyCheckingResultWithRange:orthography:
  static NSTextCheckingResult orthographyCheckingResultWithRange_orthography_(
      _NSRange range, NSOrthography orthography) {
    final _ret = _objc_msgSend_454(
        _class_NSTextCheckingResult,
        _sel_orthographyCheckingResultWithRange_orthography_,
        range,
        orthography.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// spellCheckingResultWithRange:
  static NSTextCheckingResult spellCheckingResultWithRange_(_NSRange range) {
    final _ret = _objc_msgSend_455(
        _class_NSTextCheckingResult, _sel_spellCheckingResultWithRange_, range);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// grammarCheckingResultWithRange:details:
  static NSTextCheckingResult grammarCheckingResultWithRange_details_(
      _NSRange range, objc.NSArray details) {
    final _ret = _objc_msgSend_456(_class_NSTextCheckingResult,
        _sel_grammarCheckingResultWithRange_details_, range, details.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// dateCheckingResultWithRange:date:
  static NSTextCheckingResult dateCheckingResultWithRange_date_(
      _NSRange range, objc.NSDate date) {
    final _ret = _objc_msgSend_457(_class_NSTextCheckingResult,
        _sel_dateCheckingResultWithRange_date_, range, date.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// dateCheckingResultWithRange:date:timeZone:duration:
  static NSTextCheckingResult
      dateCheckingResultWithRange_date_timeZone_duration_(_NSRange range,
          objc.NSDate date, NSTimeZone timeZone, double duration) {
    final _ret = _objc_msgSend_458(
        _class_NSTextCheckingResult,
        _sel_dateCheckingResultWithRange_date_timeZone_duration_,
        range,
        date.pointer,
        timeZone.pointer,
        duration);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// addressCheckingResultWithRange:components:
  static NSTextCheckingResult addressCheckingResultWithRange_components_(
      _NSRange range, objc.NSDictionary components) {
    final _ret = _objc_msgSend_459(
        _class_NSTextCheckingResult,
        _sel_addressCheckingResultWithRange_components_,
        range,
        components.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// linkCheckingResultWithRange:URL:
  static NSTextCheckingResult linkCheckingResultWithRange_URL_(
      _NSRange range, objc.NSURL url) {
    final _ret = _objc_msgSend_460(_class_NSTextCheckingResult,
        _sel_linkCheckingResultWithRange_URL_, range, url.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// quoteCheckingResultWithRange:replacementString:
  static NSTextCheckingResult quoteCheckingResultWithRange_replacementString_(
      _NSRange range, objc.NSString replacementString) {
    final _ret = _objc_msgSend_461(
        _class_NSTextCheckingResult,
        _sel_quoteCheckingResultWithRange_replacementString_,
        range,
        replacementString.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// dashCheckingResultWithRange:replacementString:
  static NSTextCheckingResult dashCheckingResultWithRange_replacementString_(
      _NSRange range, objc.NSString replacementString) {
    final _ret = _objc_msgSend_461(
        _class_NSTextCheckingResult,
        _sel_dashCheckingResultWithRange_replacementString_,
        range,
        replacementString.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// replacementCheckingResultWithRange:replacementString:
  static NSTextCheckingResult
      replacementCheckingResultWithRange_replacementString_(
          _NSRange range, objc.NSString replacementString) {
    final _ret = _objc_msgSend_461(
        _class_NSTextCheckingResult,
        _sel_replacementCheckingResultWithRange_replacementString_,
        range,
        replacementString.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// correctionCheckingResultWithRange:replacementString:
  static NSTextCheckingResult
      correctionCheckingResultWithRange_replacementString_(
          _NSRange range, objc.NSString replacementString) {
    final _ret = _objc_msgSend_461(
        _class_NSTextCheckingResult,
        _sel_correctionCheckingResultWithRange_replacementString_,
        range,
        replacementString.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// correctionCheckingResultWithRange:replacementString:alternativeStrings:
  static NSTextCheckingResult
      correctionCheckingResultWithRange_replacementString_alternativeStrings_(
          _NSRange range,
          objc.NSString replacementString,
          objc.NSArray alternativeStrings) {
    final _ret = _objc_msgSend_462(
        _class_NSTextCheckingResult,
        _sel_correctionCheckingResultWithRange_replacementString_alternativeStrings_,
        range,
        replacementString.pointer,
        alternativeStrings.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// regularExpressionCheckingResultWithRanges:count:regularExpression:
  static NSTextCheckingResult
      regularExpressionCheckingResultWithRanges_count_regularExpression_(
          ffi.Pointer<_NSRange> ranges,
          int count,
          NSRegularExpression regularExpression) {
    final _ret = _objc_msgSend_463(
        _class_NSTextCheckingResult,
        _sel_regularExpressionCheckingResultWithRanges_count_regularExpression_,
        ranges,
        count,
        regularExpression.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// phoneNumberCheckingResultWithRange:phoneNumber:
  static NSTextCheckingResult phoneNumberCheckingResultWithRange_phoneNumber_(
      _NSRange range, objc.NSString phoneNumber) {
    final _ret = _objc_msgSend_461(
        _class_NSTextCheckingResult,
        _sel_phoneNumberCheckingResultWithRange_phoneNumber_,
        range,
        phoneNumber.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// transitInformationCheckingResultWithRange:components:
  static NSTextCheckingResult
      transitInformationCheckingResultWithRange_components_(
          _NSRange range, objc.NSDictionary components) {
    final _ret = _objc_msgSend_459(
        _class_NSTextCheckingResult,
        _sel_transitInformationCheckingResultWithRange_components_,
        range,
        components.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  NSTextCheckingResult init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSTextCheckingResult new1() {
    final _ret = _objc_msgSend_19(_class_NSTextCheckingResult, _sel_new);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSTextCheckingResult allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSTextCheckingResult, _sel_allocWithZone_, zone);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSTextCheckingResult alloc() {
    final _ret = _objc_msgSend_19(_class_NSTextCheckingResult, _sel_alloc);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSTextCheckingResult,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSTextCheckingResult,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSTextCheckingResult, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSTextCheckingResult, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSTextCheckingResult,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSTextCheckingResult,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSTextCheckingResult,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSTextCheckingResult, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSTextCheckingResult, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSTextCheckingResult = objc.getClass("NSTextCheckingResult");

enum NSTextCheckingType {
  NSTextCheckingTypeOrthography(1),
  NSTextCheckingTypeSpelling(2),
  NSTextCheckingTypeGrammar(4),
  NSTextCheckingTypeDate(8),
  NSTextCheckingTypeAddress(16),
  NSTextCheckingTypeLink(32),
  NSTextCheckingTypeQuote(64),
  NSTextCheckingTypeDash(128),
  NSTextCheckingTypeReplacement(256),
  NSTextCheckingTypeCorrection(512),
  NSTextCheckingTypeRegularExpression(1024),
  NSTextCheckingTypePhoneNumber(2048),
  NSTextCheckingTypeTransitInformation(4096);

  final int value;
  const NSTextCheckingType(this.value);

  static NSTextCheckingType fromValue(int value) => switch (value) {
        1 => NSTextCheckingTypeOrthography,
        2 => NSTextCheckingTypeSpelling,
        4 => NSTextCheckingTypeGrammar,
        8 => NSTextCheckingTypeDate,
        16 => NSTextCheckingTypeAddress,
        32 => NSTextCheckingTypeLink,
        64 => NSTextCheckingTypeQuote,
        128 => NSTextCheckingTypeDash,
        256 => NSTextCheckingTypeReplacement,
        512 => NSTextCheckingTypeCorrection,
        1024 => NSTextCheckingTypeRegularExpression,
        2048 => NSTextCheckingTypePhoneNumber,
        4096 => NSTextCheckingTypeTransitInformation,
        _ =>
          throw ArgumentError("Unknown value for NSTextCheckingType: $value"),
      };
}

late final _sel_resultType = objc.registerName("resultType");
final _objc_msgSend_436 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Uint64 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_range = objc.registerName("range");
final _objc_msgSend_437 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_437Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_orthography = objc.registerName("orthography");
final _objc_msgSend_438 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_grammarDetails = objc.registerName("grammarDetails");
late final _sel_duration = objc.registerName("duration");
late final _sel_components = objc.registerName("components");
late final _sel_replacementString = objc.registerName("replacementString");
late final _sel_alternativeStrings = objc.registerName("alternativeStrings");

/// NSRegularExpression
class NSRegularExpression extends objc.NSObject {
  NSRegularExpression._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSRegularExpression] that points to the same underlying object as [other].
  NSRegularExpression.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSRegularExpression] that wraps the given raw object pointer.
  NSRegularExpression.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSRegularExpression].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSRegularExpression);
  }

  /// regularExpressionWithPattern:options:error:
  static NSRegularExpression? regularExpressionWithPattern_options_error_(
      objc.NSString pattern,
      NSRegularExpressionOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_439(
        _class_NSRegularExpression,
        _sel_regularExpressionWithPattern_options_error_,
        pattern.pointer,
        options.value,
        error);
    return _ret.address == 0
        ? null
        : NSRegularExpression.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithPattern:options:error:
  NSRegularExpression? initWithPattern_options_error_(
      objc.NSString pattern,
      NSRegularExpressionOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_440(
        this.pointer,
        _sel_initWithPattern_options_error_,
        pattern.pointer,
        options.value,
        error);
    return _ret.address == 0
        ? null
        : NSRegularExpression.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// pattern
  objc.NSString get pattern {
    final _ret = _objc_msgSend_11(this.pointer, _sel_pattern);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// options
  NSRegularExpressionOptions get options {
    final _ret = _objc_msgSend_441(this.pointer, _sel_options);
    return NSRegularExpressionOptions.fromValue(_ret);
  }

  /// numberOfCaptureGroups
  int get numberOfCaptureGroups {
    return _objc_msgSend_57(this.pointer, _sel_numberOfCaptureGroups);
  }

  /// escapedPatternForString:
  static objc.NSString escapedPatternForString_(objc.NSString string) {
    final _ret = _objc_msgSend_309(_class_NSRegularExpression,
        _sel_escapedPatternForString_, string.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// enumerateMatchesInString:options:range:usingBlock:
  void enumerateMatchesInString_options_range_usingBlock_(
      objc.NSString string,
      NSMatchingOptions options,
      _NSRange range,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong,
                  ffi.Pointer<ffi.Bool>)>
          block) {
    _objc_msgSend_442(
        this.pointer,
        _sel_enumerateMatchesInString_options_range_usingBlock_,
        string.pointer,
        options.value,
        range,
        block.pointer);
  }

  /// matchesInString:options:range:
  objc.NSArray matchesInString_options_range_(
      objc.NSString string, NSMatchingOptions options, _NSRange range) {
    final _ret = _objc_msgSend_443(
        this.pointer,
        _sel_matchesInString_options_range_,
        string.pointer,
        options.value,
        range);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// numberOfMatchesInString:options:range:
  int numberOfMatchesInString_options_range_(
      objc.NSString string, NSMatchingOptions options, _NSRange range) {
    return _objc_msgSend_444(
        this.pointer,
        _sel_numberOfMatchesInString_options_range_,
        string.pointer,
        options.value,
        range);
  }

  /// firstMatchInString:options:range:
  NSTextCheckingResult? firstMatchInString_options_range_(
      objc.NSString string, NSMatchingOptions options, _NSRange range) {
    final _ret = _objc_msgSend_445(
        this.pointer,
        _sel_firstMatchInString_options_range_,
        string.pointer,
        options.value,
        range);
    return _ret.address == 0
        ? null
        : NSTextCheckingResult.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// rangeOfFirstMatchInString:options:range:
  void rangeOfFirstMatchInString_options_range_(ffi.Pointer<_NSRange> stret,
      objc.NSString string, NSMatchingOptions options, _NSRange range) {
    objc.useMsgSendVariants
        ? _objc_msgSend_446Stret(
            stret,
            this.pointer,
            _sel_rangeOfFirstMatchInString_options_range_,
            string.pointer,
            options.value,
            range)
        : stret.ref = _objc_msgSend_446(
            this.pointer,
            _sel_rangeOfFirstMatchInString_options_range_,
            string.pointer,
            options.value,
            range);
  }

  /// stringByReplacingMatchesInString:options:range:withTemplate:
  objc.NSString stringByReplacingMatchesInString_options_range_withTemplate_(
      objc.NSString string,
      NSMatchingOptions options,
      _NSRange range,
      objc.NSString templ) {
    final _ret = _objc_msgSend_447(
        this.pointer,
        _sel_stringByReplacingMatchesInString_options_range_withTemplate_,
        string.pointer,
        options.value,
        range,
        templ.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// replaceMatchesInString:options:range:withTemplate:
  int replaceMatchesInString_options_range_withTemplate_(
      objc.NSMutableString string,
      NSMatchingOptions options,
      _NSRange range,
      objc.NSString templ) {
    return _objc_msgSend_448(
        this.pointer,
        _sel_replaceMatchesInString_options_range_withTemplate_,
        string.pointer,
        options.value,
        range,
        templ.pointer);
  }

  /// replacementStringForResult:inString:offset:template:
  objc.NSString replacementStringForResult_inString_offset_template_(
      NSTextCheckingResult result,
      objc.NSString string,
      int offset,
      objc.NSString templ) {
    final _ret = _objc_msgSend_449(
        this.pointer,
        _sel_replacementStringForResult_inString_offset_template_,
        result.pointer,
        string.pointer,
        offset,
        templ.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// escapedTemplateForString:
  static objc.NSString escapedTemplateForString_(objc.NSString string) {
    final _ret = _objc_msgSend_309(_class_NSRegularExpression,
        _sel_escapedTemplateForString_, string.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSRegularExpression init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSRegularExpression.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSRegularExpression new1() {
    final _ret = _objc_msgSend_19(_class_NSRegularExpression, _sel_new);
    return NSRegularExpression.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSRegularExpression allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSRegularExpression, _sel_allocWithZone_, zone);
    return NSRegularExpression.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSRegularExpression alloc() {
    final _ret = _objc_msgSend_19(_class_NSRegularExpression, _sel_alloc);
    return NSRegularExpression.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSRegularExpression,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSRegularExpression,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSRegularExpression, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSRegularExpression, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSRegularExpression,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSRegularExpression,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSRegularExpression,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSRegularExpression, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSRegularExpression, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSRegularExpression = objc.getClass("NSRegularExpression");

enum NSRegularExpressionOptions {
  NSRegularExpressionCaseInsensitive(1),
  NSRegularExpressionAllowCommentsAndWhitespace(2),
  NSRegularExpressionIgnoreMetacharacters(4),
  NSRegularExpressionDotMatchesLineSeparators(8),
  NSRegularExpressionAnchorsMatchLines(16),
  NSRegularExpressionUseUnixLineSeparators(32),
  NSRegularExpressionUseUnicodeWordBoundaries(64);

  final int value;
  const NSRegularExpressionOptions(this.value);

  static NSRegularExpressionOptions fromValue(int value) => switch (value) {
        1 => NSRegularExpressionCaseInsensitive,
        2 => NSRegularExpressionAllowCommentsAndWhitespace,
        4 => NSRegularExpressionIgnoreMetacharacters,
        8 => NSRegularExpressionDotMatchesLineSeparators,
        16 => NSRegularExpressionAnchorsMatchLines,
        32 => NSRegularExpressionUseUnixLineSeparators,
        64 => NSRegularExpressionUseUnicodeWordBoundaries,
        _ => throw ArgumentError(
            "Unknown value for NSRegularExpressionOptions: $value"),
      };
}

late final _sel_regularExpressionWithPattern_options_error_ =
    objc.registerName("regularExpressionWithPattern:options:error:");
final _objc_msgSend_439 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithPattern_options_error_ =
    objc.registerName("initWithPattern:options:error:");
final _objc_msgSend_440 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_pattern = objc.registerName("pattern");
late final _sel_options = objc.registerName("options");
final _objc_msgSend_441 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_numberOfCaptureGroups =
    objc.registerName("numberOfCaptureGroups");
late final _sel_escapedPatternForString_ =
    objc.registerName("escapedPatternForString:");

enum NSMatchingOptions {
  NSMatchingReportProgress(1),
  NSMatchingReportCompletion(2),
  NSMatchingAnchored(4),
  NSMatchingWithTransparentBounds(8),
  NSMatchingWithoutAnchoringBounds(16);

  final int value;
  const NSMatchingOptions(this.value);

  static NSMatchingOptions fromValue(int value) => switch (value) {
        1 => NSMatchingReportProgress,
        2 => NSMatchingReportCompletion,
        4 => NSMatchingAnchored,
        8 => NSMatchingWithTransparentBounds,
        16 => NSMatchingWithoutAnchoringBounds,
        _ => throw ArgumentError("Unknown value for NSMatchingOptions: $value"),
      };
}

void
    _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            int arg1,
            ffi.Pointer<ffi.Bool> arg2) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>()
            .asFunction<
                void Function(ffi.Pointer<objc.ObjCObject>, int,
                    ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
void
    _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            int arg1,
            ffi.Pointer<ffi.Bool> arg2) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>`.
abstract final class ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong,
              ffi.Pointer<ffi.Bool>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(
                              _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>
      fromFunction(void Function(NSTextCheckingResult?, NSMatchingFlags, ffi.Pointer<ffi.Bool>) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(
                          _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureTrampoline)
                      .cast(),
                  (ffi.Pointer<objc.ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
                      fn(arg0.address == 0 ? null : NSTextCheckingResult.castFromPointer(arg0, retain: true, release: true), NSMatchingFlags.fromValue(arg1), arg2)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong,
          ffi.Pointer<ffi.Bool>)> listener(
      void Function(
              NSTextCheckingResult?, NSMatchingFlags, ffi.Pointer<ffi.Bool>)
          fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.UnsignedLong,
                        ffi.Pointer<ffi.Bool>)>.listener(
                _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, int arg1,
                ffi.Pointer<ffi.Bool> arg2) =>
            fn(
                arg0.address == 0
                    ? null
                    : NSTextCheckingResult.castFromPointer(arg0,
                        retain: false, release: true),
                NSMatchingFlags.fromValue(arg1),
                arg2));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool(
            raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong,
            ffi.Pointer<ffi.Bool>)>(wrapper, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.UnsignedLong,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>`.
extension ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.UnsignedLong,
            ffi.Pointer<ffi.Bool>)> {
  void call(NSTextCheckingResult? arg0, NSMatchingFlags arg1,
          ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.UnsignedLong arg1,
                          ffi.Pointer<ffi.Bool> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      int,
                      ffi.Pointer<ffi.Bool>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1.value, arg2);
}

enum NSMatchingFlags {
  NSMatchingProgress(1),
  NSMatchingCompleted(2),
  NSMatchingHitEnd(4),
  NSMatchingRequiredEnd(8),
  NSMatchingInternalError(16);

  final int value;
  const NSMatchingFlags(this.value);

  static NSMatchingFlags fromValue(int value) => switch (value) {
        1 => NSMatchingProgress,
        2 => NSMatchingCompleted,
        4 => NSMatchingHitEnd,
        8 => NSMatchingRequiredEnd,
        16 => NSMatchingInternalError,
        _ => throw ArgumentError("Unknown value for NSMatchingFlags: $value"),
      };
}

late final _sel_enumerateMatchesInString_options_range_usingBlock_ =
    objc.registerName("enumerateMatchesInString:options:range:usingBlock:");
final _objc_msgSend_442 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                _NSRange,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_matchesInString_options_range_ =
    objc.registerName("matchesInString:options:range:");
final _objc_msgSend_443 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_numberOfMatchesInString_options_range_ =
    objc.registerName("numberOfMatchesInString:options:range:");
final _objc_msgSend_444 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                _NSRange)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_firstMatchInString_options_range_ =
    objc.registerName("firstMatchInString:options:range:");
final _objc_msgSend_445 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_rangeOfFirstMatchInString_options_range_ =
    objc.registerName("rangeOfFirstMatchInString:options:range:");
final _objc_msgSend_446 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                _NSRange)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
final _objc_msgSend_446Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_stringByReplacingMatchesInString_options_range_withTemplate_ =
    objc.registerName(
        "stringByReplacingMatchesInString:options:range:withTemplate:");
final _objc_msgSend_447 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_replaceMatchesInString_options_range_withTemplate_ =
    objc.registerName("replaceMatchesInString:options:range:withTemplate:");
final _objc_msgSend_448 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_replacementStringForResult_inString_offset_template_ =
    objc.registerName("replacementStringForResult:inString:offset:template:");
final _objc_msgSend_449 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_escapedTemplateForString_ =
    objc.registerName("escapedTemplateForString:");
late final _sel_regularExpression = objc.registerName("regularExpression");
final _objc_msgSend_450 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_phoneNumber = objc.registerName("phoneNumber");
late final _sel_numberOfRanges = objc.registerName("numberOfRanges");
late final _sel_rangeAtIndex_ = objc.registerName("rangeAtIndex:");
final _objc_msgSend_451 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_451Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_rangeWithName_ = objc.registerName("rangeWithName:");
final _objc_msgSend_452 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_452Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_resultByAdjustingRangesWithOffset_ =
    objc.registerName("resultByAdjustingRangesWithOffset:");
final _objc_msgSend_453 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_addressComponents = objc.registerName("addressComponents");
late final _sel_orthographyCheckingResultWithRange_orthography_ =
    objc.registerName("orthographyCheckingResultWithRange:orthography:");
final _objc_msgSend_454 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_spellCheckingResultWithRange_ =
    objc.registerName("spellCheckingResultWithRange:");
final _objc_msgSend_455 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_grammarCheckingResultWithRange_details_ =
    objc.registerName("grammarCheckingResultWithRange:details:");
final _objc_msgSend_456 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateCheckingResultWithRange_date_ =
    objc.registerName("dateCheckingResultWithRange:date:");
final _objc_msgSend_457 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateCheckingResultWithRange_date_timeZone_duration_ =
    objc.registerName("dateCheckingResultWithRange:date:timeZone:duration:");
final _objc_msgSend_458 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_addressCheckingResultWithRange_components_ =
    objc.registerName("addressCheckingResultWithRange:components:");
final _objc_msgSend_459 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_linkCheckingResultWithRange_URL_ =
    objc.registerName("linkCheckingResultWithRange:URL:");
final _objc_msgSend_460 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_quoteCheckingResultWithRange_replacementString_ =
    objc.registerName("quoteCheckingResultWithRange:replacementString:");
final _objc_msgSend_461 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dashCheckingResultWithRange_replacementString_ =
    objc.registerName("dashCheckingResultWithRange:replacementString:");
late final _sel_replacementCheckingResultWithRange_replacementString_ =
    objc.registerName("replacementCheckingResultWithRange:replacementString:");
late final _sel_correctionCheckingResultWithRange_replacementString_ =
    objc.registerName("correctionCheckingResultWithRange:replacementString:");
late final _sel_correctionCheckingResultWithRange_replacementString_alternativeStrings_ =
    objc.registerName(
        "correctionCheckingResultWithRange:replacementString:alternativeStrings:");
final _objc_msgSend_462 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_regularExpressionCheckingResultWithRanges_count_regularExpression_ =
    objc.registerName(
        "regularExpressionCheckingResultWithRanges:count:regularExpression:");
final _objc_msgSend_463 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<_NSRange>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<_NSRange>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_phoneNumberCheckingResultWithRange_phoneNumber_ =
    objc.registerName("phoneNumberCheckingResultWithRange:phoneNumber:");
late final _sel_transitInformationCheckingResultWithRange_components_ =
    objc.registerName("transitInformationCheckingResultWithRange:components:");

/// NSURLCache
class NSURLCache extends objc.NSObject {
  NSURLCache._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLCache] that points to the same underlying object as [other].
  NSURLCache.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLCache] that wraps the given raw object pointer.
  NSURLCache.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLCache].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSURLCache);
  }

  /// sharedURLCache
  static NSURLCache getSharedURLCache() {
    final _ret = _objc_msgSend_464(_class_NSURLCache, _sel_sharedURLCache);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSharedURLCache:
  static void setSharedURLCache(NSURLCache value) {
    return _objc_msgSend_465(
        _class_NSURLCache, _sel_setSharedURLCache_, value.pointer);
  }

  /// initWithMemoryCapacity:diskCapacity:diskPath:
  NSURLCache initWithMemoryCapacity_diskCapacity_diskPath_(
      int memoryCapacity, int diskCapacity, objc.NSString? path) {
    final _ret = _objc_msgSend_466(
        this.pointer,
        _sel_initWithMemoryCapacity_diskCapacity_diskPath_,
        memoryCapacity,
        diskCapacity,
        path?.pointer ?? ffi.nullptr);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithMemoryCapacity:diskCapacity:directoryURL:
  NSURLCache initWithMemoryCapacity_diskCapacity_directoryURL_(
      int memoryCapacity, int diskCapacity, objc.NSURL? directoryURL) {
    final _ret = _objc_msgSend_467(
        this.pointer,
        _sel_initWithMemoryCapacity_diskCapacity_directoryURL_,
        memoryCapacity,
        diskCapacity,
        directoryURL?.pointer ?? ffi.nullptr);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// cachedResponseForRequest:
  NSCachedURLResponse? cachedResponseForRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_472(
        this.pointer, _sel_cachedResponseForRequest_, request.pointer);
    return _ret.address == 0
        ? null
        : NSCachedURLResponse.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// storeCachedResponse:forRequest:
  void storeCachedResponse_forRequest_(
      NSCachedURLResponse cachedResponse, NSURLRequest request) {
    _objc_msgSend_473(this.pointer, _sel_storeCachedResponse_forRequest_,
        cachedResponse.pointer, request.pointer);
  }

  /// removeCachedResponseForRequest:
  void removeCachedResponseForRequest_(NSURLRequest request) {
    _objc_msgSend_474(
        this.pointer, _sel_removeCachedResponseForRequest_, request.pointer);
  }

  /// removeAllCachedResponses
  void removeAllCachedResponses() {
    _objc_msgSend_7(this.pointer, _sel_removeAllCachedResponses);
  }

  /// removeCachedResponsesSinceDate:
  void removeCachedResponsesSinceDate_(objc.NSDate date) {
    _objc_msgSend_258(
        this.pointer, _sel_removeCachedResponsesSinceDate_, date.pointer);
  }

  /// memoryCapacity
  int get memoryCapacity {
    return _objc_msgSend_57(this.pointer, _sel_memoryCapacity);
  }

  /// setMemoryCapacity:
  set memoryCapacity(int value) {
    return _objc_msgSend_135(this.pointer, _sel_setMemoryCapacity_, value);
  }

  /// diskCapacity
  int get diskCapacity {
    return _objc_msgSend_57(this.pointer, _sel_diskCapacity);
  }

  /// setDiskCapacity:
  set diskCapacity(int value) {
    return _objc_msgSend_135(this.pointer, _sel_setDiskCapacity_, value);
  }

  /// currentMemoryUsage
  int get currentMemoryUsage {
    return _objc_msgSend_57(this.pointer, _sel_currentMemoryUsage);
  }

  /// currentDiskUsage
  int get currentDiskUsage {
    return _objc_msgSend_57(this.pointer, _sel_currentDiskUsage);
  }

  /// storeCachedResponse:forDataTask:
  void storeCachedResponse_forDataTask_(
      NSCachedURLResponse cachedResponse, NSURLSessionDataTask dataTask) {
    _objc_msgSend_475(this.pointer, _sel_storeCachedResponse_forDataTask_,
        cachedResponse.pointer, dataTask.pointer);
  }

  /// getCachedResponseForDataTask:completionHandler:
  void getCachedResponseForDataTask_completionHandler_(
      NSURLSessionDataTask dataTask,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_476(
        this.pointer,
        _sel_getCachedResponseForDataTask_completionHandler_,
        dataTask.pointer,
        completionHandler.pointer);
  }

  /// removeCachedResponseForDataTask:
  void removeCachedResponseForDataTask_(NSURLSessionDataTask dataTask) {
    _objc_msgSend_477(
        this.pointer, _sel_removeCachedResponseForDataTask_, dataTask.pointer);
  }

  /// init
  NSURLCache init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLCache new1() {
    final _ret = _objc_msgSend_19(_class_NSURLCache, _sel_new);
    return NSURLCache.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLCache allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSURLCache, _sel_allocWithZone_, zone);
    return NSURLCache.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLCache alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLCache, _sel_alloc);
    return NSURLCache.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLCache,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLCache,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLCache, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSURLCache, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLCache,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLCache,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLCache,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLCache, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSURLCache, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLCache = objc.getClass("NSURLCache");
late final _sel_sharedURLCache = objc.registerName("sharedURLCache");
final _objc_msgSend_464 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setSharedURLCache_ = objc.registerName("setSharedURLCache:");
final _objc_msgSend_465 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithMemoryCapacity_diskCapacity_diskPath_ =
    objc.registerName("initWithMemoryCapacity:diskCapacity:diskPath:");
final _objc_msgSend_466 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithMemoryCapacity_diskCapacity_directoryURL_ =
    objc.registerName("initWithMemoryCapacity:diskCapacity:directoryURL:");
final _objc_msgSend_467 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSCachedURLResponse
class NSCachedURLResponse extends objc.NSObject {
  NSCachedURLResponse._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSCachedURLResponse] that points to the same underlying object as [other].
  NSCachedURLResponse.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSCachedURLResponse] that wraps the given raw object pointer.
  NSCachedURLResponse.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSCachedURLResponse].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSCachedURLResponse);
  }

  /// initWithResponse:data:
  NSCachedURLResponse initWithResponse_data_(
      NSURLResponse response, objc.NSData data) {
    final _ret = _objc_msgSend_468(this.pointer, _sel_initWithResponse_data_,
        response.pointer, data.pointer);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithResponse:data:userInfo:storagePolicy:
  NSCachedURLResponse initWithResponse_data_userInfo_storagePolicy_(
      NSURLResponse response,
      objc.NSData data,
      objc.NSDictionary? userInfo,
      NSURLCacheStoragePolicy storagePolicy) {
    final _ret = _objc_msgSend_469(
        this.pointer,
        _sel_initWithResponse_data_userInfo_storagePolicy_,
        response.pointer,
        data.pointer,
        userInfo?.pointer ?? ffi.nullptr,
        storagePolicy.value);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// response
  NSURLResponse get response {
    final _ret = _objc_msgSend_470(this.pointer, _sel_response);
    return NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// data
  objc.NSData get data {
    final _ret = _objc_msgSend_115(this.pointer, _sel_data);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// userInfo
  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_84(this.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// storagePolicy
  NSURLCacheStoragePolicy get storagePolicy {
    final _ret = _objc_msgSend_471(this.pointer, _sel_storagePolicy);
    return NSURLCacheStoragePolicy.fromValue(_ret);
  }

  /// init
  NSCachedURLResponse init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSCachedURLResponse new1() {
    final _ret = _objc_msgSend_19(_class_NSCachedURLResponse, _sel_new);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSCachedURLResponse allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSCachedURLResponse, _sel_allocWithZone_, zone);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSCachedURLResponse alloc() {
    final _ret = _objc_msgSend_19(_class_NSCachedURLResponse, _sel_alloc);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSCachedURLResponse,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSCachedURLResponse,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSCachedURLResponse, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSCachedURLResponse, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSCachedURLResponse,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSCachedURLResponse,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSCachedURLResponse,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSCachedURLResponse, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSCachedURLResponse, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSCachedURLResponse = objc.getClass("NSCachedURLResponse");
late final _sel_initWithResponse_data_ =
    objc.registerName("initWithResponse:data:");
final _objc_msgSend_468 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

enum NSURLCacheStoragePolicy {
  NSURLCacheStorageAllowed(0),
  NSURLCacheStorageAllowedInMemoryOnly(1),
  NSURLCacheStorageNotAllowed(2);

  final int value;
  const NSURLCacheStoragePolicy(this.value);

  static NSURLCacheStoragePolicy fromValue(int value) => switch (value) {
        0 => NSURLCacheStorageAllowed,
        1 => NSURLCacheStorageAllowedInMemoryOnly,
        2 => NSURLCacheStorageNotAllowed,
        _ => throw ArgumentError(
            "Unknown value for NSURLCacheStoragePolicy: $value"),
      };
}

late final _sel_initWithResponse_data_userInfo_storagePolicy_ =
    objc.registerName("initWithResponse:data:userInfo:storagePolicy:");
final _objc_msgSend_469 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
final _objc_msgSend_470 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_storagePolicy = objc.registerName("storagePolicy");
final _objc_msgSend_471 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_cachedResponseForRequest_ =
    objc.registerName("cachedResponseForRequest:");
final _objc_msgSend_472 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_storeCachedResponse_forRequest_ =
    objc.registerName("storeCachedResponse:forRequest:");
final _objc_msgSend_473 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeCachedResponseForRequest_ =
    objc.registerName("removeCachedResponseForRequest:");
final _objc_msgSend_474 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeAllCachedResponses =
    objc.registerName("removeAllCachedResponses");
late final _sel_removeCachedResponsesSinceDate_ =
    objc.registerName("removeCachedResponsesSinceDate:");
late final _sel_memoryCapacity = objc.registerName("memoryCapacity");
late final _sel_setMemoryCapacity_ = objc.registerName("setMemoryCapacity:");
late final _sel_diskCapacity = objc.registerName("diskCapacity");
late final _sel_setDiskCapacity_ = objc.registerName("setDiskCapacity:");
late final _sel_currentMemoryUsage = objc.registerName("currentMemoryUsage");
late final _sel_currentDiskUsage = objc.registerName("currentDiskUsage");

/// NSURLSessionDataTask
class NSURLSessionDataTask extends NSURLSessionTask {
  NSURLSessionDataTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionDataTask] that points to the same underlying object as [other].
  NSURLSessionDataTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionDataTask] that wraps the given raw object pointer.
  NSURLSessionDataTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionDataTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionDataTask);
  }

  /// init
  NSURLSessionDataTask init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionDataTask new1() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionDataTask, _sel_new);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionDataTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSURLSessionDataTask, _sel_allocWithZone_, zone);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionDataTask alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionDataTask, _sel_alloc);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLSessionDataTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLSessionDataTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLSessionDataTask, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSURLSessionDataTask, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLSessionDataTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLSessionDataTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLSessionDataTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLSessionDataTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSURLSessionDataTask, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionDataTask = objc.getClass("NSURLSessionDataTask");
late final _sel_storeCachedResponse_forDataTask_ =
    objc.registerName("storeCachedResponse:forDataTask:");
final _objc_msgSend_475 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSCachedURLResponse_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSCachedURLResponse {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSCachedURLResponse_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(NSCachedURLResponse?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(arg0.address == 0 ? null : NSCachedURLResponse.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(NSCachedURLResponse?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
            ? null
            : NSCachedURLResponse.castFromPointer(arg0,
                retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSCachedURLResponse(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSCachedURLResponse_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> {
  void call(NSCachedURLResponse? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_getCachedResponseForDataTask_completionHandler_ =
    objc.registerName("getCachedResponseForDataTask:completionHandler:");
final _objc_msgSend_476 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_removeCachedResponseForDataTask_ =
    objc.registerName("removeCachedResponseForDataTask:");
final _objc_msgSend_477 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSURLConnection
class NSURLConnection extends objc.NSObject {
  NSURLConnection._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLConnection] that points to the same underlying object as [other].
  NSURLConnection.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLConnection] that wraps the given raw object pointer.
  NSURLConnection.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLConnection].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLConnection);
  }

  /// initWithRequest:delegate:startImmediately:
  NSURLConnection? initWithRequest_delegate_startImmediately_(
      NSURLRequest request,
      objc.ObjCObjectBase? delegate,
      bool startImmediately) {
    final _ret = _objc_msgSend_478(
        this.pointer,
        _sel_initWithRequest_delegate_startImmediately_,
        request.pointer,
        delegate?.pointer ?? ffi.nullptr,
        startImmediately);
    return _ret.address == 0
        ? null
        : NSURLConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithRequest:delegate:
  NSURLConnection? initWithRequest_delegate_(
      NSURLRequest request, objc.ObjCObjectBase? delegate) {
    final _ret = _objc_msgSend_479(this.pointer, _sel_initWithRequest_delegate_,
        request.pointer, delegate?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURLConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// connectionWithRequest:delegate:
  static NSURLConnection? connectionWithRequest_delegate_(
      NSURLRequest request, objc.ObjCObjectBase? delegate) {
    final _ret = _objc_msgSend_480(
        _class_NSURLConnection,
        _sel_connectionWithRequest_delegate_,
        request.pointer,
        delegate?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURLConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// originalRequest
  NSURLRequest get originalRequest {
    final _ret = _objc_msgSend_481(this.pointer, _sel_originalRequest);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// currentRequest
  NSURLRequest get currentRequest {
    final _ret = _objc_msgSend_481(this.pointer, _sel_currentRequest);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// start
  void start() {
    _objc_msgSend_7(this.pointer, _sel_start);
  }

  /// cancel
  void cancel() {
    _objc_msgSend_7(this.pointer, _sel_cancel);
  }

  /// scheduleInRunLoop:forMode:
  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_230(this.pointer, _sel_scheduleInRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  /// unscheduleFromRunLoop:forMode:
  void unscheduleFromRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_230(this.pointer, _sel_unscheduleFromRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  /// setDelegateQueue:
  void setDelegateQueue_(NSOperationQueue? queue) {
    _objc_msgSend_482(
        this.pointer, _sel_setDelegateQueue_, queue?.pointer ?? ffi.nullptr);
  }

  /// canHandleRequest:
  static bool canHandleRequest_(NSURLRequest request) {
    return _objc_msgSend_483(
        _class_NSURLConnection, _sel_canHandleRequest_, request.pointer);
  }

  /// sendSynchronousRequest:returningResponse:error:
  static objc.NSData? sendSynchronousRequest_returningResponse_error_(
      NSURLRequest request,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> response,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_484(
        _class_NSURLConnection,
        _sel_sendSynchronousRequest_returningResponse_error_,
        request.pointer,
        response,
        error);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// sendAsynchronousRequest:queue:completionHandler:
  static void sendAsynchronousRequest_queue_completionHandler_(
      NSURLRequest request,
      NSOperationQueue queue,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          handler) {
    _objc_msgSend_485(
        _class_NSURLConnection,
        _sel_sendAsynchronousRequest_queue_completionHandler_,
        request.pointer,
        queue.pointer,
        handler.pointer);
  }

  /// init
  NSURLConnection init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLConnection new1() {
    final _ret = _objc_msgSend_19(_class_NSURLConnection, _sel_new);
    return NSURLConnection.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLConnection allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSURLConnection, _sel_allocWithZone_, zone);
    return NSURLConnection.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLConnection alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLConnection, _sel_alloc);
    return NSURLConnection.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLConnection,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLConnection,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLConnection, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSURLConnection, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLConnection,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLConnection,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLConnection,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLConnection, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSURLConnection, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLConnection = objc.getClass("NSURLConnection");
late final _sel_initWithRequest_delegate_startImmediately_ =
    objc.registerName("initWithRequest:delegate:startImmediately:");
final _objc_msgSend_478 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initWithRequest_delegate_ =
    objc.registerName("initWithRequest:delegate:");
final _objc_msgSend_479 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_connectionWithRequest_delegate_ =
    objc.registerName("connectionWithRequest:delegate:");
final _objc_msgSend_480 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_481 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_unscheduleFromRunLoop_forMode_ =
    objc.registerName("unscheduleFromRunLoop:forMode:");
late final _sel_setDelegateQueue_ = objc.registerName("setDelegateQueue:");
final _objc_msgSend_482 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_canHandleRequest_ = objc.registerName("canHandleRequest:");
final _objc_msgSend_483 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sendSynchronousRequest_returningResponse_error_ =
    objc.registerName("sendSynchronousRequest:returningResponse:error:");
final _objc_msgSend_484 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
void _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_fnPtrTrampoline).cast(), ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(NSURLResponse?, objc.NSData?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2) =>
                  fn(arg0.address == 0 ? null : NSURLResponse.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSData.castFromPointer(arg1, retain: true, release: true), arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(NSURLResponse?, objc.NSData?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                ffi.Pointer<objc.ObjCObject> arg2) =>
            fn(
                arg0.address == 0
                    ? null
                    : NSURLResponse.castFromPointer(arg0, retain: false, release: true),
                arg1.address == 0 ? null : objc.NSData.castFromPointer(arg1, retain: false, release: true),
                arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(NSURLResponse? arg0, objc.NSData? arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer,
          arg0?.pointer ?? ffi.nullptr,
          arg1?.pointer ?? ffi.nullptr,
          arg2?.pointer ?? ffi.nullptr);
}

late final _sel_sendAsynchronousRequest_queue_completionHandler_ =
    objc.registerName("sendAsynchronousRequest:queue:completionHandler:");
final _objc_msgSend_485 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// NSURLCredential
class NSURLCredential extends objc.NSObject {
  NSURLCredential._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLCredential] that points to the same underlying object as [other].
  NSURLCredential.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLCredential] that wraps the given raw object pointer.
  NSURLCredential.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLCredential].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLCredential);
  }

  /// persistence
  NSURLCredentialPersistence get persistence {
    final _ret = _objc_msgSend_486(this.pointer, _sel_persistence);
    return NSURLCredentialPersistence.fromValue(_ret);
  }

  /// initWithUser:password:persistence:
  NSURLCredential initWithUser_password_persistence_(objc.NSString user,
      objc.NSString password, NSURLCredentialPersistence persistence) {
    final _ret = _objc_msgSend_487(
        this.pointer,
        _sel_initWithUser_password_persistence_,
        user.pointer,
        password.pointer,
        persistence.value);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  /// credentialWithUser:password:persistence:
  static NSURLCredential credentialWithUser_password_persistence_(
      objc.NSString user,
      objc.NSString password,
      NSURLCredentialPersistence persistence) {
    final _ret = _objc_msgSend_488(
        _class_NSURLCredential,
        _sel_credentialWithUser_password_persistence_,
        user.pointer,
        password.pointer,
        persistence.value);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  /// user
  objc.NSString? get user {
    final _ret = _objc_msgSend_20(this.pointer, _sel_user);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// password
  objc.NSString? get password {
    final _ret = _objc_msgSend_20(this.pointer, _sel_password);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// hasPassword
  bool get hasPassword {
    return _objc_msgSend_13(this.pointer, _sel_hasPassword);
  }

  /// initWithIdentity:certificates:persistence:
  NSURLCredential initWithIdentity_certificates_persistence_(
      ffi.Pointer<__SecIdentity> identity,
      objc.NSArray? certArray,
      NSURLCredentialPersistence persistence) {
    final _ret = _objc_msgSend_489(
        this.pointer,
        _sel_initWithIdentity_certificates_persistence_,
        identity,
        certArray?.pointer ?? ffi.nullptr,
        persistence.value);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  /// credentialWithIdentity:certificates:persistence:
  static NSURLCredential credentialWithIdentity_certificates_persistence_(
      ffi.Pointer<__SecIdentity> identity,
      objc.NSArray? certArray,
      NSURLCredentialPersistence persistence) {
    final _ret = _objc_msgSend_490(
        _class_NSURLCredential,
        _sel_credentialWithIdentity_certificates_persistence_,
        identity,
        certArray?.pointer ?? ffi.nullptr,
        persistence.value);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  /// identity
  ffi.Pointer<__SecIdentity> get identity {
    return _objc_msgSend_491(this.pointer, _sel_identity);
  }

  /// certificates
  objc.NSArray get certificates {
    final _ret = _objc_msgSend_33(this.pointer, _sel_certificates);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithTrust:
  NSURLCredential initWithTrust_(ffi.Pointer<__SecTrust> trust) {
    final _ret = _objc_msgSend_492(this.pointer, _sel_initWithTrust_, trust);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  /// credentialForTrust:
  static NSURLCredential credentialForTrust_(ffi.Pointer<__SecTrust> trust) {
    final _ret = _objc_msgSend_493(
        _class_NSURLCredential, _sel_credentialForTrust_, trust);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSURLCredential init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLCredential new1() {
    final _ret = _objc_msgSend_19(_class_NSURLCredential, _sel_new);
    return NSURLCredential.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLCredential allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSURLCredential, _sel_allocWithZone_, zone);
    return NSURLCredential.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLCredential alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLCredential, _sel_alloc);
    return NSURLCredential.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLCredential,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLCredential,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLCredential, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSURLCredential, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLCredential,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLCredential,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLCredential,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLCredential, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSURLCredential, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLCredential = objc.getClass("NSURLCredential");

enum NSURLCredentialPersistence {
  NSURLCredentialPersistenceNone(0),
  NSURLCredentialPersistenceForSession(1),
  NSURLCredentialPersistencePermanent(2),
  NSURLCredentialPersistenceSynchronizable(3);

  final int value;
  const NSURLCredentialPersistence(this.value);

  static NSURLCredentialPersistence fromValue(int value) => switch (value) {
        0 => NSURLCredentialPersistenceNone,
        1 => NSURLCredentialPersistenceForSession,
        2 => NSURLCredentialPersistencePermanent,
        3 => NSURLCredentialPersistenceSynchronizable,
        _ => throw ArgumentError(
            "Unknown value for NSURLCredentialPersistence: $value"),
      };
}

late final _sel_persistence = objc.registerName("persistence");
final _objc_msgSend_486 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initWithUser_password_persistence_ =
    objc.registerName("initWithUser:password:persistence:");
final _objc_msgSend_487 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_credentialWithUser_password_persistence_ =
    objc.registerName("credentialWithUser:password:persistence:");
final _objc_msgSend_488 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_user = objc.registerName("user");
late final _sel_password = objc.registerName("password");
late final _sel_hasPassword = objc.registerName("hasPassword");

final class __SecIdentity extends ffi.Opaque {}

late final _sel_initWithIdentity_certificates_persistence_ =
    objc.registerName("initWithIdentity:certificates:persistence:");
final _objc_msgSend_489 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__SecIdentity>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__SecIdentity>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_credentialWithIdentity_certificates_persistence_ =
    objc.registerName("credentialWithIdentity:certificates:persistence:");
final _objc_msgSend_490 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__SecIdentity>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__SecIdentity>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_identity = objc.registerName("identity");
final _objc_msgSend_491 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<__SecIdentity> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<__SecIdentity> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_certificates = objc.registerName("certificates");

final class __SecTrust extends ffi.Opaque {}

late final _sel_initWithTrust_ = objc.registerName("initWithTrust:");
final _objc_msgSend_492 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__SecTrust>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__SecTrust>)>();
late final _sel_credentialForTrust_ = objc.registerName("credentialForTrust:");
final _objc_msgSend_493 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__SecTrust>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__SecTrust>)>();

/// NSURLProtectionSpace
class NSURLProtectionSpace extends objc.NSObject {
  NSURLProtectionSpace._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLProtectionSpace] that points to the same underlying object as [other].
  NSURLProtectionSpace.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLProtectionSpace] that wraps the given raw object pointer.
  NSURLProtectionSpace.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLProtectionSpace].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLProtectionSpace);
  }

  /// initWithHost:port:protocol:realm:authenticationMethod:
  NSURLProtectionSpace initWithHost_port_protocol_realm_authenticationMethod_(
      objc.NSString host,
      int port,
      objc.NSString? protocol,
      objc.NSString? realm,
      objc.NSString? authenticationMethod) {
    final _ret = _objc_msgSend_494(
        this.pointer,
        _sel_initWithHost_port_protocol_realm_authenticationMethod_,
        host.pointer,
        port,
        protocol?.pointer ?? ffi.nullptr,
        realm?.pointer ?? ffi.nullptr,
        authenticationMethod?.pointer ?? ffi.nullptr);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithProxyHost:port:type:realm:authenticationMethod:
  NSURLProtectionSpace initWithProxyHost_port_type_realm_authenticationMethod_(
      objc.NSString host,
      int port,
      objc.NSString? type,
      objc.NSString? realm,
      objc.NSString? authenticationMethod) {
    final _ret = _objc_msgSend_494(
        this.pointer,
        _sel_initWithProxyHost_port_type_realm_authenticationMethod_,
        host.pointer,
        port,
        type?.pointer ?? ffi.nullptr,
        realm?.pointer ?? ffi.nullptr,
        authenticationMethod?.pointer ?? ffi.nullptr);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// realm
  objc.NSString? get realm {
    final _ret = _objc_msgSend_20(this.pointer, _sel_realm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// receivesCredentialSecurely
  bool get receivesCredentialSecurely {
    return _objc_msgSend_13(this.pointer, _sel_receivesCredentialSecurely);
  }

  /// isProxy
  bool get isProxy {
    return _objc_msgSend_13(this.pointer, _sel_isProxy);
  }

  /// host
  objc.NSString get host {
    final _ret = _objc_msgSend_11(this.pointer, _sel_host);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// port
  int get port {
    return _objc_msgSend_125(this.pointer, _sel_port);
  }

  /// proxyType
  objc.NSString? get proxyType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_proxyType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// protocol
  objc.NSString? get protocol {
    final _ret = _objc_msgSend_20(this.pointer, _sel_protocol);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// authenticationMethod
  objc.NSString get authenticationMethod {
    final _ret = _objc_msgSend_11(this.pointer, _sel_authenticationMethod);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// distinguishedNames
  objc.NSArray? get distinguishedNames {
    final _ret = _objc_msgSend_88(this.pointer, _sel_distinguishedNames);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// serverTrust
  ffi.Pointer<__SecTrust> get serverTrust {
    return _objc_msgSend_495(this.pointer, _sel_serverTrust);
  }

  /// init
  NSURLProtectionSpace init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLProtectionSpace new1() {
    final _ret = _objc_msgSend_19(_class_NSURLProtectionSpace, _sel_new);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLProtectionSpace allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSURLProtectionSpace, _sel_allocWithZone_, zone);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLProtectionSpace alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLProtectionSpace, _sel_alloc);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLProtectionSpace,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLProtectionSpace,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLProtectionSpace, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSURLProtectionSpace, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLProtectionSpace,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLProtectionSpace,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLProtectionSpace,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLProtectionSpace, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSURLProtectionSpace, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLProtectionSpace = objc.getClass("NSURLProtectionSpace");
late final _sel_initWithHost_port_protocol_realm_authenticationMethod_ =
    objc.registerName("initWithHost:port:protocol:realm:authenticationMethod:");
final _objc_msgSend_494 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithProxyHost_port_type_realm_authenticationMethod_ = objc
    .registerName("initWithProxyHost:port:type:realm:authenticationMethod:");
late final _sel_realm = objc.registerName("realm");
late final _sel_receivesCredentialSecurely =
    objc.registerName("receivesCredentialSecurely");
late final _sel_isProxy = objc.registerName("isProxy");
late final _sel_host = objc.registerName("host");
late final _sel_proxyType = objc.registerName("proxyType");
late final _sel_protocol = objc.registerName("protocol");
late final _sel_authenticationMethod =
    objc.registerName("authenticationMethod");
late final _sel_distinguishedNames = objc.registerName("distinguishedNames");
late final _sel_serverTrust = objc.registerName("serverTrust");
final _objc_msgSend_495 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<__SecTrust> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<__SecTrust> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSURLCredentialStorage
class NSURLCredentialStorage extends objc.NSObject {
  NSURLCredentialStorage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLCredentialStorage] that points to the same underlying object as [other].
  NSURLCredentialStorage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLCredentialStorage] that wraps the given raw object pointer.
  NSURLCredentialStorage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLCredentialStorage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLCredentialStorage);
  }

  /// sharedCredentialStorage
  static NSURLCredentialStorage getSharedCredentialStorage() {
    final _ret = _objc_msgSend_496(
        _class_NSURLCredentialStorage, _sel_sharedCredentialStorage);
    return NSURLCredentialStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// credentialsForProtectionSpace:
  objc.NSDictionary? credentialsForProtectionSpace_(
      NSURLProtectionSpace space) {
    final _ret = _objc_msgSend_497(
        this.pointer, _sel_credentialsForProtectionSpace_, space.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// allCredentials
  objc.NSDictionary get allCredentials {
    final _ret = _objc_msgSend_123(this.pointer, _sel_allCredentials);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCredential:forProtectionSpace:
  void setCredential_forProtectionSpace_(
      NSURLCredential credential, NSURLProtectionSpace space) {
    _objc_msgSend_498(this.pointer, _sel_setCredential_forProtectionSpace_,
        credential.pointer, space.pointer);
  }

  /// removeCredential:forProtectionSpace:
  void removeCredential_forProtectionSpace_(
      NSURLCredential credential, NSURLProtectionSpace space) {
    _objc_msgSend_498(this.pointer, _sel_removeCredential_forProtectionSpace_,
        credential.pointer, space.pointer);
  }

  /// removeCredential:forProtectionSpace:options:
  void removeCredential_forProtectionSpace_options_(NSURLCredential credential,
      NSURLProtectionSpace space, objc.NSDictionary? options) {
    _objc_msgSend_499(
        this.pointer,
        _sel_removeCredential_forProtectionSpace_options_,
        credential.pointer,
        space.pointer,
        options?.pointer ?? ffi.nullptr);
  }

  /// defaultCredentialForProtectionSpace:
  NSURLCredential? defaultCredentialForProtectionSpace_(
      NSURLProtectionSpace space) {
    final _ret = _objc_msgSend_500(
        this.pointer, _sel_defaultCredentialForProtectionSpace_, space.pointer);
    return _ret.address == 0
        ? null
        : NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDefaultCredential:forProtectionSpace:
  void setDefaultCredential_forProtectionSpace_(
      NSURLCredential credential, NSURLProtectionSpace space) {
    _objc_msgSend_498(
        this.pointer,
        _sel_setDefaultCredential_forProtectionSpace_,
        credential.pointer,
        space.pointer);
  }

  /// getCredentialsForProtectionSpace:task:completionHandler:
  void getCredentialsForProtectionSpace_task_completionHandler_(
      NSURLProtectionSpace protectionSpace,
      NSURLSessionTask task,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_501(
        this.pointer,
        _sel_getCredentialsForProtectionSpace_task_completionHandler_,
        protectionSpace.pointer,
        task.pointer,
        completionHandler.pointer);
  }

  /// setCredential:forProtectionSpace:task:
  void setCredential_forProtectionSpace_task_(NSURLCredential credential,
      NSURLProtectionSpace protectionSpace, NSURLSessionTask task) {
    _objc_msgSend_502(this.pointer, _sel_setCredential_forProtectionSpace_task_,
        credential.pointer, protectionSpace.pointer, task.pointer);
  }

  /// removeCredential:forProtectionSpace:options:task:
  void removeCredential_forProtectionSpace_options_task_(
      NSURLCredential credential,
      NSURLProtectionSpace protectionSpace,
      objc.NSDictionary? options,
      NSURLSessionTask task) {
    _objc_msgSend_503(
        this.pointer,
        _sel_removeCredential_forProtectionSpace_options_task_,
        credential.pointer,
        protectionSpace.pointer,
        options?.pointer ?? ffi.nullptr,
        task.pointer);
  }

  /// getDefaultCredentialForProtectionSpace:task:completionHandler:
  void getDefaultCredentialForProtectionSpace_task_completionHandler_(
      NSURLProtectionSpace space,
      NSURLSessionTask task,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_504(
        this.pointer,
        _sel_getDefaultCredentialForProtectionSpace_task_completionHandler_,
        space.pointer,
        task.pointer,
        completionHandler.pointer);
  }

  /// setDefaultCredential:forProtectionSpace:task:
  void setDefaultCredential_forProtectionSpace_task_(NSURLCredential credential,
      NSURLProtectionSpace protectionSpace, NSURLSessionTask task) {
    _objc_msgSend_502(
        this.pointer,
        _sel_setDefaultCredential_forProtectionSpace_task_,
        credential.pointer,
        protectionSpace.pointer,
        task.pointer);
  }

  /// init
  NSURLCredentialStorage init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLCredentialStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLCredentialStorage new1() {
    final _ret = _objc_msgSend_19(_class_NSURLCredentialStorage, _sel_new);
    return NSURLCredentialStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLCredentialStorage allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSURLCredentialStorage, _sel_allocWithZone_, zone);
    return NSURLCredentialStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLCredentialStorage alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLCredentialStorage, _sel_alloc);
    return NSURLCredentialStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLCredentialStorage,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLCredentialStorage,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLCredentialStorage, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSURLCredentialStorage, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLCredentialStorage,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLCredentialStorage,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLCredentialStorage,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLCredentialStorage, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSURLCredentialStorage, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLCredentialStorage =
    objc.getClass("NSURLCredentialStorage");
late final _sel_sharedCredentialStorage =
    objc.registerName("sharedCredentialStorage");
final _objc_msgSend_496 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_credentialsForProtectionSpace_ =
    objc.registerName("credentialsForProtectionSpace:");
final _objc_msgSend_497 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_allCredentials = objc.registerName("allCredentials");
late final _sel_setCredential_forProtectionSpace_ =
    objc.registerName("setCredential:forProtectionSpace:");
final _objc_msgSend_498 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeCredential_forProtectionSpace_ =
    objc.registerName("removeCredential:forProtectionSpace:");
late final _sel_removeCredential_forProtectionSpace_options_ =
    objc.registerName("removeCredential:forProtectionSpace:options:");
final _objc_msgSend_499 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_defaultCredentialForProtectionSpace_ =
    objc.registerName("defaultCredentialForProtectionSpace:");
final _objc_msgSend_500 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setDefaultCredential_forProtectionSpace_ =
    objc.registerName("setDefaultCredential:forProtectionSpace:");
void _ObjCBlock_ffiVoid_NSDictionary_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSDictionary_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSDictionary {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSDictionary_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSDictionary?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSDictionary_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(arg0.address == 0 ? null : objc.NSDictionary.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(objc.NSDictionary?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSDictionary_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
            ? null
            : objc.NSDictionary.castFromPointer(arg0,
                retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSDictionary(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSDictionary_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSDictionary? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_getCredentialsForProtectionSpace_task_completionHandler_ = objc
    .registerName("getCredentialsForProtectionSpace:task:completionHandler:");
final _objc_msgSend_501 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_setCredential_forProtectionSpace_task_ =
    objc.registerName("setCredential:forProtectionSpace:task:");
final _objc_msgSend_502 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeCredential_forProtectionSpace_options_task_ =
    objc.registerName("removeCredential:forProtectionSpace:options:task:");
final _objc_msgSend_503 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSURLCredential_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSURLCredential_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSURLCredential {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSURLCredential_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(NSURLCredential?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSURLCredential_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(arg0.address == 0 ? null : NSURLCredential.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(NSURLCredential?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSURLCredential_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
            ? null
            : NSURLCredential.castFromPointer(arg0,
                retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSURLCredential(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSURLCredential_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> {
  void call(NSURLCredential? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_getDefaultCredentialForProtectionSpace_task_completionHandler_ =
    objc.registerName(
        "getDefaultCredentialForProtectionSpace:task:completionHandler:");
final _objc_msgSend_504 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_setDefaultCredential_forProtectionSpace_task_ =
    objc.registerName("setDefaultCredential:forProtectionSpace:task:");

/// NSURLProtocol
class NSURLProtocol extends objc.NSObject {
  NSURLProtocol._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLProtocol] that points to the same underlying object as [other].
  NSURLProtocol.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLProtocol] that wraps the given raw object pointer.
  NSURLProtocol.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLProtocol].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLProtocol);
  }

  /// initWithRequest:cachedResponse:client:
  NSURLProtocol initWithRequest_cachedResponse_client_(NSURLRequest request,
      NSCachedURLResponse? cachedResponse, objc.ObjCObjectBase? client) {
    final _ret = _objc_msgSend_505(
        this.pointer,
        _sel_initWithRequest_cachedResponse_client_,
        request.pointer,
        cachedResponse?.pointer ?? ffi.nullptr,
        client?.pointer ?? ffi.nullptr);
    return NSURLProtocol.castFromPointer(_ret, retain: true, release: true);
  }

  /// client
  objc.ObjCObjectBase? get client {
    final _ret = _objc_msgSend_85(this.pointer, _sel_client);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// request
  NSURLRequest get request {
    final _ret = _objc_msgSend_481(this.pointer, _sel_request);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// cachedResponse
  NSCachedURLResponse? get cachedResponse {
    final _ret = _objc_msgSend_506(this.pointer, _sel_cachedResponse);
    return _ret.address == 0
        ? null
        : NSCachedURLResponse.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// canInitWithRequest:
  static bool canInitWithRequest_(NSURLRequest request) {
    return _objc_msgSend_483(
        _class_NSURLProtocol, _sel_canInitWithRequest_, request.pointer);
  }

  /// canonicalRequestForRequest:
  static NSURLRequest canonicalRequestForRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_507(_class_NSURLProtocol,
        _sel_canonicalRequestForRequest_, request.pointer);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// requestIsCacheEquivalent:toRequest:
  static bool requestIsCacheEquivalent_toRequest_(
      NSURLRequest a, NSURLRequest b) {
    return _objc_msgSend_508(_class_NSURLProtocol,
        _sel_requestIsCacheEquivalent_toRequest_, a.pointer, b.pointer);
  }

  /// startLoading
  void startLoading() {
    _objc_msgSend_7(this.pointer, _sel_startLoading);
  }

  /// stopLoading
  void stopLoading() {
    _objc_msgSend_7(this.pointer, _sel_stopLoading);
  }

  /// propertyForKey:inRequest:
  static objc.ObjCObjectBase? propertyForKey_inRequest_(
      objc.NSString key, NSURLRequest request) {
    final _ret = _objc_msgSend_509(_class_NSURLProtocol,
        _sel_propertyForKey_inRequest_, key.pointer, request.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setProperty:forKey:inRequest:
  static void setProperty_forKey_inRequest_(objc.ObjCObjectBase value,
      objc.NSString key, NSMutableURLRequest request) {
    _objc_msgSend_516(_class_NSURLProtocol, _sel_setProperty_forKey_inRequest_,
        value.pointer, key.pointer, request.pointer);
  }

  /// removePropertyForKey:inRequest:
  static void removePropertyForKey_inRequest_(
      objc.NSString key, NSMutableURLRequest request) {
    _objc_msgSend_517(_class_NSURLProtocol,
        _sel_removePropertyForKey_inRequest_, key.pointer, request.pointer);
  }

  /// registerClass:
  static bool registerClass_(objc.ObjCObjectBase protocolClass) {
    return _objc_msgSend_0(
        _class_NSURLProtocol, _sel_registerClass_, protocolClass.pointer);
  }

  /// unregisterClass:
  static void unregisterClass_(objc.ObjCObjectBase protocolClass) {
    _objc_msgSend_27(
        _class_NSURLProtocol, _sel_unregisterClass_, protocolClass.pointer);
  }

  /// canInitWithTask:
  static bool canInitWithTask_(NSURLSessionTask task) {
    return _objc_msgSend_518(
        _class_NSURLProtocol, _sel_canInitWithTask_, task.pointer);
  }

  /// initWithTask:cachedResponse:client:
  NSURLProtocol initWithTask_cachedResponse_client_(NSURLSessionTask task,
      NSCachedURLResponse? cachedResponse, objc.ObjCObjectBase? client) {
    final _ret = _objc_msgSend_519(
        this.pointer,
        _sel_initWithTask_cachedResponse_client_,
        task.pointer,
        cachedResponse?.pointer ?? ffi.nullptr,
        client?.pointer ?? ffi.nullptr);
    return NSURLProtocol.castFromPointer(_ret, retain: true, release: true);
  }

  /// task
  NSURLSessionTask? get task {
    final _ret = _objc_msgSend_520(this.pointer, _sel_task);
    return _ret.address == 0
        ? null
        : NSURLSessionTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSURLProtocol init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLProtocol.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLProtocol new1() {
    final _ret = _objc_msgSend_19(_class_NSURLProtocol, _sel_new);
    return NSURLProtocol.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLProtocol allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSURLProtocol, _sel_allocWithZone_, zone);
    return NSURLProtocol.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLProtocol alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLProtocol, _sel_alloc);
    return NSURLProtocol.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLProtocol,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLProtocol,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLProtocol, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSURLProtocol, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLProtocol,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLProtocol,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLProtocol,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLProtocol, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSURLProtocol, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLProtocol = objc.getClass("NSURLProtocol");
late final _sel_initWithRequest_cachedResponse_client_ =
    objc.registerName("initWithRequest:cachedResponse:client:");
final _objc_msgSend_505 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_client = objc.registerName("client");
late final _sel_request = objc.registerName("request");
late final _sel_cachedResponse = objc.registerName("cachedResponse");
final _objc_msgSend_506 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_canInitWithRequest_ = objc.registerName("canInitWithRequest:");
late final _sel_canonicalRequestForRequest_ =
    objc.registerName("canonicalRequestForRequest:");
final _objc_msgSend_507 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_requestIsCacheEquivalent_toRequest_ =
    objc.registerName("requestIsCacheEquivalent:toRequest:");
final _objc_msgSend_508 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_startLoading = objc.registerName("startLoading");
late final _sel_stopLoading = objc.registerName("stopLoading");
late final _sel_propertyForKey_inRequest_ =
    objc.registerName("propertyForKey:inRequest:");
final _objc_msgSend_509 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSMutableURLRequest
class NSMutableURLRequest extends NSURLRequest {
  NSMutableURLRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableURLRequest] that points to the same underlying object as [other].
  NSMutableURLRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableURLRequest] that wraps the given raw object pointer.
  NSMutableURLRequest.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableURLRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableURLRequest);
  }

  /// URL
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setURL:
  set URL(objc.NSURL? value) {
    return _objc_msgSend_25(
        this.pointer, _sel_setURL_, value?.pointer ?? ffi.nullptr);
  }

  /// cachePolicy
  NSURLRequestCachePolicy get cachePolicy {
    final _ret = _objc_msgSend_334(this.pointer, _sel_cachePolicy);
    return NSURLRequestCachePolicy.fromValue(_ret);
  }

  /// setCachePolicy:
  set cachePolicy(NSURLRequestCachePolicy value) {
    return _objc_msgSend_510(this.pointer, _sel_setCachePolicy_, value.value);
  }

  /// timeoutInterval
  double get timeoutInterval {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_timeoutInterval)
        : _objc_msgSend_18(this.pointer, _sel_timeoutInterval);
  }

  /// setTimeoutInterval:
  set timeoutInterval(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setTimeoutInterval_, value);
  }

  /// mainDocumentURL
  objc.NSURL? get mainDocumentURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_mainDocumentURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMainDocumentURL:
  set mainDocumentURL(objc.NSURL? value) {
    return _objc_msgSend_25(
        this.pointer, _sel_setMainDocumentURL_, value?.pointer ?? ffi.nullptr);
  }

  /// networkServiceType
  NSURLRequestNetworkServiceType get networkServiceType {
    final _ret = _objc_msgSend_335(this.pointer, _sel_networkServiceType);
    return NSURLRequestNetworkServiceType.fromValue(_ret);
  }

  /// setNetworkServiceType:
  set networkServiceType(NSURLRequestNetworkServiceType value) {
    return _objc_msgSend_511(
        this.pointer, _sel_setNetworkServiceType_, value.value);
  }

  /// allowsCellularAccess
  bool get allowsCellularAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsCellularAccess);
  }

  /// setAllowsCellularAccess:
  set allowsCellularAccess(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setAllowsCellularAccess_, value);
  }

  /// allowsExpensiveNetworkAccess
  bool get allowsExpensiveNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsExpensiveNetworkAccess);
  }

  /// setAllowsExpensiveNetworkAccess:
  set allowsExpensiveNetworkAccess(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAllowsExpensiveNetworkAccess_, value);
  }

  /// allowsConstrainedNetworkAccess
  bool get allowsConstrainedNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsConstrainedNetworkAccess);
  }

  /// setAllowsConstrainedNetworkAccess:
  set allowsConstrainedNetworkAccess(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAllowsConstrainedNetworkAccess_, value);
  }

  /// assumesHTTP3Capable
  bool get assumesHTTP3Capable {
    return _objc_msgSend_13(this.pointer, _sel_assumesHTTP3Capable);
  }

  /// setAssumesHTTP3Capable:
  set assumesHTTP3Capable(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setAssumesHTTP3Capable_, value);
  }

  /// attribution
  NSURLRequestAttribution get attribution {
    final _ret = _objc_msgSend_336(this.pointer, _sel_attribution);
    return NSURLRequestAttribution.fromValue(_ret);
  }

  /// setAttribution:
  set attribution(NSURLRequestAttribution value) {
    return _objc_msgSend_512(this.pointer, _sel_setAttribution_, value.value);
  }

  /// requiresDNSSECValidation
  bool get requiresDNSSECValidation {
    return _objc_msgSend_13(this.pointer, _sel_requiresDNSSECValidation);
  }

  /// setRequiresDNSSECValidation:
  set requiresDNSSECValidation(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setRequiresDNSSECValidation_, value);
  }

  /// HTTPMethod
  objc.NSString get HTTPMethod {
    final _ret = _objc_msgSend_11(this.pointer, _sel_HTTPMethod);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setHTTPMethod:
  set HTTPMethod(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setHTTPMethod_, value.pointer);
  }

  /// allHTTPHeaderFields
  objc.NSDictionary? get allHTTPHeaderFields {
    final _ret = _objc_msgSend_84(this.pointer, _sel_allHTTPHeaderFields);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAllHTTPHeaderFields:
  set allHTTPHeaderFields(objc.NSDictionary? value) {
    return _objc_msgSend_189(this.pointer, _sel_setAllHTTPHeaderFields_,
        value?.pointer ?? ffi.nullptr);
  }

  /// setValue:forHTTPHeaderField:
  void setValue_forHTTPHeaderField_(objc.NSString? value, objc.NSString field) {
    _objc_msgSend_513(this.pointer, _sel_setValue_forHTTPHeaderField_,
        value?.pointer ?? ffi.nullptr, field.pointer);
  }

  /// addValue:forHTTPHeaderField:
  void addValue_forHTTPHeaderField_(objc.NSString value, objc.NSString field) {
    _objc_msgSend_215(this.pointer, _sel_addValue_forHTTPHeaderField_,
        value.pointer, field.pointer);
  }

  /// HTTPBody
  objc.NSData? get HTTPBody {
    final _ret = _objc_msgSend_337(this.pointer, _sel_HTTPBody);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// setHTTPBody:
  set HTTPBody(objc.NSData? value) {
    return _objc_msgSend_514(
        this.pointer, _sel_setHTTPBody_, value?.pointer ?? ffi.nullptr);
  }

  /// HTTPBodyStream
  NSInputStream? get HTTPBodyStream {
    final _ret = _objc_msgSend_354(this.pointer, _sel_HTTPBodyStream);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  /// setHTTPBodyStream:
  set HTTPBodyStream(NSInputStream? value) {
    return _objc_msgSend_515(
        this.pointer, _sel_setHTTPBodyStream_, value?.pointer ?? ffi.nullptr);
  }

  /// HTTPShouldHandleCookies
  bool get HTTPShouldHandleCookies {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldHandleCookies);
  }

  /// setHTTPShouldHandleCookies:
  set HTTPShouldHandleCookies(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setHTTPShouldHandleCookies_, value);
  }

  /// HTTPShouldUsePipelining
  bool get HTTPShouldUsePipelining {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldUsePipelining);
  }

  /// setHTTPShouldUsePipelining:
  set HTTPShouldUsePipelining(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setHTTPShouldUsePipelining_, value);
  }

  /// requestWithURL:
  static NSMutableURLRequest requestWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_332(
        _class_NSMutableURLRequest, _sel_requestWithURL_, URL.pointer);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// supportsSecureCoding
  static bool getSupportsSecureCoding() {
    return _objc_msgSend_13(
        _class_NSMutableURLRequest, _sel_supportsSecureCoding);
  }

  /// requestWithURL:cachePolicy:timeoutInterval:
  static NSMutableURLRequest requestWithURL_cachePolicy_timeoutInterval_(
      objc.NSURL URL,
      NSURLRequestCachePolicy cachePolicy,
      double timeoutInterval) {
    final _ret = _objc_msgSend_333(
        _class_NSMutableURLRequest,
        _sel_requestWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy.value,
        timeoutInterval);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithURL:
  NSMutableURLRequest initWithURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_332(this.pointer, _sel_initWithURL_, URL.pointer);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithURL:cachePolicy:timeoutInterval:
  NSMutableURLRequest initWithURL_cachePolicy_timeoutInterval_(objc.NSURL URL,
      NSURLRequestCachePolicy cachePolicy, double timeoutInterval) {
    final _ret = _objc_msgSend_333(
        this.pointer,
        _sel_initWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy.value,
        timeoutInterval);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  NSMutableURLRequest init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSMutableURLRequest new1() {
    final _ret = _objc_msgSend_19(_class_NSMutableURLRequest, _sel_new);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSMutableURLRequest allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSMutableURLRequest, _sel_allocWithZone_, zone);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSMutableURLRequest alloc() {
    final _ret = _objc_msgSend_19(_class_NSMutableURLRequest, _sel_alloc);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSMutableURLRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSMutableURLRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSMutableURLRequest, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSMutableURLRequest, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSMutableURLRequest,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSMutableURLRequest,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSMutableURLRequest,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSMutableURLRequest, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSMutableURLRequest, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSMutableURLRequest = objc.getClass("NSMutableURLRequest");
late final _sel_setURL_ = objc.registerName("setURL:");
late final _sel_setCachePolicy_ = objc.registerName("setCachePolicy:");
final _objc_msgSend_510 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setTimeoutInterval_ = objc.registerName("setTimeoutInterval:");
late final _sel_setMainDocumentURL_ = objc.registerName("setMainDocumentURL:");
late final _sel_setNetworkServiceType_ =
    objc.registerName("setNetworkServiceType:");
final _objc_msgSend_511 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setAllowsCellularAccess_ =
    objc.registerName("setAllowsCellularAccess:");
late final _sel_setAllowsExpensiveNetworkAccess_ =
    objc.registerName("setAllowsExpensiveNetworkAccess:");
late final _sel_setAllowsConstrainedNetworkAccess_ =
    objc.registerName("setAllowsConstrainedNetworkAccess:");
late final _sel_setAssumesHTTP3Capable_ =
    objc.registerName("setAssumesHTTP3Capable:");
late final _sel_setAttribution_ = objc.registerName("setAttribution:");
final _objc_msgSend_512 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setRequiresDNSSECValidation_ =
    objc.registerName("setRequiresDNSSECValidation:");
late final _sel_setHTTPMethod_ = objc.registerName("setHTTPMethod:");
late final _sel_setAllHTTPHeaderFields_ =
    objc.registerName("setAllHTTPHeaderFields:");
late final _sel_setValue_forHTTPHeaderField_ =
    objc.registerName("setValue:forHTTPHeaderField:");
final _objc_msgSend_513 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addValue_forHTTPHeaderField_ =
    objc.registerName("addValue:forHTTPHeaderField:");
late final _sel_setHTTPBody_ = objc.registerName("setHTTPBody:");
final _objc_msgSend_514 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setHTTPBodyStream_ = objc.registerName("setHTTPBodyStream:");
final _objc_msgSend_515 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setHTTPShouldHandleCookies_ =
    objc.registerName("setHTTPShouldHandleCookies:");
late final _sel_setHTTPShouldUsePipelining_ =
    objc.registerName("setHTTPShouldUsePipelining:");
late final _sel_setProperty_forKey_inRequest_ =
    objc.registerName("setProperty:forKey:inRequest:");
final _objc_msgSend_516 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removePropertyForKey_inRequest_ =
    objc.registerName("removePropertyForKey:inRequest:");
final _objc_msgSend_517 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_registerClass_ = objc.registerName("registerClass:");
late final _sel_unregisterClass_ = objc.registerName("unregisterClass:");
late final _sel_canInitWithTask_ = objc.registerName("canInitWithTask:");
final _objc_msgSend_518 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithTask_cachedResponse_client_ =
    objc.registerName("initWithTask:cachedResponse:client:");
final _objc_msgSend_519 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_task = objc.registerName("task");
final _objc_msgSend_520 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSXMLParser
class NSXMLParser extends objc.NSObject {
  NSXMLParser._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLParser] that points to the same underlying object as [other].
  NSXMLParser.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLParser] that wraps the given raw object pointer.
  NSXMLParser.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLParser].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSXMLParser);
  }

  /// initWithContentsOfURL:
  NSXMLParser? initWithContentsOfURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_36(
        this.pointer, _sel_initWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSXMLParser.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:
  NSXMLParser initWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_340(this.pointer, _sel_initWithData_, data.pointer);
    return NSXMLParser.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithStream:
  NSXMLParser initWithStream_(NSInputStream stream) {
    final _ret =
        _objc_msgSend_521(this.pointer, _sel_initWithStream_, stream.pointer);
    return NSXMLParser.castFromPointer(_ret, retain: true, release: true);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// shouldProcessNamespaces
  bool get shouldProcessNamespaces {
    return _objc_msgSend_13(this.pointer, _sel_shouldProcessNamespaces);
  }

  /// setShouldProcessNamespaces:
  set shouldProcessNamespaces(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setShouldProcessNamespaces_, value);
  }

  /// shouldReportNamespacePrefixes
  bool get shouldReportNamespacePrefixes {
    return _objc_msgSend_13(this.pointer, _sel_shouldReportNamespacePrefixes);
  }

  /// setShouldReportNamespacePrefixes:
  set shouldReportNamespacePrefixes(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setShouldReportNamespacePrefixes_, value);
  }

  /// externalEntityResolvingPolicy
  NSXMLParserExternalEntityResolvingPolicy get externalEntityResolvingPolicy {
    final _ret =
        _objc_msgSend_522(this.pointer, _sel_externalEntityResolvingPolicy);
    return NSXMLParserExternalEntityResolvingPolicy.fromValue(_ret);
  }

  /// setExternalEntityResolvingPolicy:
  set externalEntityResolvingPolicy(
      NSXMLParserExternalEntityResolvingPolicy value) {
    return _objc_msgSend_523(
        this.pointer, _sel_setExternalEntityResolvingPolicy_, value.value);
  }

  /// allowedExternalEntityURLs
  objc.NSSet? get allowedExternalEntityURLs {
    final _ret =
        _objc_msgSend_524(this.pointer, _sel_allowedExternalEntityURLs);
    return _ret.address == 0
        ? null
        : objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAllowedExternalEntityURLs:
  set allowedExternalEntityURLs(objc.NSSet? value) {
    return _objc_msgSend_525(this.pointer, _sel_setAllowedExternalEntityURLs_,
        value?.pointer ?? ffi.nullptr);
  }

  /// parse
  bool parse() {
    return _objc_msgSend_13(this.pointer, _sel_parse);
  }

  /// abortParsing
  void abortParsing() {
    _objc_msgSend_7(this.pointer, _sel_abortParsing);
  }

  /// parserError
  objc.NSError? get parserError {
    final _ret = _objc_msgSend_344(this.pointer, _sel_parserError);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// shouldResolveExternalEntities
  bool get shouldResolveExternalEntities {
    return _objc_msgSend_13(this.pointer, _sel_shouldResolveExternalEntities);
  }

  /// setShouldResolveExternalEntities:
  set shouldResolveExternalEntities(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setShouldResolveExternalEntities_, value);
  }

  /// publicID
  objc.NSString? get publicID {
    final _ret = _objc_msgSend_20(this.pointer, _sel_publicID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemID
  objc.NSString? get systemID {
    final _ret = _objc_msgSend_20(this.pointer, _sel_systemID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// lineNumber
  int get lineNumber {
    return _objc_msgSend_125(this.pointer, _sel_lineNumber);
  }

  /// columnNumber
  int get columnNumber {
    return _objc_msgSend_125(this.pointer, _sel_columnNumber);
  }

  /// init
  NSXMLParser init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSXMLParser.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSXMLParser new1() {
    final _ret = _objc_msgSend_19(_class_NSXMLParser, _sel_new);
    return NSXMLParser.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSXMLParser allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSXMLParser, _sel_allocWithZone_, zone);
    return NSXMLParser.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSXMLParser alloc() {
    final _ret = _objc_msgSend_19(_class_NSXMLParser, _sel_alloc);
    return NSXMLParser.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSXMLParser,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSXMLParser,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSXMLParser, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSXMLParser, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSXMLParser,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSXMLParser,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSXMLParser,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSXMLParser, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSXMLParser, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLParser = objc.getClass("NSXMLParser");
late final _sel_initWithContentsOfURL_ =
    objc.registerName("initWithContentsOfURL:");
late final _sel_initWithStream_ = objc.registerName("initWithStream:");
final _objc_msgSend_521 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_shouldProcessNamespaces =
    objc.registerName("shouldProcessNamespaces");
late final _sel_setShouldProcessNamespaces_ =
    objc.registerName("setShouldProcessNamespaces:");
late final _sel_shouldReportNamespacePrefixes =
    objc.registerName("shouldReportNamespacePrefixes");
late final _sel_setShouldReportNamespacePrefixes_ =
    objc.registerName("setShouldReportNamespacePrefixes:");

enum NSXMLParserExternalEntityResolvingPolicy {
  NSXMLParserResolveExternalEntitiesNever(0),
  NSXMLParserResolveExternalEntitiesNoNetwork(1),
  NSXMLParserResolveExternalEntitiesSameOriginOnly(2),
  NSXMLParserResolveExternalEntitiesAlways(3);

  final int value;
  const NSXMLParserExternalEntityResolvingPolicy(this.value);

  static NSXMLParserExternalEntityResolvingPolicy fromValue(int value) =>
      switch (value) {
        0 => NSXMLParserResolveExternalEntitiesNever,
        1 => NSXMLParserResolveExternalEntitiesNoNetwork,
        2 => NSXMLParserResolveExternalEntitiesSameOriginOnly,
        3 => NSXMLParserResolveExternalEntitiesAlways,
        _ => throw ArgumentError(
            "Unknown value for NSXMLParserExternalEntityResolvingPolicy: $value"),
      };
}

late final _sel_externalEntityResolvingPolicy =
    objc.registerName("externalEntityResolvingPolicy");
final _objc_msgSend_522 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setExternalEntityResolvingPolicy_ =
    objc.registerName("setExternalEntityResolvingPolicy:");
final _objc_msgSend_523 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_allowedExternalEntityURLs =
    objc.registerName("allowedExternalEntityURLs");
final _objc_msgSend_524 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAllowedExternalEntityURLs_ =
    objc.registerName("setAllowedExternalEntityURLs:");
final _objc_msgSend_525 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_parse = objc.registerName("parse");
late final _sel_abortParsing = objc.registerName("abortParsing");
late final _sel_parserError = objc.registerName("parserError");
late final _sel_shouldResolveExternalEntities =
    objc.registerName("shouldResolveExternalEntities");
late final _sel_setShouldResolveExternalEntities_ =
    objc.registerName("setShouldResolveExternalEntities:");
late final _sel_publicID = objc.registerName("publicID");
late final _sel_systemID = objc.registerName("systemID");
late final _sel_lineNumber = objc.registerName("lineNumber");
late final _sel_columnNumber = objc.registerName("columnNumber");

/// NSFileWrapper
class NSFileWrapper extends objc.NSObject {
  NSFileWrapper._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSFileWrapper] that points to the same underlying object as [other].
  NSFileWrapper.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSFileWrapper] that wraps the given raw object pointer.
  NSFileWrapper.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSFileWrapper].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSFileWrapper);
  }

  /// initWithURL:options:error:
  NSFileWrapper? initWithURL_options_error_(
      objc.NSURL url,
      NSFileWrapperReadingOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_526(this.pointer,
        _sel_initWithURL_options_error_, url.pointer, options.value, outError);
    return _ret.address == 0
        ? null
        : NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  /// initDirectoryWithFileWrappers:
  NSFileWrapper initDirectoryWithFileWrappers_(
      objc.NSDictionary childrenByPreferredName) {
    final _ret = _objc_msgSend_527(this.pointer,
        _sel_initDirectoryWithFileWrappers_, childrenByPreferredName.pointer);
    return NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  /// initRegularFileWithContents:
  NSFileWrapper initRegularFileWithContents_(objc.NSData contents) {
    final _ret = _objc_msgSend_340(
        this.pointer, _sel_initRegularFileWithContents_, contents.pointer);
    return NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  /// initSymbolicLinkWithDestinationURL:
  NSFileWrapper initSymbolicLinkWithDestinationURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_332(
        this.pointer, _sel_initSymbolicLinkWithDestinationURL_, url.pointer);
    return NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithSerializedRepresentation:
  NSFileWrapper? initWithSerializedRepresentation_(
      objc.NSData serializeRepresentation) {
    final _ret = _objc_msgSend_341(
        this.pointer,
        _sel_initWithSerializedRepresentation_,
        serializeRepresentation.pointer);
    return _ret.address == 0
        ? null
        : NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCoder:
  NSFileWrapper? initWithCoder_(objc.NSCoder inCoder) {
    final _ret =
        _objc_msgSend_242(this.pointer, _sel_initWithCoder_, inCoder.pointer);
    return _ret.address == 0
        ? null
        : NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  /// isDirectory
  bool get directory {
    return _objc_msgSend_13(this.pointer, _sel_isDirectory);
  }

  /// isRegularFile
  bool get regularFile {
    return _objc_msgSend_13(this.pointer, _sel_isRegularFile);
  }

  /// isSymbolicLink
  bool get symbolicLink {
    return _objc_msgSend_13(this.pointer, _sel_isSymbolicLink);
  }

  /// preferredFilename
  objc.NSString? get preferredFilename {
    final _ret = _objc_msgSend_20(this.pointer, _sel_preferredFilename);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPreferredFilename:
  set preferredFilename(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setPreferredFilename_,
        value?.pointer ?? ffi.nullptr);
  }

  /// filename
  objc.NSString? get filename {
    final _ret = _objc_msgSend_20(this.pointer, _sel_filename);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFilename:
  set filename(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setFilename_, value?.pointer ?? ffi.nullptr);
  }

  /// fileAttributes
  objc.NSDictionary get fileAttributes {
    final _ret = _objc_msgSend_123(this.pointer, _sel_fileAttributes);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFileAttributes:
  set fileAttributes(objc.NSDictionary value) {
    return _objc_msgSend_124(
        this.pointer, _sel_setFileAttributes_, value.pointer);
  }

  /// matchesContentsOfURL:
  bool matchesContentsOfURL_(objc.NSURL url) {
    return _objc_msgSend_317(
        this.pointer, _sel_matchesContentsOfURL_, url.pointer);
  }

  /// readFromURL:options:error:
  bool readFromURL_options_error_(
      objc.NSURL url,
      NSFileWrapperReadingOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_528(this.pointer, _sel_readFromURL_options_error_,
        url.pointer, options.value, outError);
  }

  /// writeToURL:options:originalContentsURL:error:
  bool writeToURL_options_originalContentsURL_error_(
      objc.NSURL url,
      NSFileWrapperWritingOptions options,
      objc.NSURL? originalContentsURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_529(
        this.pointer,
        _sel_writeToURL_options_originalContentsURL_error_,
        url.pointer,
        options.value,
        originalContentsURL?.pointer ?? ffi.nullptr,
        outError);
  }

  /// serializedRepresentation
  objc.NSData? get serializedRepresentation {
    final _ret = _objc_msgSend_337(this.pointer, _sel_serializedRepresentation);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// addFileWrapper:
  objc.NSString addFileWrapper_(NSFileWrapper child) {
    final _ret =
        _objc_msgSend_530(this.pointer, _sel_addFileWrapper_, child.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// addRegularFileWithContents:preferredFilename:
  objc.NSString addRegularFileWithContents_preferredFilename_(
      objc.NSData data, objc.NSString fileName) {
    final _ret = _objc_msgSend_531(
        this.pointer,
        _sel_addRegularFileWithContents_preferredFilename_,
        data.pointer,
        fileName.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// removeFileWrapper:
  void removeFileWrapper_(NSFileWrapper child) {
    _objc_msgSend_532(this.pointer, _sel_removeFileWrapper_, child.pointer);
  }

  /// fileWrappers
  objc.NSDictionary? get fileWrappers {
    final _ret = _objc_msgSend_84(this.pointer, _sel_fileWrappers);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// keyForFileWrapper:
  objc.NSString? keyForFileWrapper_(NSFileWrapper child) {
    final _ret =
        _objc_msgSend_533(this.pointer, _sel_keyForFileWrapper_, child.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// regularFileContents
  objc.NSData? get regularFileContents {
    final _ret = _objc_msgSend_337(this.pointer, _sel_regularFileContents);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// symbolicLinkDestinationURL
  objc.NSURL? get symbolicLinkDestinationURL {
    final _ret =
        _objc_msgSend_24(this.pointer, _sel_symbolicLinkDestinationURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithPath:
  objc.ObjCObjectBase? initWithPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_initWithPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initSymbolicLinkWithDestination:
  objc.ObjCObjectBase initSymbolicLinkWithDestination_(objc.NSString path) {
    final _ret = _objc_msgSend_63(
        this.pointer, _sel_initSymbolicLinkWithDestination_, path.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// needsToBeUpdatedFromPath:
  bool needsToBeUpdatedFromPath_(objc.NSString path) {
    return _objc_msgSend_31(
        this.pointer, _sel_needsToBeUpdatedFromPath_, path.pointer);
  }

  /// updateFromPath:
  bool updateFromPath_(objc.NSString path) {
    return _objc_msgSend_31(this.pointer, _sel_updateFromPath_, path.pointer);
  }

  /// writeToFile:atomically:updateFilenames:
  bool writeToFile_atomically_updateFilenames_(
      objc.NSString path, bool atomicFlag, bool updateFilenamesFlag) {
    return _objc_msgSend_534(
        this.pointer,
        _sel_writeToFile_atomically_updateFilenames_,
        path.pointer,
        atomicFlag,
        updateFilenamesFlag);
  }

  /// addFileWithPath:
  objc.NSString addFileWithPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_309(this.pointer, _sel_addFileWithPath_, path.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// addSymbolicLinkWithDestination:preferredFilename:
  objc.NSString addSymbolicLinkWithDestination_preferredFilename_(
      objc.NSString path, objc.NSString filename) {
    final _ret = _objc_msgSend_535(
        this.pointer,
        _sel_addSymbolicLinkWithDestination_preferredFilename_,
        path.pointer,
        filename.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// symbolicLinkDestination
  objc.NSString symbolicLinkDestination() {
    final _ret = _objc_msgSend_11(this.pointer, _sel_symbolicLinkDestination);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSFileWrapper init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSFileWrapper new1() {
    final _ret = _objc_msgSend_19(_class_NSFileWrapper, _sel_new);
    return NSFileWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSFileWrapper allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSFileWrapper, _sel_allocWithZone_, zone);
    return NSFileWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSFileWrapper alloc() {
    final _ret = _objc_msgSend_19(_class_NSFileWrapper, _sel_alloc);
    return NSFileWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSFileWrapper,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSFileWrapper,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSFileWrapper, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSFileWrapper, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSFileWrapper,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSFileWrapper,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSFileWrapper,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSFileWrapper, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSFileWrapper, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSFileWrapper = objc.getClass("NSFileWrapper");

enum NSFileWrapperReadingOptions {
  NSFileWrapperReadingImmediate(1),
  NSFileWrapperReadingWithoutMapping(2);

  final int value;
  const NSFileWrapperReadingOptions(this.value);

  static NSFileWrapperReadingOptions fromValue(int value) => switch (value) {
        1 => NSFileWrapperReadingImmediate,
        2 => NSFileWrapperReadingWithoutMapping,
        _ => throw ArgumentError(
            "Unknown value for NSFileWrapperReadingOptions: $value"),
      };
}

late final _sel_initWithURL_options_error_ =
    objc.registerName("initWithURL:options:error:");
final _objc_msgSend_526 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initDirectoryWithFileWrappers_ =
    objc.registerName("initDirectoryWithFileWrappers:");
final _objc_msgSend_527 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initRegularFileWithContents_ =
    objc.registerName("initRegularFileWithContents:");
late final _sel_initSymbolicLinkWithDestinationURL_ =
    objc.registerName("initSymbolicLinkWithDestinationURL:");
late final _sel_initWithSerializedRepresentation_ =
    objc.registerName("initWithSerializedRepresentation:");
late final _sel_isDirectory = objc.registerName("isDirectory");
late final _sel_isRegularFile = objc.registerName("isRegularFile");
late final _sel_isSymbolicLink = objc.registerName("isSymbolicLink");
late final _sel_preferredFilename = objc.registerName("preferredFilename");
late final _sel_setPreferredFilename_ =
    objc.registerName("setPreferredFilename:");
late final _sel_filename = objc.registerName("filename");
late final _sel_setFilename_ = objc.registerName("setFilename:");
late final _sel_fileAttributes = objc.registerName("fileAttributes");
late final _sel_setFileAttributes_ = objc.registerName("setFileAttributes:");
late final _sel_matchesContentsOfURL_ =
    objc.registerName("matchesContentsOfURL:");
late final _sel_readFromURL_options_error_ =
    objc.registerName("readFromURL:options:error:");
final _objc_msgSend_528 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

enum NSFileWrapperWritingOptions {
  NSFileWrapperWritingAtomic(1),
  NSFileWrapperWritingWithNameUpdating(2);

  final int value;
  const NSFileWrapperWritingOptions(this.value);

  static NSFileWrapperWritingOptions fromValue(int value) => switch (value) {
        1 => NSFileWrapperWritingAtomic,
        2 => NSFileWrapperWritingWithNameUpdating,
        _ => throw ArgumentError(
            "Unknown value for NSFileWrapperWritingOptions: $value"),
      };
}

late final _sel_writeToURL_options_originalContentsURL_error_ =
    objc.registerName("writeToURL:options:originalContentsURL:error:");
final _objc_msgSend_529 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_serializedRepresentation =
    objc.registerName("serializedRepresentation");
late final _sel_addFileWrapper_ = objc.registerName("addFileWrapper:");
final _objc_msgSend_530 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addRegularFileWithContents_preferredFilename_ =
    objc.registerName("addRegularFileWithContents:preferredFilename:");
final _objc_msgSend_531 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeFileWrapper_ = objc.registerName("removeFileWrapper:");
final _objc_msgSend_532 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileWrappers = objc.registerName("fileWrappers");
late final _sel_keyForFileWrapper_ = objc.registerName("keyForFileWrapper:");
final _objc_msgSend_533 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_regularFileContents = objc.registerName("regularFileContents");
late final _sel_symbolicLinkDestinationURL =
    objc.registerName("symbolicLinkDestinationURL");
late final _sel_initSymbolicLinkWithDestination_ =
    objc.registerName("initSymbolicLinkWithDestination:");
late final _sel_needsToBeUpdatedFromPath_ =
    objc.registerName("needsToBeUpdatedFromPath:");
late final _sel_updateFromPath_ = objc.registerName("updateFromPath:");
late final _sel_writeToFile_atomically_updateFilenames_ =
    objc.registerName("writeToFile:atomically:updateFilenames:");
final _objc_msgSend_534 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Bool)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            bool)>();
late final _sel_addFileWithPath_ = objc.registerName("addFileWithPath:");
late final _sel_addSymbolicLinkWithDestination_preferredFilename_ =
    objc.registerName("addSymbolicLinkWithDestination:preferredFilename:");
final _objc_msgSend_535 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_symbolicLinkDestination =
    objc.registerName("symbolicLinkDestination");

/// NSURLSession
class NSURLSession extends objc.NSObject {
  NSURLSession._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSession] that points to the same underlying object as [other].
  NSURLSession.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSession] that wraps the given raw object pointer.
  NSURLSession.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSession].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSession);
  }

  /// sharedSession
  static NSURLSession getSharedSession() {
    final _ret = _objc_msgSend_536(_class_NSURLSession, _sel_sharedSession);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// sessionWithConfiguration:
  static NSURLSession sessionWithConfiguration_(
      NSURLSessionConfiguration configuration) {
    final _ret = _objc_msgSend_552(_class_NSURLSession,
        _sel_sessionWithConfiguration_, configuration.pointer);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// sessionWithConfiguration:delegate:delegateQueue:
  static NSURLSession sessionWithConfiguration_delegate_delegateQueue_(
      NSURLSessionConfiguration configuration,
      objc.ObjCObjectBase? delegate,
      NSOperationQueue? queue) {
    final _ret = _objc_msgSend_553(
        _class_NSURLSession,
        _sel_sessionWithConfiguration_delegate_delegateQueue_,
        configuration.pointer,
        delegate?.pointer ?? ffi.nullptr,
        queue?.pointer ?? ffi.nullptr);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// delegateQueue
  NSOperationQueue get delegateQueue {
    final _ret = _objc_msgSend_403(this.pointer, _sel_delegateQueue);
    return NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// configuration
  NSURLSessionConfiguration get configuration {
    final _ret = _objc_msgSend_537(this.pointer, _sel_configuration);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// sessionDescription
  objc.NSString? get sessionDescription {
    final _ret = _objc_msgSend_20(this.pointer, _sel_sessionDescription);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSessionDescription:
  set sessionDescription(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setSessionDescription_,
        value?.pointer ?? ffi.nullptr);
  }

  /// finishTasksAndInvalidate
  void finishTasksAndInvalidate() {
    _objc_msgSend_7(this.pointer, _sel_finishTasksAndInvalidate);
  }

  /// invalidateAndCancel
  void invalidateAndCancel() {
    _objc_msgSend_7(this.pointer, _sel_invalidateAndCancel);
  }

  /// resetWithCompletionHandler:
  void resetWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function()> completionHandler) {
    _objc_msgSend_261(this.pointer, _sel_resetWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// flushWithCompletionHandler:
  void flushWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function()> completionHandler) {
    _objc_msgSend_261(this.pointer, _sel_flushWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// getTasksWithCompletionHandler:
  void getTasksWithCompletionHandler_(
      objc.ObjCBlock<
              ffi.Void Function(objc.NSArray, objc.NSArray, objc.NSArray)>
          completionHandler) {
    _objc_msgSend_554(this.pointer, _sel_getTasksWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// getAllTasksWithCompletionHandler:
  void getAllTasksWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function(objc.NSArray)> completionHandler) {
    _objc_msgSend_555(this.pointer, _sel_getAllTasksWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// dataTaskWithRequest:
  NSURLSessionDataTask dataTaskWithRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_556(
        this.pointer, _sel_dataTaskWithRequest_, request.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// dataTaskWithURL:
  NSURLSessionDataTask dataTaskWithURL_(objc.NSURL url) {
    final _ret =
        _objc_msgSend_557(this.pointer, _sel_dataTaskWithURL_, url.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uploadTaskWithRequest:fromFile:
  NSURLSessionUploadTask uploadTaskWithRequest_fromFile_(
      NSURLRequest request, objc.NSURL fileURL) {
    final _ret = _objc_msgSend_559(this.pointer,
        _sel_uploadTaskWithRequest_fromFile_, request.pointer, fileURL.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uploadTaskWithRequest:fromData:
  NSURLSessionUploadTask uploadTaskWithRequest_fromData_(
      NSURLRequest request, objc.NSData bodyData) {
    final _ret = _objc_msgSend_560(
        this.pointer,
        _sel_uploadTaskWithRequest_fromData_,
        request.pointer,
        bodyData.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uploadTaskWithResumeData:
  NSURLSessionUploadTask uploadTaskWithResumeData_(objc.NSData resumeData) {
    final _ret = _objc_msgSend_561(
        this.pointer, _sel_uploadTaskWithResumeData_, resumeData.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uploadTaskWithStreamedRequest:
  NSURLSessionUploadTask uploadTaskWithStreamedRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_562(
        this.pointer, _sel_uploadTaskWithStreamedRequest_, request.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// downloadTaskWithRequest:
  NSURLSessionDownloadTask downloadTaskWithRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_563(
        this.pointer, _sel_downloadTaskWithRequest_, request.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// downloadTaskWithURL:
  NSURLSessionDownloadTask downloadTaskWithURL_(objc.NSURL url) {
    final _ret =
        _objc_msgSend_564(this.pointer, _sel_downloadTaskWithURL_, url.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// downloadTaskWithResumeData:
  NSURLSessionDownloadTask downloadTaskWithResumeData_(objc.NSData resumeData) {
    final _ret = _objc_msgSend_565(
        this.pointer, _sel_downloadTaskWithResumeData_, resumeData.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// streamTaskWithHostName:port:
  NSURLSessionStreamTask streamTaskWithHostName_port_(
      objc.NSString hostname, int port) {
    final _ret = _objc_msgSend_568(this.pointer,
        _sel_streamTaskWithHostName_port_, hostname.pointer, port);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// streamTaskWithNetService:
  NSURLSessionStreamTask streamTaskWithNetService_(NSNetService service) {
    final _ret = _objc_msgSend_577(
        this.pointer, _sel_streamTaskWithNetService_, service.pointer);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// webSocketTaskWithURL:
  NSURLSessionWebSocketTask webSocketTaskWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_584(
        this.pointer, _sel_webSocketTaskWithURL_, url.pointer);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// webSocketTaskWithURL:protocols:
  NSURLSessionWebSocketTask webSocketTaskWithURL_protocols_(
      objc.NSURL url, objc.NSArray protocols) {
    final _ret = _objc_msgSend_585(this.pointer,
        _sel_webSocketTaskWithURL_protocols_, url.pointer, protocols.pointer);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// webSocketTaskWithRequest:
  NSURLSessionWebSocketTask webSocketTaskWithRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_586(
        this.pointer, _sel_webSocketTaskWithRequest_, request.pointer);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  NSURLSession init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSURLSession new1() {
    final _ret = _objc_msgSend_19(_class_NSURLSession, _sel_new);
    return NSURLSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// dataTaskWithRequest:completionHandler:
  NSURLSessionDataTask dataTaskWithRequest_completionHandler_(
      NSURLRequest request,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    final _ret = _objc_msgSend_587(
        this.pointer,
        _sel_dataTaskWithRequest_completionHandler_,
        request.pointer,
        completionHandler.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// dataTaskWithURL:completionHandler:
  NSURLSessionDataTask dataTaskWithURL_completionHandler_(
      objc.NSURL url,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    final _ret = _objc_msgSend_588(
        this.pointer,
        _sel_dataTaskWithURL_completionHandler_,
        url.pointer,
        completionHandler.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uploadTaskWithRequest:fromFile:completionHandler:
  NSURLSessionUploadTask uploadTaskWithRequest_fromFile_completionHandler_(
      NSURLRequest request,
      objc.NSURL fileURL,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    final _ret = _objc_msgSend_589(
        this.pointer,
        _sel_uploadTaskWithRequest_fromFile_completionHandler_,
        request.pointer,
        fileURL.pointer,
        completionHandler.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uploadTaskWithRequest:fromData:completionHandler:
  NSURLSessionUploadTask uploadTaskWithRequest_fromData_completionHandler_(
      NSURLRequest request,
      objc.NSData? bodyData,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    final _ret = _objc_msgSend_590(
        this.pointer,
        _sel_uploadTaskWithRequest_fromData_completionHandler_,
        request.pointer,
        bodyData?.pointer ?? ffi.nullptr,
        completionHandler.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uploadTaskWithResumeData:completionHandler:
  NSURLSessionUploadTask uploadTaskWithResumeData_completionHandler_(
      objc.NSData resumeData,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    final _ret = _objc_msgSend_591(
        this.pointer,
        _sel_uploadTaskWithResumeData_completionHandler_,
        resumeData.pointer,
        completionHandler.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// downloadTaskWithRequest:completionHandler:
  NSURLSessionDownloadTask downloadTaskWithRequest_completionHandler_(
      NSURLRequest request,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    final _ret = _objc_msgSend_592(
        this.pointer,
        _sel_downloadTaskWithRequest_completionHandler_,
        request.pointer,
        completionHandler.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// downloadTaskWithURL:completionHandler:
  NSURLSessionDownloadTask downloadTaskWithURL_completionHandler_(
      objc.NSURL url,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    final _ret = _objc_msgSend_593(
        this.pointer,
        _sel_downloadTaskWithURL_completionHandler_,
        url.pointer,
        completionHandler.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// downloadTaskWithResumeData:completionHandler:
  NSURLSessionDownloadTask downloadTaskWithResumeData_completionHandler_(
      objc.NSData resumeData,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    final _ret = _objc_msgSend_594(
        this.pointer,
        _sel_downloadTaskWithResumeData_completionHandler_,
        resumeData.pointer,
        completionHandler.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// allocWithZone:
  static NSURLSession allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSURLSession, _sel_allocWithZone_, zone);
    return NSURLSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSURLSession alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLSession, _sel_alloc);
    return NSURLSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLSession,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLSession,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLSession, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSURLSession, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLSession,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLSession,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLSession,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLSession, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSURLSession, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSession = objc.getClass("NSURLSession");
late final _sel_sharedSession = objc.registerName("sharedSession");
final _objc_msgSend_536 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSURLSessionConfiguration
class NSURLSessionConfiguration extends objc.NSObject {
  NSURLSessionConfiguration._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionConfiguration] that points to the same underlying object as [other].
  NSURLSessionConfiguration.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionConfiguration] that wraps the given raw object pointer.
  NSURLSessionConfiguration.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionConfiguration].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionConfiguration);
  }

  /// defaultSessionConfiguration
  static NSURLSessionConfiguration getDefaultSessionConfiguration() {
    final _ret = _objc_msgSend_537(
        _class_NSURLSessionConfiguration, _sel_defaultSessionConfiguration);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// ephemeralSessionConfiguration
  static NSURLSessionConfiguration getEphemeralSessionConfiguration() {
    final _ret = _objc_msgSend_537(
        _class_NSURLSessionConfiguration, _sel_ephemeralSessionConfiguration);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// backgroundSessionConfigurationWithIdentifier:
  static NSURLSessionConfiguration
      backgroundSessionConfigurationWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_538(_class_NSURLSessionConfiguration,
        _sel_backgroundSessionConfigurationWithIdentifier_, identifier.pointer);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// identifier
  objc.NSString? get identifier {
    final _ret = _objc_msgSend_20(this.pointer, _sel_identifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// requestCachePolicy
  NSURLRequestCachePolicy get requestCachePolicy {
    final _ret = _objc_msgSend_334(this.pointer, _sel_requestCachePolicy);
    return NSURLRequestCachePolicy.fromValue(_ret);
  }

  /// setRequestCachePolicy:
  set requestCachePolicy(NSURLRequestCachePolicy value) {
    return _objc_msgSend_510(
        this.pointer, _sel_setRequestCachePolicy_, value.value);
  }

  /// timeoutIntervalForRequest
  double get timeoutIntervalForRequest {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_timeoutIntervalForRequest)
        : _objc_msgSend_18(this.pointer, _sel_timeoutIntervalForRequest);
  }

  /// setTimeoutIntervalForRequest:
  set timeoutIntervalForRequest(double value) {
    return _objc_msgSend_226(
        this.pointer, _sel_setTimeoutIntervalForRequest_, value);
  }

  /// timeoutIntervalForResource
  double get timeoutIntervalForResource {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_timeoutIntervalForResource)
        : _objc_msgSend_18(this.pointer, _sel_timeoutIntervalForResource);
  }

  /// setTimeoutIntervalForResource:
  set timeoutIntervalForResource(double value) {
    return _objc_msgSend_226(
        this.pointer, _sel_setTimeoutIntervalForResource_, value);
  }

  /// networkServiceType
  NSURLRequestNetworkServiceType get networkServiceType {
    final _ret = _objc_msgSend_335(this.pointer, _sel_networkServiceType);
    return NSURLRequestNetworkServiceType.fromValue(_ret);
  }

  /// setNetworkServiceType:
  set networkServiceType(NSURLRequestNetworkServiceType value) {
    return _objc_msgSend_511(
        this.pointer, _sel_setNetworkServiceType_, value.value);
  }

  /// allowsCellularAccess
  bool get allowsCellularAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsCellularAccess);
  }

  /// setAllowsCellularAccess:
  set allowsCellularAccess(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setAllowsCellularAccess_, value);
  }

  /// allowsExpensiveNetworkAccess
  bool get allowsExpensiveNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsExpensiveNetworkAccess);
  }

  /// setAllowsExpensiveNetworkAccess:
  set allowsExpensiveNetworkAccess(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAllowsExpensiveNetworkAccess_, value);
  }

  /// allowsConstrainedNetworkAccess
  bool get allowsConstrainedNetworkAccess {
    return _objc_msgSend_13(this.pointer, _sel_allowsConstrainedNetworkAccess);
  }

  /// setAllowsConstrainedNetworkAccess:
  set allowsConstrainedNetworkAccess(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAllowsConstrainedNetworkAccess_, value);
  }

  /// requiresDNSSECValidation
  bool get requiresDNSSECValidation {
    return _objc_msgSend_13(this.pointer, _sel_requiresDNSSECValidation);
  }

  /// setRequiresDNSSECValidation:
  set requiresDNSSECValidation(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setRequiresDNSSECValidation_, value);
  }

  /// waitsForConnectivity
  bool get waitsForConnectivity {
    return _objc_msgSend_13(this.pointer, _sel_waitsForConnectivity);
  }

  /// setWaitsForConnectivity:
  set waitsForConnectivity(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setWaitsForConnectivity_, value);
  }

  /// isDiscretionary
  bool get discretionary {
    return _objc_msgSend_13(this.pointer, _sel_isDiscretionary);
  }

  /// setDiscretionary:
  set discretionary(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setDiscretionary_, value);
  }

  /// sharedContainerIdentifier
  objc.NSString? get sharedContainerIdentifier {
    final _ret = _objc_msgSend_20(this.pointer, _sel_sharedContainerIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSharedContainerIdentifier:
  set sharedContainerIdentifier(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setSharedContainerIdentifier_,
        value?.pointer ?? ffi.nullptr);
  }

  /// sessionSendsLaunchEvents
  bool get sessionSendsLaunchEvents {
    return _objc_msgSend_13(this.pointer, _sel_sessionSendsLaunchEvents);
  }

  /// setSessionSendsLaunchEvents:
  set sessionSendsLaunchEvents(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setSessionSendsLaunchEvents_, value);
  }

  /// connectionProxyDictionary
  objc.NSDictionary? get connectionProxyDictionary {
    final _ret = _objc_msgSend_84(this.pointer, _sel_connectionProxyDictionary);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setConnectionProxyDictionary:
  set connectionProxyDictionary(objc.NSDictionary? value) {
    return _objc_msgSend_189(this.pointer, _sel_setConnectionProxyDictionary_,
        value?.pointer ?? ffi.nullptr);
  }

  /// TLSMinimumSupportedProtocol
  SSLProtocol get TLSMinimumSupportedProtocol {
    final _ret =
        _objc_msgSend_539(this.pointer, _sel_TLSMinimumSupportedProtocol);
    return SSLProtocol.fromValue(_ret);
  }

  /// setTLSMinimumSupportedProtocol:
  set TLSMinimumSupportedProtocol(SSLProtocol value) {
    return _objc_msgSend_540(
        this.pointer, _sel_setTLSMinimumSupportedProtocol_, value.value);
  }

  /// TLSMaximumSupportedProtocol
  SSLProtocol get TLSMaximumSupportedProtocol {
    final _ret =
        _objc_msgSend_539(this.pointer, _sel_TLSMaximumSupportedProtocol);
    return SSLProtocol.fromValue(_ret);
  }

  /// setTLSMaximumSupportedProtocol:
  set TLSMaximumSupportedProtocol(SSLProtocol value) {
    return _objc_msgSend_540(
        this.pointer, _sel_setTLSMaximumSupportedProtocol_, value.value);
  }

  /// TLSMinimumSupportedProtocolVersion
  tls_protocol_version_t get TLSMinimumSupportedProtocolVersion {
    final _ret = _objc_msgSend_541(
        this.pointer, _sel_TLSMinimumSupportedProtocolVersion);
    return tls_protocol_version_t.fromValue(_ret);
  }

  /// setTLSMinimumSupportedProtocolVersion:
  set TLSMinimumSupportedProtocolVersion(tls_protocol_version_t value) {
    return _objc_msgSend_542(
        this.pointer, _sel_setTLSMinimumSupportedProtocolVersion_, value.value);
  }

  /// TLSMaximumSupportedProtocolVersion
  tls_protocol_version_t get TLSMaximumSupportedProtocolVersion {
    final _ret = _objc_msgSend_541(
        this.pointer, _sel_TLSMaximumSupportedProtocolVersion);
    return tls_protocol_version_t.fromValue(_ret);
  }

  /// setTLSMaximumSupportedProtocolVersion:
  set TLSMaximumSupportedProtocolVersion(tls_protocol_version_t value) {
    return _objc_msgSend_542(
        this.pointer, _sel_setTLSMaximumSupportedProtocolVersion_, value.value);
  }

  /// HTTPShouldUsePipelining
  bool get HTTPShouldUsePipelining {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldUsePipelining);
  }

  /// setHTTPShouldUsePipelining:
  set HTTPShouldUsePipelining(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setHTTPShouldUsePipelining_, value);
  }

  /// HTTPShouldSetCookies
  bool get HTTPShouldSetCookies {
    return _objc_msgSend_13(this.pointer, _sel_HTTPShouldSetCookies);
  }

  /// setHTTPShouldSetCookies:
  set HTTPShouldSetCookies(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setHTTPShouldSetCookies_, value);
  }

  /// HTTPCookieAcceptPolicy
  NSHTTPCookieAcceptPolicy get HTTPCookieAcceptPolicy {
    final _ret = _objc_msgSend_330(this.pointer, _sel_HTTPCookieAcceptPolicy);
    return NSHTTPCookieAcceptPolicy.fromValue(_ret);
  }

  /// setHTTPCookieAcceptPolicy:
  set HTTPCookieAcceptPolicy(NSHTTPCookieAcceptPolicy value) {
    return _objc_msgSend_331(
        this.pointer, _sel_setHTTPCookieAcceptPolicy_, value.value);
  }

  /// HTTPAdditionalHeaders
  objc.NSDictionary? get HTTPAdditionalHeaders {
    final _ret = _objc_msgSend_84(this.pointer, _sel_HTTPAdditionalHeaders);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setHTTPAdditionalHeaders:
  set HTTPAdditionalHeaders(objc.NSDictionary? value) {
    return _objc_msgSend_189(this.pointer, _sel_setHTTPAdditionalHeaders_,
        value?.pointer ?? ffi.nullptr);
  }

  /// HTTPMaximumConnectionsPerHost
  int get HTTPMaximumConnectionsPerHost {
    return _objc_msgSend_125(this.pointer, _sel_HTTPMaximumConnectionsPerHost);
  }

  /// setHTTPMaximumConnectionsPerHost:
  set HTTPMaximumConnectionsPerHost(int value) {
    return _objc_msgSend_144(
        this.pointer, _sel_setHTTPMaximumConnectionsPerHost_, value);
  }

  /// HTTPCookieStorage
  NSHTTPCookieStorage? get HTTPCookieStorage {
    final _ret = _objc_msgSend_543(this.pointer, _sel_HTTPCookieStorage);
    return _ret.address == 0
        ? null
        : NSHTTPCookieStorage.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setHTTPCookieStorage:
  set HTTPCookieStorage(NSHTTPCookieStorage? value) {
    return _objc_msgSend_544(this.pointer, _sel_setHTTPCookieStorage_,
        value?.pointer ?? ffi.nullptr);
  }

  /// URLCredentialStorage
  NSURLCredentialStorage? get URLCredentialStorage {
    final _ret = _objc_msgSend_545(this.pointer, _sel_URLCredentialStorage);
    return _ret.address == 0
        ? null
        : NSURLCredentialStorage.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setURLCredentialStorage:
  set URLCredentialStorage(NSURLCredentialStorage? value) {
    return _objc_msgSend_546(this.pointer, _sel_setURLCredentialStorage_,
        value?.pointer ?? ffi.nullptr);
  }

  /// URLCache
  NSURLCache? get URLCache {
    final _ret = _objc_msgSend_547(this.pointer, _sel_URLCache);
    return _ret.address == 0
        ? null
        : NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// setURLCache:
  set URLCache(NSURLCache? value) {
    return _objc_msgSend_548(
        this.pointer, _sel_setURLCache_, value?.pointer ?? ffi.nullptr);
  }

  /// shouldUseExtendedBackgroundIdleMode
  bool get shouldUseExtendedBackgroundIdleMode {
    return _objc_msgSend_13(
        this.pointer, _sel_shouldUseExtendedBackgroundIdleMode);
  }

  /// setShouldUseExtendedBackgroundIdleMode:
  set shouldUseExtendedBackgroundIdleMode(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setShouldUseExtendedBackgroundIdleMode_, value);
  }

  /// protocolClasses
  objc.NSArray? get protocolClasses {
    final _ret = _objc_msgSend_88(this.pointer, _sel_protocolClasses);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setProtocolClasses:
  set protocolClasses(objc.NSArray? value) {
    return _objc_msgSend_549(
        this.pointer, _sel_setProtocolClasses_, value?.pointer ?? ffi.nullptr);
  }

  /// multipathServiceType
  NSURLSessionMultipathServiceType get multipathServiceType {
    final _ret = _objc_msgSend_550(this.pointer, _sel_multipathServiceType);
    return NSURLSessionMultipathServiceType.fromValue(_ret);
  }

  /// setMultipathServiceType:
  set multipathServiceType(NSURLSessionMultipathServiceType value) {
    return _objc_msgSend_551(
        this.pointer, _sel_setMultipathServiceType_, value.value);
  }

  /// init
  NSURLSessionConfiguration init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionConfiguration new1() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionConfiguration, _sel_new);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// backgroundSessionConfiguration:
  static NSURLSessionConfiguration backgroundSessionConfiguration_(
      objc.NSString identifier) {
    final _ret = _objc_msgSend_538(_class_NSURLSessionConfiguration,
        _sel_backgroundSessionConfiguration_, identifier.pointer);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// allocWithZone:
  static NSURLSessionConfiguration allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSURLSessionConfiguration, _sel_allocWithZone_, zone);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionConfiguration alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionConfiguration, _sel_alloc);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLSessionConfiguration,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLSessionConfiguration,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLSessionConfiguration, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSURLSessionConfiguration, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLSessionConfiguration,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLSessionConfiguration,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLSessionConfiguration,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLSessionConfiguration, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSURLSessionConfiguration, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionConfiguration =
    objc.getClass("NSURLSessionConfiguration");
late final _sel_defaultSessionConfiguration =
    objc.registerName("defaultSessionConfiguration");
final _objc_msgSend_537 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_ephemeralSessionConfiguration =
    objc.registerName("ephemeralSessionConfiguration");
late final _sel_backgroundSessionConfigurationWithIdentifier_ =
    objc.registerName("backgroundSessionConfigurationWithIdentifier:");
final _objc_msgSend_538 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_identifier = objc.registerName("identifier");
late final _sel_requestCachePolicy = objc.registerName("requestCachePolicy");
late final _sel_setRequestCachePolicy_ =
    objc.registerName("setRequestCachePolicy:");
late final _sel_timeoutIntervalForRequest =
    objc.registerName("timeoutIntervalForRequest");
late final _sel_setTimeoutIntervalForRequest_ =
    objc.registerName("setTimeoutIntervalForRequest:");
late final _sel_timeoutIntervalForResource =
    objc.registerName("timeoutIntervalForResource");
late final _sel_setTimeoutIntervalForResource_ =
    objc.registerName("setTimeoutIntervalForResource:");
late final _sel_waitsForConnectivity =
    objc.registerName("waitsForConnectivity");
late final _sel_setWaitsForConnectivity_ =
    objc.registerName("setWaitsForConnectivity:");
late final _sel_isDiscretionary = objc.registerName("isDiscretionary");
late final _sel_setDiscretionary_ = objc.registerName("setDiscretionary:");
late final _sel_sharedContainerIdentifier =
    objc.registerName("sharedContainerIdentifier");
late final _sel_setSharedContainerIdentifier_ =
    objc.registerName("setSharedContainerIdentifier:");
late final _sel_sessionSendsLaunchEvents =
    objc.registerName("sessionSendsLaunchEvents");
late final _sel_setSessionSendsLaunchEvents_ =
    objc.registerName("setSessionSendsLaunchEvents:");
late final _sel_connectionProxyDictionary =
    objc.registerName("connectionProxyDictionary");
late final _sel_setConnectionProxyDictionary_ =
    objc.registerName("setConnectionProxyDictionary:");

enum SSLProtocol {
  kSSLProtocolUnknown(0),
  kTLSProtocol1(4),
  kTLSProtocol11(7),
  kTLSProtocol12(8),
  kDTLSProtocol1(9),
  kTLSProtocol13(10),
  kDTLSProtocol12(11),
  kTLSProtocolMaxSupported(999),
  kSSLProtocol2(1),
  kSSLProtocol3(2),
  kSSLProtocol3Only(3),
  kTLSProtocol1Only(5),
  kSSLProtocolAll(6);

  final int value;
  const SSLProtocol(this.value);

  static SSLProtocol fromValue(int value) => switch (value) {
        0 => kSSLProtocolUnknown,
        4 => kTLSProtocol1,
        7 => kTLSProtocol11,
        8 => kTLSProtocol12,
        9 => kDTLSProtocol1,
        10 => kTLSProtocol13,
        11 => kDTLSProtocol12,
        999 => kTLSProtocolMaxSupported,
        1 => kSSLProtocol2,
        2 => kSSLProtocol3,
        3 => kSSLProtocol3Only,
        5 => kTLSProtocol1Only,
        6 => kSSLProtocolAll,
        _ => throw ArgumentError("Unknown value for SSLProtocol: $value"),
      };
}

late final _sel_TLSMinimumSupportedProtocol =
    objc.registerName("TLSMinimumSupportedProtocol");
final _objc_msgSend_539 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTLSMinimumSupportedProtocol_ =
    objc.registerName("setTLSMinimumSupportedProtocol:");
final _objc_msgSend_540 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_TLSMaximumSupportedProtocol =
    objc.registerName("TLSMaximumSupportedProtocol");
late final _sel_setTLSMaximumSupportedProtocol_ =
    objc.registerName("setTLSMaximumSupportedProtocol:");

enum tls_protocol_version_t {
  tls_protocol_version_TLSv10(769),
  tls_protocol_version_TLSv11(770),
  tls_protocol_version_TLSv12(771),
  tls_protocol_version_TLSv13(772),
  tls_protocol_version_DTLSv10(-257),
  tls_protocol_version_DTLSv12(-259);

  final int value;
  const tls_protocol_version_t(this.value);

  static tls_protocol_version_t fromValue(int value) => switch (value) {
        769 => tls_protocol_version_TLSv10,
        770 => tls_protocol_version_TLSv11,
        771 => tls_protocol_version_TLSv12,
        772 => tls_protocol_version_TLSv13,
        -257 => tls_protocol_version_DTLSv10,
        -259 => tls_protocol_version_DTLSv12,
        _ => throw ArgumentError(
            "Unknown value for tls_protocol_version_t: $value"),
      };
}

late final _sel_TLSMinimumSupportedProtocolVersion =
    objc.registerName("TLSMinimumSupportedProtocolVersion");
final _objc_msgSend_541 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Uint16 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTLSMinimumSupportedProtocolVersion_ =
    objc.registerName("setTLSMinimumSupportedProtocolVersion:");
final _objc_msgSend_542 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint16)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_TLSMaximumSupportedProtocolVersion =
    objc.registerName("TLSMaximumSupportedProtocolVersion");
late final _sel_setTLSMaximumSupportedProtocolVersion_ =
    objc.registerName("setTLSMaximumSupportedProtocolVersion:");
late final _sel_HTTPShouldSetCookies =
    objc.registerName("HTTPShouldSetCookies");
late final _sel_setHTTPShouldSetCookies_ =
    objc.registerName("setHTTPShouldSetCookies:");
late final _sel_HTTPCookieAcceptPolicy =
    objc.registerName("HTTPCookieAcceptPolicy");
late final _sel_setHTTPCookieAcceptPolicy_ =
    objc.registerName("setHTTPCookieAcceptPolicy:");
late final _sel_HTTPAdditionalHeaders =
    objc.registerName("HTTPAdditionalHeaders");
late final _sel_setHTTPAdditionalHeaders_ =
    objc.registerName("setHTTPAdditionalHeaders:");
late final _sel_HTTPMaximumConnectionsPerHost =
    objc.registerName("HTTPMaximumConnectionsPerHost");
late final _sel_setHTTPMaximumConnectionsPerHost_ =
    objc.registerName("setHTTPMaximumConnectionsPerHost:");
late final _sel_HTTPCookieStorage = objc.registerName("HTTPCookieStorage");
final _objc_msgSend_543 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setHTTPCookieStorage_ =
    objc.registerName("setHTTPCookieStorage:");
final _objc_msgSend_544 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLCredentialStorage =
    objc.registerName("URLCredentialStorage");
final _objc_msgSend_545 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setURLCredentialStorage_ =
    objc.registerName("setURLCredentialStorage:");
final _objc_msgSend_546 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLCache = objc.registerName("URLCache");
final _objc_msgSend_547 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setURLCache_ = objc.registerName("setURLCache:");
final _objc_msgSend_548 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_shouldUseExtendedBackgroundIdleMode =
    objc.registerName("shouldUseExtendedBackgroundIdleMode");
late final _sel_setShouldUseExtendedBackgroundIdleMode_ =
    objc.registerName("setShouldUseExtendedBackgroundIdleMode:");
late final _sel_protocolClasses = objc.registerName("protocolClasses");
late final _sel_setProtocolClasses_ = objc.registerName("setProtocolClasses:");
final _objc_msgSend_549 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum NSURLSessionMultipathServiceType {
  NSURLSessionMultipathServiceTypeNone(0),
  NSURLSessionMultipathServiceTypeHandover(1),
  NSURLSessionMultipathServiceTypeInteractive(2),
  NSURLSessionMultipathServiceTypeAggregate(3);

  final int value;
  const NSURLSessionMultipathServiceType(this.value);

  static NSURLSessionMultipathServiceType fromValue(int value) =>
      switch (value) {
        0 => NSURLSessionMultipathServiceTypeNone,
        1 => NSURLSessionMultipathServiceTypeHandover,
        2 => NSURLSessionMultipathServiceTypeInteractive,
        3 => NSURLSessionMultipathServiceTypeAggregate,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionMultipathServiceType: $value"),
      };
}

late final _sel_multipathServiceType =
    objc.registerName("multipathServiceType");
final _objc_msgSend_550 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMultipathServiceType_ =
    objc.registerName("setMultipathServiceType:");
final _objc_msgSend_551 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_backgroundSessionConfiguration_ =
    objc.registerName("backgroundSessionConfiguration:");
late final _sel_sessionWithConfiguration_ =
    objc.registerName("sessionWithConfiguration:");
final _objc_msgSend_552 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sessionWithConfiguration_delegate_delegateQueue_ =
    objc.registerName("sessionWithConfiguration:delegate:delegateQueue:");
final _objc_msgSend_553 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_delegateQueue = objc.registerName("delegateQueue");
late final _sel_configuration = objc.registerName("configuration");
late final _sel_sessionDescription = objc.registerName("sessionDescription");
late final _sel_setSessionDescription_ =
    objc.registerName("setSessionDescription:");
late final _sel_finishTasksAndInvalidate =
    objc.registerName("finishTasksAndInvalidate");
late final _sel_invalidateAndCancel = objc.registerName("invalidateAndCancel");
late final _sel_resetWithCompletionHandler_ =
    objc.registerName("resetWithCompletionHandler:");
late final _sel_flushWithCompletionHandler_ =
    objc.registerName("flushWithCompletionHandler:");
void _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(objc.NSArray, objc.NSArray, objc.NSArray)>`.
abstract final class ObjCBlock_ffiVoid_NSArray_NSArray_NSArray {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Void Function(objc.NSArray, objc.NSArray, objc.NSArray)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Void Function(objc.NSArray, objc.NSArray,
                  objc.NSArray)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSArray, objc.NSArray, objc.NSArray)> fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2)>> ptr) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSArray, objc.NSArray, objc.NSArray)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<objc.ObjCObject>,
                          ffi.Pointer<objc.ObjCObject>,
                          ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_fnPtrTrampoline)
                  .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSArray, objc.NSArray, objc.NSArray)> fromFunction(
          void Function(objc.NSArray, objc.NSArray, objc.NSArray) fn) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSArray, objc.NSArray, objc.NSArray)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                  objc.NSArray.castFromPointer(arg0, retain: true, release: true),
                  objc.NSArray.castFromPointer(arg1, retain: true, release: true),
                  objc.NSArray.castFromPointer(arg2, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc
      .ObjCBlock<ffi.Void Function(objc.NSArray, objc.NSArray, objc.NSArray)>
      listener(void Function(objc.NSArray, objc.NSArray, objc.NSArray) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                ffi.Pointer<objc.ObjCObject> arg2) =>
            fn(
                objc.NSArray.castFromPointer(arg0, retain: false, release: true),
                objc.NSArray.castFromPointer(arg1, retain: false, release: true),
                objc.NSArray.castFromPointer(arg2, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSArray_NSArray_NSArray(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
        ffi.Void Function(objc.NSArray, objc.NSArray,
            objc.NSArray)>(wrapper, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(objc.NSArray, objc.NSArray, objc.NSArray)>`.
extension ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_CallExtension on objc
    .ObjCBlock<ffi.Void Function(objc.NSArray, objc.NSArray, objc.NSArray)> {
  void call(objc.NSArray arg0, objc.NSArray arg1, objc.NSArray arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1.pointer, arg2.pointer);
}

late final _sel_getTasksWithCompletionHandler_ =
    objc.registerName("getTasksWithCompletionHandler:");
final _objc_msgSend_554 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
void _ObjCBlock_ffiVoid_NSArray1_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSArray1_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(objc.NSArray)>`.
abstract final class ObjCBlock_ffiVoid_NSArray1 {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(objc.NSArray)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSArray)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSArray)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSArray)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSArray1_fnPtrTrampoline)
                      .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSArray)> fromFunction(
          void Function(objc.NSArray) fn) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSArray)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_NSArray1_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(objc.NSArray.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(objc.NSArray)> listener(
      void Function(objc.NSArray) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSArray1_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(
            objc.NSArray.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSArray1(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(objc.NSArray)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(objc.NSArray)>`.
extension ObjCBlock_ffiVoid_NSArray1_CallExtension
    on objc.ObjCBlock<ffi.Void Function(objc.NSArray)> {
  void call(objc.NSArray arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_getAllTasksWithCompletionHandler_ =
    objc.registerName("getAllTasksWithCompletionHandler:");
final _objc_msgSend_555 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_dataTaskWithRequest_ =
    objc.registerName("dataTaskWithRequest:");
final _objc_msgSend_556 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dataTaskWithURL_ = objc.registerName("dataTaskWithURL:");
final _objc_msgSend_557 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSURLSessionUploadTask
class NSURLSessionUploadTask extends NSURLSessionDataTask {
  NSURLSessionUploadTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionUploadTask] that points to the same underlying object as [other].
  NSURLSessionUploadTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionUploadTask] that wraps the given raw object pointer.
  NSURLSessionUploadTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionUploadTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionUploadTask);
  }

  /// init
  NSURLSessionUploadTask init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionUploadTask new1() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionUploadTask, _sel_new);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelByProducingResumeData:
  void cancelByProducingResumeData_(
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_558(this.pointer, _sel_cancelByProducingResumeData_,
        completionHandler.pointer);
  }

  /// allocWithZone:
  static NSURLSessionUploadTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSURLSessionUploadTask, _sel_allocWithZone_, zone);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionUploadTask alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionUploadTask, _sel_alloc);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLSessionUploadTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLSessionUploadTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLSessionUploadTask, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSURLSessionUploadTask, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLSessionUploadTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLSessionUploadTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLSessionUploadTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLSessionUploadTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSURLSessionUploadTask, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionUploadTask =
    objc.getClass("NSURLSessionUploadTask");
void _ObjCBlock_ffiVoid_NSData_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSData_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSData {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSData_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSData?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSData_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(arg0.address == 0 ? null : objc.NSData.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(objc.NSData?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSData_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
            ? null
            : objc.NSData.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSData(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSData_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSData? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_cancelByProducingResumeData_ =
    objc.registerName("cancelByProducingResumeData:");
final _objc_msgSend_558 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_uploadTaskWithRequest_fromFile_ =
    objc.registerName("uploadTaskWithRequest:fromFile:");
final _objc_msgSend_559 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_uploadTaskWithRequest_fromData_ =
    objc.registerName("uploadTaskWithRequest:fromData:");
final _objc_msgSend_560 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_uploadTaskWithResumeData_ =
    objc.registerName("uploadTaskWithResumeData:");
final _objc_msgSend_561 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_uploadTaskWithStreamedRequest_ =
    objc.registerName("uploadTaskWithStreamedRequest:");
final _objc_msgSend_562 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSURLSessionDownloadTask
class NSURLSessionDownloadTask extends NSURLSessionTask {
  NSURLSessionDownloadTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionDownloadTask] that points to the same underlying object as [other].
  NSURLSessionDownloadTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionDownloadTask] that wraps the given raw object pointer.
  NSURLSessionDownloadTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionDownloadTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionDownloadTask);
  }

  /// cancelByProducingResumeData:
  void cancelByProducingResumeData_(
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_558(this.pointer, _sel_cancelByProducingResumeData_,
        completionHandler.pointer);
  }

  /// init
  NSURLSessionDownloadTask init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionDownloadTask new1() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionDownloadTask, _sel_new);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionDownloadTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSURLSessionDownloadTask, _sel_allocWithZone_, zone);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionDownloadTask alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionDownloadTask, _sel_alloc);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLSessionDownloadTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLSessionDownloadTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLSessionDownloadTask, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSURLSessionDownloadTask, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLSessionDownloadTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLSessionDownloadTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLSessionDownloadTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLSessionDownloadTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSURLSessionDownloadTask, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionDownloadTask =
    objc.getClass("NSURLSessionDownloadTask");
late final _sel_downloadTaskWithRequest_ =
    objc.registerName("downloadTaskWithRequest:");
final _objc_msgSend_563 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_downloadTaskWithURL_ =
    objc.registerName("downloadTaskWithURL:");
final _objc_msgSend_564 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_downloadTaskWithResumeData_ =
    objc.registerName("downloadTaskWithResumeData:");
final _objc_msgSend_565 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSURLSessionStreamTask
class NSURLSessionStreamTask extends NSURLSessionTask {
  NSURLSessionStreamTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionStreamTask] that points to the same underlying object as [other].
  NSURLSessionStreamTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionStreamTask] that wraps the given raw object pointer.
  NSURLSessionStreamTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionStreamTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionStreamTask);
  }

  /// readDataOfMinLength:maxLength:timeout:completionHandler:
  void readDataOfMinLength_maxLength_timeout_completionHandler_(
      int minBytes,
      int maxBytes,
      double timeout,
      objc.ObjCBlock<
              ffi.Void Function(
                  objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_566(
        this.pointer,
        _sel_readDataOfMinLength_maxLength_timeout_completionHandler_,
        minBytes,
        maxBytes,
        timeout,
        completionHandler.pointer);
  }

  /// writeData:timeout:completionHandler:
  void writeData_timeout_completionHandler_(
      objc.NSData data,
      double timeout,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_567(this.pointer, _sel_writeData_timeout_completionHandler_,
        data.pointer, timeout, completionHandler.pointer);
  }

  /// captureStreams
  void captureStreams() {
    _objc_msgSend_7(this.pointer, _sel_captureStreams);
  }

  /// closeWrite
  void closeWrite() {
    _objc_msgSend_7(this.pointer, _sel_closeWrite);
  }

  /// closeRead
  void closeRead() {
    _objc_msgSend_7(this.pointer, _sel_closeRead);
  }

  /// startSecureConnection
  void startSecureConnection() {
    _objc_msgSend_7(this.pointer, _sel_startSecureConnection);
  }

  /// stopSecureConnection
  void stopSecureConnection() {
    _objc_msgSend_7(this.pointer, _sel_stopSecureConnection);
  }

  /// init
  NSURLSessionStreamTask init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionStreamTask new1() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionStreamTask, _sel_new);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionStreamTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSURLSessionStreamTask, _sel_allocWithZone_, zone);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionStreamTask alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionStreamTask, _sel_alloc);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLSessionStreamTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLSessionStreamTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLSessionStreamTask, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSURLSessionStreamTask, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLSessionStreamTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLSessionStreamTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLSessionStreamTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLSessionStreamTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSURLSessionStreamTask, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionStreamTask =
    objc.getClass("NSURLSessionStreamTask");
void _ObjCBlock_ffiVoid_NSData_bool_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Bool arg1, ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, bool,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        bool, ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSData_bool_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Bool arg1, ffi.Pointer<objc.ObjCObject> arg2)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_NSData_bool_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSData, bool, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, bool arg1, ffi.Pointer<objc.ObjCObject> arg2) =>
                  fn(objc.NSData.castFromPointer(arg0, retain: true, release: true), arg1, arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(objc.NSData, bool, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Bool,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, bool arg1,
                ffi.Pointer<objc.ObjCObject> arg2) =>
            fn(
                objc.NSData.castFromPointer(arg0, retain: false, release: true),
                arg1,
                arg2.address == 0
                    ? null
                    : objc.NSError.castFromPointer(arg2, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSData_bool_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSData_bool_NSError_CallExtension on objc.ObjCBlock<
    ffi.Void Function(objc.NSData, ffi.Bool, ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSData arg0, bool arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Bool arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      bool,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1, arg2?.pointer ?? ffi.nullptr);
}

late final _sel_readDataOfMinLength_maxLength_timeout_completionHandler_ = objc
    .registerName("readDataOfMinLength:maxLength:timeout:completionHandler:");
final _objc_msgSend_566 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Double,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            double,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_writeData_timeout_completionHandler_ =
    objc.registerName("writeData:timeout:completionHandler:");
final _objc_msgSend_567 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_captureStreams = objc.registerName("captureStreams");
late final _sel_closeWrite = objc.registerName("closeWrite");
late final _sel_closeRead = objc.registerName("closeRead");
late final _sel_startSecureConnection =
    objc.registerName("startSecureConnection");
late final _sel_stopSecureConnection =
    objc.registerName("stopSecureConnection");
late final _sel_streamTaskWithHostName_port_ =
    objc.registerName("streamTaskWithHostName:port:");
final _objc_msgSend_568 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

/// NSNetService
class NSNetService extends objc.NSObject {
  NSNetService._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSNetService] that points to the same underlying object as [other].
  NSNetService.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSNetService] that wraps the given raw object pointer.
  NSNetService.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSNetService].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSNetService);
  }

  /// initWithDomain:type:name:port:
  NSNetService initWithDomain_type_name_port_(
      objc.NSString domain, objc.NSString type, objc.NSString name, int port) {
    final _ret = _objc_msgSend_569(
        this.pointer,
        _sel_initWithDomain_type_name_port_,
        domain.pointer,
        type.pointer,
        name.pointer,
        port);
    return NSNetService.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithDomain:type:name:
  NSNetService initWithDomain_type_name_(
      objc.NSString domain, objc.NSString type, objc.NSString name) {
    final _ret = _objc_msgSend_570(this.pointer, _sel_initWithDomain_type_name_,
        domain.pointer, type.pointer, name.pointer);
    return NSNetService.castFromPointer(_ret, retain: true, release: true);
  }

  /// scheduleInRunLoop:forMode:
  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_230(this.pointer, _sel_scheduleInRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  /// removeFromRunLoop:forMode:
  void removeFromRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_230(this.pointer, _sel_removeFromRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// includesPeerToPeer
  bool get includesPeerToPeer {
    return _objc_msgSend_13(this.pointer, _sel_includesPeerToPeer);
  }

  /// setIncludesPeerToPeer:
  set includesPeerToPeer(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setIncludesPeerToPeer_, value);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_11(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// type
  objc.NSString get type {
    final _ret = _objc_msgSend_11(this.pointer, _sel_type);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// domain
  objc.NSString get domain {
    final _ret = _objc_msgSend_11(this.pointer, _sel_domain);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// hostName
  objc.NSString? get hostName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_hostName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// addresses
  objc.NSArray? get addresses {
    final _ret = _objc_msgSend_88(this.pointer, _sel_addresses);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// port
  int get port {
    return _objc_msgSend_125(this.pointer, _sel_port);
  }

  /// publish
  void publish() {
    _objc_msgSend_7(this.pointer, _sel_publish);
  }

  /// publishWithOptions:
  void publishWithOptions_(NSNetServiceOptions options) {
    _objc_msgSend_571(this.pointer, _sel_publishWithOptions_, options.value);
  }

  /// resolve
  void resolve() {
    _objc_msgSend_7(this.pointer, _sel_resolve);
  }

  /// stop
  void stop() {
    _objc_msgSend_7(this.pointer, _sel_stop);
  }

  /// dictionaryFromTXTRecordData:
  static objc.NSDictionary dictionaryFromTXTRecordData_(objc.NSData txtData) {
    final _ret = _objc_msgSend_572(_class_NSNetService,
        _sel_dictionaryFromTXTRecordData_, txtData.pointer);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// dataFromTXTRecordDictionary:
  static objc.NSData dataFromTXTRecordDictionary_(
      objc.NSDictionary txtDictionary) {
    final _ret = _objc_msgSend_573(_class_NSNetService,
        _sel_dataFromTXTRecordDictionary_, txtDictionary.pointer);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// resolveWithTimeout:
  void resolveWithTimeout_(double timeout) {
    _objc_msgSend_574(this.pointer, _sel_resolveWithTimeout_, timeout);
  }

  /// getInputStream:outputStream:
  bool getInputStream_outputStream_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    return _objc_msgSend_575(this.pointer, _sel_getInputStream_outputStream_,
        inputStream, outputStream);
  }

  /// setTXTRecordData:
  bool setTXTRecordData_(objc.NSData? recordData) {
    return _objc_msgSend_576(this.pointer, _sel_setTXTRecordData_,
        recordData?.pointer ?? ffi.nullptr);
  }

  /// TXTRecordData
  objc.NSData? TXTRecordData() {
    final _ret = _objc_msgSend_337(this.pointer, _sel_TXTRecordData);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// startMonitoring
  void startMonitoring() {
    _objc_msgSend_7(this.pointer, _sel_startMonitoring);
  }

  /// stopMonitoring
  void stopMonitoring() {
    _objc_msgSend_7(this.pointer, _sel_stopMonitoring);
  }

  /// init
  NSNetService init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSNetService.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSNetService new1() {
    final _ret = _objc_msgSend_19(_class_NSNetService, _sel_new);
    return NSNetService.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSNetService allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSNetService, _sel_allocWithZone_, zone);
    return NSNetService.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSNetService alloc() {
    final _ret = _objc_msgSend_19(_class_NSNetService, _sel_alloc);
    return NSNetService.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSNetService,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSNetService,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSNetService, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSNetService, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSNetService,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSNetService,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSNetService,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSNetService, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSNetService, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSNetService = objc.getClass("NSNetService");
late final _sel_initWithDomain_type_name_port_ =
    objc.registerName("initWithDomain:type:name:port:");
final _objc_msgSend_569 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_initWithDomain_type_name_ =
    objc.registerName("initWithDomain:type:name:");
final _objc_msgSend_570 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_includesPeerToPeer = objc.registerName("includesPeerToPeer");
late final _sel_setIncludesPeerToPeer_ =
    objc.registerName("setIncludesPeerToPeer:");
late final _sel_type = objc.registerName("type");

enum NSNetServiceOptions {
  NSNetServiceNoAutoRename(1),
  NSNetServiceListenForConnections(2);

  final int value;
  const NSNetServiceOptions(this.value);

  static NSNetServiceOptions fromValue(int value) => switch (value) {
        1 => NSNetServiceNoAutoRename,
        2 => NSNetServiceListenForConnections,
        _ =>
          throw ArgumentError("Unknown value for NSNetServiceOptions: $value"),
      };
}

late final _sel_publishWithOptions_ = objc.registerName("publishWithOptions:");
final _objc_msgSend_571 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_resolve = objc.registerName("resolve");
late final _sel_stop = objc.registerName("stop");
late final _sel_dictionaryFromTXTRecordData_ =
    objc.registerName("dictionaryFromTXTRecordData:");
final _objc_msgSend_572 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dataFromTXTRecordDictionary_ =
    objc.registerName("dataFromTXTRecordDictionary:");
final _objc_msgSend_573 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_resolveWithTimeout_ = objc.registerName("resolveWithTimeout:");
final _objc_msgSend_574 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_getInputStream_outputStream_ =
    objc.registerName("getInputStream:outputStream:");
final _objc_msgSend_575 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setTXTRecordData_ = objc.registerName("setTXTRecordData:");
final _objc_msgSend_576 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_TXTRecordData = objc.registerName("TXTRecordData");
late final _sel_startMonitoring = objc.registerName("startMonitoring");
late final _sel_stopMonitoring = objc.registerName("stopMonitoring");
late final _sel_streamTaskWithNetService_ =
    objc.registerName("streamTaskWithNetService:");
final _objc_msgSend_577 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSURLSessionWebSocketTask
class NSURLSessionWebSocketTask extends NSURLSessionTask {
  NSURLSessionWebSocketTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionWebSocketTask] that points to the same underlying object as [other].
  NSURLSessionWebSocketTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionWebSocketTask] that wraps the given raw object pointer.
  NSURLSessionWebSocketTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionWebSocketTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionWebSocketTask);
  }

  /// sendMessage:completionHandler:
  void sendMessage_completionHandler_(
      NSURLSessionWebSocketMessage message,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_579(this.pointer, _sel_sendMessage_completionHandler_,
        message.pointer, completionHandler.pointer);
  }

  /// receiveMessageWithCompletionHandler:
  void receiveMessageWithCompletionHandler_(
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_580(this.pointer, _sel_receiveMessageWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// sendPingWithPongReceiveHandler:
  void sendPingWithPongReceiveHandler_(
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          pongReceiveHandler) {
    _objc_msgSend_581(this.pointer, _sel_sendPingWithPongReceiveHandler_,
        pongReceiveHandler.pointer);
  }

  /// cancelWithCloseCode:reason:
  void cancelWithCloseCode_reason_(
      NSURLSessionWebSocketCloseCode closeCode, objc.NSData? reason) {
    _objc_msgSend_582(this.pointer, _sel_cancelWithCloseCode_reason_,
        closeCode.value, reason?.pointer ?? ffi.nullptr);
  }

  /// maximumMessageSize
  int get maximumMessageSize {
    return _objc_msgSend_125(this.pointer, _sel_maximumMessageSize);
  }

  /// setMaximumMessageSize:
  set maximumMessageSize(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setMaximumMessageSize_, value);
  }

  /// closeCode
  NSURLSessionWebSocketCloseCode get closeCode {
    final _ret = _objc_msgSend_583(this.pointer, _sel_closeCode);
    return NSURLSessionWebSocketCloseCode.fromValue(_ret);
  }

  /// closeReason
  objc.NSData? get closeReason {
    final _ret = _objc_msgSend_337(this.pointer, _sel_closeReason);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSURLSessionWebSocketTask init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionWebSocketTask new1() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionWebSocketTask, _sel_new);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionWebSocketTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSURLSessionWebSocketTask, _sel_allocWithZone_, zone);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionWebSocketTask alloc() {
    final _ret = _objc_msgSend_19(_class_NSURLSessionWebSocketTask, _sel_alloc);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLSessionWebSocketTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLSessionWebSocketTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSURLSessionWebSocketTask, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSURLSessionWebSocketTask, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLSessionWebSocketTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLSessionWebSocketTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLSessionWebSocketTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSURLSessionWebSocketTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSURLSessionWebSocketTask, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionWebSocketTask =
    objc.getClass("NSURLSessionWebSocketTask");

/// NSURLSessionWebSocketMessage
class NSURLSessionWebSocketMessage extends objc.NSObject {
  NSURLSessionWebSocketMessage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionWebSocketMessage] that points to the same underlying object as [other].
  NSURLSessionWebSocketMessage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionWebSocketMessage] that wraps the given raw object pointer.
  NSURLSessionWebSocketMessage.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionWebSocketMessage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionWebSocketMessage);
  }

  /// initWithData:
  NSURLSessionWebSocketMessage initWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_340(this.pointer, _sel_initWithData_, data.pointer);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithString:
  NSURLSessionWebSocketMessage initWithString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_63(this.pointer, _sel_initWithString_, string.pointer);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// type
  NSURLSessionWebSocketMessageType get type {
    final _ret = _objc_msgSend_578(this.pointer, _sel_type);
    return NSURLSessionWebSocketMessageType.fromValue(_ret);
  }

  /// data
  objc.NSData? get data {
    final _ret = _objc_msgSend_337(this.pointer, _sel_data);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// string
  objc.NSString? get string {
    final _ret = _objc_msgSend_20(this.pointer, _sel_string);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSURLSessionWebSocketMessage init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSURLSessionWebSocketMessage new1() {
    final _ret =
        _objc_msgSend_19(_class_NSURLSessionWebSocketMessage, _sel_new);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSURLSessionWebSocketMessage allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSURLSessionWebSocketMessage, _sel_allocWithZone_, zone);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSURLSessionWebSocketMessage alloc() {
    final _ret =
        _objc_msgSend_19(_class_NSURLSessionWebSocketMessage, _sel_alloc);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSURLSessionWebSocketMessage,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSURLSessionWebSocketMessage,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_NSURLSessionWebSocketMessage,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSURLSessionWebSocketMessage, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSURLSessionWebSocketMessage,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSURLSessionWebSocketMessage,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSURLSessionWebSocketMessage,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_NSURLSessionWebSocketMessage,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSURLSessionWebSocketMessage, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionWebSocketMessage =
    objc.getClass("NSURLSessionWebSocketMessage");

enum NSURLSessionWebSocketMessageType {
  NSURLSessionWebSocketMessageTypeData(0),
  NSURLSessionWebSocketMessageTypeString(1);

  final int value;
  const NSURLSessionWebSocketMessageType(this.value);

  static NSURLSessionWebSocketMessageType fromValue(int value) =>
      switch (value) {
        0 => NSURLSessionWebSocketMessageTypeData,
        1 => NSURLSessionWebSocketMessageTypeString,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionWebSocketMessageType: $value"),
      };
}

final _objc_msgSend_578 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sendMessage_completionHandler_ =
    objc.registerName("sendMessage:completionHandler:");
final _objc_msgSend_579 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
void _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(NSURLSessionWebSocketMessage?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(arg0.address == 0 ? null : NSURLSessionWebSocketMessage.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(NSURLSessionWebSocketMessage?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0.address == 0
                ? null
                : NSURLSessionWebSocketMessage.castFromPointer(arg0,
                    retain: false, release: true),
            arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError(
            raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(NSURLSessionWebSocketMessage? arg0, objc.NSError? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_receiveMessageWithCompletionHandler_ =
    objc.registerName("receiveMessageWithCompletionHandler:");
final _objc_msgSend_580 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_sendPingWithPongReceiveHandler_ =
    objc.registerName("sendPingWithPongReceiveHandler:");
final _objc_msgSend_581 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();

enum NSURLSessionWebSocketCloseCode {
  NSURLSessionWebSocketCloseCodeInvalid(0),
  NSURLSessionWebSocketCloseCodeNormalClosure(1000),
  NSURLSessionWebSocketCloseCodeGoingAway(1001),
  NSURLSessionWebSocketCloseCodeProtocolError(1002),
  NSURLSessionWebSocketCloseCodeUnsupportedData(1003),
  NSURLSessionWebSocketCloseCodeNoStatusReceived(1005),
  NSURLSessionWebSocketCloseCodeAbnormalClosure(1006),
  NSURLSessionWebSocketCloseCodeInvalidFramePayloadData(1007),
  NSURLSessionWebSocketCloseCodePolicyViolation(1008),
  NSURLSessionWebSocketCloseCodeMessageTooBig(1009),
  NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing(1010),
  NSURLSessionWebSocketCloseCodeInternalServerError(1011),
  NSURLSessionWebSocketCloseCodeTLSHandshakeFailure(1015);

  final int value;
  const NSURLSessionWebSocketCloseCode(this.value);

  static NSURLSessionWebSocketCloseCode fromValue(int value) => switch (value) {
        0 => NSURLSessionWebSocketCloseCodeInvalid,
        1000 => NSURLSessionWebSocketCloseCodeNormalClosure,
        1001 => NSURLSessionWebSocketCloseCodeGoingAway,
        1002 => NSURLSessionWebSocketCloseCodeProtocolError,
        1003 => NSURLSessionWebSocketCloseCodeUnsupportedData,
        1005 => NSURLSessionWebSocketCloseCodeNoStatusReceived,
        1006 => NSURLSessionWebSocketCloseCodeAbnormalClosure,
        1007 => NSURLSessionWebSocketCloseCodeInvalidFramePayloadData,
        1008 => NSURLSessionWebSocketCloseCodePolicyViolation,
        1009 => NSURLSessionWebSocketCloseCodeMessageTooBig,
        1010 => NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing,
        1011 => NSURLSessionWebSocketCloseCodeInternalServerError,
        1015 => NSURLSessionWebSocketCloseCodeTLSHandshakeFailure,
        _ => throw ArgumentError(
            "Unknown value for NSURLSessionWebSocketCloseCode: $value"),
      };
}

late final _sel_cancelWithCloseCode_reason_ =
    objc.registerName("cancelWithCloseCode:reason:");
final _objc_msgSend_582 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_maximumMessageSize = objc.registerName("maximumMessageSize");
late final _sel_setMaximumMessageSize_ =
    objc.registerName("setMaximumMessageSize:");
late final _sel_closeCode = objc.registerName("closeCode");
final _objc_msgSend_583 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_closeReason = objc.registerName("closeReason");
late final _sel_webSocketTaskWithURL_ =
    objc.registerName("webSocketTaskWithURL:");
final _objc_msgSend_584 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_webSocketTaskWithURL_protocols_ =
    objc.registerName("webSocketTaskWithURL:protocols:");
final _objc_msgSend_585 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_webSocketTaskWithRequest_ =
    objc.registerName("webSocketTaskWithRequest:");
final _objc_msgSend_586 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_fnPtrTrampoline).cast(), ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSData?, NSURLResponse?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2) =>
                  fn(arg0.address == 0 ? null : objc.NSData.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: true, release: true), arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(objc.NSData?, NSURLResponse?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                ffi.Pointer<objc.ObjCObject> arg2) =>
            fn(
                arg0.address == 0 ? null : objc.NSData.castFromPointer(arg0, retain: false, release: true),
                arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: false, release: true),
                arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSData? arg0, NSURLResponse? arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer,
          arg0?.pointer ?? ffi.nullptr,
          arg1?.pointer ?? ffi.nullptr,
          arg2?.pointer ?? ffi.nullptr);
}

late final _sel_dataTaskWithRequest_completionHandler_ =
    objc.registerName("dataTaskWithRequest:completionHandler:");
final _objc_msgSend_587 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_dataTaskWithURL_completionHandler_ =
    objc.registerName("dataTaskWithURL:completionHandler:");
final _objc_msgSend_588 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_uploadTaskWithRequest_fromFile_completionHandler_ =
    objc.registerName("uploadTaskWithRequest:fromFile:completionHandler:");
final _objc_msgSend_589 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_uploadTaskWithRequest_fromData_completionHandler_ =
    objc.registerName("uploadTaskWithRequest:fromData:completionHandler:");
final _objc_msgSend_590 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_uploadTaskWithResumeData_completionHandler_ =
    objc.registerName("uploadTaskWithResumeData:completionHandler:");
final _objc_msgSend_591 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
void _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_fnPtrTrampoline).cast(), ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSURL?, NSURLResponse?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2) =>
                  fn(arg0.address == 0 ? null : objc.NSURL.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: true, release: true), arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(objc.NSURL?, NSURLResponse?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                ffi.Pointer<objc.ObjCObject> arg2) =>
            fn(
                arg0.address == 0 ? null : objc.NSURL.castFromPointer(arg0, retain: false, release: true),
                arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: false, release: true),
                arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSURL? arg0, NSURLResponse? arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer,
          arg0?.pointer ?? ffi.nullptr,
          arg1?.pointer ?? ffi.nullptr,
          arg2?.pointer ?? ffi.nullptr);
}

late final _sel_downloadTaskWithRequest_completionHandler_ =
    objc.registerName("downloadTaskWithRequest:completionHandler:");
final _objc_msgSend_592 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_downloadTaskWithURL_completionHandler_ =
    objc.registerName("downloadTaskWithURL:completionHandler:");
final _objc_msgSend_593 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_downloadTaskWithResumeData_completionHandler_ =
    objc.registerName("downloadTaskWithResumeData:completionHandler:");
final _objc_msgSend_594 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// NSProtocolChecker
class NSProtocolChecker extends objc.NSProxy {
  NSProtocolChecker._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSProtocolChecker] that points to the same underlying object as [other].
  NSProtocolChecker.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSProtocolChecker] that wraps the given raw object pointer.
  NSProtocolChecker.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSProtocolChecker].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSProtocolChecker);
  }

  /// protocol
  objc.Protocol get protocol {
    final _ret = _objc_msgSend_595(this.pointer, _sel_protocol);
    return objc.Protocol.castFromPointer(_ret, retain: true, release: true);
  }

  /// target
  objc.NSObject? get target {
    final _ret = _objc_msgSend_400(this.pointer, _sel_target);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// protocolCheckerWithTarget:protocol:
  static NSProtocolChecker protocolCheckerWithTarget_protocol_(
      objc.NSObject anObject, objc.Protocol aProtocol) {
    final _ret = _objc_msgSend_596(
        _class_NSProtocolChecker,
        _sel_protocolCheckerWithTarget_protocol_,
        anObject.pointer,
        aProtocol.pointer);
    return NSProtocolChecker.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithTarget:protocol:
  NSProtocolChecker initWithTarget_protocol_(
      objc.NSObject anObject, objc.Protocol aProtocol) {
    final _ret = _objc_msgSend_596(this.pointer, _sel_initWithTarget_protocol_,
        anObject.pointer, aProtocol.pointer);
    return NSProtocolChecker.castFromPointer(_ret, retain: true, release: true);
  }

  /// alloc
  static objc.ObjCObjectBase alloc() {
    final _ret = _objc_msgSend_19(_class_NSProtocolChecker, _sel_alloc);
    return objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  /// respondsToSelector:
  static bool respondsToSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    return _objc_msgSend_244(
        _class_NSProtocolChecker, _sel_respondsToSelector_, aSelector);
  }
}

late final _class_NSProtocolChecker = objc.getClass("NSProtocolChecker");
final _objc_msgSend_595 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_target = objc.registerName("target");
late final _sel_protocolCheckerWithTarget_protocol_ =
    objc.registerName("protocolCheckerWithTarget:protocol:");
final _objc_msgSend_596 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithTarget_protocol_ =
    objc.registerName("initWithTarget:protocol:");

/// NSTask
class NSTask extends objc.NSObject {
  NSTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSTask] that points to the same underlying object as [other].
  NSTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSTask] that wraps the given raw object pointer.
  NSTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSTask);
  }

  /// init
  NSTask init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// executableURL
  objc.NSURL? get executableURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_executableURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setExecutableURL:
  set executableURL(objc.NSURL? value) {
    return _objc_msgSend_25(
        this.pointer, _sel_setExecutableURL_, value?.pointer ?? ffi.nullptr);
  }

  /// arguments
  objc.NSArray? get arguments {
    final _ret = _objc_msgSend_88(this.pointer, _sel_arguments);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setArguments:
  set arguments(objc.NSArray? value) {
    return _objc_msgSend_549(
        this.pointer, _sel_setArguments_, value?.pointer ?? ffi.nullptr);
  }

  /// environment
  objc.NSDictionary? get environment {
    final _ret = _objc_msgSend_84(this.pointer, _sel_environment);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setEnvironment:
  set environment(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer, _sel_setEnvironment_, value?.pointer ?? ffi.nullptr);
  }

  /// currentDirectoryURL
  objc.NSURL? get currentDirectoryURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_currentDirectoryURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCurrentDirectoryURL:
  set currentDirectoryURL(objc.NSURL? value) {
    return _objc_msgSend_25(this.pointer, _sel_setCurrentDirectoryURL_,
        value?.pointer ?? ffi.nullptr);
  }

  /// standardInput
  objc.ObjCObjectBase? get standardInput {
    final _ret = _objc_msgSend_85(this.pointer, _sel_standardInput);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setStandardInput:
  set standardInput(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setStandardInput_, value?.pointer ?? ffi.nullptr);
  }

  /// standardOutput
  objc.ObjCObjectBase? get standardOutput {
    final _ret = _objc_msgSend_85(this.pointer, _sel_standardOutput);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setStandardOutput:
  set standardOutput(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setStandardOutput_, value?.pointer ?? ffi.nullptr);
  }

  /// standardError
  objc.ObjCObjectBase? get standardError {
    final _ret = _objc_msgSend_85(this.pointer, _sel_standardError);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setStandardError:
  set standardError(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setStandardError_, value?.pointer ?? ffi.nullptr);
  }

  /// launchAndReturnError:
  bool launchAndReturnError_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_39(this.pointer, _sel_launchAndReturnError_, error);
  }

  /// interrupt
  void interrupt() {
    _objc_msgSend_7(this.pointer, _sel_interrupt);
  }

  /// terminate
  void terminate() {
    _objc_msgSend_7(this.pointer, _sel_terminate);
  }

  /// suspend
  bool suspend() {
    return _objc_msgSend_13(this.pointer, _sel_suspend);
  }

  /// resume
  bool resume() {
    return _objc_msgSend_13(this.pointer, _sel_resume);
  }

  /// processIdentifier
  int get processIdentifier {
    return _objc_msgSend_276(this.pointer, _sel_processIdentifier);
  }

  /// isRunning
  bool get running {
    return _objc_msgSend_13(this.pointer, _sel_isRunning);
  }

  /// terminationStatus
  int get terminationStatus {
    return _objc_msgSend_276(this.pointer, _sel_terminationStatus);
  }

  /// terminationReason
  NSTaskTerminationReason get terminationReason {
    final _ret = _objc_msgSend_597(this.pointer, _sel_terminationReason);
    return NSTaskTerminationReason.fromValue(_ret);
  }

  /// terminationHandler
  objc.ObjCBlock<ffi.Void Function(NSTask)>? get terminationHandler {
    final _ret = _objc_msgSend_598(this.pointer, _sel_terminationHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_NSTask.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setTerminationHandler:
  set terminationHandler(objc.ObjCBlock<ffi.Void Function(NSTask)>? value) {
    return _objc_msgSend_599(this.pointer, _sel_setTerminationHandler_,
        value?.pointer ?? ffi.nullptr);
  }

  /// qualityOfService
  NSQualityOfService get qualityOfService {
    final _ret = _objc_msgSend_397(this.pointer, _sel_qualityOfService);
    return NSQualityOfService.fromValue(_ret);
  }

  /// setQualityOfService:
  set qualityOfService(NSQualityOfService value) {
    return _objc_msgSend_398(
        this.pointer, _sel_setQualityOfService_, value.value);
  }

  /// launchedTaskWithExecutableURL:arguments:error:terminationHandler:
  static NSTask?
      launchedTaskWithExecutableURL_arguments_error_terminationHandler_(
          objc.NSURL url,
          objc.NSArray arguments,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
          objc.ObjCBlock<ffi.Void Function(NSTask)>? terminationHandler) {
    final _ret = _objc_msgSend_600(
        _class_NSTask,
        _sel_launchedTaskWithExecutableURL_arguments_error_terminationHandler_,
        url.pointer,
        arguments.pointer,
        error,
        terminationHandler?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// waitUntilExit
  void waitUntilExit() {
    _objc_msgSend_7(this.pointer, _sel_waitUntilExit);
  }

  /// launchPath
  objc.NSString? get launchPath {
    final _ret = _objc_msgSend_20(this.pointer, _sel_launchPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLaunchPath:
  set launchPath(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setLaunchPath_, value?.pointer ?? ffi.nullptr);
  }

  /// currentDirectoryPath
  objc.NSString get currentDirectoryPath {
    final _ret = _objc_msgSend_11(this.pointer, _sel_currentDirectoryPath);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCurrentDirectoryPath:
  set currentDirectoryPath(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setCurrentDirectoryPath_, value.pointer);
  }

  /// launch
  void launch() {
    _objc_msgSend_7(this.pointer, _sel_launch);
  }

  /// launchedTaskWithLaunchPath:arguments:
  static NSTask launchedTaskWithLaunchPath_arguments_(
      objc.NSString path, objc.NSArray arguments) {
    final _ret = _objc_msgSend_601(
        _class_NSTask,
        _sel_launchedTaskWithLaunchPath_arguments_,
        path.pointer,
        arguments.pointer);
    return NSTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSTask new1() {
    final _ret = _objc_msgSend_19(_class_NSTask, _sel_new);
    return NSTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSTask, _sel_allocWithZone_, zone);
    return NSTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSTask alloc() {
    final _ret = _objc_msgSend_19(_class_NSTask, _sel_alloc);
    return NSTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSTask, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSTask, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        _class_NSTask, _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_NSTask, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSTask = objc.getClass("NSTask");
late final _sel_setExecutableURL_ = objc.registerName("setExecutableURL:");
late final _sel_setArguments_ = objc.registerName("setArguments:");
late final _sel_setEnvironment_ = objc.registerName("setEnvironment:");
late final _sel_currentDirectoryURL = objc.registerName("currentDirectoryURL");
late final _sel_setCurrentDirectoryURL_ =
    objc.registerName("setCurrentDirectoryURL:");
late final _sel_standardInput = objc.registerName("standardInput");
late final _sel_setStandardInput_ = objc.registerName("setStandardInput:");
late final _sel_standardOutput = objc.registerName("standardOutput");
late final _sel_setStandardOutput_ = objc.registerName("setStandardOutput:");
late final _sel_standardError = objc.registerName("standardError");
late final _sel_setStandardError_ = objc.registerName("setStandardError:");
late final _sel_launchAndReturnError_ =
    objc.registerName("launchAndReturnError:");
late final _sel_interrupt = objc.registerName("interrupt");
late final _sel_terminate = objc.registerName("terminate");
late final _sel_isRunning = objc.registerName("isRunning");
late final _sel_terminationStatus = objc.registerName("terminationStatus");

enum NSTaskTerminationReason {
  NSTaskTerminationReasonExit(1),
  NSTaskTerminationReasonUncaughtSignal(2);

  final int value;
  const NSTaskTerminationReason(this.value);

  static NSTaskTerminationReason fromValue(int value) => switch (value) {
        1 => NSTaskTerminationReasonExit,
        2 => NSTaskTerminationReasonUncaughtSignal,
        _ => throw ArgumentError(
            "Unknown value for NSTaskTerminationReason: $value"),
      };
}

late final _sel_terminationReason = objc.registerName("terminationReason");
final _objc_msgSend_597 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
void _ObjCBlock_ffiVoid_NSTask_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSTask_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(NSTask)>`.
abstract final class ObjCBlock_ffiVoid_NSTask {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(NSTask)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(NSTask)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(NSTask)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(NSTask)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                                  ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSTask_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(NSTask)> fromFunction(
          void Function(NSTask) fn) =>
      objc.ObjCBlock<ffi.Void Function(NSTask)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_NSTask_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(NSTask.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(NSTask)> listener(
      void Function(NSTask) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSTask_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) =>
            fn(NSTask.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSTask(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(NSTask)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(NSTask)>`.
extension ObjCBlock_ffiVoid_NSTask_CallExtension
    on objc.ObjCBlock<ffi.Void Function(NSTask)> {
  void call(NSTask arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_terminationHandler = objc.registerName("terminationHandler");
final _objc_msgSend_598 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTerminationHandler_ =
    objc.registerName("setTerminationHandler:");
final _objc_msgSend_599 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_launchedTaskWithExecutableURL_arguments_error_terminationHandler_ =
    objc.registerName(
        "launchedTaskWithExecutableURL:arguments:error:terminationHandler:");
final _objc_msgSend_600 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_waitUntilExit = objc.registerName("waitUntilExit");
late final _sel_launchPath = objc.registerName("launchPath");
late final _sel_setLaunchPath_ = objc.registerName("setLaunchPath:");
late final _sel_setCurrentDirectoryPath_ =
    objc.registerName("setCurrentDirectoryPath:");
late final _sel_launch = objc.registerName("launch");
late final _sel_launchedTaskWithLaunchPath_arguments_ =
    objc.registerName("launchedTaskWithLaunchPath:arguments:");
final _objc_msgSend_601 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSXMLElement
class NSXMLElement extends NSXMLNode {
  NSXMLElement._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLElement] that points to the same underlying object as [other].
  NSXMLElement.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLElement] that wraps the given raw object pointer.
  NSXMLElement.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLElement].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSXMLElement);
  }

  /// initWithName:
  NSXMLElement initWithName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_63(this.pointer, _sel_initWithName_, name.pointer);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithName:URI:
  NSXMLElement initWithName_URI_(objc.NSString name, objc.NSString? URI) {
    final _ret = _objc_msgSend_602(this.pointer, _sel_initWithName_URI_,
        name.pointer, URI?.pointer ?? ffi.nullptr);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithName:stringValue:
  NSXMLElement initWithName_stringValue_(
      objc.NSString name, objc.NSString? string) {
    final _ret = _objc_msgSend_602(this.pointer, _sel_initWithName_stringValue_,
        name.pointer, string?.pointer ?? ffi.nullptr);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithXMLString:error:
  NSXMLElement? initWithXMLString_error_(
      objc.NSString string, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_603(
        this.pointer, _sel_initWithXMLString_error_, string.pointer, error);
    return _ret.address == 0
        ? null
        : NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithKind:options:
  NSXMLElement initWithKind_options_(
      NSXMLNodeKind kind, NSXMLNodeOptions options) {
    final _ret = _objc_msgSend_604(
        this.pointer, _sel_initWithKind_options_, kind.value, options.value);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  /// elementsForName:
  objc.NSArray elementsForName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_390(this.pointer, _sel_elementsForName_, name.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// elementsForLocalName:URI:
  objc.NSArray elementsForLocalName_URI_(
      objc.NSString localName, objc.NSString? URI) {
    final _ret = _objc_msgSend_605(this.pointer, _sel_elementsForLocalName_URI_,
        localName.pointer, URI?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// addAttribute:
  void addAttribute_(NSXMLNode attribute) {
    _objc_msgSend_621(this.pointer, _sel_addAttribute_, attribute.pointer);
  }

  /// removeAttributeForName:
  void removeAttributeForName_(objc.NSString name) {
    _objc_msgSend_110(this.pointer, _sel_removeAttributeForName_, name.pointer);
  }

  /// attributes
  objc.NSArray? get attributes {
    final _ret = _objc_msgSend_88(this.pointer, _sel_attributes);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAttributes:
  set attributes(objc.NSArray? value) {
    return _objc_msgSend_549(
        this.pointer, _sel_setAttributes_, value?.pointer ?? ffi.nullptr);
  }

  /// setAttributesWithDictionary:
  void setAttributesWithDictionary_(objc.NSDictionary attributes) {
    _objc_msgSend_642(
        this.pointer, _sel_setAttributesWithDictionary_, attributes.pointer);
  }

  /// attributeForName:
  NSXMLNode? attributeForName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_625(this.pointer, _sel_attributeForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// attributeForLocalName:URI:
  NSXMLNode? attributeForLocalName_URI_(
      objc.NSString localName, objc.NSString? URI) {
    final _ret = _objc_msgSend_643(
        this.pointer,
        _sel_attributeForLocalName_URI_,
        localName.pointer,
        URI?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// addNamespace:
  void addNamespace_(NSXMLNode aNamespace) {
    _objc_msgSend_621(this.pointer, _sel_addNamespace_, aNamespace.pointer);
  }

  /// removeNamespaceForPrefix:
  void removeNamespaceForPrefix_(objc.NSString name) {
    _objc_msgSend_110(
        this.pointer, _sel_removeNamespaceForPrefix_, name.pointer);
  }

  /// namespaces
  objc.NSArray? get namespaces {
    final _ret = _objc_msgSend_88(this.pointer, _sel_namespaces);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setNamespaces:
  set namespaces(objc.NSArray? value) {
    return _objc_msgSend_549(
        this.pointer, _sel_setNamespaces_, value?.pointer ?? ffi.nullptr);
  }

  /// namespaceForPrefix:
  NSXMLNode? namespaceForPrefix_(objc.NSString name) {
    final _ret =
        _objc_msgSend_625(this.pointer, _sel_namespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// resolveNamespaceForName:
  NSXMLNode? resolveNamespaceForName_(objc.NSString name) {
    final _ret = _objc_msgSend_625(
        this.pointer, _sel_resolveNamespaceForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// resolvePrefixForNamespaceURI:
  objc.NSString? resolvePrefixForNamespaceURI_(objc.NSString namespaceURI) {
    final _ret = _objc_msgSend_42(
        this.pointer, _sel_resolvePrefixForNamespaceURI_, namespaceURI.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// insertChild:atIndex:
  void insertChild_atIndex_(NSXMLNode child, int index) {
    _objc_msgSend_619(
        this.pointer, _sel_insertChild_atIndex_, child.pointer, index);
  }

  /// insertChildren:atIndex:
  void insertChildren_atIndex_(objc.NSArray children, int index) {
    _objc_msgSend_620(
        this.pointer, _sel_insertChildren_atIndex_, children.pointer, index);
  }

  /// removeChildAtIndex:
  void removeChildAtIndex_(int index) {
    _objc_msgSend_425(this.pointer, _sel_removeChildAtIndex_, index);
  }

  /// setChildren:
  void setChildren_(objc.NSArray? children) {
    _objc_msgSend_272(
        this.pointer, _sel_setChildren_, children?.pointer ?? ffi.nullptr);
  }

  /// addChild:
  void addChild_(NSXMLNode child) {
    _objc_msgSend_621(this.pointer, _sel_addChild_, child.pointer);
  }

  /// replaceChildAtIndex:withNode:
  void replaceChildAtIndex_withNode_(int index, NSXMLNode node) {
    _objc_msgSend_622(
        this.pointer, _sel_replaceChildAtIndex_withNode_, index, node.pointer);
  }

  /// normalizeAdjacentTextNodesPreservingCDATA:
  void normalizeAdjacentTextNodesPreservingCDATA_(bool preserve) {
    _objc_msgSend_351(this.pointer,
        _sel_normalizeAdjacentTextNodesPreservingCDATA_, preserve);
  }

  /// setAttributesAsDictionary:
  void setAttributesAsDictionary_(objc.NSDictionary attributes) {
    _objc_msgSend_642(
        this.pointer, _sel_setAttributesAsDictionary_, attributes.pointer);
  }

  /// init
  NSXMLElement init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithKind:
  NSXMLElement initWithKind_(NSXMLNodeKind kind) {
    final _ret =
        _objc_msgSend_606(this.pointer, _sel_initWithKind_, kind.value);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  /// document
  static objc.ObjCObjectBase document() {
    final _ret = _objc_msgSend_19(_class_NSXMLElement, _sel_document);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// documentWithRootElement:
  static objc.ObjCObjectBase documentWithRootElement_(NSXMLElement element) {
    final _ret = _objc_msgSend_607(
        _class_NSXMLElement, _sel_documentWithRootElement_, element.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:
  static objc.ObjCObjectBase elementWithName_(objc.NSString name) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLElement, _sel_elementWithName_, name.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:URI:
  static objc.ObjCObjectBase elementWithName_URI_(
      objc.NSString name, objc.NSString URI) {
    final _ret = _objc_msgSend_608(_class_NSXMLElement,
        _sel_elementWithName_URI_, name.pointer, URI.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:stringValue:
  static objc.ObjCObjectBase elementWithName_stringValue_(
      objc.NSString name, objc.NSString string) {
    final _ret = _objc_msgSend_608(_class_NSXMLElement,
        _sel_elementWithName_stringValue_, name.pointer, string.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:children:attributes:
  static objc.ObjCObjectBase elementWithName_children_attributes_(
      objc.NSString name, objc.NSArray? children, objc.NSArray? attributes) {
    final _ret = _objc_msgSend_609(
        _class_NSXMLElement,
        _sel_elementWithName_children_attributes_,
        name.pointer,
        children?.pointer ?? ffi.nullptr,
        attributes?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributeWithName:stringValue:
  static objc.ObjCObjectBase attributeWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(_class_NSXMLElement,
        _sel_attributeWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributeWithName:URI:stringValue:
  static objc.ObjCObjectBase attributeWithName_URI_stringValue_(
      objc.NSString name, objc.NSString URI, objc.NSString stringValue) {
    final _ret = _objc_msgSend_570(
        _class_NSXMLElement,
        _sel_attributeWithName_URI_stringValue_,
        name.pointer,
        URI.pointer,
        stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// namespaceWithName:stringValue:
  static objc.ObjCObjectBase namespaceWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(_class_NSXMLElement,
        _sel_namespaceWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// processingInstructionWithName:stringValue:
  static objc.ObjCObjectBase processingInstructionWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(
        _class_NSXMLElement,
        _sel_processingInstructionWithName_stringValue_,
        name.pointer,
        stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// commentWithStringValue:
  static objc.ObjCObjectBase commentWithStringValue_(
      objc.NSString stringValue) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLElement, _sel_commentWithStringValue_, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// textWithStringValue:
  static objc.ObjCObjectBase textWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLElement, _sel_textWithStringValue_, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// DTDNodeWithXMLString:
  static objc.ObjCObjectBase? DTDNodeWithXMLString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLElement, _sel_DTDNodeWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// localNameForName:
  static objc.NSString localNameForName_(objc.NSString name) {
    final _ret = _objc_msgSend_309(
        _class_NSXMLElement, _sel_localNameForName_, name.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// prefixForName:
  static objc.NSString? prefixForName_(objc.NSString name) {
    final _ret = _objc_msgSend_42(
        _class_NSXMLElement, _sel_prefixForName_, name.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// predefinedNamespaceForPrefix:
  static NSXMLNode? predefinedNamespaceForPrefix_(objc.NSString name) {
    final _ret = _objc_msgSend_625(
        _class_NSXMLElement, _sel_predefinedNamespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSXMLElement new1() {
    final _ret = _objc_msgSend_19(_class_NSXMLElement, _sel_new);
    return NSXMLElement.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSXMLElement allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSXMLElement, _sel_allocWithZone_, zone);
    return NSXMLElement.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSXMLElement alloc() {
    final _ret = _objc_msgSend_19(_class_NSXMLElement, _sel_alloc);
    return NSXMLElement.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSXMLElement,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSXMLElement,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSXMLElement, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSXMLElement, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSXMLElement,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSXMLElement,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSXMLElement,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSXMLElement, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSXMLElement, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLElement = objc.getClass("NSXMLElement");
late final _sel_initWithName_URI_ = objc.registerName("initWithName:URI:");
final _objc_msgSend_602 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithName_stringValue_ =
    objc.registerName("initWithName:stringValue:");
late final _sel_initWithXMLString_error_ =
    objc.registerName("initWithXMLString:error:");
final _objc_msgSend_603 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

enum NSXMLNodeKind {
  NSXMLInvalidKind(0),
  NSXMLDocumentKind(1),
  NSXMLElementKind(2),
  NSXMLAttributeKind(3),
  NSXMLNamespaceKind(4),
  NSXMLProcessingInstructionKind(5),
  NSXMLCommentKind(6),
  NSXMLTextKind(7),
  NSXMLDTDKind(8),
  NSXMLEntityDeclarationKind(9),
  NSXMLAttributeDeclarationKind(10),
  NSXMLElementDeclarationKind(11),
  NSXMLNotationDeclarationKind(12);

  final int value;
  const NSXMLNodeKind(this.value);

  static NSXMLNodeKind fromValue(int value) => switch (value) {
        0 => NSXMLInvalidKind,
        1 => NSXMLDocumentKind,
        2 => NSXMLElementKind,
        3 => NSXMLAttributeKind,
        4 => NSXMLNamespaceKind,
        5 => NSXMLProcessingInstructionKind,
        6 => NSXMLCommentKind,
        7 => NSXMLTextKind,
        8 => NSXMLDTDKind,
        9 => NSXMLEntityDeclarationKind,
        10 => NSXMLAttributeDeclarationKind,
        11 => NSXMLElementDeclarationKind,
        12 => NSXMLNotationDeclarationKind,
        _ => throw ArgumentError("Unknown value for NSXMLNodeKind: $value"),
      };
}

enum NSXMLNodeOptions {
  NSXMLNodeOptionsNone(0),
  NSXMLNodeIsCDATA(1),
  NSXMLNodeExpandEmptyElement(2),
  NSXMLNodeCompactEmptyElement(4),
  NSXMLNodeUseSingleQuotes(8),
  NSXMLNodeUseDoubleQuotes(16),
  NSXMLNodeNeverEscapeContents(32),
  NSXMLDocumentTidyHTML(512),
  NSXMLDocumentTidyXML(1024),
  NSXMLDocumentValidate(8192),
  NSXMLNodeLoadExternalEntitiesAlways(16384),
  NSXMLNodeLoadExternalEntitiesSameOriginOnly(32768),
  NSXMLNodeLoadExternalEntitiesNever(524288),
  NSXMLDocumentXInclude(65536),
  NSXMLNodePrettyPrint(131072),
  NSXMLDocumentIncludeContentTypeDeclaration(262144),
  NSXMLNodePreserveNamespaceOrder(1048576),
  NSXMLNodePreserveAttributeOrder(2097152),
  NSXMLNodePreserveEntities(4194304),
  NSXMLNodePreservePrefixes(8388608),
  NSXMLNodePreserveCDATA(16777216),
  NSXMLNodePreserveWhitespace(33554432),
  NSXMLNodePreserveDTD(67108864),
  NSXMLNodePreserveCharacterReferences(134217728),
  NSXMLNodePromoteSignificantWhitespace(268435456),
  NSXMLNodePreserveEmptyElements(6),
  NSXMLNodePreserveQuotes(24),
  NSXMLNodePreserveAll(4293918750);

  final int value;
  const NSXMLNodeOptions(this.value);

  static NSXMLNodeOptions fromValue(int value) => switch (value) {
        0 => NSXMLNodeOptionsNone,
        1 => NSXMLNodeIsCDATA,
        2 => NSXMLNodeExpandEmptyElement,
        4 => NSXMLNodeCompactEmptyElement,
        8 => NSXMLNodeUseSingleQuotes,
        16 => NSXMLNodeUseDoubleQuotes,
        32 => NSXMLNodeNeverEscapeContents,
        512 => NSXMLDocumentTidyHTML,
        1024 => NSXMLDocumentTidyXML,
        8192 => NSXMLDocumentValidate,
        16384 => NSXMLNodeLoadExternalEntitiesAlways,
        32768 => NSXMLNodeLoadExternalEntitiesSameOriginOnly,
        524288 => NSXMLNodeLoadExternalEntitiesNever,
        65536 => NSXMLDocumentXInclude,
        131072 => NSXMLNodePrettyPrint,
        262144 => NSXMLDocumentIncludeContentTypeDeclaration,
        1048576 => NSXMLNodePreserveNamespaceOrder,
        2097152 => NSXMLNodePreserveAttributeOrder,
        4194304 => NSXMLNodePreserveEntities,
        8388608 => NSXMLNodePreservePrefixes,
        16777216 => NSXMLNodePreserveCDATA,
        33554432 => NSXMLNodePreserveWhitespace,
        67108864 => NSXMLNodePreserveDTD,
        134217728 => NSXMLNodePreserveCharacterReferences,
        268435456 => NSXMLNodePromoteSignificantWhitespace,
        6 => NSXMLNodePreserveEmptyElements,
        24 => NSXMLNodePreserveQuotes,
        4293918750 => NSXMLNodePreserveAll,
        _ => throw ArgumentError("Unknown value for NSXMLNodeOptions: $value"),
      };
}

late final _sel_initWithKind_options_ =
    objc.registerName("initWithKind:options:");
final _objc_msgSend_604 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_elementsForName_ = objc.registerName("elementsForName:");
late final _sel_elementsForLocalName_URI_ =
    objc.registerName("elementsForLocalName:URI:");
final _objc_msgSend_605 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSXMLNode
class NSXMLNode extends objc.NSObject {
  NSXMLNode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLNode] that points to the same underlying object as [other].
  NSXMLNode.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLNode] that wraps the given raw object pointer.
  NSXMLNode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLNode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSXMLNode);
  }

  /// init
  NSXMLNode init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithKind:
  NSXMLNode initWithKind_(NSXMLNodeKind kind) {
    final _ret =
        _objc_msgSend_606(this.pointer, _sel_initWithKind_, kind.value);
    return NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithKind:options:
  NSXMLNode initWithKind_options_(
      NSXMLNodeKind kind, NSXMLNodeOptions options) {
    final _ret = _objc_msgSend_604(
        this.pointer, _sel_initWithKind_options_, kind.value, options.value);
    return NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// document
  static objc.ObjCObjectBase document() {
    final _ret = _objc_msgSend_19(_class_NSXMLNode, _sel_document);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// documentWithRootElement:
  static objc.ObjCObjectBase documentWithRootElement_(NSXMLElement element) {
    final _ret = _objc_msgSend_607(
        _class_NSXMLNode, _sel_documentWithRootElement_, element.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:
  static objc.ObjCObjectBase elementWithName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_63(_class_NSXMLNode, _sel_elementWithName_, name.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:URI:
  static objc.ObjCObjectBase elementWithName_URI_(
      objc.NSString name, objc.NSString URI) {
    final _ret = _objc_msgSend_608(
        _class_NSXMLNode, _sel_elementWithName_URI_, name.pointer, URI.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:stringValue:
  static objc.ObjCObjectBase elementWithName_stringValue_(
      objc.NSString name, objc.NSString string) {
    final _ret = _objc_msgSend_608(_class_NSXMLNode,
        _sel_elementWithName_stringValue_, name.pointer, string.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:children:attributes:
  static objc.ObjCObjectBase elementWithName_children_attributes_(
      objc.NSString name, objc.NSArray? children, objc.NSArray? attributes) {
    final _ret = _objc_msgSend_609(
        _class_NSXMLNode,
        _sel_elementWithName_children_attributes_,
        name.pointer,
        children?.pointer ?? ffi.nullptr,
        attributes?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributeWithName:stringValue:
  static objc.ObjCObjectBase attributeWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(_class_NSXMLNode,
        _sel_attributeWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributeWithName:URI:stringValue:
  static objc.ObjCObjectBase attributeWithName_URI_stringValue_(
      objc.NSString name, objc.NSString URI, objc.NSString stringValue) {
    final _ret = _objc_msgSend_570(
        _class_NSXMLNode,
        _sel_attributeWithName_URI_stringValue_,
        name.pointer,
        URI.pointer,
        stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// namespaceWithName:stringValue:
  static objc.ObjCObjectBase namespaceWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(_class_NSXMLNode,
        _sel_namespaceWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// processingInstructionWithName:stringValue:
  static objc.ObjCObjectBase processingInstructionWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(
        _class_NSXMLNode,
        _sel_processingInstructionWithName_stringValue_,
        name.pointer,
        stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// commentWithStringValue:
  static objc.ObjCObjectBase commentWithStringValue_(
      objc.NSString stringValue) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLNode, _sel_commentWithStringValue_, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// textWithStringValue:
  static objc.ObjCObjectBase textWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLNode, _sel_textWithStringValue_, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// DTDNodeWithXMLString:
  static objc.ObjCObjectBase? DTDNodeWithXMLString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLNode, _sel_DTDNodeWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// kind
  NSXMLNodeKind get kind {
    final _ret = _objc_msgSend_610(this.pointer, _sel_kind);
    return NSXMLNodeKind.fromValue(_ret);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_20(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  /// objectValue
  objc.ObjCObjectBase? get objectValue {
    final _ret = _objc_msgSend_85(this.pointer, _sel_objectValue);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setObjectValue:
  set objectValue(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setObjectValue_, value?.pointer ?? ffi.nullptr);
  }

  /// stringValue
  objc.NSString? get stringValue {
    final _ret = _objc_msgSend_20(this.pointer, _sel_stringValue);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setStringValue:
  set stringValue(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setStringValue_, value?.pointer ?? ffi.nullptr);
  }

  /// setStringValue:resolvingEntities:
  void setStringValue_resolvingEntities_(objc.NSString string, bool resolve) {
    _objc_msgSend_611(this.pointer, _sel_setStringValue_resolvingEntities_,
        string.pointer, resolve);
  }

  /// index
  int get index {
    return _objc_msgSend_57(this.pointer, _sel_index);
  }

  /// level
  int get level {
    return _objc_msgSend_57(this.pointer, _sel_level);
  }

  /// rootDocument
  NSXMLDocument? get rootDocument {
    final _ret = _objc_msgSend_636(this.pointer, _sel_rootDocument);
    return _ret.address == 0
        ? null
        : NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  /// parent
  NSXMLNode? get parent {
    final _ret = _objc_msgSend_637(this.pointer, _sel_parent);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// childCount
  int get childCount {
    return _objc_msgSend_57(this.pointer, _sel_childCount);
  }

  /// children
  objc.NSArray? get children {
    final _ret = _objc_msgSend_88(this.pointer, _sel_children);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// childAtIndex:
  NSXMLNode? childAtIndex_(int index) {
    final _ret = _objc_msgSend_638(this.pointer, _sel_childAtIndex_, index);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// previousSibling
  NSXMLNode? get previousSibling {
    final _ret = _objc_msgSend_637(this.pointer, _sel_previousSibling);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// nextSibling
  NSXMLNode? get nextSibling {
    final _ret = _objc_msgSend_637(this.pointer, _sel_nextSibling);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// previousNode
  NSXMLNode? get previousNode {
    final _ret = _objc_msgSend_637(this.pointer, _sel_previousNode);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// nextNode
  NSXMLNode? get nextNode {
    final _ret = _objc_msgSend_637(this.pointer, _sel_nextNode);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// detach
  void detach() {
    _objc_msgSend_7(this.pointer, _sel_detach);
  }

  /// XPath
  objc.NSString? get XPath {
    final _ret = _objc_msgSend_20(this.pointer, _sel_XPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localName
  objc.NSString? get localName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_localName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// prefix
  objc.NSString? get prefix {
    final _ret = _objc_msgSend_20(this.pointer, _sel_prefix);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// URI
  objc.NSString? get URI {
    final _ret = _objc_msgSend_20(this.pointer, _sel_URI);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setURI:
  set URI(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setURI_, value?.pointer ?? ffi.nullptr);
  }

  /// localNameForName:
  static objc.NSString localNameForName_(objc.NSString name) {
    final _ret = _objc_msgSend_309(
        _class_NSXMLNode, _sel_localNameForName_, name.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// prefixForName:
  static objc.NSString? prefixForName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_42(_class_NSXMLNode, _sel_prefixForName_, name.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// predefinedNamespaceForPrefix:
  static NSXMLNode? predefinedNamespaceForPrefix_(objc.NSString name) {
    final _ret = _objc_msgSend_625(
        _class_NSXMLNode, _sel_predefinedNamespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// description
  objc.NSString get description {
    final _ret = _objc_msgSend_11(this.pointer, _sel_description);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// XMLString
  objc.NSString get XMLString {
    final _ret = _objc_msgSend_11(this.pointer, _sel_XMLString);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// XMLStringWithOptions:
  objc.NSString XMLStringWithOptions_(NSXMLNodeOptions options) {
    final _ret = _objc_msgSend_639(
        this.pointer, _sel_XMLStringWithOptions_, options.value);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// canonicalXMLStringPreservingComments:
  objc.NSString canonicalXMLStringPreservingComments_(bool comments) {
    final _ret = _objc_msgSend_640(
        this.pointer, _sel_canonicalXMLStringPreservingComments_, comments);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// nodesForXPath:error:
  objc.NSArray? nodesForXPath_error_(
      objc.NSString xpath, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_293(
        this.pointer, _sel_nodesForXPath_error_, xpath.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// objectsForXQuery:constants:error:
  objc.NSArray? objectsForXQuery_constants_error_(
      objc.NSString xquery,
      objc.NSDictionary? constants,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_641(
        this.pointer,
        _sel_objectsForXQuery_constants_error_,
        xquery.pointer,
        constants?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// objectsForXQuery:error:
  objc.NSArray? objectsForXQuery_error_(
      objc.NSString xquery, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_293(
        this.pointer, _sel_objectsForXQuery_error_, xquery.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSXMLNode new1() {
    final _ret = _objc_msgSend_19(_class_NSXMLNode, _sel_new);
    return NSXMLNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSXMLNode allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSXMLNode, _sel_allocWithZone_, zone);
    return NSXMLNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSXMLNode alloc() {
    final _ret = _objc_msgSend_19(_class_NSXMLNode, _sel_alloc);
    return NSXMLNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSXMLNode,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSXMLNode,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSXMLNode, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSXMLNode, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSXMLNode,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSXMLNode,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSXMLNode,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSXMLNode, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSXMLNode, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLNode = objc.getClass("NSXMLNode");
late final _sel_initWithKind_ = objc.registerName("initWithKind:");
final _objc_msgSend_606 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_document = objc.registerName("document");
late final _sel_documentWithRootElement_ =
    objc.registerName("documentWithRootElement:");
final _objc_msgSend_607 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_elementWithName_ = objc.registerName("elementWithName:");
late final _sel_elementWithName_URI_ =
    objc.registerName("elementWithName:URI:");
final _objc_msgSend_608 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_elementWithName_stringValue_ =
    objc.registerName("elementWithName:stringValue:");
late final _sel_elementWithName_children_attributes_ =
    objc.registerName("elementWithName:children:attributes:");
final _objc_msgSend_609 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributeWithName_stringValue_ =
    objc.registerName("attributeWithName:stringValue:");
late final _sel_attributeWithName_URI_stringValue_ =
    objc.registerName("attributeWithName:URI:stringValue:");
late final _sel_namespaceWithName_stringValue_ =
    objc.registerName("namespaceWithName:stringValue:");
late final _sel_processingInstructionWithName_stringValue_ =
    objc.registerName("processingInstructionWithName:stringValue:");
late final _sel_commentWithStringValue_ =
    objc.registerName("commentWithStringValue:");
late final _sel_textWithStringValue_ =
    objc.registerName("textWithStringValue:");
late final _sel_DTDNodeWithXMLString_ =
    objc.registerName("DTDNodeWithXMLString:");
final _objc_msgSend_610 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_objectValue = objc.registerName("objectValue");
late final _sel_setObjectValue_ = objc.registerName("setObjectValue:");
late final _sel_stringValue = objc.registerName("stringValue");
late final _sel_setStringValue_ = objc.registerName("setStringValue:");
late final _sel_setStringValue_resolvingEntities_ =
    objc.registerName("setStringValue:resolvingEntities:");
final _objc_msgSend_611 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_index = objc.registerName("index");
late final _sel_level = objc.registerName("level");

/// NSXMLDocument
class NSXMLDocument extends NSXMLNode {
  NSXMLDocument._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLDocument] that points to the same underlying object as [other].
  NSXMLDocument.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLDocument] that wraps the given raw object pointer.
  NSXMLDocument.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLDocument].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSXMLDocument);
  }

  /// init
  NSXMLDocument init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithXMLString:options:error:
  NSXMLDocument? initWithXMLString_options_error_(objc.NSString string,
      NSXMLNodeOptions mask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_612(
        this.pointer,
        _sel_initWithXMLString_options_error_,
        string.pointer,
        mask.value,
        error);
    return _ret.address == 0
        ? null
        : NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfURL:options:error:
  NSXMLDocument? initWithContentsOfURL_options_error_(objc.NSURL url,
      NSXMLNodeOptions mask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_613(
        this.pointer,
        _sel_initWithContentsOfURL_options_error_,
        url.pointer,
        mask.value,
        error);
    return _ret.address == 0
        ? null
        : NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:options:error:
  NSXMLDocument? initWithData_options_error_(objc.NSData data,
      NSXMLNodeOptions mask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_614(this.pointer,
        _sel_initWithData_options_error_, data.pointer, mask.value, error);
    return _ret.address == 0
        ? null
        : NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithRootElement:
  NSXMLDocument initWithRootElement_(NSXMLElement? element) {
    final _ret = _objc_msgSend_615(this.pointer, _sel_initWithRootElement_,
        element?.pointer ?? ffi.nullptr);
    return NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  /// replacementClassForClass:
  static objc.ObjCObjectBase replacementClassForClass_(
      objc.ObjCObjectBase cls) {
    final _ret = _objc_msgSend_616(
        _class_NSXMLDocument, _sel_replacementClassForClass_, cls.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// characterEncoding
  objc.NSString? get characterEncoding {
    final _ret = _objc_msgSend_20(this.pointer, _sel_characterEncoding);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCharacterEncoding:
  set characterEncoding(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setCharacterEncoding_,
        value?.pointer ?? ffi.nullptr);
  }

  /// version
  objc.NSString? get version {
    final _ret = _objc_msgSend_20(this.pointer, _sel_version);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVersion:
  set version(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setVersion_, value?.pointer ?? ffi.nullptr);
  }

  /// isStandalone
  bool get standalone {
    return _objc_msgSend_13(this.pointer, _sel_isStandalone);
  }

  /// setStandalone:
  set standalone(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setStandalone_, value);
  }

  /// documentContentKind
  NSXMLDocumentContentKind get documentContentKind {
    final _ret = _objc_msgSend_617(this.pointer, _sel_documentContentKind);
    return NSXMLDocumentContentKind.fromValue(_ret);
  }

  /// setDocumentContentKind:
  set documentContentKind(NSXMLDocumentContentKind value) {
    return _objc_msgSend_618(
        this.pointer, _sel_setDocumentContentKind_, value.value);
  }

  /// MIMEType
  objc.NSString? get MIMEType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_MIMEType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMIMEType:
  set MIMEType(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setMIMEType_, value?.pointer ?? ffi.nullptr);
  }

  /// DTD
  NSXMLDTD? get DTD {
    final _ret = _objc_msgSend_628(this.pointer, _sel_DTD);
    return _ret.address == 0
        ? null
        : NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDTD:
  set DTD(NSXMLDTD? value) {
    return _objc_msgSend_629(
        this.pointer, _sel_setDTD_, value?.pointer ?? ffi.nullptr);
  }

  /// setRootElement:
  void setRootElement_(NSXMLElement root) {
    _objc_msgSend_630(this.pointer, _sel_setRootElement_, root.pointer);
  }

  /// rootElement
  NSXMLElement? rootElement() {
    final _ret = _objc_msgSend_631(this.pointer, _sel_rootElement);
    return _ret.address == 0
        ? null
        : NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  /// insertChild:atIndex:
  void insertChild_atIndex_(NSXMLNode child, int index) {
    _objc_msgSend_619(
        this.pointer, _sel_insertChild_atIndex_, child.pointer, index);
  }

  /// insertChildren:atIndex:
  void insertChildren_atIndex_(objc.NSArray children, int index) {
    _objc_msgSend_620(
        this.pointer, _sel_insertChildren_atIndex_, children.pointer, index);
  }

  /// removeChildAtIndex:
  void removeChildAtIndex_(int index) {
    _objc_msgSend_425(this.pointer, _sel_removeChildAtIndex_, index);
  }

  /// setChildren:
  void setChildren_(objc.NSArray? children) {
    _objc_msgSend_272(
        this.pointer, _sel_setChildren_, children?.pointer ?? ffi.nullptr);
  }

  /// addChild:
  void addChild_(NSXMLNode child) {
    _objc_msgSend_621(this.pointer, _sel_addChild_, child.pointer);
  }

  /// replaceChildAtIndex:withNode:
  void replaceChildAtIndex_withNode_(int index, NSXMLNode node) {
    _objc_msgSend_622(
        this.pointer, _sel_replaceChildAtIndex_withNode_, index, node.pointer);
  }

  /// XMLData
  objc.NSData get XMLData {
    final _ret = _objc_msgSend_115(this.pointer, _sel_XMLData);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// XMLDataWithOptions:
  objc.NSData XMLDataWithOptions_(NSXMLNodeOptions options) {
    final _ret = _objc_msgSend_632(
        this.pointer, _sel_XMLDataWithOptions_, options.value);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// objectByApplyingXSLT:arguments:error:
  objc.ObjCObjectBase? objectByApplyingXSLT_arguments_error_(
      objc.NSData xslt,
      objc.NSDictionary? arguments,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_633(
        this.pointer,
        _sel_objectByApplyingXSLT_arguments_error_,
        xslt.pointer,
        arguments?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// objectByApplyingXSLTString:arguments:error:
  objc.ObjCObjectBase? objectByApplyingXSLTString_arguments_error_(
      objc.NSString xslt,
      objc.NSDictionary? arguments,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_634(
        this.pointer,
        _sel_objectByApplyingXSLTString_arguments_error_,
        xslt.pointer,
        arguments?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// objectByApplyingXSLTAtURL:arguments:error:
  objc.ObjCObjectBase? objectByApplyingXSLTAtURL_arguments_error_(
      objc.NSURL xsltURL,
      objc.NSDictionary? argument,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_635(
        this.pointer,
        _sel_objectByApplyingXSLTAtURL_arguments_error_,
        xsltURL.pointer,
        argument?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// validateAndReturnError:
  bool validateAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_39(this.pointer, _sel_validateAndReturnError_, error);
  }

  /// initWithKind:
  NSXMLDocument initWithKind_(NSXMLNodeKind kind) {
    final _ret =
        _objc_msgSend_606(this.pointer, _sel_initWithKind_, kind.value);
    return NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithKind:options:
  NSXMLDocument initWithKind_options_(
      NSXMLNodeKind kind, NSXMLNodeOptions options) {
    final _ret = _objc_msgSend_604(
        this.pointer, _sel_initWithKind_options_, kind.value, options.value);
    return NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  /// document
  static objc.ObjCObjectBase document() {
    final _ret = _objc_msgSend_19(_class_NSXMLDocument, _sel_document);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// documentWithRootElement:
  static objc.ObjCObjectBase documentWithRootElement_(NSXMLElement element) {
    final _ret = _objc_msgSend_607(
        _class_NSXMLDocument, _sel_documentWithRootElement_, element.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:
  static objc.ObjCObjectBase elementWithName_(objc.NSString name) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLDocument, _sel_elementWithName_, name.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:URI:
  static objc.ObjCObjectBase elementWithName_URI_(
      objc.NSString name, objc.NSString URI) {
    final _ret = _objc_msgSend_608(_class_NSXMLDocument,
        _sel_elementWithName_URI_, name.pointer, URI.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:stringValue:
  static objc.ObjCObjectBase elementWithName_stringValue_(
      objc.NSString name, objc.NSString string) {
    final _ret = _objc_msgSend_608(_class_NSXMLDocument,
        _sel_elementWithName_stringValue_, name.pointer, string.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:children:attributes:
  static objc.ObjCObjectBase elementWithName_children_attributes_(
      objc.NSString name, objc.NSArray? children, objc.NSArray? attributes) {
    final _ret = _objc_msgSend_609(
        _class_NSXMLDocument,
        _sel_elementWithName_children_attributes_,
        name.pointer,
        children?.pointer ?? ffi.nullptr,
        attributes?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributeWithName:stringValue:
  static objc.ObjCObjectBase attributeWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(_class_NSXMLDocument,
        _sel_attributeWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributeWithName:URI:stringValue:
  static objc.ObjCObjectBase attributeWithName_URI_stringValue_(
      objc.NSString name, objc.NSString URI, objc.NSString stringValue) {
    final _ret = _objc_msgSend_570(
        _class_NSXMLDocument,
        _sel_attributeWithName_URI_stringValue_,
        name.pointer,
        URI.pointer,
        stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// namespaceWithName:stringValue:
  static objc.ObjCObjectBase namespaceWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(_class_NSXMLDocument,
        _sel_namespaceWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// processingInstructionWithName:stringValue:
  static objc.ObjCObjectBase processingInstructionWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(
        _class_NSXMLDocument,
        _sel_processingInstructionWithName_stringValue_,
        name.pointer,
        stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// commentWithStringValue:
  static objc.ObjCObjectBase commentWithStringValue_(
      objc.NSString stringValue) {
    final _ret = _objc_msgSend_63(_class_NSXMLDocument,
        _sel_commentWithStringValue_, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// textWithStringValue:
  static objc.ObjCObjectBase textWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLDocument, _sel_textWithStringValue_, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// DTDNodeWithXMLString:
  static objc.ObjCObjectBase? DTDNodeWithXMLString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLDocument, _sel_DTDNodeWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// localNameForName:
  static objc.NSString localNameForName_(objc.NSString name) {
    final _ret = _objc_msgSend_309(
        _class_NSXMLDocument, _sel_localNameForName_, name.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// prefixForName:
  static objc.NSString? prefixForName_(objc.NSString name) {
    final _ret = _objc_msgSend_42(
        _class_NSXMLDocument, _sel_prefixForName_, name.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// predefinedNamespaceForPrefix:
  static NSXMLNode? predefinedNamespaceForPrefix_(objc.NSString name) {
    final _ret = _objc_msgSend_625(
        _class_NSXMLDocument, _sel_predefinedNamespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLDocument = objc.getClass("NSXMLDocument");
late final _sel_initWithXMLString_options_error_ =
    objc.registerName("initWithXMLString:options:error:");
final _objc_msgSend_612 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithContentsOfURL_options_error_ =
    objc.registerName("initWithContentsOfURL:options:error:");
final _objc_msgSend_613 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithData_options_error_ =
    objc.registerName("initWithData:options:error:");
final _objc_msgSend_614 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithRootElement_ =
    objc.registerName("initWithRootElement:");
final _objc_msgSend_615 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_replacementClassForClass_ =
    objc.registerName("replacementClassForClass:");
final _objc_msgSend_616 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_characterEncoding = objc.registerName("characterEncoding");
late final _sel_setCharacterEncoding_ =
    objc.registerName("setCharacterEncoding:");
late final _sel_setVersion_ = objc.registerName("setVersion:");
late final _sel_isStandalone = objc.registerName("isStandalone");
late final _sel_setStandalone_ = objc.registerName("setStandalone:");

enum NSXMLDocumentContentKind {
  NSXMLDocumentXMLKind(0),
  NSXMLDocumentXHTMLKind(1),
  NSXMLDocumentHTMLKind(2),
  NSXMLDocumentTextKind(3);

  final int value;
  const NSXMLDocumentContentKind(this.value);

  static NSXMLDocumentContentKind fromValue(int value) => switch (value) {
        0 => NSXMLDocumentXMLKind,
        1 => NSXMLDocumentXHTMLKind,
        2 => NSXMLDocumentHTMLKind,
        3 => NSXMLDocumentTextKind,
        _ => throw ArgumentError(
            "Unknown value for NSXMLDocumentContentKind: $value"),
      };
}

late final _sel_documentContentKind = objc.registerName("documentContentKind");
final _objc_msgSend_617 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDocumentContentKind_ =
    objc.registerName("setDocumentContentKind:");
final _objc_msgSend_618 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setMIMEType_ = objc.registerName("setMIMEType:");

/// NSXMLDTD
class NSXMLDTD extends NSXMLNode {
  NSXMLDTD._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLDTD] that points to the same underlying object as [other].
  NSXMLDTD.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLDTD] that wraps the given raw object pointer.
  NSXMLDTD.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLDTD].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSXMLDTD);
  }

  /// init
  NSXMLDTD init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithKind:options:
  NSXMLDTD initWithKind_options_(NSXMLNodeKind kind, NSXMLNodeOptions options) {
    final _ret = _objc_msgSend_604(
        this.pointer, _sel_initWithKind_options_, kind.value, options.value);
    return NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfURL:options:error:
  NSXMLDTD? initWithContentsOfURL_options_error_(objc.NSURL url,
      NSXMLNodeOptions mask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_613(
        this.pointer,
        _sel_initWithContentsOfURL_options_error_,
        url.pointer,
        mask.value,
        error);
    return _ret.address == 0
        ? null
        : NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:options:error:
  NSXMLDTD? initWithData_options_error_(objc.NSData data, NSXMLNodeOptions mask,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_614(this.pointer,
        _sel_initWithData_options_error_, data.pointer, mask.value, error);
    return _ret.address == 0
        ? null
        : NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  /// publicID
  objc.NSString? get publicID {
    final _ret = _objc_msgSend_20(this.pointer, _sel_publicID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPublicID:
  set publicID(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setPublicID_, value?.pointer ?? ffi.nullptr);
  }

  /// systemID
  objc.NSString? get systemID {
    final _ret = _objc_msgSend_20(this.pointer, _sel_systemID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSystemID:
  set systemID(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setSystemID_, value?.pointer ?? ffi.nullptr);
  }

  /// insertChild:atIndex:
  void insertChild_atIndex_(NSXMLNode child, int index) {
    _objc_msgSend_619(
        this.pointer, _sel_insertChild_atIndex_, child.pointer, index);
  }

  /// insertChildren:atIndex:
  void insertChildren_atIndex_(objc.NSArray children, int index) {
    _objc_msgSend_620(
        this.pointer, _sel_insertChildren_atIndex_, children.pointer, index);
  }

  /// removeChildAtIndex:
  void removeChildAtIndex_(int index) {
    _objc_msgSend_425(this.pointer, _sel_removeChildAtIndex_, index);
  }

  /// setChildren:
  void setChildren_(objc.NSArray? children) {
    _objc_msgSend_272(
        this.pointer, _sel_setChildren_, children?.pointer ?? ffi.nullptr);
  }

  /// addChild:
  void addChild_(NSXMLNode child) {
    _objc_msgSend_621(this.pointer, _sel_addChild_, child.pointer);
  }

  /// replaceChildAtIndex:withNode:
  void replaceChildAtIndex_withNode_(int index, NSXMLNode node) {
    _objc_msgSend_622(
        this.pointer, _sel_replaceChildAtIndex_withNode_, index, node.pointer);
  }

  /// entityDeclarationForName:
  NSXMLDTDNode? entityDeclarationForName_(objc.NSString name) {
    final _ret = _objc_msgSend_626(
        this.pointer, _sel_entityDeclarationForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// notationDeclarationForName:
  NSXMLDTDNode? notationDeclarationForName_(objc.NSString name) {
    final _ret = _objc_msgSend_626(
        this.pointer, _sel_notationDeclarationForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// elementDeclarationForName:
  NSXMLDTDNode? elementDeclarationForName_(objc.NSString name) {
    final _ret = _objc_msgSend_626(
        this.pointer, _sel_elementDeclarationForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// attributeDeclarationForName:elementName:
  NSXMLDTDNode? attributeDeclarationForName_elementName_(
      objc.NSString name, objc.NSString elementName) {
    final _ret = _objc_msgSend_627(
        this.pointer,
        _sel_attributeDeclarationForName_elementName_,
        name.pointer,
        elementName.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// predefinedEntityDeclarationForName:
  static NSXMLDTDNode? predefinedEntityDeclarationForName_(objc.NSString name) {
    final _ret = _objc_msgSend_626(_class_NSXMLDTD,
        _sel_predefinedEntityDeclarationForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithKind:
  NSXMLDTD initWithKind_(NSXMLNodeKind kind) {
    final _ret =
        _objc_msgSend_606(this.pointer, _sel_initWithKind_, kind.value);
    return NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  /// document
  static objc.ObjCObjectBase document() {
    final _ret = _objc_msgSend_19(_class_NSXMLDTD, _sel_document);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// documentWithRootElement:
  static objc.ObjCObjectBase documentWithRootElement_(NSXMLElement element) {
    final _ret = _objc_msgSend_607(
        _class_NSXMLDTD, _sel_documentWithRootElement_, element.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:
  static objc.ObjCObjectBase elementWithName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_63(_class_NSXMLDTD, _sel_elementWithName_, name.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:URI:
  static objc.ObjCObjectBase elementWithName_URI_(
      objc.NSString name, objc.NSString URI) {
    final _ret = _objc_msgSend_608(
        _class_NSXMLDTD, _sel_elementWithName_URI_, name.pointer, URI.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:stringValue:
  static objc.ObjCObjectBase elementWithName_stringValue_(
      objc.NSString name, objc.NSString string) {
    final _ret = _objc_msgSend_608(_class_NSXMLDTD,
        _sel_elementWithName_stringValue_, name.pointer, string.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:children:attributes:
  static objc.ObjCObjectBase elementWithName_children_attributes_(
      objc.NSString name, objc.NSArray? children, objc.NSArray? attributes) {
    final _ret = _objc_msgSend_609(
        _class_NSXMLDTD,
        _sel_elementWithName_children_attributes_,
        name.pointer,
        children?.pointer ?? ffi.nullptr,
        attributes?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributeWithName:stringValue:
  static objc.ObjCObjectBase attributeWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(_class_NSXMLDTD,
        _sel_attributeWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributeWithName:URI:stringValue:
  static objc.ObjCObjectBase attributeWithName_URI_stringValue_(
      objc.NSString name, objc.NSString URI, objc.NSString stringValue) {
    final _ret = _objc_msgSend_570(
        _class_NSXMLDTD,
        _sel_attributeWithName_URI_stringValue_,
        name.pointer,
        URI.pointer,
        stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// namespaceWithName:stringValue:
  static objc.ObjCObjectBase namespaceWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(_class_NSXMLDTD,
        _sel_namespaceWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// processingInstructionWithName:stringValue:
  static objc.ObjCObjectBase processingInstructionWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(
        _class_NSXMLDTD,
        _sel_processingInstructionWithName_stringValue_,
        name.pointer,
        stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// commentWithStringValue:
  static objc.ObjCObjectBase commentWithStringValue_(
      objc.NSString stringValue) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLDTD, _sel_commentWithStringValue_, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// textWithStringValue:
  static objc.ObjCObjectBase textWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLDTD, _sel_textWithStringValue_, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// DTDNodeWithXMLString:
  static objc.ObjCObjectBase? DTDNodeWithXMLString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLDTD, _sel_DTDNodeWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// localNameForName:
  static objc.NSString localNameForName_(objc.NSString name) {
    final _ret = _objc_msgSend_309(
        _class_NSXMLDTD, _sel_localNameForName_, name.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// prefixForName:
  static objc.NSString? prefixForName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_42(_class_NSXMLDTD, _sel_prefixForName_, name.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// predefinedNamespaceForPrefix:
  static NSXMLNode? predefinedNamespaceForPrefix_(objc.NSString name) {
    final _ret = _objc_msgSend_625(
        _class_NSXMLDTD, _sel_predefinedNamespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLDTD = objc.getClass("NSXMLDTD");
late final _sel_setPublicID_ = objc.registerName("setPublicID:");
late final _sel_setSystemID_ = objc.registerName("setSystemID:");
late final _sel_insertChild_atIndex_ =
    objc.registerName("insertChild:atIndex:");
final _objc_msgSend_619 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_insertChildren_atIndex_ =
    objc.registerName("insertChildren:atIndex:");
final _objc_msgSend_620 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_removeChildAtIndex_ = objc.registerName("removeChildAtIndex:");
late final _sel_setChildren_ = objc.registerName("setChildren:");
late final _sel_addChild_ = objc.registerName("addChild:");
final _objc_msgSend_621 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_replaceChildAtIndex_withNode_ =
    objc.registerName("replaceChildAtIndex:withNode:");
final _objc_msgSend_622 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSXMLDTDNode
class NSXMLDTDNode extends NSXMLNode {
  NSXMLDTDNode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLDTDNode] that points to the same underlying object as [other].
  NSXMLDTDNode.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLDTDNode] that wraps the given raw object pointer.
  NSXMLDTDNode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLDTDNode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSXMLDTDNode);
  }

  /// initWithXMLString:
  NSXMLDTDNode? initWithXMLString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_initWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithKind:options:
  NSXMLDTDNode initWithKind_options_(
      NSXMLNodeKind kind, NSXMLNodeOptions options) {
    final _ret = _objc_msgSend_604(
        this.pointer, _sel_initWithKind_options_, kind.value, options.value);
    return NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSXMLDTDNode init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// DTDKind
  NSXMLDTDNodeKind get DTDKind {
    final _ret = _objc_msgSend_623(this.pointer, _sel_DTDKind);
    return NSXMLDTDNodeKind.fromValue(_ret);
  }

  /// setDTDKind:
  set DTDKind(NSXMLDTDNodeKind value) {
    return _objc_msgSend_624(this.pointer, _sel_setDTDKind_, value.value);
  }

  /// isExternal
  bool get external1 {
    return _objc_msgSend_13(this.pointer, _sel_isExternal);
  }

  /// publicID
  objc.NSString? get publicID {
    final _ret = _objc_msgSend_20(this.pointer, _sel_publicID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPublicID:
  set publicID(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setPublicID_, value?.pointer ?? ffi.nullptr);
  }

  /// systemID
  objc.NSString? get systemID {
    final _ret = _objc_msgSend_20(this.pointer, _sel_systemID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSystemID:
  set systemID(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setSystemID_, value?.pointer ?? ffi.nullptr);
  }

  /// notationName
  objc.NSString? get notationName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_notationName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setNotationName:
  set notationName(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setNotationName_, value?.pointer ?? ffi.nullptr);
  }

  /// initWithKind:
  NSXMLDTDNode initWithKind_(NSXMLNodeKind kind) {
    final _ret =
        _objc_msgSend_606(this.pointer, _sel_initWithKind_, kind.value);
    return NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// document
  static objc.ObjCObjectBase document() {
    final _ret = _objc_msgSend_19(_class_NSXMLDTDNode, _sel_document);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// documentWithRootElement:
  static objc.ObjCObjectBase documentWithRootElement_(NSXMLElement element) {
    final _ret = _objc_msgSend_607(
        _class_NSXMLDTDNode, _sel_documentWithRootElement_, element.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:
  static objc.ObjCObjectBase elementWithName_(objc.NSString name) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLDTDNode, _sel_elementWithName_, name.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:URI:
  static objc.ObjCObjectBase elementWithName_URI_(
      objc.NSString name, objc.NSString URI) {
    final _ret = _objc_msgSend_608(_class_NSXMLDTDNode,
        _sel_elementWithName_URI_, name.pointer, URI.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:stringValue:
  static objc.ObjCObjectBase elementWithName_stringValue_(
      objc.NSString name, objc.NSString string) {
    final _ret = _objc_msgSend_608(_class_NSXMLDTDNode,
        _sel_elementWithName_stringValue_, name.pointer, string.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// elementWithName:children:attributes:
  static objc.ObjCObjectBase elementWithName_children_attributes_(
      objc.NSString name, objc.NSArray? children, objc.NSArray? attributes) {
    final _ret = _objc_msgSend_609(
        _class_NSXMLDTDNode,
        _sel_elementWithName_children_attributes_,
        name.pointer,
        children?.pointer ?? ffi.nullptr,
        attributes?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributeWithName:stringValue:
  static objc.ObjCObjectBase attributeWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(_class_NSXMLDTDNode,
        _sel_attributeWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributeWithName:URI:stringValue:
  static objc.ObjCObjectBase attributeWithName_URI_stringValue_(
      objc.NSString name, objc.NSString URI, objc.NSString stringValue) {
    final _ret = _objc_msgSend_570(
        _class_NSXMLDTDNode,
        _sel_attributeWithName_URI_stringValue_,
        name.pointer,
        URI.pointer,
        stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// namespaceWithName:stringValue:
  static objc.ObjCObjectBase namespaceWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(_class_NSXMLDTDNode,
        _sel_namespaceWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// processingInstructionWithName:stringValue:
  static objc.ObjCObjectBase processingInstructionWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_608(
        _class_NSXMLDTDNode,
        _sel_processingInstructionWithName_stringValue_,
        name.pointer,
        stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// commentWithStringValue:
  static objc.ObjCObjectBase commentWithStringValue_(
      objc.NSString stringValue) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLDTDNode, _sel_commentWithStringValue_, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// textWithStringValue:
  static objc.ObjCObjectBase textWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_63(
        _class_NSXMLDTDNode, _sel_textWithStringValue_, stringValue.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// DTDNodeWithXMLString:
  static objc.ObjCObjectBase? DTDNodeWithXMLString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLDTDNode, _sel_DTDNodeWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// localNameForName:
  static objc.NSString localNameForName_(objc.NSString name) {
    final _ret = _objc_msgSend_309(
        _class_NSXMLDTDNode, _sel_localNameForName_, name.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// prefixForName:
  static objc.NSString? prefixForName_(objc.NSString name) {
    final _ret = _objc_msgSend_42(
        _class_NSXMLDTDNode, _sel_prefixForName_, name.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// predefinedNamespaceForPrefix:
  static NSXMLNode? predefinedNamespaceForPrefix_(objc.NSString name) {
    final _ret = _objc_msgSend_625(
        _class_NSXMLDTDNode, _sel_predefinedNamespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLDTDNode = objc.getClass("NSXMLDTDNode");
late final _sel_initWithXMLString_ = objc.registerName("initWithXMLString:");

enum NSXMLDTDNodeKind {
  NSXMLEntityGeneralKind(1),
  NSXMLEntityParsedKind(2),
  NSXMLEntityUnparsedKind(3),
  NSXMLEntityParameterKind(4),
  NSXMLEntityPredefined(5),
  NSXMLAttributeCDATAKind(6),
  NSXMLAttributeIDKind(7),
  NSXMLAttributeIDRefKind(8),
  NSXMLAttributeIDRefsKind(9),
  NSXMLAttributeEntityKind(10),
  NSXMLAttributeEntitiesKind(11),
  NSXMLAttributeNMTokenKind(12),
  NSXMLAttributeNMTokensKind(13),
  NSXMLAttributeEnumerationKind(14),
  NSXMLAttributeNotationKind(15),
  NSXMLElementDeclarationUndefinedKind(16),
  NSXMLElementDeclarationEmptyKind(17),
  NSXMLElementDeclarationAnyKind(18),
  NSXMLElementDeclarationMixedKind(19),
  NSXMLElementDeclarationElementKind(20);

  final int value;
  const NSXMLDTDNodeKind(this.value);

  static NSXMLDTDNodeKind fromValue(int value) => switch (value) {
        1 => NSXMLEntityGeneralKind,
        2 => NSXMLEntityParsedKind,
        3 => NSXMLEntityUnparsedKind,
        4 => NSXMLEntityParameterKind,
        5 => NSXMLEntityPredefined,
        6 => NSXMLAttributeCDATAKind,
        7 => NSXMLAttributeIDKind,
        8 => NSXMLAttributeIDRefKind,
        9 => NSXMLAttributeIDRefsKind,
        10 => NSXMLAttributeEntityKind,
        11 => NSXMLAttributeEntitiesKind,
        12 => NSXMLAttributeNMTokenKind,
        13 => NSXMLAttributeNMTokensKind,
        14 => NSXMLAttributeEnumerationKind,
        15 => NSXMLAttributeNotationKind,
        16 => NSXMLElementDeclarationUndefinedKind,
        17 => NSXMLElementDeclarationEmptyKind,
        18 => NSXMLElementDeclarationAnyKind,
        19 => NSXMLElementDeclarationMixedKind,
        20 => NSXMLElementDeclarationElementKind,
        _ => throw ArgumentError("Unknown value for NSXMLDTDNodeKind: $value"),
      };
}

late final _sel_DTDKind = objc.registerName("DTDKind");
final _objc_msgSend_623 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDTDKind_ = objc.registerName("setDTDKind:");
final _objc_msgSend_624 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isExternal = objc.registerName("isExternal");
late final _sel_notationName = objc.registerName("notationName");
late final _sel_setNotationName_ = objc.registerName("setNotationName:");
late final _sel_localNameForName_ = objc.registerName("localNameForName:");
late final _sel_prefixForName_ = objc.registerName("prefixForName:");
late final _sel_predefinedNamespaceForPrefix_ =
    objc.registerName("predefinedNamespaceForPrefix:");
final _objc_msgSend_625 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_entityDeclarationForName_ =
    objc.registerName("entityDeclarationForName:");
final _objc_msgSend_626 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_notationDeclarationForName_ =
    objc.registerName("notationDeclarationForName:");
late final _sel_elementDeclarationForName_ =
    objc.registerName("elementDeclarationForName:");
late final _sel_attributeDeclarationForName_elementName_ =
    objc.registerName("attributeDeclarationForName:elementName:");
final _objc_msgSend_627 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predefinedEntityDeclarationForName_ =
    objc.registerName("predefinedEntityDeclarationForName:");
late final _sel_DTD = objc.registerName("DTD");
final _objc_msgSend_628 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDTD_ = objc.registerName("setDTD:");
final _objc_msgSend_629 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setRootElement_ = objc.registerName("setRootElement:");
final _objc_msgSend_630 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_rootElement = objc.registerName("rootElement");
final _objc_msgSend_631 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_XMLData = objc.registerName("XMLData");
late final _sel_XMLDataWithOptions_ = objc.registerName("XMLDataWithOptions:");
final _objc_msgSend_632 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_objectByApplyingXSLT_arguments_error_ =
    objc.registerName("objectByApplyingXSLT:arguments:error:");
final _objc_msgSend_633 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_objectByApplyingXSLTString_arguments_error_ =
    objc.registerName("objectByApplyingXSLTString:arguments:error:");
final _objc_msgSend_634 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_objectByApplyingXSLTAtURL_arguments_error_ =
    objc.registerName("objectByApplyingXSLTAtURL:arguments:error:");
final _objc_msgSend_635 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_validateAndReturnError_ =
    objc.registerName("validateAndReturnError:");
late final _sel_rootDocument = objc.registerName("rootDocument");
final _objc_msgSend_636 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_parent = objc.registerName("parent");
final _objc_msgSend_637 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_childCount = objc.registerName("childCount");
late final _sel_children = objc.registerName("children");
late final _sel_childAtIndex_ = objc.registerName("childAtIndex:");
final _objc_msgSend_638 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_previousSibling = objc.registerName("previousSibling");
late final _sel_nextSibling = objc.registerName("nextSibling");
late final _sel_previousNode = objc.registerName("previousNode");
late final _sel_nextNode = objc.registerName("nextNode");
late final _sel_detach = objc.registerName("detach");
late final _sel_XPath = objc.registerName("XPath");
late final _sel_localName = objc.registerName("localName");
late final _sel_prefix = objc.registerName("prefix");
late final _sel_URI = objc.registerName("URI");
late final _sel_setURI_ = objc.registerName("setURI:");
late final _sel_XMLString = objc.registerName("XMLString");
late final _sel_XMLStringWithOptions_ =
    objc.registerName("XMLStringWithOptions:");
final _objc_msgSend_639 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_canonicalXMLStringPreservingComments_ =
    objc.registerName("canonicalXMLStringPreservingComments:");
final _objc_msgSend_640 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_nodesForXPath_error_ =
    objc.registerName("nodesForXPath:error:");
late final _sel_objectsForXQuery_constants_error_ =
    objc.registerName("objectsForXQuery:constants:error:");
final _objc_msgSend_641 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_objectsForXQuery_error_ =
    objc.registerName("objectsForXQuery:error:");
late final _sel_addAttribute_ = objc.registerName("addAttribute:");
late final _sel_removeAttributeForName_ =
    objc.registerName("removeAttributeForName:");
late final _sel_attributes = objc.registerName("attributes");
late final _sel_setAttributes_ = objc.registerName("setAttributes:");
late final _sel_setAttributesWithDictionary_ =
    objc.registerName("setAttributesWithDictionary:");
final _objc_msgSend_642 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributeForName_ = objc.registerName("attributeForName:");
late final _sel_attributeForLocalName_URI_ =
    objc.registerName("attributeForLocalName:URI:");
final _objc_msgSend_643 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addNamespace_ = objc.registerName("addNamespace:");
late final _sel_removeNamespaceForPrefix_ =
    objc.registerName("removeNamespaceForPrefix:");
late final _sel_namespaces = objc.registerName("namespaces");
late final _sel_setNamespaces_ = objc.registerName("setNamespaces:");
late final _sel_namespaceForPrefix_ = objc.registerName("namespaceForPrefix:");
late final _sel_resolveNamespaceForName_ =
    objc.registerName("resolveNamespaceForName:");
late final _sel_resolvePrefixForNamespaceURI_ =
    objc.registerName("resolvePrefixForNamespaceURI:");
late final _sel_normalizeAdjacentTextNodesPreservingCDATA_ =
    objc.registerName("normalizeAdjacentTextNodesPreservingCDATA:");
late final _sel_setAttributesAsDictionary_ =
    objc.registerName("setAttributesAsDictionary:");

/// NSScriptClassDescription
class NSScriptClassDescription extends NSClassDescription {
  NSScriptClassDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSScriptClassDescription] that points to the same underlying object as [other].
  NSScriptClassDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSScriptClassDescription] that wraps the given raw object pointer.
  NSScriptClassDescription.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSScriptClassDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSScriptClassDescription);
  }

  /// classDescriptionForClass:
  static NSClassDescription? classDescriptionForClass_(
      objc.ObjCObjectBase aClass) {
    final _ret = _objc_msgSend_695(_class_NSScriptClassDescription,
        _sel_classDescriptionForClass_, aClass.pointer);
    return _ret.address == 0
        ? null
        : NSClassDescription.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithSuiteName:className:dictionary:
  NSScriptClassDescription? initWithSuiteName_className_dictionary_(
      objc.NSString suiteName,
      objc.NSString className,
      objc.NSDictionary? classDeclaration) {
    final _ret = _objc_msgSend_645(
        this.pointer,
        _sel_initWithSuiteName_className_dictionary_,
        suiteName.pointer,
        className.pointer,
        classDeclaration?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// suiteName
  objc.NSString? get suiteName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_suiteName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// className
  objc.NSString? get className {
    final _ret = _objc_msgSend_20(this.pointer, _sel_className);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// implementationClassName
  objc.NSString? get implementationClassName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_implementationClassName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// superclassDescription
  NSScriptClassDescription? get superclassDescription {
    final _ret = _objc_msgSend_646(this.pointer, _sel_superclassDescription);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// appleEventCode
  int get appleEventCode {
    return _objc_msgSend_647(this.pointer, _sel_appleEventCode);
  }

  /// matchesAppleEventCode:
  bool matchesAppleEventCode_(int appleEventCode) {
    return _objc_msgSend_648(
        this.pointer, _sel_matchesAppleEventCode_, appleEventCode);
  }

  /// supportsCommand:
  bool supportsCommand_(NSScriptCommandDescription commandDescription) {
    return _objc_msgSend_690(
        this.pointer, _sel_supportsCommand_, commandDescription.pointer);
  }

  /// selectorForCommand:
  ffi.Pointer<objc.ObjCSelector> selectorForCommand_(
      NSScriptCommandDescription commandDescription) {
    return _objc_msgSend_691(
        this.pointer, _sel_selectorForCommand_, commandDescription.pointer);
  }

  /// typeForKey:
  objc.NSString? typeForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_42(this.pointer, _sel_typeForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// classDescriptionForKey:
  NSScriptClassDescription? classDescriptionForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_692(
        this.pointer, _sel_classDescriptionForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// appleEventCodeForKey:
  int appleEventCodeForKey_(objc.NSString key) {
    return _objc_msgSend_649(
        this.pointer, _sel_appleEventCodeForKey_, key.pointer);
  }

  /// keyWithAppleEventCode:
  objc.NSString? keyWithAppleEventCode_(int appleEventCode) {
    final _ret = _objc_msgSend_693(
        this.pointer, _sel_keyWithAppleEventCode_, appleEventCode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultSubcontainerAttributeKey
  objc.NSString? get defaultSubcontainerAttributeKey {
    final _ret =
        _objc_msgSend_20(this.pointer, _sel_defaultSubcontainerAttributeKey);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// isLocationRequiredToCreateForKey:
  bool isLocationRequiredToCreateForKey_(objc.NSString toManyRelationshipKey) {
    return _objc_msgSend_31(this.pointer,
        _sel_isLocationRequiredToCreateForKey_, toManyRelationshipKey.pointer);
  }

  /// hasPropertyForKey:
  bool hasPropertyForKey_(objc.NSString key) {
    return _objc_msgSend_31(this.pointer, _sel_hasPropertyForKey_, key.pointer);
  }

  /// hasOrderedToManyRelationshipForKey:
  bool hasOrderedToManyRelationshipForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        this.pointer, _sel_hasOrderedToManyRelationshipForKey_, key.pointer);
  }

  /// hasReadablePropertyForKey:
  bool hasReadablePropertyForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        this.pointer, _sel_hasReadablePropertyForKey_, key.pointer);
  }

  /// hasWritablePropertyForKey:
  bool hasWritablePropertyForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        this.pointer, _sel_hasWritablePropertyForKey_, key.pointer);
  }

  /// isReadOnlyKey:
  bool isReadOnlyKey_(objc.NSString key) {
    return _objc_msgSend_31(this.pointer, _sel_isReadOnlyKey_, key.pointer);
  }

  /// registerClassDescription:forClass:
  static void registerClassDescription_forClass_(
      NSClassDescription description, objc.ObjCObjectBase aClass) {
    _objc_msgSend_694(
        _class_NSScriptClassDescription,
        _sel_registerClassDescription_forClass_,
        description.pointer,
        aClass.pointer);
  }

  /// invalidateClassDescriptionCache
  static void invalidateClassDescriptionCache() {
    _objc_msgSend_7(
        _class_NSScriptClassDescription, _sel_invalidateClassDescriptionCache);
  }

  /// init
  NSScriptClassDescription init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSScriptClassDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSScriptClassDescription new1() {
    final _ret = _objc_msgSend_19(_class_NSScriptClassDescription, _sel_new);
    return NSScriptClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSScriptClassDescription allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSScriptClassDescription, _sel_allocWithZone_, zone);
    return NSScriptClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSScriptClassDescription alloc() {
    final _ret = _objc_msgSend_19(_class_NSScriptClassDescription, _sel_alloc);
    return NSScriptClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSScriptClassDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSScriptClassDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSScriptClassDescription, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSScriptClassDescription, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSScriptClassDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSScriptClassDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSScriptClassDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSScriptClassDescription, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSScriptClassDescription, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSScriptClassDescription =
    objc.getClass("NSScriptClassDescription");
late final _sel_classDescriptionForClass_ =
    objc.registerName("classDescriptionForClass:");
final _objc_msgSend_644 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithSuiteName_className_dictionary_ =
    objc.registerName("initWithSuiteName:className:dictionary:");
final _objc_msgSend_645 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_suiteName = objc.registerName("suiteName");
late final _sel_className = objc.registerName("className");
late final _sel_implementationClassName =
    objc.registerName("implementationClassName");
late final _sel_superclassDescription =
    objc.registerName("superclassDescription");
final _objc_msgSend_646 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_appleEventCode = objc.registerName("appleEventCode");
final _objc_msgSend_647 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_matchesAppleEventCode_ =
    objc.registerName("matchesAppleEventCode:");
final _objc_msgSend_648 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

/// NSScriptCommandDescription
class NSScriptCommandDescription extends objc.NSObject {
  NSScriptCommandDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSScriptCommandDescription] that points to the same underlying object as [other].
  NSScriptCommandDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSScriptCommandDescription] that wraps the given raw object pointer.
  NSScriptCommandDescription.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSScriptCommandDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSScriptCommandDescription);
  }

  /// init
  NSScriptCommandDescription init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSScriptCommandDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithSuiteName:commandName:dictionary:
  NSScriptCommandDescription? initWithSuiteName_commandName_dictionary_(
      objc.NSString suiteName,
      objc.NSString commandName,
      objc.NSDictionary? commandDeclaration) {
    final _ret = _objc_msgSend_645(
        this.pointer,
        _sel_initWithSuiteName_commandName_dictionary_,
        suiteName.pointer,
        commandName.pointer,
        commandDeclaration?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSScriptCommandDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithCoder:
  NSScriptCommandDescription? initWithCoder_(objc.NSCoder inCoder) {
    final _ret =
        _objc_msgSend_242(this.pointer, _sel_initWithCoder_, inCoder.pointer);
    return _ret.address == 0
        ? null
        : NSScriptCommandDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// suiteName
  objc.NSString get suiteName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_suiteName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// commandName
  objc.NSString get commandName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_commandName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// appleEventClassCode
  int get appleEventClassCode {
    return _objc_msgSend_647(this.pointer, _sel_appleEventClassCode);
  }

  /// appleEventCode
  int get appleEventCode {
    return _objc_msgSend_647(this.pointer, _sel_appleEventCode);
  }

  /// commandClassName
  objc.NSString get commandClassName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_commandClassName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// returnType
  objc.NSString? get returnType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_returnType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// appleEventCodeForReturnType
  int get appleEventCodeForReturnType {
    return _objc_msgSend_647(this.pointer, _sel_appleEventCodeForReturnType);
  }

  /// argumentNames
  objc.NSArray get argumentNames {
    final _ret = _objc_msgSend_33(this.pointer, _sel_argumentNames);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// typeForArgumentWithName:
  objc.NSString? typeForArgumentWithName_(objc.NSString argumentName) {
    final _ret = _objc_msgSend_42(
        this.pointer, _sel_typeForArgumentWithName_, argumentName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// appleEventCodeForArgumentWithName:
  int appleEventCodeForArgumentWithName_(objc.NSString argumentName) {
    return _objc_msgSend_649(this.pointer,
        _sel_appleEventCodeForArgumentWithName_, argumentName.pointer);
  }

  /// isOptionalArgumentWithName:
  bool isOptionalArgumentWithName_(objc.NSString argumentName) {
    return _objc_msgSend_31(
        this.pointer, _sel_isOptionalArgumentWithName_, argumentName.pointer);
  }

  /// createCommandInstance
  NSScriptCommand createCommandInstance() {
    final _ret = _objc_msgSend_688(this.pointer, _sel_createCommandInstance);
    return NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  /// createCommandInstanceWithZone:
  NSScriptCommand createCommandInstanceWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_689(
        this.pointer, _sel_createCommandInstanceWithZone_, zone);
    return NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSScriptCommandDescription new1() {
    final _ret = _objc_msgSend_19(_class_NSScriptCommandDescription, _sel_new);
    return NSScriptCommandDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSScriptCommandDescription allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSScriptCommandDescription, _sel_allocWithZone_, zone);
    return NSScriptCommandDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSScriptCommandDescription alloc() {
    final _ret =
        _objc_msgSend_19(_class_NSScriptCommandDescription, _sel_alloc);
    return NSScriptCommandDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSScriptCommandDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSScriptCommandDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_NSScriptCommandDescription,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSScriptCommandDescription, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSScriptCommandDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSScriptCommandDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSScriptCommandDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSScriptCommandDescription, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSScriptCommandDescription, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSScriptCommandDescription =
    objc.getClass("NSScriptCommandDescription");
late final _sel_initWithSuiteName_commandName_dictionary_ =
    objc.registerName("initWithSuiteName:commandName:dictionary:");
late final _sel_commandName = objc.registerName("commandName");
late final _sel_appleEventClassCode = objc.registerName("appleEventClassCode");
late final _sel_commandClassName = objc.registerName("commandClassName");
late final _sel_returnType = objc.registerName("returnType");
late final _sel_appleEventCodeForReturnType =
    objc.registerName("appleEventCodeForReturnType");
late final _sel_argumentNames = objc.registerName("argumentNames");
late final _sel_typeForArgumentWithName_ =
    objc.registerName("typeForArgumentWithName:");
late final _sel_appleEventCodeForArgumentWithName_ =
    objc.registerName("appleEventCodeForArgumentWithName:");
final _objc_msgSend_649 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isOptionalArgumentWithName_ =
    objc.registerName("isOptionalArgumentWithName:");

/// NSScriptCommand
class NSScriptCommand extends objc.NSObject {
  NSScriptCommand._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSScriptCommand] that points to the same underlying object as [other].
  NSScriptCommand.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSScriptCommand] that wraps the given raw object pointer.
  NSScriptCommand.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSScriptCommand].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSScriptCommand);
  }

  /// initWithCommandDescription:
  NSScriptCommand initWithCommandDescription_(
      NSScriptCommandDescription commandDef) {
    final _ret = _objc_msgSend_650(
        this.pointer, _sel_initWithCommandDescription_, commandDef.pointer);
    return NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCoder:
  NSScriptCommand? initWithCoder_(objc.NSCoder inCoder) {
    final _ret =
        _objc_msgSend_242(this.pointer, _sel_initWithCoder_, inCoder.pointer);
    return _ret.address == 0
        ? null
        : NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  /// commandDescription
  NSScriptCommandDescription get commandDescription {
    final _ret = _objc_msgSend_651(this.pointer, _sel_commandDescription);
    return NSScriptCommandDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// directParameter
  objc.ObjCObjectBase? get directParameter {
    final _ret = _objc_msgSend_85(this.pointer, _sel_directParameter);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDirectParameter:
  set directParameter(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDirectParameter_, value?.pointer ?? ffi.nullptr);
  }

  /// receiversSpecifier
  NSScriptObjectSpecifier? get receiversSpecifier {
    final _ret = _objc_msgSend_680(this.pointer, _sel_receiversSpecifier);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setReceiversSpecifier:
  set receiversSpecifier(NSScriptObjectSpecifier? value) {
    return _objc_msgSend_681(this.pointer, _sel_setReceiversSpecifier_,
        value?.pointer ?? ffi.nullptr);
  }

  /// evaluatedReceivers
  objc.ObjCObjectBase? get evaluatedReceivers {
    final _ret = _objc_msgSend_85(this.pointer, _sel_evaluatedReceivers);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// arguments
  objc.NSDictionary? get arguments {
    final _ret = _objc_msgSend_84(this.pointer, _sel_arguments);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setArguments:
  set arguments(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer, _sel_setArguments_, value?.pointer ?? ffi.nullptr);
  }

  /// evaluatedArguments
  objc.NSDictionary? get evaluatedArguments {
    final _ret = _objc_msgSend_84(this.pointer, _sel_evaluatedArguments);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// isWellFormed
  bool get wellFormed {
    return _objc_msgSend_13(this.pointer, _sel_isWellFormed);
  }

  /// performDefaultImplementation
  objc.ObjCObjectBase? performDefaultImplementation() {
    final _ret =
        _objc_msgSend_85(this.pointer, _sel_performDefaultImplementation);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// executeCommand
  objc.ObjCObjectBase? executeCommand() {
    final _ret = _objc_msgSend_85(this.pointer, _sel_executeCommand);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// scriptErrorNumber
  int get scriptErrorNumber {
    return _objc_msgSend_125(this.pointer, _sel_scriptErrorNumber);
  }

  /// setScriptErrorNumber:
  set scriptErrorNumber(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setScriptErrorNumber_, value);
  }

  /// scriptErrorOffendingObjectDescriptor
  NSAppleEventDescriptor? get scriptErrorOffendingObjectDescriptor {
    final _ret = _objc_msgSend_685(
        this.pointer, _sel_scriptErrorOffendingObjectDescriptor);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setScriptErrorOffendingObjectDescriptor:
  set scriptErrorOffendingObjectDescriptor(NSAppleEventDescriptor? value) {
    return _objc_msgSend_686(
        this.pointer,
        _sel_setScriptErrorOffendingObjectDescriptor_,
        value?.pointer ?? ffi.nullptr);
  }

  /// scriptErrorExpectedTypeDescriptor
  NSAppleEventDescriptor? get scriptErrorExpectedTypeDescriptor {
    final _ret =
        _objc_msgSend_685(this.pointer, _sel_scriptErrorExpectedTypeDescriptor);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setScriptErrorExpectedTypeDescriptor:
  set scriptErrorExpectedTypeDescriptor(NSAppleEventDescriptor? value) {
    return _objc_msgSend_686(
        this.pointer,
        _sel_setScriptErrorExpectedTypeDescriptor_,
        value?.pointer ?? ffi.nullptr);
  }

  /// scriptErrorString
  objc.NSString? get scriptErrorString {
    final _ret = _objc_msgSend_20(this.pointer, _sel_scriptErrorString);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setScriptErrorString:
  set scriptErrorString(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setScriptErrorString_,
        value?.pointer ?? ffi.nullptr);
  }

  /// currentCommand
  static NSScriptCommand? currentCommand() {
    final _ret = _objc_msgSend_687(_class_NSScriptCommand, _sel_currentCommand);
    return _ret.address == 0
        ? null
        : NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  /// appleEvent
  NSAppleEventDescriptor? get appleEvent {
    final _ret = _objc_msgSend_685(this.pointer, _sel_appleEvent);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// suspendExecution
  void suspendExecution() {
    _objc_msgSend_7(this.pointer, _sel_suspendExecution);
  }

  /// resumeExecutionWithResult:
  void resumeExecutionWithResult_(objc.ObjCObjectBase? result) {
    _objc_msgSend_229(this.pointer, _sel_resumeExecutionWithResult_,
        result?.pointer ?? ffi.nullptr);
  }

  /// init
  NSScriptCommand init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSScriptCommand new1() {
    final _ret = _objc_msgSend_19(_class_NSScriptCommand, _sel_new);
    return NSScriptCommand.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSScriptCommand allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSScriptCommand, _sel_allocWithZone_, zone);
    return NSScriptCommand.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSScriptCommand alloc() {
    final _ret = _objc_msgSend_19(_class_NSScriptCommand, _sel_alloc);
    return NSScriptCommand.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSScriptCommand,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSScriptCommand,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSScriptCommand, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSScriptCommand, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSScriptCommand,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSScriptCommand,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSScriptCommand,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSScriptCommand, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSScriptCommand, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSScriptCommand = objc.getClass("NSScriptCommand");
late final _sel_initWithCommandDescription_ =
    objc.registerName("initWithCommandDescription:");
final _objc_msgSend_650 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_commandDescription = objc.registerName("commandDescription");
final _objc_msgSend_651 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_directParameter = objc.registerName("directParameter");
late final _sel_setDirectParameter_ = objc.registerName("setDirectParameter:");

/// NSScriptObjectSpecifier
class NSScriptObjectSpecifier extends objc.NSObject {
  NSScriptObjectSpecifier._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSScriptObjectSpecifier] that points to the same underlying object as [other].
  NSScriptObjectSpecifier.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSScriptObjectSpecifier] that wraps the given raw object pointer.
  NSScriptObjectSpecifier.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSScriptObjectSpecifier].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSScriptObjectSpecifier);
  }

  /// objectSpecifierWithDescriptor:
  static NSScriptObjectSpecifier? objectSpecifierWithDescriptor_(
      NSAppleEventDescriptor descriptor) {
    final _ret = _objc_msgSend_677(_class_NSScriptObjectSpecifier,
        _sel_objectSpecifierWithDescriptor_, descriptor.pointer);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithContainerSpecifier:key:
  NSScriptObjectSpecifier initWithContainerSpecifier_key_(
      NSScriptObjectSpecifier container, objc.NSString property) {
    final _ret = _objc_msgSend_678(
        this.pointer,
        _sel_initWithContainerSpecifier_key_,
        container.pointer,
        property.pointer);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithContainerClassDescription:containerSpecifier:key:
  NSScriptObjectSpecifier
      initWithContainerClassDescription_containerSpecifier_key_(
          NSScriptClassDescription classDesc,
          NSScriptObjectSpecifier? container,
          objc.NSString property) {
    final _ret = _objc_msgSend_679(
        this.pointer,
        _sel_initWithContainerClassDescription_containerSpecifier_key_,
        classDesc.pointer,
        container?.pointer ?? ffi.nullptr,
        property.pointer);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithCoder:
  NSScriptObjectSpecifier? initWithCoder_(objc.NSCoder inCoder) {
    final _ret =
        _objc_msgSend_242(this.pointer, _sel_initWithCoder_, inCoder.pointer);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// childSpecifier
  NSScriptObjectSpecifier? get childSpecifier {
    final _ret = _objc_msgSend_680(this.pointer, _sel_childSpecifier);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setChildSpecifier:
  set childSpecifier(NSScriptObjectSpecifier? value) {
    return _objc_msgSend_681(
        this.pointer, _sel_setChildSpecifier_, value?.pointer ?? ffi.nullptr);
  }

  /// containerSpecifier
  NSScriptObjectSpecifier? get containerSpecifier {
    final _ret = _objc_msgSend_680(this.pointer, _sel_containerSpecifier);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setContainerSpecifier:
  set containerSpecifier(NSScriptObjectSpecifier? value) {
    return _objc_msgSend_681(this.pointer, _sel_setContainerSpecifier_,
        value?.pointer ?? ffi.nullptr);
  }

  /// containerIsObjectBeingTested
  bool get containerIsObjectBeingTested {
    return _objc_msgSend_13(this.pointer, _sel_containerIsObjectBeingTested);
  }

  /// setContainerIsObjectBeingTested:
  set containerIsObjectBeingTested(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setContainerIsObjectBeingTested_, value);
  }

  /// containerIsRangeContainerObject
  bool get containerIsRangeContainerObject {
    return _objc_msgSend_13(this.pointer, _sel_containerIsRangeContainerObject);
  }

  /// setContainerIsRangeContainerObject:
  set containerIsRangeContainerObject(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setContainerIsRangeContainerObject_, value);
  }

  /// key
  objc.NSString get key {
    final _ret = _objc_msgSend_11(this.pointer, _sel_key);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setKey:
  set key(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setKey_, value.pointer);
  }

  /// containerClassDescription
  NSScriptClassDescription? get containerClassDescription {
    final _ret =
        _objc_msgSend_646(this.pointer, _sel_containerClassDescription);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setContainerClassDescription:
  set containerClassDescription(NSScriptClassDescription? value) {
    return _objc_msgSend_682(this.pointer, _sel_setContainerClassDescription_,
        value?.pointer ?? ffi.nullptr);
  }

  /// keyClassDescription
  NSScriptClassDescription? get keyClassDescription {
    final _ret = _objc_msgSend_646(this.pointer, _sel_keyClassDescription);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// indicesOfObjectsByEvaluatingWithContainer:count:
  ffi.Pointer<ffi.Long> indicesOfObjectsByEvaluatingWithContainer_count_(
      objc.ObjCObjectBase container, ffi.Pointer<ffi.Long> count) {
    return _objc_msgSend_683(
        this.pointer,
        _sel_indicesOfObjectsByEvaluatingWithContainer_count_,
        container.pointer,
        count);
  }

  /// objectsByEvaluatingWithContainers:
  objc.ObjCObjectBase? objectsByEvaluatingWithContainers_(
      objc.ObjCObjectBase containers) {
    final _ret = _objc_msgSend_684(this.pointer,
        _sel_objectsByEvaluatingWithContainers_, containers.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// objectsByEvaluatingSpecifier
  objc.ObjCObjectBase? get objectsByEvaluatingSpecifier {
    final _ret =
        _objc_msgSend_85(this.pointer, _sel_objectsByEvaluatingSpecifier);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// evaluationErrorNumber
  int get evaluationErrorNumber {
    return _objc_msgSend_125(this.pointer, _sel_evaluationErrorNumber);
  }

  /// setEvaluationErrorNumber:
  set evaluationErrorNumber(int value) {
    return _objc_msgSend_144(
        this.pointer, _sel_setEvaluationErrorNumber_, value);
  }

  /// evaluationErrorSpecifier
  NSScriptObjectSpecifier? get evaluationErrorSpecifier {
    final _ret = _objc_msgSend_680(this.pointer, _sel_evaluationErrorSpecifier);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// descriptor
  NSAppleEventDescriptor? get descriptor {
    final _ret = _objc_msgSend_685(this.pointer, _sel_descriptor);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// init
  NSScriptObjectSpecifier init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSScriptObjectSpecifier new1() {
    final _ret = _objc_msgSend_19(_class_NSScriptObjectSpecifier, _sel_new);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSScriptObjectSpecifier allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSScriptObjectSpecifier, _sel_allocWithZone_, zone);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSScriptObjectSpecifier alloc() {
    final _ret = _objc_msgSend_19(_class_NSScriptObjectSpecifier, _sel_alloc);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSScriptObjectSpecifier,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSScriptObjectSpecifier,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSScriptObjectSpecifier, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSScriptObjectSpecifier, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSScriptObjectSpecifier,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSScriptObjectSpecifier,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSScriptObjectSpecifier,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSScriptObjectSpecifier, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSScriptObjectSpecifier, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSScriptObjectSpecifier =
    objc.getClass("NSScriptObjectSpecifier");

/// NSAppleEventDescriptor
class NSAppleEventDescriptor extends objc.NSObject {
  NSAppleEventDescriptor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSAppleEventDescriptor] that points to the same underlying object as [other].
  NSAppleEventDescriptor.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSAppleEventDescriptor] that wraps the given raw object pointer.
  NSAppleEventDescriptor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSAppleEventDescriptor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSAppleEventDescriptor);
  }

  /// nullDescriptor
  static NSAppleEventDescriptor nullDescriptor() {
    final _ret =
        _objc_msgSend_652(_class_NSAppleEventDescriptor, _sel_nullDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithDescriptorType:bytes:length:
  static NSAppleEventDescriptor? descriptorWithDescriptorType_bytes_length_(
      int descriptorType, ffi.Pointer<ffi.Void> bytes, int byteCount) {
    final _ret = _objc_msgSend_653(
        _class_NSAppleEventDescriptor,
        _sel_descriptorWithDescriptorType_bytes_length_,
        descriptorType,
        bytes,
        byteCount);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// descriptorWithDescriptorType:data:
  static NSAppleEventDescriptor? descriptorWithDescriptorType_data_(
      int descriptorType, objc.NSData? data) {
    final _ret = _objc_msgSend_654(
        _class_NSAppleEventDescriptor,
        _sel_descriptorWithDescriptorType_data_,
        descriptorType,
        data?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// descriptorWithBoolean:
  static NSAppleEventDescriptor descriptorWithBoolean_(int boolean) {
    final _ret = _objc_msgSend_655(
        _class_NSAppleEventDescriptor, _sel_descriptorWithBoolean_, boolean);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithEnumCode:
  static NSAppleEventDescriptor descriptorWithEnumCode_(int enumerator) {
    final _ret = _objc_msgSend_656(_class_NSAppleEventDescriptor,
        _sel_descriptorWithEnumCode_, enumerator);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithInt32:
  static NSAppleEventDescriptor descriptorWithInt32_(int signedInt) {
    final _ret = _objc_msgSend_657(
        _class_NSAppleEventDescriptor, _sel_descriptorWithInt32_, signedInt);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithDouble:
  static NSAppleEventDescriptor descriptorWithDouble_(double doubleValue) {
    final _ret = _objc_msgSend_658(
        _class_NSAppleEventDescriptor, _sel_descriptorWithDouble_, doubleValue);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithTypeCode:
  static NSAppleEventDescriptor descriptorWithTypeCode_(int typeCode) {
    final _ret = _objc_msgSend_656(
        _class_NSAppleEventDescriptor, _sel_descriptorWithTypeCode_, typeCode);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithString:
  static NSAppleEventDescriptor descriptorWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_659(_class_NSAppleEventDescriptor,
        _sel_descriptorWithString_, string.pointer);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithDate:
  static NSAppleEventDescriptor descriptorWithDate_(objc.NSDate date) {
    final _ret = _objc_msgSend_660(
        _class_NSAppleEventDescriptor, _sel_descriptorWithDate_, date.pointer);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithFileURL:
  static NSAppleEventDescriptor descriptorWithFileURL_(objc.NSURL fileURL) {
    final _ret = _objc_msgSend_661(_class_NSAppleEventDescriptor,
        _sel_descriptorWithFileURL_, fileURL.pointer);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:
  static NSAppleEventDescriptor
      appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_(
          int eventClass,
          int eventID,
          NSAppleEventDescriptor? targetDescriptor,
          int returnID,
          int transactionID) {
    final _ret = _objc_msgSend_662(
        _class_NSAppleEventDescriptor,
        _sel_appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_,
        eventClass,
        eventID,
        targetDescriptor?.pointer ?? ffi.nullptr,
        returnID,
        transactionID);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// listDescriptor
  static NSAppleEventDescriptor listDescriptor() {
    final _ret =
        _objc_msgSend_652(_class_NSAppleEventDescriptor, _sel_listDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// recordDescriptor
  static NSAppleEventDescriptor recordDescriptor() {
    final _ret =
        _objc_msgSend_652(_class_NSAppleEventDescriptor, _sel_recordDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// currentProcessDescriptor
  static NSAppleEventDescriptor currentProcessDescriptor() {
    final _ret = _objc_msgSend_652(
        _class_NSAppleEventDescriptor, _sel_currentProcessDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithProcessIdentifier:
  static NSAppleEventDescriptor descriptorWithProcessIdentifier_(
      int processIdentifier) {
    final _ret = _objc_msgSend_657(_class_NSAppleEventDescriptor,
        _sel_descriptorWithProcessIdentifier_, processIdentifier);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithBundleIdentifier:
  static NSAppleEventDescriptor descriptorWithBundleIdentifier_(
      objc.NSString bundleIdentifier) {
    final _ret = _objc_msgSend_659(_class_NSAppleEventDescriptor,
        _sel_descriptorWithBundleIdentifier_, bundleIdentifier.pointer);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// descriptorWithApplicationURL:
  static NSAppleEventDescriptor descriptorWithApplicationURL_(
      objc.NSURL applicationURL) {
    final _ret = _objc_msgSend_661(_class_NSAppleEventDescriptor,
        _sel_descriptorWithApplicationURL_, applicationURL.pointer);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithAEDescNoCopy:
  NSAppleEventDescriptor initWithAEDescNoCopy_(ffi.Pointer<AEDesc> aeDesc) {
    final _ret =
        _objc_msgSend_663(this.pointer, _sel_initWithAEDescNoCopy_, aeDesc);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithDescriptorType:bytes:length:
  NSAppleEventDescriptor? initWithDescriptorType_bytes_length_(
      int descriptorType, ffi.Pointer<ffi.Void> bytes, int byteCount) {
    final _ret = _objc_msgSend_664(
        this.pointer,
        _sel_initWithDescriptorType_bytes_length_,
        descriptorType,
        bytes,
        byteCount);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithDescriptorType:data:
  NSAppleEventDescriptor? initWithDescriptorType_data_(
      int descriptorType, objc.NSData? data) {
    final _ret = _objc_msgSend_665(
        this.pointer,
        _sel_initWithDescriptorType_data_,
        descriptorType,
        data?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithEventClass:eventID:targetDescriptor:returnID:transactionID:
  NSAppleEventDescriptor
      initWithEventClass_eventID_targetDescriptor_returnID_transactionID_(
          int eventClass,
          int eventID,
          NSAppleEventDescriptor? targetDescriptor,
          int returnID,
          int transactionID) {
    final _ret = _objc_msgSend_666(
        this.pointer,
        _sel_initWithEventClass_eventID_targetDescriptor_returnID_transactionID_,
        eventClass,
        eventID,
        targetDescriptor?.pointer ?? ffi.nullptr,
        returnID,
        transactionID);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initListDescriptor
  NSAppleEventDescriptor initListDescriptor() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_initListDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initRecordDescriptor
  NSAppleEventDescriptor initRecordDescriptor() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_initRecordDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// aeDesc
  ffi.Pointer<AEDesc> get aeDesc {
    return _objc_msgSend_667(this.pointer, _sel_aeDesc);
  }

  /// descriptorType
  int get descriptorType {
    return _objc_msgSend_647(this.pointer, _sel_descriptorType);
  }

  /// data
  objc.NSData get data {
    final _ret = _objc_msgSend_115(this.pointer, _sel_data);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// booleanValue
  int get booleanValue {
    return _objc_msgSend_668(this.pointer, _sel_booleanValue);
  }

  /// enumCodeValue
  int get enumCodeValue {
    return _objc_msgSend_647(this.pointer, _sel_enumCodeValue);
  }

  /// int32Value
  int get int32Value {
    return _objc_msgSend_276(this.pointer, _sel_int32Value);
  }

  /// doubleValue
  double get doubleValue {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_doubleValue)
        : _objc_msgSend_18(this.pointer, _sel_doubleValue);
  }

  /// typeCodeValue
  int get typeCodeValue {
    return _objc_msgSend_647(this.pointer, _sel_typeCodeValue);
  }

  /// stringValue
  objc.NSString? get stringValue {
    final _ret = _objc_msgSend_20(this.pointer, _sel_stringValue);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateValue
  objc.NSDate? get dateValue {
    final _ret = _objc_msgSend_126(this.pointer, _sel_dateValue);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileURLValue
  objc.NSURL? get fileURLValue {
    final _ret = _objc_msgSend_24(this.pointer, _sel_fileURLValue);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// eventClass
  int get eventClass {
    return _objc_msgSend_647(this.pointer, _sel_eventClass);
  }

  /// eventID
  int get eventID {
    return _objc_msgSend_647(this.pointer, _sel_eventID);
  }

  /// returnID
  int get returnID {
    return _objc_msgSend_669(this.pointer, _sel_returnID);
  }

  /// transactionID
  int get transactionID {
    return _objc_msgSend_276(this.pointer, _sel_transactionID);
  }

  /// setParamDescriptor:forKeyword:
  void setParamDescriptor_forKeyword_(
      NSAppleEventDescriptor descriptor, int keyword) {
    _objc_msgSend_670(this.pointer, _sel_setParamDescriptor_forKeyword_,
        descriptor.pointer, keyword);
  }

  /// paramDescriptorForKeyword:
  NSAppleEventDescriptor? paramDescriptorForKeyword_(int keyword) {
    final _ret = _objc_msgSend_671(
        this.pointer, _sel_paramDescriptorForKeyword_, keyword);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// removeParamDescriptorWithKeyword:
  void removeParamDescriptorWithKeyword_(int keyword) {
    _objc_msgSend_672(
        this.pointer, _sel_removeParamDescriptorWithKeyword_, keyword);
  }

  /// setAttributeDescriptor:forKeyword:
  void setAttributeDescriptor_forKeyword_(
      NSAppleEventDescriptor descriptor, int keyword) {
    _objc_msgSend_670(this.pointer, _sel_setAttributeDescriptor_forKeyword_,
        descriptor.pointer, keyword);
  }

  /// attributeDescriptorForKeyword:
  NSAppleEventDescriptor? attributeDescriptorForKeyword_(int keyword) {
    final _ret = _objc_msgSend_671(
        this.pointer, _sel_attributeDescriptorForKeyword_, keyword);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// sendEventWithOptions:timeout:error:
  NSAppleEventDescriptor? sendEventWithOptions_timeout_error_(
      NSAppleEventSendOptions sendOptions,
      double timeoutInSeconds,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_673(
        this.pointer,
        _sel_sendEventWithOptions_timeout_error_,
        sendOptions.value,
        timeoutInSeconds,
        error);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// isRecordDescriptor
  bool get isRecordDescriptor {
    return _objc_msgSend_13(this.pointer, _sel_isRecordDescriptor);
  }

  /// numberOfItems
  int get numberOfItems {
    return _objc_msgSend_125(this.pointer, _sel_numberOfItems);
  }

  /// insertDescriptor:atIndex:
  void insertDescriptor_atIndex_(NSAppleEventDescriptor descriptor, int index) {
    _objc_msgSend_674(this.pointer, _sel_insertDescriptor_atIndex_,
        descriptor.pointer, index);
  }

  /// descriptorAtIndex:
  NSAppleEventDescriptor? descriptorAtIndex_(int index) {
    final _ret =
        _objc_msgSend_675(this.pointer, _sel_descriptorAtIndex_, index);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// removeDescriptorAtIndex:
  void removeDescriptorAtIndex_(int index) {
    _objc_msgSend_145(this.pointer, _sel_removeDescriptorAtIndex_, index);
  }

  /// setDescriptor:forKeyword:
  void setDescriptor_forKeyword_(
      NSAppleEventDescriptor descriptor, int keyword) {
    _objc_msgSend_670(this.pointer, _sel_setDescriptor_forKeyword_,
        descriptor.pointer, keyword);
  }

  /// descriptorForKeyword:
  NSAppleEventDescriptor? descriptorForKeyword_(int keyword) {
    final _ret =
        _objc_msgSend_671(this.pointer, _sel_descriptorForKeyword_, keyword);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// removeDescriptorWithKeyword:
  void removeDescriptorWithKeyword_(int keyword) {
    _objc_msgSend_672(this.pointer, _sel_removeDescriptorWithKeyword_, keyword);
  }

  /// keywordForDescriptorAtIndex:
  int keywordForDescriptorAtIndex_(int index) {
    return _objc_msgSend_676(
        this.pointer, _sel_keywordForDescriptorAtIndex_, index);
  }

  /// coerceToDescriptorType:
  NSAppleEventDescriptor? coerceToDescriptorType_(int descriptorType) {
    final _ret = _objc_msgSend_671(
        this.pointer, _sel_coerceToDescriptorType_, descriptorType);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// init
  NSAppleEventDescriptor init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSAppleEventDescriptor new1() {
    final _ret = _objc_msgSend_19(_class_NSAppleEventDescriptor, _sel_new);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSAppleEventDescriptor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_NSAppleEventDescriptor, _sel_allocWithZone_, zone);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSAppleEventDescriptor alloc() {
    final _ret = _objc_msgSend_19(_class_NSAppleEventDescriptor, _sel_alloc);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSAppleEventDescriptor,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSAppleEventDescriptor,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSAppleEventDescriptor, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_NSAppleEventDescriptor, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSAppleEventDescriptor,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSAppleEventDescriptor,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSAppleEventDescriptor,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSAppleEventDescriptor, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSAppleEventDescriptor, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSAppleEventDescriptor =
    objc.getClass("NSAppleEventDescriptor");
late final _sel_nullDescriptor = objc.registerName("nullDescriptor");
final _objc_msgSend_652 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_descriptorWithDescriptorType_bytes_length_ =
    objc.registerName("descriptorWithDescriptorType:bytes:length:");
final _objc_msgSend_653 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<ffi.Void>, int)>();
late final _sel_descriptorWithDescriptorType_data_ =
    objc.registerName("descriptorWithDescriptorType:data:");
final _objc_msgSend_654 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_descriptorWithBoolean_ =
    objc.registerName("descriptorWithBoolean:");
final _objc_msgSend_655 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedChar)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_descriptorWithEnumCode_ =
    objc.registerName("descriptorWithEnumCode:");
final _objc_msgSend_656 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_descriptorWithInt32_ =
    objc.registerName("descriptorWithInt32:");
final _objc_msgSend_657 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_descriptorWithDouble_ =
    objc.registerName("descriptorWithDouble:");
final _objc_msgSend_658 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_descriptorWithTypeCode_ =
    objc.registerName("descriptorWithTypeCode:");
late final _sel_descriptorWithString_ =
    objc.registerName("descriptorWithString:");
final _objc_msgSend_659 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_descriptorWithDate_ = objc.registerName("descriptorWithDate:");
final _objc_msgSend_660 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_descriptorWithFileURL_ =
    objc.registerName("descriptorWithFileURL:");
final _objc_msgSend_661 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_ =
    objc.registerName(
        "appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:");
final _objc_msgSend_662 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Short,
                ffi.Int)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int)>();
late final _sel_listDescriptor = objc.registerName("listDescriptor");
late final _sel_recordDescriptor = objc.registerName("recordDescriptor");
late final _sel_currentProcessDescriptor =
    objc.registerName("currentProcessDescriptor");
late final _sel_descriptorWithProcessIdentifier_ =
    objc.registerName("descriptorWithProcessIdentifier:");
late final _sel_descriptorWithBundleIdentifier_ =
    objc.registerName("descriptorWithBundleIdentifier:");
late final _sel_descriptorWithApplicationURL_ =
    objc.registerName("descriptorWithApplicationURL:");

@ffi.Packed(2)
final class AEDesc extends ffi.Struct {
  @ffi.UnsignedInt()
  external int descriptorType;

  external ffi.Pointer<ffi.Pointer<OpaqueAEDataStorageType>> dataHandle;
}

final class OpaqueAEDataStorageType extends ffi.Opaque {}

late final _sel_initWithAEDescNoCopy_ =
    objc.registerName("initWithAEDescNoCopy:");
final _objc_msgSend_663 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<AEDesc>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<AEDesc>)>();
late final _sel_initWithDescriptorType_bytes_length_ =
    objc.registerName("initWithDescriptorType:bytes:length:");
final _objc_msgSend_664 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<ffi.Void>, int)>();
late final _sel_initWithDescriptorType_data_ =
    objc.registerName("initWithDescriptorType:data:");
final _objc_msgSend_665 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithEventClass_eventID_targetDescriptor_returnID_transactionID_ =
    objc.registerName(
        "initWithEventClass:eventID:targetDescriptor:returnID:transactionID:");
final _objc_msgSend_666 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Short,
                ffi.Int)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int)>();
late final _sel_initListDescriptor = objc.registerName("initListDescriptor");
late final _sel_initRecordDescriptor =
    objc.registerName("initRecordDescriptor");
late final _sel_aeDesc = objc.registerName("aeDesc");
final _objc_msgSend_667 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<AEDesc> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<AEDesc> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_descriptorType = objc.registerName("descriptorType");
late final _sel_booleanValue = objc.registerName("booleanValue");
final _objc_msgSend_668 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedChar Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_enumCodeValue = objc.registerName("enumCodeValue");
late final _sel_int32Value = objc.registerName("int32Value");
late final _sel_doubleValue = objc.registerName("doubleValue");
late final _sel_typeCodeValue = objc.registerName("typeCodeValue");
late final _sel_dateValue = objc.registerName("dateValue");
late final _sel_fileURLValue = objc.registerName("fileURLValue");
late final _sel_eventClass = objc.registerName("eventClass");
late final _sel_eventID = objc.registerName("eventID");
late final _sel_returnID = objc.registerName("returnID");
final _objc_msgSend_669 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Short Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_transactionID = objc.registerName("transactionID");
late final _sel_setParamDescriptor_forKeyword_ =
    objc.registerName("setParamDescriptor:forKeyword:");
final _objc_msgSend_670 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedInt)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_paramDescriptorForKeyword_ =
    objc.registerName("paramDescriptorForKeyword:");
final _objc_msgSend_671 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_removeParamDescriptorWithKeyword_ =
    objc.registerName("removeParamDescriptorWithKeyword:");
final _objc_msgSend_672 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setAttributeDescriptor_forKeyword_ =
    objc.registerName("setAttributeDescriptor:forKeyword:");
late final _sel_attributeDescriptorForKeyword_ =
    objc.registerName("attributeDescriptorForKeyword:");

enum NSAppleEventSendOptions {
  NSAppleEventSendNoReply(1),
  NSAppleEventSendQueueReply(2),
  NSAppleEventSendWaitForReply(3),
  NSAppleEventSendNeverInteract(16),
  NSAppleEventSendCanInteract(32),
  NSAppleEventSendAlwaysInteract(48),
  NSAppleEventSendCanSwitchLayer(64),
  NSAppleEventSendDontRecord(4096),
  NSAppleEventSendDontExecute(8192),
  NSAppleEventSendDontAnnotate(65536),
  NSAppleEventSendDefaultOptions(35);

  final int value;
  const NSAppleEventSendOptions(this.value);

  static NSAppleEventSendOptions fromValue(int value) => switch (value) {
        1 => NSAppleEventSendNoReply,
        2 => NSAppleEventSendQueueReply,
        3 => NSAppleEventSendWaitForReply,
        16 => NSAppleEventSendNeverInteract,
        32 => NSAppleEventSendCanInteract,
        48 => NSAppleEventSendAlwaysInteract,
        64 => NSAppleEventSendCanSwitchLayer,
        4096 => NSAppleEventSendDontRecord,
        8192 => NSAppleEventSendDontExecute,
        65536 => NSAppleEventSendDontAnnotate,
        35 => NSAppleEventSendDefaultOptions,
        _ => throw ArgumentError(
            "Unknown value for NSAppleEventSendOptions: $value"),
      };
}

late final _sel_sendEventWithOptions_timeout_error_ =
    objc.registerName("sendEventWithOptions:timeout:error:");
final _objc_msgSend_673 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Double,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            double,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isRecordDescriptor = objc.registerName("isRecordDescriptor");
late final _sel_numberOfItems = objc.registerName("numberOfItems");
late final _sel_insertDescriptor_atIndex_ =
    objc.registerName("insertDescriptor:atIndex:");
final _objc_msgSend_674 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_descriptorAtIndex_ = objc.registerName("descriptorAtIndex:");
final _objc_msgSend_675 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_removeDescriptorAtIndex_ =
    objc.registerName("removeDescriptorAtIndex:");
late final _sel_setDescriptor_forKeyword_ =
    objc.registerName("setDescriptor:forKeyword:");
late final _sel_descriptorForKeyword_ =
    objc.registerName("descriptorForKeyword:");
late final _sel_removeDescriptorWithKeyword_ =
    objc.registerName("removeDescriptorWithKeyword:");
late final _sel_keywordForDescriptorAtIndex_ =
    objc.registerName("keywordForDescriptorAtIndex:");
final _objc_msgSend_676 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_coerceToDescriptorType_ =
    objc.registerName("coerceToDescriptorType:");
late final _sel_objectSpecifierWithDescriptor_ =
    objc.registerName("objectSpecifierWithDescriptor:");
final _objc_msgSend_677 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithContainerSpecifier_key_ =
    objc.registerName("initWithContainerSpecifier:key:");
final _objc_msgSend_678 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithContainerClassDescription_containerSpecifier_key_ = objc
    .registerName("initWithContainerClassDescription:containerSpecifier:key:");
final _objc_msgSend_679 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_childSpecifier = objc.registerName("childSpecifier");
final _objc_msgSend_680 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setChildSpecifier_ = objc.registerName("setChildSpecifier:");
final _objc_msgSend_681 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_containerSpecifier = objc.registerName("containerSpecifier");
late final _sel_setContainerSpecifier_ =
    objc.registerName("setContainerSpecifier:");
late final _sel_containerIsObjectBeingTested =
    objc.registerName("containerIsObjectBeingTested");
late final _sel_setContainerIsObjectBeingTested_ =
    objc.registerName("setContainerIsObjectBeingTested:");
late final _sel_containerIsRangeContainerObject =
    objc.registerName("containerIsRangeContainerObject");
late final _sel_setContainerIsRangeContainerObject_ =
    objc.registerName("setContainerIsRangeContainerObject:");
late final _sel_key = objc.registerName("key");
late final _sel_setKey_ = objc.registerName("setKey:");
late final _sel_containerClassDescription =
    objc.registerName("containerClassDescription");
late final _sel_setContainerClassDescription_ =
    objc.registerName("setContainerClassDescription:");
final _objc_msgSend_682 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_keyClassDescription = objc.registerName("keyClassDescription");
late final _sel_indicesOfObjectsByEvaluatingWithContainer_count_ =
    objc.registerName("indicesOfObjectsByEvaluatingWithContainer:count:");
final _objc_msgSend_683 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Long> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Long>)>>()
    .asFunction<
        ffi.Pointer<ffi.Long> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Long>)>();
late final _sel_objectsByEvaluatingWithContainers_ =
    objc.registerName("objectsByEvaluatingWithContainers:");
final _objc_msgSend_684 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_objectsByEvaluatingSpecifier =
    objc.registerName("objectsByEvaluatingSpecifier");
late final _sel_evaluationErrorNumber =
    objc.registerName("evaluationErrorNumber");
late final _sel_setEvaluationErrorNumber_ =
    objc.registerName("setEvaluationErrorNumber:");
late final _sel_evaluationErrorSpecifier =
    objc.registerName("evaluationErrorSpecifier");
late final _sel_descriptor = objc.registerName("descriptor");
final _objc_msgSend_685 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_receiversSpecifier = objc.registerName("receiversSpecifier");
late final _sel_setReceiversSpecifier_ =
    objc.registerName("setReceiversSpecifier:");
late final _sel_evaluatedReceivers = objc.registerName("evaluatedReceivers");
late final _sel_evaluatedArguments = objc.registerName("evaluatedArguments");
late final _sel_isWellFormed = objc.registerName("isWellFormed");
late final _sel_performDefaultImplementation =
    objc.registerName("performDefaultImplementation");
late final _sel_executeCommand = objc.registerName("executeCommand");
late final _sel_scriptErrorNumber = objc.registerName("scriptErrorNumber");
late final _sel_setScriptErrorNumber_ =
    objc.registerName("setScriptErrorNumber:");
late final _sel_scriptErrorOffendingObjectDescriptor =
    objc.registerName("scriptErrorOffendingObjectDescriptor");
late final _sel_setScriptErrorOffendingObjectDescriptor_ =
    objc.registerName("setScriptErrorOffendingObjectDescriptor:");
final _objc_msgSend_686 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_scriptErrorExpectedTypeDescriptor =
    objc.registerName("scriptErrorExpectedTypeDescriptor");
late final _sel_setScriptErrorExpectedTypeDescriptor_ =
    objc.registerName("setScriptErrorExpectedTypeDescriptor:");
late final _sel_scriptErrorString = objc.registerName("scriptErrorString");
late final _sel_setScriptErrorString_ =
    objc.registerName("setScriptErrorString:");
late final _sel_currentCommand = objc.registerName("currentCommand");
final _objc_msgSend_687 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_appleEvent = objc.registerName("appleEvent");
late final _sel_suspendExecution = objc.registerName("suspendExecution");
late final _sel_resumeExecutionWithResult_ =
    objc.registerName("resumeExecutionWithResult:");
late final _sel_createCommandInstance =
    objc.registerName("createCommandInstance");
final _objc_msgSend_688 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_createCommandInstanceWithZone_ =
    objc.registerName("createCommandInstanceWithZone:");
final _objc_msgSend_689 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>();
late final _sel_supportsCommand_ = objc.registerName("supportsCommand:");
final _objc_msgSend_690 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_selectorForCommand_ = objc.registerName("selectorForCommand:");
final _objc_msgSend_691 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCSelector> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCSelector> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_typeForKey_ = objc.registerName("typeForKey:");
late final _sel_classDescriptionForKey_ =
    objc.registerName("classDescriptionForKey:");
final _objc_msgSend_692 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_appleEventCodeForKey_ =
    objc.registerName("appleEventCodeForKey:");
late final _sel_keyWithAppleEventCode_ =
    objc.registerName("keyWithAppleEventCode:");
final _objc_msgSend_693 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_defaultSubcontainerAttributeKey =
    objc.registerName("defaultSubcontainerAttributeKey");
late final _sel_isLocationRequiredToCreateForKey_ =
    objc.registerName("isLocationRequiredToCreateForKey:");
late final _sel_hasPropertyForKey_ = objc.registerName("hasPropertyForKey:");
late final _sel_hasOrderedToManyRelationshipForKey_ =
    objc.registerName("hasOrderedToManyRelationshipForKey:");
late final _sel_hasReadablePropertyForKey_ =
    objc.registerName("hasReadablePropertyForKey:");
late final _sel_hasWritablePropertyForKey_ =
    objc.registerName("hasWritablePropertyForKey:");
late final _sel_isReadOnlyKey_ = objc.registerName("isReadOnlyKey:");

/// NSClassDescription
class NSClassDescription extends objc.NSObject {
  NSClassDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSClassDescription] that points to the same underlying object as [other].
  NSClassDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSClassDescription] that wraps the given raw object pointer.
  NSClassDescription.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSClassDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSClassDescription);
  }

  /// registerClassDescription:forClass:
  static void registerClassDescription_forClass_(
      NSClassDescription description, objc.ObjCObjectBase aClass) {
    _objc_msgSend_694(
        _class_NSClassDescription,
        _sel_registerClassDescription_forClass_,
        description.pointer,
        aClass.pointer);
  }

  /// invalidateClassDescriptionCache
  static void invalidateClassDescriptionCache() {
    _objc_msgSend_7(
        _class_NSClassDescription, _sel_invalidateClassDescriptionCache);
  }

  /// classDescriptionForClass:
  static NSClassDescription? classDescriptionForClass_(
      objc.ObjCObjectBase aClass) {
    final _ret = _objc_msgSend_695(_class_NSClassDescription,
        _sel_classDescriptionForClass_, aClass.pointer);
    return _ret.address == 0
        ? null
        : NSClassDescription.castFromPointer(_ret, retain: true, release: true);
  }

  /// attributeKeys
  objc.NSArray get attributeKeys {
    final _ret = _objc_msgSend_33(this.pointer, _sel_attributeKeys);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// toOneRelationshipKeys
  objc.NSArray get toOneRelationshipKeys {
    final _ret = _objc_msgSend_33(this.pointer, _sel_toOneRelationshipKeys);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// toManyRelationshipKeys
  objc.NSArray get toManyRelationshipKeys {
    final _ret = _objc_msgSend_33(this.pointer, _sel_toManyRelationshipKeys);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// inverseForRelationshipKey:
  objc.NSString? inverseForRelationshipKey_(objc.NSString relationshipKey) {
    final _ret = _objc_msgSend_42(
        this.pointer, _sel_inverseForRelationshipKey_, relationshipKey.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSClassDescription init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSClassDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static NSClassDescription new1() {
    final _ret = _objc_msgSend_19(_class_NSClassDescription, _sel_new);
    return NSClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSClassDescription allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSClassDescription, _sel_allocWithZone_, zone);
    return NSClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSClassDescription alloc() {
    final _ret = _objc_msgSend_19(_class_NSClassDescription, _sel_alloc);
    return NSClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSClassDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSClassDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSClassDescription, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSClassDescription, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSClassDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSClassDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSClassDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSClassDescription, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_NSClassDescription, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSClassDescription = objc.getClass("NSClassDescription");
late final _sel_registerClassDescription_forClass_ =
    objc.registerName("registerClassDescription:forClass:");
final _objc_msgSend_694 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_invalidateClassDescriptionCache =
    objc.registerName("invalidateClassDescriptionCache");
final _objc_msgSend_695 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributeKeys = objc.registerName("attributeKeys");
late final _sel_toOneRelationshipKeys =
    objc.registerName("toOneRelationshipKeys");
late final _sel_toManyRelationshipKeys =
    objc.registerName("toManyRelationshipKeys");
late final _sel_inverseForRelationshipKey_ =
    objc.registerName("inverseForRelationshipKey:");

/// AVContentKeySession
class AVContentKeySession extends objc.NSObject {
  AVContentKeySession._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVContentKeySession] that points to the same underlying object as [other].
  AVContentKeySession.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVContentKeySession] that wraps the given raw object pointer.
  AVContentKeySession.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVContentKeySession].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVContentKeySession);
  }

  /// init
  AVContentKeySession init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVContentKeySession.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVContentKeySession new1() {
    final _ret = _objc_msgSend_19(_class_AVContentKeySession, _sel_new);
    return AVContentKeySession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// contentKeySessionWithKeySystem:
  static AVContentKeySession contentKeySessionWithKeySystem_(
      objc.NSString keySystem) {
    final _ret = _objc_msgSend_63(_class_AVContentKeySession,
        _sel_contentKeySessionWithKeySystem_, keySystem.pointer);
    return AVContentKeySession.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// contentKeySessionWithKeySystem:storageDirectoryAtURL:
  static AVContentKeySession
      contentKeySessionWithKeySystem_storageDirectoryAtURL_(
          objc.NSString keySystem, objc.NSURL storageURL) {
    final _ret = _objc_msgSend_696(
        _class_AVContentKeySession,
        _sel_contentKeySessionWithKeySystem_storageDirectoryAtURL_,
        keySystem.pointer,
        storageURL.pointer);
    return AVContentKeySession.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setDelegate:queue:
  void setDelegate_queue_(
      objc.ObjCObjectBase? delegate, objc.NSObject? delegateQueue) {
    _objc_msgSend_697(
        this.pointer,
        _sel_setDelegate_queue_,
        delegate?.pointer ?? ffi.nullptr,
        delegateQueue?.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// delegateQueue
  objc.NSObject? get delegateQueue {
    final _ret = _objc_msgSend_400(this.pointer, _sel_delegateQueue);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// storageURL
  objc.NSURL? get storageURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_storageURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// keySystem
  objc.NSString get keySystem {
    final _ret = _objc_msgSend_11(this.pointer, _sel_keySystem);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// expire
  void expire() {
    _objc_msgSend_7(this.pointer, _sel_expire);
  }

  /// contentProtectionSessionIdentifier
  objc.NSData? get contentProtectionSessionIdentifier {
    final _ret = _objc_msgSend_337(
        this.pointer, _sel_contentProtectionSessionIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// processContentKeyRequestWithIdentifier:initializationData:options:
  void processContentKeyRequestWithIdentifier_initializationData_options_(
      objc.ObjCObjectBase? identifier,
      objc.NSData? initializationData,
      objc.NSDictionary? options) {
    _objc_msgSend_698(
        this.pointer,
        _sel_processContentKeyRequestWithIdentifier_initializationData_options_,
        identifier?.pointer ?? ffi.nullptr,
        initializationData?.pointer ?? ffi.nullptr,
        options?.pointer ?? ffi.nullptr);
  }

  /// renewExpiringResponseDataForContentKeyRequest:
  void renewExpiringResponseDataForContentKeyRequest_(
      AVContentKeyRequest contentKeyRequest) {
    _objc_msgSend_707(
        this.pointer,
        _sel_renewExpiringResponseDataForContentKeyRequest_,
        contentKeyRequest.pointer);
  }

  /// makeSecureTokenForExpirationDateOfPersistableContentKey:completionHandler:
  void
      makeSecureTokenForExpirationDateOfPersistableContentKey_completionHandler_(
          objc.NSData persistableContentKeyData,
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>
              handler) {
    _objc_msgSend_708(
        this.pointer,
        _sel_makeSecureTokenForExpirationDateOfPersistableContentKey_completionHandler_,
        persistableContentKeyData.pointer,
        handler.pointer);
  }

  /// invalidatePersistableContentKey:options:completionHandler:
  void invalidatePersistableContentKey_options_completionHandler_(
      objc.NSData persistableContentKeyData,
      objc.NSDictionary? options,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          handler) {
    _objc_msgSend_709(
        this.pointer,
        _sel_invalidatePersistableContentKey_options_completionHandler_,
        persistableContentKeyData.pointer,
        options?.pointer ?? ffi.nullptr,
        handler.pointer);
  }

  /// invalidateAllPersistableContentKeysForApp:options:completionHandler:
  void invalidateAllPersistableContentKeysForApp_options_completionHandler_(
      objc.NSData appIdentifier,
      objc.NSDictionary? options,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          handler) {
    _objc_msgSend_709(
        this.pointer,
        _sel_invalidateAllPersistableContentKeysForApp_options_completionHandler_,
        appIdentifier.pointer,
        options?.pointer ?? ffi.nullptr,
        handler.pointer);
  }

  /// addContentKeyRecipient:
  void addContentKeyRecipient_(objc.ObjCObjectBase recipient) {
    _objc_msgSend_27(
        this.pointer, _sel_addContentKeyRecipient_, recipient.pointer);
  }

  /// removeContentKeyRecipient:
  void removeContentKeyRecipient_(objc.ObjCObjectBase recipient) {
    _objc_msgSend_27(
        this.pointer, _sel_removeContentKeyRecipient_, recipient.pointer);
  }

  /// contentKeyRecipients
  objc.NSArray get contentKeyRecipients {
    final _ret = _objc_msgSend_33(this.pointer, _sel_contentKeyRecipients);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// pendingExpiredSessionReportsWithAppIdentifier:storageDirectoryAtURL:
  static objc.NSArray
      pendingExpiredSessionReportsWithAppIdentifier_storageDirectoryAtURL_(
          objc.NSData appIdentifier, objc.NSURL storageURL) {
    final _ret = _objc_msgSend_710(
        _class_AVContentKeySession,
        _sel_pendingExpiredSessionReportsWithAppIdentifier_storageDirectoryAtURL_,
        appIdentifier.pointer,
        storageURL.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// removePendingExpiredSessionReports:withAppIdentifier:storageDirectoryAtURL:
  static void
      removePendingExpiredSessionReports_withAppIdentifier_storageDirectoryAtURL_(
          objc.NSArray expiredSessionReports,
          objc.NSData appIdentifier,
          objc.NSURL storageURL) {
    _objc_msgSend_711(
        _class_AVContentKeySession,
        _sel_removePendingExpiredSessionReports_withAppIdentifier_storageDirectoryAtURL_,
        expiredSessionReports.pointer,
        appIdentifier.pointer,
        storageURL.pointer);
  }

  /// allocWithZone:
  static AVContentKeySession allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVContentKeySession, _sel_allocWithZone_, zone);
    return AVContentKeySession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVContentKeySession alloc() {
    final _ret = _objc_msgSend_19(_class_AVContentKeySession, _sel_alloc);
    return AVContentKeySession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVContentKeySession,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVContentKeySession,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVContentKeySession, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVContentKeySession, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVContentKeySession,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVContentKeySession,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVContentKeySession,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVContentKeySession, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVContentKeySession, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVContentKeySession = objc.getClass("AVContentKeySession");
late final _sel_contentKeySessionWithKeySystem_ =
    objc.registerName("contentKeySessionWithKeySystem:");
late final _sel_contentKeySessionWithKeySystem_storageDirectoryAtURL_ =
    objc.registerName("contentKeySessionWithKeySystem:storageDirectoryAtURL:");
final _objc_msgSend_696 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setDelegate_queue_ = objc.registerName("setDelegate:queue:");
final _objc_msgSend_697 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_storageURL = objc.registerName("storageURL");
late final _sel_keySystem = objc.registerName("keySystem");
late final _sel_expire = objc.registerName("expire");
late final _sel_contentProtectionSessionIdentifier =
    objc.registerName("contentProtectionSessionIdentifier");
late final _sel_processContentKeyRequestWithIdentifier_initializationData_options_ =
    objc.registerName(
        "processContentKeyRequestWithIdentifier:initializationData:options:");
final _objc_msgSend_698 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// AVContentKeyRequest
class AVContentKeyRequest extends objc.NSObject {
  AVContentKeyRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVContentKeyRequest] that points to the same underlying object as [other].
  AVContentKeyRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVContentKeyRequest] that wraps the given raw object pointer.
  AVContentKeyRequest.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVContentKeyRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVContentKeyRequest);
  }

  /// status
  AVContentKeyRequestStatus get status {
    final _ret = _objc_msgSend_699(this.pointer, _sel_status);
    return AVContentKeyRequestStatus.fromValue(_ret);
  }

  /// error
  objc.NSError? get error {
    final _ret = _objc_msgSend_344(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// identifier
  objc.ObjCObjectBase? get identifier {
    final _ret = _objc_msgSend_85(this.pointer, _sel_identifier);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initializationData
  objc.NSData? get initializationData {
    final _ret = _objc_msgSend_337(this.pointer, _sel_initializationData);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// options
  objc.NSDictionary get options {
    final _ret = _objc_msgSend_123(this.pointer, _sel_options);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// canProvidePersistableContentKey
  bool get canProvidePersistableContentKey {
    return _objc_msgSend_13(this.pointer, _sel_canProvidePersistableContentKey);
  }

  /// contentKeySpecifier
  AVContentKeySpecifier get contentKeySpecifier {
    final _ret = _objc_msgSend_701(this.pointer, _sel_contentKeySpecifier);
    return AVContentKeySpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// contentKey
  AVContentKey? get contentKey {
    final _ret = _objc_msgSend_702(this.pointer, _sel_contentKey);
    return _ret.address == 0
        ? null
        : AVContentKey.castFromPointer(_ret, retain: true, release: true);
  }

  /// makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:
  void
      makeStreamingContentKeyRequestDataForApp_contentIdentifier_options_completionHandler_(
          objc.NSData appIdentifier,
          objc.NSData? contentIdentifier,
          objc.NSDictionary? options,
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>
              handler) {
    _objc_msgSend_703(
        this.pointer,
        _sel_makeStreamingContentKeyRequestDataForApp_contentIdentifier_options_completionHandler_,
        appIdentifier.pointer,
        contentIdentifier?.pointer ?? ffi.nullptr,
        options?.pointer ?? ffi.nullptr,
        handler.pointer);
  }

  /// processContentKeyResponse:
  void processContentKeyResponse_(AVContentKeyResponse keyResponse) {
    _objc_msgSend_705(
        this.pointer, _sel_processContentKeyResponse_, keyResponse.pointer);
  }

  /// processContentKeyResponseError:
  void processContentKeyResponseError_(objc.NSError error) {
    _objc_msgSend_706(
        this.pointer, _sel_processContentKeyResponseError_, error.pointer);
  }

  /// respondByRequestingPersistableContentKeyRequest
  void respondByRequestingPersistableContentKeyRequest() {
    _objc_msgSend_7(
        this.pointer, _sel_respondByRequestingPersistableContentKeyRequest);
  }

  /// respondByRequestingPersistableContentKeyRequestAndReturnError:
  bool respondByRequestingPersistableContentKeyRequestAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_39(
        this.pointer,
        _sel_respondByRequestingPersistableContentKeyRequestAndReturnError_,
        outError);
  }

  /// renewsExpiringResponseData
  bool get renewsExpiringResponseData {
    return _objc_msgSend_13(this.pointer, _sel_renewsExpiringResponseData);
  }

  /// init
  AVContentKeyRequest init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVContentKeyRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVContentKeyRequest new1() {
    final _ret = _objc_msgSend_19(_class_AVContentKeyRequest, _sel_new);
    return AVContentKeyRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVContentKeyRequest allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVContentKeyRequest, _sel_allocWithZone_, zone);
    return AVContentKeyRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVContentKeyRequest alloc() {
    final _ret = _objc_msgSend_19(_class_AVContentKeyRequest, _sel_alloc);
    return AVContentKeyRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVContentKeyRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVContentKeyRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVContentKeyRequest, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVContentKeyRequest, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVContentKeyRequest,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVContentKeyRequest,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVContentKeyRequest,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVContentKeyRequest, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVContentKeyRequest, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVContentKeyRequest = objc.getClass("AVContentKeyRequest");

enum AVContentKeyRequestStatus {
  AVContentKeyRequestStatusRequestingResponse(0),
  AVContentKeyRequestStatusReceivedResponse(1),
  AVContentKeyRequestStatusRenewed(2),
  AVContentKeyRequestStatusRetried(3),
  AVContentKeyRequestStatusCancelled(4),
  AVContentKeyRequestStatusFailed(5);

  final int value;
  const AVContentKeyRequestStatus(this.value);

  static AVContentKeyRequestStatus fromValue(int value) => switch (value) {
        0 => AVContentKeyRequestStatusRequestingResponse,
        1 => AVContentKeyRequestStatusReceivedResponse,
        2 => AVContentKeyRequestStatusRenewed,
        3 => AVContentKeyRequestStatusRetried,
        4 => AVContentKeyRequestStatusCancelled,
        5 => AVContentKeyRequestStatusFailed,
        _ => throw ArgumentError(
            "Unknown value for AVContentKeyRequestStatus: $value"),
      };
}

late final _sel_status = objc.registerName("status");
final _objc_msgSend_699 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initializationData = objc.registerName("initializationData");
late final _sel_canProvidePersistableContentKey =
    objc.registerName("canProvidePersistableContentKey");

/// AVContentKeySpecifier
class AVContentKeySpecifier extends objc.NSObject {
  AVContentKeySpecifier._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVContentKeySpecifier] that points to the same underlying object as [other].
  AVContentKeySpecifier.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVContentKeySpecifier] that wraps the given raw object pointer.
  AVContentKeySpecifier.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVContentKeySpecifier].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVContentKeySpecifier);
  }

  /// contentKeySpecifierForKeySystem:identifier:options:
  static AVContentKeySpecifier
      contentKeySpecifierForKeySystem_identifier_options_(
          objc.NSString keySystem,
          objc.ObjCObjectBase contentKeyIdentifier,
          objc.NSDictionary options) {
    final _ret = _objc_msgSend_700(
        _class_AVContentKeySpecifier,
        _sel_contentKeySpecifierForKeySystem_identifier_options_,
        keySystem.pointer,
        contentKeyIdentifier.pointer,
        options.pointer);
    return AVContentKeySpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initForKeySystem:identifier:options:
  AVContentKeySpecifier initForKeySystem_identifier_options_(
      objc.NSString keySystem,
      objc.ObjCObjectBase contentKeyIdentifier,
      objc.NSDictionary options) {
    final _ret = _objc_msgSend_700(
        this.pointer,
        _sel_initForKeySystem_identifier_options_,
        keySystem.pointer,
        contentKeyIdentifier.pointer,
        options.pointer);
    return AVContentKeySpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// keySystem
  objc.NSString get keySystem {
    final _ret = _objc_msgSend_11(this.pointer, _sel_keySystem);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// identifier
  objc.ObjCObjectBase get identifier {
    final _ret = _objc_msgSend_19(this.pointer, _sel_identifier);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// options
  objc.NSDictionary get options {
    final _ret = _objc_msgSend_123(this.pointer, _sel_options);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVContentKeySpecifier init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVContentKeySpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVContentKeySpecifier new1() {
    final _ret = _objc_msgSend_19(_class_AVContentKeySpecifier, _sel_new);
    return AVContentKeySpecifier.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVContentKeySpecifier allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVContentKeySpecifier, _sel_allocWithZone_, zone);
    return AVContentKeySpecifier.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVContentKeySpecifier alloc() {
    final _ret = _objc_msgSend_19(_class_AVContentKeySpecifier, _sel_alloc);
    return AVContentKeySpecifier.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVContentKeySpecifier,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVContentKeySpecifier,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVContentKeySpecifier, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVContentKeySpecifier, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVContentKeySpecifier,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVContentKeySpecifier,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVContentKeySpecifier,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVContentKeySpecifier, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVContentKeySpecifier, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVContentKeySpecifier =
    objc.getClass("AVContentKeySpecifier");
late final _sel_contentKeySpecifierForKeySystem_identifier_options_ =
    objc.registerName("contentKeySpecifierForKeySystem:identifier:options:");
final _objc_msgSend_700 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initForKeySystem_identifier_options_ =
    objc.registerName("initForKeySystem:identifier:options:");
late final _sel_contentKeySpecifier = objc.registerName("contentKeySpecifier");
final _objc_msgSend_701 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVContentKey
class AVContentKey extends objc.NSObject {
  AVContentKey._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVContentKey] that points to the same underlying object as [other].
  AVContentKey.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVContentKey] that wraps the given raw object pointer.
  AVContentKey.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVContentKey].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVContentKey);
  }

  /// contentKeySpecifier
  AVContentKeySpecifier get contentKeySpecifier {
    final _ret = _objc_msgSend_701(this.pointer, _sel_contentKeySpecifier);
    return AVContentKeySpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  AVContentKey init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVContentKey.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVContentKey new1() {
    final _ret = _objc_msgSend_19(_class_AVContentKey, _sel_new);
    return AVContentKey.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVContentKey allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVContentKey, _sel_allocWithZone_, zone);
    return AVContentKey.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVContentKey alloc() {
    final _ret = _objc_msgSend_19(_class_AVContentKey, _sel_alloc);
    return AVContentKey.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVContentKey,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVContentKey,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVContentKey, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVContentKey, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVContentKey,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVContentKey,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVContentKey,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVContentKey, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVContentKey, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVContentKey = objc.getClass("AVContentKey");
late final _sel_contentKey = objc.registerName("contentKey");
final _objc_msgSend_702 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
void _ObjCBlock_ffiVoid_NSData_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSData_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_NSData_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSData?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  arg0.address == 0 ? null : objc.NSData.castFromPointer(arg0, retain: true, release: true),
                  arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(objc.NSData?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0.address == 0
                ? null
                : objc.NSData.castFromPointer(arg0,
                    retain: false, release: true),
            arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSData_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSData_NSError_CallExtension on objc.ObjCBlock<
    ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSData? arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_makeStreamingContentKeyRequestDataForApp_contentIdentifier_options_completionHandler_ =
    objc.registerName(
        "makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:");
final _objc_msgSend_703 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVContentKeyResponse
class AVContentKeyResponse extends objc.NSObject {
  AVContentKeyResponse._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVContentKeyResponse] that points to the same underlying object as [other].
  AVContentKeyResponse.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVContentKeyResponse] that wraps the given raw object pointer.
  AVContentKeyResponse.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVContentKeyResponse].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVContentKeyResponse);
  }

  /// contentKeyResponseWithFairPlayStreamingKeyResponseData:
  static AVContentKeyResponse
      contentKeyResponseWithFairPlayStreamingKeyResponseData_(
          objc.NSData keyResponseData) {
    final _ret = _objc_msgSend_340(
        _class_AVContentKeyResponse,
        _sel_contentKeyResponseWithFairPlayStreamingKeyResponseData_,
        keyResponseData.pointer);
    return AVContentKeyResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// contentKeyResponseWithClearKeyData:initializationVector:
  static AVContentKeyResponse
      contentKeyResponseWithClearKeyData_initializationVector_(
          objc.NSData keyData, objc.NSData? initializationVector) {
    final _ret = _objc_msgSend_704(
        _class_AVContentKeyResponse,
        _sel_contentKeyResponseWithClearKeyData_initializationVector_,
        keyData.pointer,
        initializationVector?.pointer ?? ffi.nullptr);
    return AVContentKeyResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// contentKeyResponseWithAuthorizationTokenData:
  static AVContentKeyResponse contentKeyResponseWithAuthorizationTokenData_(
      objc.NSData authorizationTokenData) {
    final _ret = _objc_msgSend_340(
        _class_AVContentKeyResponse,
        _sel_contentKeyResponseWithAuthorizationTokenData_,
        authorizationTokenData.pointer);
    return AVContentKeyResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  AVContentKeyResponse init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVContentKeyResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVContentKeyResponse new1() {
    final _ret = _objc_msgSend_19(_class_AVContentKeyResponse, _sel_new);
    return AVContentKeyResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVContentKeyResponse allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVContentKeyResponse, _sel_allocWithZone_, zone);
    return AVContentKeyResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVContentKeyResponse alloc() {
    final _ret = _objc_msgSend_19(_class_AVContentKeyResponse, _sel_alloc);
    return AVContentKeyResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVContentKeyResponse,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVContentKeyResponse,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVContentKeyResponse, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVContentKeyResponse, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVContentKeyResponse,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVContentKeyResponse,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVContentKeyResponse,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVContentKeyResponse, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVContentKeyResponse, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVContentKeyResponse = objc.getClass("AVContentKeyResponse");
late final _sel_contentKeyResponseWithFairPlayStreamingKeyResponseData_ = objc
    .registerName("contentKeyResponseWithFairPlayStreamingKeyResponseData:");
late final _sel_contentKeyResponseWithClearKeyData_initializationVector_ = objc
    .registerName("contentKeyResponseWithClearKeyData:initializationVector:");
final _objc_msgSend_704 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_contentKeyResponseWithAuthorizationTokenData_ =
    objc.registerName("contentKeyResponseWithAuthorizationTokenData:");
late final _sel_processContentKeyResponse_ =
    objc.registerName("processContentKeyResponse:");
final _objc_msgSend_705 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_processContentKeyResponseError_ =
    objc.registerName("processContentKeyResponseError:");
final _objc_msgSend_706 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_respondByRequestingPersistableContentKeyRequest =
    objc.registerName("respondByRequestingPersistableContentKeyRequest");
late final _sel_respondByRequestingPersistableContentKeyRequestAndReturnError_ =
    objc.registerName(
        "respondByRequestingPersistableContentKeyRequestAndReturnError:");
late final _sel_renewsExpiringResponseData =
    objc.registerName("renewsExpiringResponseData");
late final _sel_renewExpiringResponseDataForContentKeyRequest_ =
    objc.registerName("renewExpiringResponseDataForContentKeyRequest:");
final _objc_msgSend_707 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_makeSecureTokenForExpirationDateOfPersistableContentKey_completionHandler_ =
    objc.registerName(
        "makeSecureTokenForExpirationDateOfPersistableContentKey:completionHandler:");
final _objc_msgSend_708 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_invalidatePersistableContentKey_options_completionHandler_ =
    objc.registerName(
        "invalidatePersistableContentKey:options:completionHandler:");
final _objc_msgSend_709 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_invalidateAllPersistableContentKeysForApp_options_completionHandler_ =
    objc.registerName(
        "invalidateAllPersistableContentKeysForApp:options:completionHandler:");
late final _sel_addContentKeyRecipient_ =
    objc.registerName("addContentKeyRecipient:");
late final _sel_removeContentKeyRecipient_ =
    objc.registerName("removeContentKeyRecipient:");
late final _sel_contentKeyRecipients =
    objc.registerName("contentKeyRecipients");
late final _sel_pendingExpiredSessionReportsWithAppIdentifier_storageDirectoryAtURL_ =
    objc.registerName(
        "pendingExpiredSessionReportsWithAppIdentifier:storageDirectoryAtURL:");
final _objc_msgSend_710 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removePendingExpiredSessionReports_withAppIdentifier_storageDirectoryAtURL_ =
    objc.registerName(
        "removePendingExpiredSessionReports:withAppIdentifier:storageDirectoryAtURL:");
final _objc_msgSend_711 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// AVAsset
class AVAsset extends objc.NSObject {
  AVAsset._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAsset] that points to the same underlying object as [other].
  AVAsset.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAsset] that wraps the given raw object pointer.
  AVAsset.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAsset].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_AVAsset);
  }

  /// assetWithURL:
  static AVAsset assetWithURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_332(_class_AVAsset, _sel_assetWithURL_, URL.pointer);
    return AVAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// duration
  void getDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_duration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_duration);
  }

  /// preferredRate
  double get preferredRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_preferredRate)
        : _objc_msgSend_361(this.pointer, _sel_preferredRate);
  }

  /// preferredVolume
  double get preferredVolume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_preferredVolume)
        : _objc_msgSend_361(this.pointer, _sel_preferredVolume);
  }

  /// preferredTransform
  void getPreferredTransform(ffi.Pointer<CGAffineTransform> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_713Stret(stret, this.pointer, _sel_preferredTransform)
        : stret.ref = _objc_msgSend_713(this.pointer, _sel_preferredTransform);
  }

  /// naturalSize
  void getNaturalSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_naturalSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_naturalSize);
  }

  /// preferredDisplayCriteria
  AVDisplayCriteria get preferredDisplayCriteria {
    final _ret = _objc_msgSend_715(this.pointer, _sel_preferredDisplayCriteria);
    return AVDisplayCriteria.castFromPointer(_ret, retain: true, release: true);
  }

  /// minimumTimeOffsetFromLive
  void getMinimumTimeOffsetFromLive(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_minimumTimeOffsetFromLive)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_minimumTimeOffsetFromLive);
  }

  /// providesPreciseDurationAndTiming
  bool get providesPreciseDurationAndTiming {
    return _objc_msgSend_13(
        this.pointer, _sel_providesPreciseDurationAndTiming);
  }

  /// cancelLoading
  void cancelLoading() {
    _objc_msgSend_7(this.pointer, _sel_cancelLoading);
  }

  /// referenceRestrictions
  AVAssetReferenceRestrictions get referenceRestrictions {
    final _ret = _objc_msgSend_716(this.pointer, _sel_referenceRestrictions);
    return AVAssetReferenceRestrictions.fromValue(_ret);
  }

  /// tracks
  objc.NSArray get tracks {
    final _ret = _objc_msgSend_33(this.pointer, _sel_tracks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// trackWithTrackID:
  AVAssetTrack? trackWithTrackID_(int trackID) {
    final _ret =
        _objc_msgSend_738(this.pointer, _sel_trackWithTrackID_, trackID);
    return _ret.address == 0
        ? null
        : AVAssetTrack.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTrackWithTrackID:completionHandler:
  void loadTrackWithTrackID_completionHandler_(
      int trackID,
      objc.ObjCBlock<
              ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_739(
        this.pointer,
        _sel_loadTrackWithTrackID_completionHandler_,
        trackID,
        completionHandler.pointer);
  }

  /// tracksWithMediaType:
  objc.NSArray tracksWithMediaType_(objc.NSString mediaType) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_tracksWithMediaType_, mediaType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaType:completionHandler:
  void loadTracksWithMediaType_completionHandler_(
      objc.NSString mediaType,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaType_completionHandler_,
        mediaType.pointer,
        completionHandler.pointer);
  }

  /// tracksWithMediaCharacteristic:
  objc.NSArray tracksWithMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_390(this.pointer,
        _sel_tracksWithMediaCharacteristic_, mediaCharacteristic.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaCharacteristic:completionHandler:
  void loadTracksWithMediaCharacteristic_completionHandler_(
      objc.NSString mediaCharacteristic,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaCharacteristic_completionHandler_,
        mediaCharacteristic.pointer,
        completionHandler.pointer);
  }

  /// trackGroups
  objc.NSArray get trackGroups {
    final _ret = _objc_msgSend_33(this.pointer, _sel_trackGroups);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// creationDate
  AVMetadataItem? get creationDate {
    final _ret = _objc_msgSend_747(this.pointer, _sel_creationDate);
    return _ret.address == 0
        ? null
        : AVMetadataItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// lyrics
  objc.NSString? get lyrics {
    final _ret = _objc_msgSend_20(this.pointer, _sel_lyrics);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// commonMetadata
  objc.NSArray get commonMetadata {
    final _ret = _objc_msgSend_33(this.pointer, _sel_commonMetadata);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadata
  objc.NSArray get metadata {
    final _ret = _objc_msgSend_33(this.pointer, _sel_metadata);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableMetadataFormats
  objc.NSArray get availableMetadataFormats {
    final _ret = _objc_msgSend_33(this.pointer, _sel_availableMetadataFormats);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataForFormat:
  objc.NSArray metadataForFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_metadataForFormat_, format.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadMetadataForFormat:completionHandler:
  void loadMetadataForFormat_completionHandler_(
      objc.NSString format,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadMetadataForFormat_completionHandler_,
        format.pointer,
        completionHandler.pointer);
  }

  /// availableChapterLocales
  objc.NSArray get availableChapterLocales {
    final _ret = _objc_msgSend_33(this.pointer, _sel_availableChapterLocales);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:
  objc.NSArray
      chapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_(
          objc.NSLocale locale, objc.NSArray? commonKeys) {
    final _ret = _objc_msgSend_751(
        this.pointer,
        _sel_chapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_,
        locale.pointer,
        commonKeys?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadChapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:completionHandler:
  void
      loadChapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_completionHandler_(
          objc.NSLocale locale,
          objc.NSArray commonKeys,
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>
              completionHandler) {
    _objc_msgSend_752(
        this.pointer,
        _sel_loadChapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_completionHandler_,
        locale.pointer,
        commonKeys.pointer,
        completionHandler.pointer);
  }

  /// chapterMetadataGroupsBestMatchingPreferredLanguages:
  objc.NSArray chapterMetadataGroupsBestMatchingPreferredLanguages_(
      objc.NSArray preferredLanguages) {
    final _ret = _objc_msgSend_86(
        this.pointer,
        _sel_chapterMetadataGroupsBestMatchingPreferredLanguages_,
        preferredLanguages.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadChapterMetadataGroupsBestMatchingPreferredLanguages:completionHandler:
  void
      loadChapterMetadataGroupsBestMatchingPreferredLanguages_completionHandler_(
          objc.NSArray preferredLanguages,
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>
              completionHandler) {
    _objc_msgSend_753(
        this.pointer,
        _sel_loadChapterMetadataGroupsBestMatchingPreferredLanguages_completionHandler_,
        preferredLanguages.pointer,
        completionHandler.pointer);
  }

  /// availableMediaCharacteristicsWithMediaSelectionOptions
  objc.NSArray get availableMediaCharacteristicsWithMediaSelectionOptions {
    final _ret = _objc_msgSend_33(this.pointer,
        _sel_availableMediaCharacteristicsWithMediaSelectionOptions);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionGroupForMediaCharacteristic:
  AVMediaSelectionGroup? mediaSelectionGroupForMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_758(
        this.pointer,
        _sel_mediaSelectionGroupForMediaCharacteristic_,
        mediaCharacteristic.pointer);
    return _ret.address == 0
        ? null
        : AVMediaSelectionGroup.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// loadMediaSelectionGroupForMediaCharacteristic:completionHandler:
  void loadMediaSelectionGroupForMediaCharacteristic_completionHandler_(
      objc.NSString mediaCharacteristic,
      objc.ObjCBlock<
              ffi.Void Function(
                  AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_759(
        this.pointer,
        _sel_loadMediaSelectionGroupForMediaCharacteristic_completionHandler_,
        mediaCharacteristic.pointer,
        completionHandler.pointer);
  }

  /// preferredMediaSelection
  AVMediaSelection get preferredMediaSelection {
    final _ret = _objc_msgSend_761(this.pointer, _sel_preferredMediaSelection);
    return AVMediaSelection.castFromPointer(_ret, retain: true, release: true);
  }

  /// allMediaSelections
  objc.NSArray get allMediaSelections {
    final _ret = _objc_msgSend_33(this.pointer, _sel_allMediaSelections);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// hasProtectedContent
  bool get hasProtectedContent {
    return _objc_msgSend_13(this.pointer, _sel_hasProtectedContent);
  }

  /// canContainFragments
  bool get canContainFragments {
    return _objc_msgSend_13(this.pointer, _sel_canContainFragments);
  }

  /// containsFragments
  bool get containsFragments {
    return _objc_msgSend_13(this.pointer, _sel_containsFragments);
  }

  /// overallDurationHint
  void getOverallDurationHint(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_overallDurationHint)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_overallDurationHint);
  }

  /// isPlayable
  bool get playable {
    return _objc_msgSend_13(this.pointer, _sel_isPlayable);
  }

  /// isExportable
  bool get exportable {
    return _objc_msgSend_13(this.pointer, _sel_isExportable);
  }

  /// isReadable
  bool get readable {
    return _objc_msgSend_13(this.pointer, _sel_isReadable);
  }

  /// isComposable
  bool get composable {
    return _objc_msgSend_13(this.pointer, _sel_isComposable);
  }

  /// isCompatibleWithSavedPhotosAlbum
  bool get compatibleWithSavedPhotosAlbum {
    return _objc_msgSend_13(
        this.pointer, _sel_isCompatibleWithSavedPhotosAlbum);
  }

  /// isCompatibleWithAirPlayVideo
  bool get compatibleWithAirPlayVideo {
    return _objc_msgSend_13(this.pointer, _sel_isCompatibleWithAirPlayVideo);
  }

  /// unusedTrackID
  int unusedTrackID() {
    return _objc_msgSend_718(this.pointer, _sel_unusedTrackID);
  }

  /// findUnusedTrackIDWithCompletionHandler:
  void findUnusedTrackIDWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_762(
        this.pointer,
        _sel_findUnusedTrackIDWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// init
  AVAsset init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAsset new1() {
    final _ret = _objc_msgSend_19(_class_AVAsset, _sel_new);
    return AVAsset.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAsset allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_AVAsset, _sel_allocWithZone_, zone);
    return AVAsset.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAsset alloc() {
    final _ret = _objc_msgSend_19(_class_AVAsset, _sel_alloc);
    return AVAsset.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAsset,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAsset,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAsset, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAsset, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAsset,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAsset,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAsset,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_AVAsset, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_AVAsset, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAsset = objc.getClass("AVAsset");
late final _sel_assetWithURL_ = objc.registerName("assetWithURL:");

@ffi.Packed(4)
final class CMTime extends ffi.Struct {
  @ffi.Int64()
  external int value;

  @ffi.Int32()
  external int timescale;

  @ffi.Uint32()
  external int flags;

  @ffi.Int64()
  external int epoch;
}

enum CMTimeFlags {
  kCMTimeFlags_Valid(1),
  kCMTimeFlags_HasBeenRounded(2),
  kCMTimeFlags_PositiveInfinity(4),
  kCMTimeFlags_NegativeInfinity(8),
  kCMTimeFlags_Indefinite(16),
  kCMTimeFlags_ImpliedValueFlagsMask(28);

  final int value;
  const CMTimeFlags(this.value);

  static CMTimeFlags fromValue(int value) => switch (value) {
        1 => kCMTimeFlags_Valid,
        2 => kCMTimeFlags_HasBeenRounded,
        4 => kCMTimeFlags_PositiveInfinity,
        8 => kCMTimeFlags_NegativeInfinity,
        16 => kCMTimeFlags_Indefinite,
        28 => kCMTimeFlags_ImpliedValueFlagsMask,
        _ => throw ArgumentError("Unknown value for CMTimeFlags: $value"),
      };
}

final _objc_msgSend_712 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CMTime Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CMTime Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_712Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_preferredRate = objc.registerName("preferredRate");
late final _sel_preferredVolume = objc.registerName("preferredVolume");

final class CGAffineTransform extends ffi.Struct {
  @ffi.Double()
  external double a;

  @ffi.Double()
  external double b;

  @ffi.Double()
  external double c;

  @ffi.Double()
  external double d;

  @ffi.Double()
  external double tx;

  @ffi.Double()
  external double ty;
}

late final _sel_preferredTransform = objc.registerName("preferredTransform");
final _objc_msgSend_713 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGAffineTransform Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CGAffineTransform Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_713Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGAffineTransform>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CGAffineTransform>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

final class CGSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

late final _sel_naturalSize = objc.registerName("naturalSize");
final _objc_msgSend_714 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGSize Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CGSize Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_714Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<CGSize>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CGSize>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();

/// AVDisplayCriteria
class AVDisplayCriteria extends objc.ObjCObjectBase {
  AVDisplayCriteria._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [AVDisplayCriteria] that points to the same underlying object as [other].
  AVDisplayCriteria.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVDisplayCriteria] that wraps the given raw object pointer.
  AVDisplayCriteria.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVDisplayCriteria].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVDisplayCriteria);
  }
}

late final _class_AVDisplayCriteria = objc.getClass("AVDisplayCriteria");
late final _sel_preferredDisplayCriteria =
    objc.registerName("preferredDisplayCriteria");
final _objc_msgSend_715 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_minimumTimeOffsetFromLive =
    objc.registerName("minimumTimeOffsetFromLive");
late final _sel_providesPreciseDurationAndTiming =
    objc.registerName("providesPreciseDurationAndTiming");
late final _sel_cancelLoading = objc.registerName("cancelLoading");

enum AVAssetReferenceRestrictions {
  AVAssetReferenceRestrictionForbidNone(0),
  AVAssetReferenceRestrictionForbidRemoteReferenceToLocal(1),
  AVAssetReferenceRestrictionForbidLocalReferenceToRemote(2),
  AVAssetReferenceRestrictionForbidCrossSiteReference(4),
  AVAssetReferenceRestrictionForbidLocalReferenceToLocal(8),
  AVAssetReferenceRestrictionForbidAll(65535);

  static const AVAssetReferenceRestrictionDefaultPolicy =
      AVAssetReferenceRestrictionForbidLocalReferenceToRemote;

  final int value;
  const AVAssetReferenceRestrictions(this.value);

  static AVAssetReferenceRestrictions fromValue(int value) => switch (value) {
        0 => AVAssetReferenceRestrictionForbidNone,
        1 => AVAssetReferenceRestrictionForbidRemoteReferenceToLocal,
        2 => AVAssetReferenceRestrictionForbidLocalReferenceToRemote,
        4 => AVAssetReferenceRestrictionForbidCrossSiteReference,
        8 => AVAssetReferenceRestrictionForbidLocalReferenceToLocal,
        65535 => AVAssetReferenceRestrictionForbidAll,
        _ => throw ArgumentError(
            "Unknown value for AVAssetReferenceRestrictions: $value"),
      };

  @override
  String toString() {
    if (this == AVAssetReferenceRestrictionForbidLocalReferenceToRemote)
      return "AVAssetReferenceRestrictions.AVAssetReferenceRestrictionForbidLocalReferenceToRemote, AVAssetReferenceRestrictions.AVAssetReferenceRestrictionDefaultPolicy";
    return super.toString();
  }
}

late final _sel_referenceRestrictions =
    objc.registerName("referenceRestrictions");
final _objc_msgSend_716 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_tracks = objc.registerName("tracks");

/// AVAssetTrack
class AVAssetTrack extends objc.NSObject {
  AVAssetTrack._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetTrack] that points to the same underlying object as [other].
  AVAssetTrack.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetTrack] that wraps the given raw object pointer.
  AVAssetTrack.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetTrack].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetTrack);
  }

  /// init
  AVAssetTrack init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetTrack.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAssetTrack new1() {
    final _ret = _objc_msgSend_19(_class_AVAssetTrack, _sel_new);
    return AVAssetTrack.castFromPointer(_ret, retain: false, release: true);
  }

  /// asset
  AVAsset? get asset {
    final _ret = _objc_msgSend_717(this.pointer, _sel_asset);
    return _ret.address == 0
        ? null
        : AVAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// trackID
  int get trackID {
    return _objc_msgSend_718(this.pointer, _sel_trackID);
  }

  /// mediaType
  objc.NSString get mediaType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_mediaType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// formatDescriptions
  objc.NSArray get formatDescriptions {
    final _ret = _objc_msgSend_33(this.pointer, _sel_formatDescriptions);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isPlayable
  bool get playable {
    return _objc_msgSend_13(this.pointer, _sel_isPlayable);
  }

  /// isDecodable
  bool get decodable {
    return _objc_msgSend_13(this.pointer, _sel_isDecodable);
  }

  /// isEnabled
  bool get enabled {
    return _objc_msgSend_13(this.pointer, _sel_isEnabled);
  }

  /// isSelfContained
  bool get selfContained {
    return _objc_msgSend_13(this.pointer, _sel_isSelfContained);
  }

  /// totalSampleDataLength
  int get totalSampleDataLength {
    return _objc_msgSend_357(this.pointer, _sel_totalSampleDataLength);
  }

  /// hasMediaCharacteristic:
  bool hasMediaCharacteristic_(objc.NSString mediaCharacteristic) {
    return _objc_msgSend_31(this.pointer, _sel_hasMediaCharacteristic_,
        mediaCharacteristic.pointer);
  }

  /// timeRange
  void getTimeRange(ffi.Pointer<CMTimeRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_719Stret(stret, this.pointer, _sel_timeRange)
        : stret.ref = _objc_msgSend_719(this.pointer, _sel_timeRange);
  }

  /// naturalTimeScale
  int get naturalTimeScale {
    return _objc_msgSend_718(this.pointer, _sel_naturalTimeScale);
  }

  /// estimatedDataRate
  double get estimatedDataRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_estimatedDataRate)
        : _objc_msgSend_361(this.pointer, _sel_estimatedDataRate);
  }

  /// languageCode
  objc.NSString? get languageCode {
    final _ret = _objc_msgSend_20(this.pointer, _sel_languageCode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// extendedLanguageTag
  objc.NSString? get extendedLanguageTag {
    final _ret = _objc_msgSend_20(this.pointer, _sel_extendedLanguageTag);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// naturalSize
  void getNaturalSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_naturalSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_naturalSize);
  }

  /// preferredTransform
  void getPreferredTransform(ffi.Pointer<CGAffineTransform> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_713Stret(stret, this.pointer, _sel_preferredTransform)
        : stret.ref = _objc_msgSend_713(this.pointer, _sel_preferredTransform);
  }

  /// preferredVolume
  double get preferredVolume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_preferredVolume)
        : _objc_msgSend_361(this.pointer, _sel_preferredVolume);
  }

  /// hasAudioSampleDependencies
  bool get hasAudioSampleDependencies {
    return _objc_msgSend_13(this.pointer, _sel_hasAudioSampleDependencies);
  }

  /// nominalFrameRate
  double get nominalFrameRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_nominalFrameRate)
        : _objc_msgSend_361(this.pointer, _sel_nominalFrameRate);
  }

  /// minFrameDuration
  void getMinFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_minFrameDuration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_minFrameDuration);
  }

  /// requiresFrameReordering
  bool get requiresFrameReordering {
    return _objc_msgSend_13(this.pointer, _sel_requiresFrameReordering);
  }

  /// segments
  objc.NSArray get segments {
    final _ret = _objc_msgSend_33(this.pointer, _sel_segments);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// segmentForTrackTime:
  AVAssetTrackSegment? segmentForTrackTime_(CMTime trackTime) {
    final _ret =
        _objc_msgSend_721(this.pointer, _sel_segmentForTrackTime_, trackTime);
    return _ret.address == 0
        ? null
        : AVAssetTrackSegment.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// loadSegmentForTrackTime:completionHandler:
  void loadSegmentForTrackTime_completionHandler_(
      CMTime trackTime,
      objc.ObjCBlock<
              ffi.Void Function(
                  AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_722(
        this.pointer,
        _sel_loadSegmentForTrackTime_completionHandler_,
        trackTime,
        completionHandler.pointer);
  }

  /// samplePresentationTimeForTrackTime:
  void samplePresentationTimeForTrackTime_(
      ffi.Pointer<CMTime> stret, CMTime trackTime) {
    objc.useMsgSendVariants
        ? _objc_msgSend_723Stret(stret, this.pointer,
            _sel_samplePresentationTimeForTrackTime_, trackTime)
        : stret.ref = _objc_msgSend_723(
            this.pointer, _sel_samplePresentationTimeForTrackTime_, trackTime);
  }

  /// loadSamplePresentationTimeForTrackTime:completionHandler:
  void loadSamplePresentationTimeForTrackTime_completionHandler_(
      CMTime trackTime,
      objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_724(
        this.pointer,
        _sel_loadSamplePresentationTimeForTrackTime_completionHandler_,
        trackTime,
        completionHandler.pointer);
  }

  /// commonMetadata
  objc.NSArray get commonMetadata {
    final _ret = _objc_msgSend_33(this.pointer, _sel_commonMetadata);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadata
  objc.NSArray get metadata {
    final _ret = _objc_msgSend_33(this.pointer, _sel_metadata);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableMetadataFormats
  objc.NSArray get availableMetadataFormats {
    final _ret = _objc_msgSend_33(this.pointer, _sel_availableMetadataFormats);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataForFormat:
  objc.NSArray metadataForFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_metadataForFormat_, format.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadMetadataForFormat:completionHandler:
  void loadMetadataForFormat_completionHandler_(
      objc.NSString format,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadMetadataForFormat_completionHandler_,
        format.pointer,
        completionHandler.pointer);
  }

  /// availableTrackAssociationTypes
  objc.NSArray get availableTrackAssociationTypes {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_availableTrackAssociationTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// associatedTracksOfType:
  objc.NSArray associatedTracksOfType_(objc.NSString trackAssociationType) {
    final _ret = _objc_msgSend_390(this.pointer, _sel_associatedTracksOfType_,
        trackAssociationType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadAssociatedTracksOfType:completionHandler:
  void loadAssociatedTracksOfType_completionHandler_(
      objc.NSString trackAssociationType,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadAssociatedTracksOfType_completionHandler_,
        trackAssociationType.pointer,
        completionHandler.pointer);
  }

  /// canProvideSampleCursors
  bool get canProvideSampleCursors {
    return _objc_msgSend_13(this.pointer, _sel_canProvideSampleCursors);
  }

  /// makeSampleCursorWithPresentationTimeStamp:
  AVSampleCursor? makeSampleCursorWithPresentationTimeStamp_(
      CMTime presentationTimeStamp) {
    final _ret = _objc_msgSend_736(this.pointer,
        _sel_makeSampleCursorWithPresentationTimeStamp_, presentationTimeStamp);
    return _ret.address == 0
        ? null
        : AVSampleCursor.castFromPointer(_ret, retain: true, release: true);
  }

  /// makeSampleCursorAtFirstSampleInDecodeOrder
  AVSampleCursor? makeSampleCursorAtFirstSampleInDecodeOrder() {
    final _ret = _objc_msgSend_737(
        this.pointer, _sel_makeSampleCursorAtFirstSampleInDecodeOrder);
    return _ret.address == 0
        ? null
        : AVSampleCursor.castFromPointer(_ret, retain: true, release: true);
  }

  /// makeSampleCursorAtLastSampleInDecodeOrder
  AVSampleCursor? makeSampleCursorAtLastSampleInDecodeOrder() {
    final _ret = _objc_msgSend_737(
        this.pointer, _sel_makeSampleCursorAtLastSampleInDecodeOrder);
    return _ret.address == 0
        ? null
        : AVSampleCursor.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVAssetTrack allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAssetTrack, _sel_allocWithZone_, zone);
    return AVAssetTrack.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAssetTrack alloc() {
    final _ret = _objc_msgSend_19(_class_AVAssetTrack, _sel_alloc);
    return AVAssetTrack.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetTrack, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAssetTrack, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetTrack,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetTrack,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetTrack,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetTrack, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetTrack, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetTrack = objc.getClass("AVAssetTrack");
late final _sel_asset = objc.registerName("asset");
final _objc_msgSend_717 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_trackID = objc.registerName("trackID");
final _objc_msgSend_718 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mediaType = objc.registerName("mediaType");
late final _sel_formatDescriptions = objc.registerName("formatDescriptions");
late final _sel_isPlayable = objc.registerName("isPlayable");
late final _sel_isDecodable = objc.registerName("isDecodable");
late final _sel_isEnabled = objc.registerName("isEnabled");
late final _sel_isSelfContained = objc.registerName("isSelfContained");
late final _sel_totalSampleDataLength =
    objc.registerName("totalSampleDataLength");
late final _sel_hasMediaCharacteristic_ =
    objc.registerName("hasMediaCharacteristic:");

final class CMTimeRange extends ffi.Struct {
  external CMTime start;

  external CMTime duration;
}

late final _sel_timeRange = objc.registerName("timeRange");
final _objc_msgSend_719 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CMTimeRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CMTimeRange Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_719Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CMTimeRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CMTimeRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_naturalTimeScale = objc.registerName("naturalTimeScale");
late final _sel_estimatedDataRate = objc.registerName("estimatedDataRate");
late final _sel_extendedLanguageTag = objc.registerName("extendedLanguageTag");
late final _sel_hasAudioSampleDependencies =
    objc.registerName("hasAudioSampleDependencies");
late final _sel_nominalFrameRate = objc.registerName("nominalFrameRate");
late final _sel_minFrameDuration = objc.registerName("minFrameDuration");
late final _sel_requiresFrameReordering =
    objc.registerName("requiresFrameReordering");
late final _sel_segments = objc.registerName("segments");

/// AVAssetTrackSegment
class AVAssetTrackSegment extends objc.NSObject {
  AVAssetTrackSegment._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetTrackSegment] that points to the same underlying object as [other].
  AVAssetTrackSegment.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetTrackSegment] that wraps the given raw object pointer.
  AVAssetTrackSegment.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetTrackSegment].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetTrackSegment);
  }

  /// init
  AVAssetTrackSegment init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetTrackSegment.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetTrackSegment new1() {
    final _ret = _objc_msgSend_19(_class_AVAssetTrackSegment, _sel_new);
    return AVAssetTrackSegment.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// timeMapping
  void getTimeMapping(ffi.Pointer<CMTimeMapping> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_720Stret(stret, this.pointer, _sel_timeMapping)
        : stret.ref = _objc_msgSend_720(this.pointer, _sel_timeMapping);
  }

  /// isEmpty
  bool get empty {
    return _objc_msgSend_13(this.pointer, _sel_isEmpty);
  }

  /// allocWithZone:
  static AVAssetTrackSegment allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAssetTrackSegment, _sel_allocWithZone_, zone);
    return AVAssetTrackSegment.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetTrackSegment alloc() {
    final _ret = _objc_msgSend_19(_class_AVAssetTrackSegment, _sel_alloc);
    return AVAssetTrackSegment.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetTrackSegment,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetTrackSegment,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetTrackSegment, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAssetTrackSegment, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetTrackSegment,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetTrackSegment,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetTrackSegment,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetTrackSegment, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetTrackSegment, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetTrackSegment = objc.getClass("AVAssetTrackSegment");

final class CMTimeMapping extends ffi.Struct {
  external CMTimeRange source;

  external CMTimeRange target;
}

late final _sel_timeMapping = objc.registerName("timeMapping");
final _objc_msgSend_720 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CMTimeMapping Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CMTimeMapping Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_720Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CMTimeMapping>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CMTimeMapping>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isEmpty = objc.registerName("isEmpty");
late final _sel_segmentForTrackTime_ =
    objc.registerName("segmentForTrackTime:");
final _objc_msgSend_721 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTime)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTime)>();
void _ObjCBlock_ffiVoid_AVAssetTrackSegment_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVAssetTrackSegment_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVAssetTrackSegment_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVAssetTrackSegment_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVAssetTrackSegment, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_AVAssetTrackSegment_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  AVAssetTrackSegment.castFromPointer(arg0, retain: true, release: true),
                  arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(AVAssetTrackSegment, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVAssetTrackSegment_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            AVAssetTrackSegment.castFromPointer(arg0,
                retain: false, release: true),
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVAssetTrackSegment_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVAssetTrackSegment_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(AVAssetTrackSegment, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVAssetTrackSegment arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_loadSegmentForTrackTime_completionHandler_ =
    objc.registerName("loadSegmentForTrackTime:completionHandler:");
final _objc_msgSend_722 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTime,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_samplePresentationTimeForTrackTime_ =
    objc.registerName("samplePresentationTimeForTrackTime:");
final _objc_msgSend_723 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CMTime Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTime)>>()
    .asFunction<
        CMTime Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTime)>();
final _objc_msgSend_723Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTime)>>()
    .asFunction<
        void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTime)>();
void _ObjCBlock_ffiVoid_CMTime_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        CMTime arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        CMTime arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
            .asFunction<void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>()(
        arg0, arg1);
void _ObjCBlock_ffiVoid_CMTime_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        CMTime arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        CMTime, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_CMTime_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CMTime arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, CMTime, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_CMTime_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>
      fromFunction(void Function(CMTime, objc.NSError?) fn) =>
          objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, CMTime, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_CMTime_NSError_closureTrampoline)
                          .cast(),
                  (CMTime arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                      fn(arg0, arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(CMTime, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, CMTime,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_CMTime_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (CMTime arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0,
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1,
                    retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_CMTime_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, CMTime,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_CMTime_NSError_CallExtension
    on objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)> {
  void call(CMTime arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      CMTime arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>, CMTime,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_loadSamplePresentationTimeForTrackTime_completionHandler_ = objc
    .registerName("loadSamplePresentationTimeForTrackTime:completionHandler:");
final _objc_msgSend_724 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTime,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_commonMetadata = objc.registerName("commonMetadata");
late final _sel_metadata = objc.registerName("metadata");
late final _sel_availableMetadataFormats =
    objc.registerName("availableMetadataFormats");
late final _sel_metadataForFormat_ = objc.registerName("metadataForFormat:");
void _ObjCBlock_ffiVoid_NSArray_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSArray_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSArray_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_NSArray_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSArray?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSArray_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(arg0.address == 0 ? null : objc.NSArray.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(objc.NSArray?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSArray_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0.address == 0
                ? null
                : objc.NSArray.castFromPointer(arg0,
                    retain: false, release: true),
            arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSArray_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSArray_NSError_CallExtension on objc.ObjCBlock<
    ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSArray? arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_loadMetadataForFormat_completionHandler_ =
    objc.registerName("loadMetadataForFormat:completionHandler:");
final _objc_msgSend_725 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_availableTrackAssociationTypes =
    objc.registerName("availableTrackAssociationTypes");
late final _sel_associatedTracksOfType_ =
    objc.registerName("associatedTracksOfType:");
late final _sel_loadAssociatedTracksOfType_completionHandler_ =
    objc.registerName("loadAssociatedTracksOfType:completionHandler:");
late final _sel_canProvideSampleCursors =
    objc.registerName("canProvideSampleCursors");

/// AVSampleCursor
class AVSampleCursor extends objc.NSObject {
  AVSampleCursor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVSampleCursor] that points to the same underlying object as [other].
  AVSampleCursor.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVSampleCursor] that wraps the given raw object pointer.
  AVSampleCursor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVSampleCursor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVSampleCursor);
  }

  /// init
  AVSampleCursor init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVSampleCursor.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVSampleCursor new1() {
    final _ret = _objc_msgSend_19(_class_AVSampleCursor, _sel_new);
    return AVSampleCursor.castFromPointer(_ret, retain: false, release: true);
  }

  /// stepInDecodeOrderByCount:
  int stepInDecodeOrderByCount_(int stepCount) {
    return _objc_msgSend_726(
        this.pointer, _sel_stepInDecodeOrderByCount_, stepCount);
  }

  /// stepInPresentationOrderByCount:
  int stepInPresentationOrderByCount_(int stepCount) {
    return _objc_msgSend_726(
        this.pointer, _sel_stepInPresentationOrderByCount_, stepCount);
  }

  /// stepByDecodeTime:wasPinned:
  void stepByDecodeTime_wasPinned_(ffi.Pointer<CMTime> stret,
      CMTime deltaDecodeTime, ffi.Pointer<ffi.Bool> outWasPinned) {
    objc.useMsgSendVariants
        ? _objc_msgSend_727Stret(stret, this.pointer,
            _sel_stepByDecodeTime_wasPinned_, deltaDecodeTime, outWasPinned)
        : stret.ref = _objc_msgSend_727(this.pointer,
            _sel_stepByDecodeTime_wasPinned_, deltaDecodeTime, outWasPinned);
  }

  /// stepByPresentationTime:wasPinned:
  void stepByPresentationTime_wasPinned_(ffi.Pointer<CMTime> stret,
      CMTime deltaPresentationTime, ffi.Pointer<ffi.Bool> outWasPinned) {
    objc.useMsgSendVariants
        ? _objc_msgSend_727Stret(
            stret,
            this.pointer,
            _sel_stepByPresentationTime_wasPinned_,
            deltaPresentationTime,
            outWasPinned)
        : stret.ref = _objc_msgSend_727(
            this.pointer,
            _sel_stepByPresentationTime_wasPinned_,
            deltaPresentationTime,
            outWasPinned);
  }

  /// presentationTimeStamp
  void getPresentationTimeStamp(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_presentationTimeStamp)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_presentationTimeStamp);
  }

  /// decodeTimeStamp
  void getDecodeTimeStamp(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_decodeTimeStamp)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_decodeTimeStamp);
  }

  /// comparePositionInDecodeOrderWithPositionOfCursor:
  objc.NSComparisonResult comparePositionInDecodeOrderWithPositionOfCursor_(
      AVSampleCursor cursor) {
    final _ret = _objc_msgSend_728(this.pointer,
        _sel_comparePositionInDecodeOrderWithPositionOfCursor_, cursor.pointer);
    return objc.NSComparisonResult.fromValue(_ret);
  }

  /// samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor:
  bool
      samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor_(
          AVSampleCursor cursor) {
    return _objc_msgSend_729(
        this.pointer,
        _sel_samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor_,
        cursor.pointer);
  }

  /// samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor:
  bool
      samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor_(
          AVSampleCursor cursor) {
    return _objc_msgSend_729(
        this.pointer,
        _sel_samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor_,
        cursor.pointer);
  }

  /// currentSampleDuration
  void getCurrentSampleDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_currentSampleDuration)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_currentSampleDuration);
  }

  /// copyCurrentSampleFormatDescription
  ffi.Pointer<opaqueCMFormatDescription> copyCurrentSampleFormatDescription() {
    return _objc_msgSend_730(
        this.pointer, _sel_copyCurrentSampleFormatDescription);
  }

  /// currentSampleSyncInfo
  void getCurrentSampleSyncInfo(ffi.Pointer<AVSampleCursorSyncInfo> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_731Stret(
            stret, this.pointer, _sel_currentSampleSyncInfo)
        : stret.ref =
            _objc_msgSend_731(this.pointer, _sel_currentSampleSyncInfo);
  }

  /// currentSampleDependencyInfo
  void getCurrentSampleDependencyInfo(
      ffi.Pointer<AVSampleCursorDependencyInfo> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_732Stret(
            stret, this.pointer, _sel_currentSampleDependencyInfo)
        : stret.ref =
            _objc_msgSend_732(this.pointer, _sel_currentSampleDependencyInfo);
  }

  /// currentSampleDependencyAttachments
  objc.NSDictionary? get currentSampleDependencyAttachments {
    final _ret =
        _objc_msgSend_84(this.pointer, _sel_currentSampleDependencyAttachments);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// currentSampleAudioDependencyInfo
  void getCurrentSampleAudioDependencyInfo(
      ffi.Pointer<AVSampleCursorAudioDependencyInfo> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_733Stret(
            stret, this.pointer, _sel_currentSampleAudioDependencyInfo)
        : stret.ref = _objc_msgSend_733(
            this.pointer, _sel_currentSampleAudioDependencyInfo);
  }

  /// samplesRequiredForDecoderRefresh
  int get samplesRequiredForDecoderRefresh {
    return _objc_msgSend_125(
        this.pointer, _sel_samplesRequiredForDecoderRefresh);
  }

  /// currentChunkStorageURL
  objc.NSURL? get currentChunkStorageURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_currentChunkStorageURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// currentChunkStorageRange
  void getCurrentChunkStorageRange(
      ffi.Pointer<AVSampleCursorStorageRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_734Stret(
            stret, this.pointer, _sel_currentChunkStorageRange)
        : stret.ref =
            _objc_msgSend_734(this.pointer, _sel_currentChunkStorageRange);
  }

  /// currentChunkInfo
  void getCurrentChunkInfo(ffi.Pointer<AVSampleCursorChunkInfo> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_735Stret(stret, this.pointer, _sel_currentChunkInfo)
        : stret.ref = _objc_msgSend_735(this.pointer, _sel_currentChunkInfo);
  }

  /// currentSampleIndexInChunk
  int get currentSampleIndexInChunk {
    return _objc_msgSend_9(this.pointer, _sel_currentSampleIndexInChunk);
  }

  /// currentSampleStorageRange
  void getCurrentSampleStorageRange(
      ffi.Pointer<AVSampleCursorStorageRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_734Stret(
            stret, this.pointer, _sel_currentSampleStorageRange)
        : stret.ref =
            _objc_msgSend_734(this.pointer, _sel_currentSampleStorageRange);
  }

  /// allocWithZone:
  static AVSampleCursor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVSampleCursor, _sel_allocWithZone_, zone);
    return AVSampleCursor.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVSampleCursor alloc() {
    final _ret = _objc_msgSend_19(_class_AVSampleCursor, _sel_alloc);
    return AVSampleCursor.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVSampleCursor,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVSampleCursor,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVSampleCursor, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVSampleCursor, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVSampleCursor,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVSampleCursor,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVSampleCursor,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVSampleCursor, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVSampleCursor, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVSampleCursor = objc.getClass("AVSampleCursor");
late final _sel_stepInDecodeOrderByCount_ =
    objc.registerName("stepInDecodeOrderByCount:");
final _objc_msgSend_726 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int64 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_stepInPresentationOrderByCount_ =
    objc.registerName("stepInPresentationOrderByCount:");
late final _sel_stepByDecodeTime_wasPinned_ =
    objc.registerName("stepByDecodeTime:wasPinned:");
final _objc_msgSend_727 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CMTime Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                ffi.Pointer<ffi.Bool>)>>()
    .asFunction<
        CMTime Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTime, ffi.Pointer<ffi.Bool>)>();
final _objc_msgSend_727Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CMTime>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                ffi.Pointer<ffi.Bool>)>>()
    .asFunction<
        void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTime, ffi.Pointer<ffi.Bool>)>();
late final _sel_stepByPresentationTime_wasPinned_ =
    objc.registerName("stepByPresentationTime:wasPinned:");
late final _sel_presentationTimeStamp =
    objc.registerName("presentationTimeStamp");
late final _sel_decodeTimeStamp = objc.registerName("decodeTimeStamp");
late final _sel_comparePositionInDecodeOrderWithPositionOfCursor_ =
    objc.registerName("comparePositionInDecodeOrderWithPositionOfCursor:");
final _objc_msgSend_728 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor_ =
    objc.registerName(
        "samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor:");
final _objc_msgSend_729 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor_ =
    objc.registerName(
        "samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor:");
late final _sel_currentSampleDuration =
    objc.registerName("currentSampleDuration");

final class opaqueCMFormatDescription extends ffi.Opaque {}

late final _sel_copyCurrentSampleFormatDescription =
    objc.registerName("copyCurrentSampleFormatDescription");
final _objc_msgSend_730 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<opaqueCMFormatDescription> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<opaqueCMFormatDescription> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

final class AVSampleCursorSyncInfo extends ffi.Struct {
  @ffi.Bool()
  external bool sampleIsFullSync;

  @ffi.Bool()
  external bool sampleIsPartialSync;

  @ffi.Bool()
  external bool sampleIsDroppable;
}

late final _sel_currentSampleSyncInfo =
    objc.registerName("currentSampleSyncInfo");
final _objc_msgSend_731 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVSampleCursorSyncInfo Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AVSampleCursorSyncInfo Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_731Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVSampleCursorSyncInfo>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AVSampleCursorSyncInfo>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

final class AVSampleCursorDependencyInfo extends ffi.Struct {
  @ffi.Bool()
  external bool sampleIndicatesWhetherItHasDependentSamples;

  @ffi.Bool()
  external bool sampleHasDependentSamples;

  @ffi.Bool()
  external bool sampleIndicatesWhetherItDependsOnOthers;

  @ffi.Bool()
  external bool sampleDependsOnOthers;

  @ffi.Bool()
  external bool sampleIndicatesWhetherItHasRedundantCoding;

  @ffi.Bool()
  external bool sampleHasRedundantCoding;
}

late final _sel_currentSampleDependencyInfo =
    objc.registerName("currentSampleDependencyInfo");
final _objc_msgSend_732 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVSampleCursorDependencyInfo Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AVSampleCursorDependencyInfo Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_732Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVSampleCursorDependencyInfo>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AVSampleCursorDependencyInfo>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_currentSampleDependencyAttachments =
    objc.registerName("currentSampleDependencyAttachments");

final class AVSampleCursorAudioDependencyInfo extends ffi.Struct {
  @ffi.Bool()
  external bool audioSampleIsIndependentlyDecodable;

  @ffi.Long()
  external int audioSamplePacketRefreshCount;
}

late final _sel_currentSampleAudioDependencyInfo =
    objc.registerName("currentSampleAudioDependencyInfo");
final _objc_msgSend_733 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVSampleCursorAudioDependencyInfo Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AVSampleCursorAudioDependencyInfo Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_733Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVSampleCursorAudioDependencyInfo>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AVSampleCursorAudioDependencyInfo>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_samplesRequiredForDecoderRefresh =
    objc.registerName("samplesRequiredForDecoderRefresh");
late final _sel_currentChunkStorageURL =
    objc.registerName("currentChunkStorageURL");

final class AVSampleCursorStorageRange extends ffi.Struct {
  @ffi.Int64()
  external int offset;

  @ffi.Int64()
  external int length;
}

late final _sel_currentChunkStorageRange =
    objc.registerName("currentChunkStorageRange");
final _objc_msgSend_734 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVSampleCursorStorageRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AVSampleCursorStorageRange Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_734Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVSampleCursorStorageRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AVSampleCursorStorageRange>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

final class AVSampleCursorChunkInfo extends ffi.Struct {
  @ffi.Int64()
  external int chunkSampleCount;

  @ffi.Bool()
  external bool chunkHasUniformSampleSizes;

  @ffi.Bool()
  external bool chunkHasUniformSampleDurations;

  @ffi.Bool()
  external bool chunkHasUniformFormatDescriptions;
}

late final _sel_currentChunkInfo = objc.registerName("currentChunkInfo");
final _objc_msgSend_735 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVSampleCursorChunkInfo Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AVSampleCursorChunkInfo Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_735Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVSampleCursorChunkInfo>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AVSampleCursorChunkInfo>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_currentSampleIndexInChunk =
    objc.registerName("currentSampleIndexInChunk");
late final _sel_currentSampleStorageRange =
    objc.registerName("currentSampleStorageRange");
late final _sel_makeSampleCursorWithPresentationTimeStamp_ =
    objc.registerName("makeSampleCursorWithPresentationTimeStamp:");
final _objc_msgSend_736 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTime)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTime)>();
late final _sel_makeSampleCursorAtFirstSampleInDecodeOrder =
    objc.registerName("makeSampleCursorAtFirstSampleInDecodeOrder");
final _objc_msgSend_737 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_makeSampleCursorAtLastSampleInDecodeOrder =
    objc.registerName("makeSampleCursorAtLastSampleInDecodeOrder");
late final _sel_trackWithTrackID_ = objc.registerName("trackWithTrackID:");
final _objc_msgSend_738 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
void _ObjCBlock_ffiVoid_AVAssetTrack_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVAssetTrack_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVAssetTrack_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc
      .ObjCBlock<ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVAssetTrack_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVAssetTrack, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_AVAssetTrack_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  AVAssetTrack.castFromPointer(arg0, retain: true, release: true),
                  arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc
      .ObjCBlock<ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(AVAssetTrack, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVAssetTrack_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            AVAssetTrack.castFromPointer(arg0, retain: false, release: true),
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1,
                    retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVAssetTrack_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVAssetTrack_NSError_CallExtension on objc
    .ObjCBlock<ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVAssetTrack arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_loadTrackWithTrackID_completionHandler_ =
    objc.registerName("loadTrackWithTrackID:completionHandler:");
final _objc_msgSend_739 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_tracksWithMediaType_ =
    objc.registerName("tracksWithMediaType:");
late final _sel_loadTracksWithMediaType_completionHandler_ =
    objc.registerName("loadTracksWithMediaType:completionHandler:");
late final _sel_tracksWithMediaCharacteristic_ =
    objc.registerName("tracksWithMediaCharacteristic:");
late final _sel_loadTracksWithMediaCharacteristic_completionHandler_ =
    objc.registerName("loadTracksWithMediaCharacteristic:completionHandler:");
late final _sel_trackGroups = objc.registerName("trackGroups");

/// AVMetadataItem
class AVMetadataItem extends objc.NSObject {
  AVMetadataItem._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMetadataItem] that points to the same underlying object as [other].
  AVMetadataItem.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMetadataItem] that wraps the given raw object pointer.
  AVMetadataItem.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMetadataItem].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMetadataItem);
  }

  /// identifier
  objc.NSString? get identifier {
    final _ret = _objc_msgSend_20(this.pointer, _sel_identifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// extendedLanguageTag
  objc.NSString? get extendedLanguageTag {
    final _ret = _objc_msgSend_20(this.pointer, _sel_extendedLanguageTag);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// locale
  objc.NSLocale? get locale {
    final _ret = _objc_msgSend_133(this.pointer, _sel_locale);
    return _ret.address == 0
        ? null
        : objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  /// time
  void getTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_time)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_time);
  }

  /// duration
  void getDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_duration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_duration);
  }

  /// dataType
  objc.NSString? get dataType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_dataType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// value
  objc.ObjCObjectBase? get value {
    final _ret = _objc_msgSend_85(this.pointer, _sel_value);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// extraAttributes
  objc.NSDictionary? get extraAttributes {
    final _ret = _objc_msgSend_84(this.pointer, _sel_extraAttributes);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// startDate
  objc.NSDate? get startDate {
    final _ret = _objc_msgSend_126(this.pointer, _sel_startDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringValue
  objc.NSString? get stringValue {
    final _ret = _objc_msgSend_20(this.pointer, _sel_stringValue);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// numberValue
  objc.NSNumber? get numberValue {
    final _ret = _objc_msgSend_22(this.pointer, _sel_numberValue);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateValue
  objc.NSDate? get dateValue {
    final _ret = _objc_msgSend_126(this.pointer, _sel_dateValue);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dataValue
  objc.NSData? get dataValue {
    final _ret = _objc_msgSend_337(this.pointer, _sel_dataValue);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// statusOfValueForKey:error:
  AVKeyValueStatus statusOfValueForKey_error_(
      objc.NSString key, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_740(
        this.pointer, _sel_statusOfValueForKey_error_, key.pointer, outError);
    return AVKeyValueStatus.fromValue(_ret);
  }

  /// loadValuesAsynchronouslyForKeys:completionHandler:
  void loadValuesAsynchronouslyForKeys_completionHandler_(
      objc.NSArray keys, objc.ObjCBlock<ffi.Void Function()>? handler) {
    _objc_msgSend_741(
        this.pointer,
        _sel_loadValuesAsynchronouslyForKeys_completionHandler_,
        keys.pointer,
        handler?.pointer ?? ffi.nullptr);
  }

  /// metadataItemsFromArray:filteredAndSortedAccordingToPreferredLanguages:
  static objc.NSArray
      metadataItemsFromArray_filteredAndSortedAccordingToPreferredLanguages_(
          objc.NSArray metadataItems, objc.NSArray preferredLanguages) {
    final _ret = _objc_msgSend_742(
        _class_AVMetadataItem,
        _sel_metadataItemsFromArray_filteredAndSortedAccordingToPreferredLanguages_,
        metadataItems.pointer,
        preferredLanguages.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataItemsFromArray:filteredByIdentifier:
  static objc.NSArray metadataItemsFromArray_filteredByIdentifier_(
      objc.NSArray metadataItems, objc.NSString identifier) {
    final _ret = _objc_msgSend_743(
        _class_AVMetadataItem,
        _sel_metadataItemsFromArray_filteredByIdentifier_,
        metadataItems.pointer,
        identifier.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataItemsFromArray:filteredByMetadataItemFilter:
  static objc.NSArray metadataItemsFromArray_filteredByMetadataItemFilter_(
      objc.NSArray metadataItems, AVMetadataItemFilter metadataItemFilter) {
    final _ret = _objc_msgSend_745(
        _class_AVMetadataItem,
        _sel_metadataItemsFromArray_filteredByMetadataItemFilter_,
        metadataItems.pointer,
        metadataItemFilter.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// identifierForKey:keySpace:
  static objc.NSString? identifierForKey_keySpace_(
      objc.ObjCObjectBase key, objc.NSString keySpace) {
    final _ret = _objc_msgSend_746(_class_AVMetadataItem,
        _sel_identifierForKey_keySpace_, key.pointer, keySpace.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// keySpaceForIdentifier:
  static objc.NSString? keySpaceForIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_42(
        _class_AVMetadataItem, _sel_keySpaceForIdentifier_, identifier.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// keyForIdentifier:
  static objc.ObjCObjectBase? keyForIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_35(
        _class_AVMetadataItem, _sel_keyForIdentifier_, identifier.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// key
  objc.ObjCObjectBase? get key {
    final _ret = _objc_msgSend_85(this.pointer, _sel_key);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// commonKey
  objc.NSString? get commonKey {
    final _ret = _objc_msgSend_20(this.pointer, _sel_commonKey);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// keySpace
  objc.NSString? get keySpace {
    final _ret = _objc_msgSend_20(this.pointer, _sel_keySpace);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataItemWithPropertiesOfMetadataItem:valueLoadingHandler:
  static AVMetadataItem
      metadataItemWithPropertiesOfMetadataItem_valueLoadingHandler_(
          AVMetadataItem metadataItem,
          objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)>
              handler) {
    final _ret = _objc_msgSend_748(
        _class_AVMetadataItem,
        _sel_metadataItemWithPropertiesOfMetadataItem_valueLoadingHandler_,
        metadataItem.pointer,
        handler.pointer);
    return AVMetadataItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataItemsFromArray:withLocale:
  static objc.NSArray metadataItemsFromArray_withLocale_(
      objc.NSArray metadataItems, objc.NSLocale locale) {
    final _ret = _objc_msgSend_749(
        _class_AVMetadataItem,
        _sel_metadataItemsFromArray_withLocale_,
        metadataItems.pointer,
        locale.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataItemsFromArray:withKey:keySpace:
  static objc.NSArray metadataItemsFromArray_withKey_keySpace_(
      objc.NSArray metadataItems,
      objc.ObjCObjectBase? key,
      objc.NSString? keySpace) {
    final _ret = _objc_msgSend_750(
        _class_AVMetadataItem,
        _sel_metadataItemsFromArray_withKey_keySpace_,
        metadataItems.pointer,
        key?.pointer ?? ffi.nullptr,
        keySpace?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVMetadataItem init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMetadataItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVMetadataItem new1() {
    final _ret = _objc_msgSend_19(_class_AVMetadataItem, _sel_new);
    return AVMetadataItem.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVMetadataItem allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMetadataItem, _sel_allocWithZone_, zone);
    return AVMetadataItem.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVMetadataItem alloc() {
    final _ret = _objc_msgSend_19(_class_AVMetadataItem, _sel_alloc);
    return AVMetadataItem.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMetadataItem,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMetadataItem,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMetadataItem, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMetadataItem, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMetadataItem,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMetadataItem,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMetadataItem,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMetadataItem, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVMetadataItem, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMetadataItem = objc.getClass("AVMetadataItem");
late final _sel_time = objc.registerName("time");
late final _sel_dataType = objc.registerName("dataType");
late final _sel_extraAttributes = objc.registerName("extraAttributes");
late final _sel_startDate = objc.registerName("startDate");
late final _sel_numberValue = objc.registerName("numberValue");
late final _sel_dataValue = objc.registerName("dataValue");

enum AVKeyValueStatus {
  AVKeyValueStatusUnknown(0),
  AVKeyValueStatusLoading(1),
  AVKeyValueStatusLoaded(2),
  AVKeyValueStatusFailed(3),
  AVKeyValueStatusCancelled(4);

  final int value;
  const AVKeyValueStatus(this.value);

  static AVKeyValueStatus fromValue(int value) => switch (value) {
        0 => AVKeyValueStatusUnknown,
        1 => AVKeyValueStatusLoading,
        2 => AVKeyValueStatusLoaded,
        3 => AVKeyValueStatusFailed,
        4 => AVKeyValueStatusCancelled,
        _ => throw ArgumentError("Unknown value for AVKeyValueStatus: $value"),
      };
}

late final _sel_statusOfValueForKey_error_ =
    objc.registerName("statusOfValueForKey:error:");
final _objc_msgSend_740 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_loadValuesAsynchronouslyForKeys_completionHandler_ =
    objc.registerName("loadValuesAsynchronouslyForKeys:completionHandler:");
final _objc_msgSend_741 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_metadataItemsFromArray_filteredAndSortedAccordingToPreferredLanguages_ =
    objc.registerName(
        "metadataItemsFromArray:filteredAndSortedAccordingToPreferredLanguages:");
final _objc_msgSend_742 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_metadataItemsFromArray_filteredByIdentifier_ =
    objc.registerName("metadataItemsFromArray:filteredByIdentifier:");
final _objc_msgSend_743 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// AVMetadataItemFilter
class AVMetadataItemFilter extends objc.NSObject {
  AVMetadataItemFilter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMetadataItemFilter] that points to the same underlying object as [other].
  AVMetadataItemFilter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMetadataItemFilter] that wraps the given raw object pointer.
  AVMetadataItemFilter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMetadataItemFilter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMetadataItemFilter);
  }

  /// metadataItemFilterForSharing
  static AVMetadataItemFilter metadataItemFilterForSharing() {
    final _ret = _objc_msgSend_744(
        _class_AVMetadataItemFilter, _sel_metadataItemFilterForSharing);
    return AVMetadataItemFilter.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  AVMetadataItemFilter init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMetadataItemFilter.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMetadataItemFilter new1() {
    final _ret = _objc_msgSend_19(_class_AVMetadataItemFilter, _sel_new);
    return AVMetadataItemFilter.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVMetadataItemFilter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVMetadataItemFilter, _sel_allocWithZone_, zone);
    return AVMetadataItemFilter.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMetadataItemFilter alloc() {
    final _ret = _objc_msgSend_19(_class_AVMetadataItemFilter, _sel_alloc);
    return AVMetadataItemFilter.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMetadataItemFilter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMetadataItemFilter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMetadataItemFilter, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVMetadataItemFilter, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMetadataItemFilter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMetadataItemFilter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMetadataItemFilter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMetadataItemFilter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVMetadataItemFilter, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMetadataItemFilter = objc.getClass("AVMetadataItemFilter");
late final _sel_metadataItemFilterForSharing =
    objc.registerName("metadataItemFilterForSharing");
final _objc_msgSend_744 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_metadataItemsFromArray_filteredByMetadataItemFilter_ =
    objc.registerName("metadataItemsFromArray:filteredByMetadataItemFilter:");
final _objc_msgSend_745 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_identifierForKey_keySpace_ =
    objc.registerName("identifierForKey:keySpace:");
final _objc_msgSend_746 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_keySpaceForIdentifier_ =
    objc.registerName("keySpaceForIdentifier:");
late final _sel_keyForIdentifier_ = objc.registerName("keyForIdentifier:");
late final _sel_commonKey = objc.registerName("commonKey");
late final _sel_keySpace = objc.registerName("keySpace");
void _ObjCBlock_ffiVoid_AVMetadataItemValueRequest_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_AVMetadataItemValueRequest_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)>`.
abstract final class ObjCBlock_ffiVoid_AVMetadataItemValueRequest {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                                  ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_AVMetadataItemValueRequest_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)> fromFunction(
          void Function(AVMetadataItemValueRequest) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_AVMetadataItemValueRequest_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(AVMetadataItemValueRequest.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)> listener(
      void Function(AVMetadataItemValueRequest) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVMetadataItemValueRequest_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(
            AVMetadataItemValueRequest.castFromPointer(arg0,
                retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVMetadataItemValueRequest(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)>`.
extension ObjCBlock_ffiVoid_AVMetadataItemValueRequest_CallExtension
    on objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)> {
  void call(AVMetadataItemValueRequest arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

/// AVMetadataItemValueRequest
class AVMetadataItemValueRequest extends objc.NSObject {
  AVMetadataItemValueRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMetadataItemValueRequest] that points to the same underlying object as [other].
  AVMetadataItemValueRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMetadataItemValueRequest] that wraps the given raw object pointer.
  AVMetadataItemValueRequest.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMetadataItemValueRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMetadataItemValueRequest);
  }

  /// metadataItem
  AVMetadataItem? get metadataItem {
    final _ret = _objc_msgSend_747(this.pointer, _sel_metadataItem);
    return _ret.address == 0
        ? null
        : AVMetadataItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// respondWithValue:
  void respondWithValue_(objc.ObjCObjectBase value) {
    _objc_msgSend_27(this.pointer, _sel_respondWithValue_, value.pointer);
  }

  /// respondWithError:
  void respondWithError_(objc.NSError error) {
    _objc_msgSend_706(this.pointer, _sel_respondWithError_, error.pointer);
  }

  /// init
  AVMetadataItemValueRequest init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMetadataItemValueRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMetadataItemValueRequest new1() {
    final _ret = _objc_msgSend_19(_class_AVMetadataItemValueRequest, _sel_new);
    return AVMetadataItemValueRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVMetadataItemValueRequest allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVMetadataItemValueRequest, _sel_allocWithZone_, zone);
    return AVMetadataItemValueRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMetadataItemValueRequest alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVMetadataItemValueRequest, _sel_alloc);
    return AVMetadataItemValueRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMetadataItemValueRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMetadataItemValueRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVMetadataItemValueRequest,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVMetadataItemValueRequest, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMetadataItemValueRequest,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMetadataItemValueRequest,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMetadataItemValueRequest,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMetadataItemValueRequest, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVMetadataItemValueRequest, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMetadataItemValueRequest =
    objc.getClass("AVMetadataItemValueRequest");
late final _sel_metadataItem = objc.registerName("metadataItem");
final _objc_msgSend_747 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_respondWithValue_ = objc.registerName("respondWithValue:");
late final _sel_respondWithError_ = objc.registerName("respondWithError:");
late final _sel_metadataItemWithPropertiesOfMetadataItem_valueLoadingHandler_ =
    objc.registerName(
        "metadataItemWithPropertiesOfMetadataItem:valueLoadingHandler:");
final _objc_msgSend_748 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_metadataItemsFromArray_withLocale_ =
    objc.registerName("metadataItemsFromArray:withLocale:");
final _objc_msgSend_749 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_metadataItemsFromArray_withKey_keySpace_ =
    objc.registerName("metadataItemsFromArray:withKey:keySpace:");
final _objc_msgSend_750 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_creationDate = objc.registerName("creationDate");
late final _sel_lyrics = objc.registerName("lyrics");
late final _sel_availableChapterLocales =
    objc.registerName("availableChapterLocales");
late final _sel_chapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_ =
    objc.registerName(
        "chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:");
final _objc_msgSend_751 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_loadChapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_completionHandler_ =
    objc.registerName(
        "loadChapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:completionHandler:");
final _objc_msgSend_752 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_chapterMetadataGroupsBestMatchingPreferredLanguages_ =
    objc.registerName("chapterMetadataGroupsBestMatchingPreferredLanguages:");
late final _sel_loadChapterMetadataGroupsBestMatchingPreferredLanguages_completionHandler_ =
    objc.registerName(
        "loadChapterMetadataGroupsBestMatchingPreferredLanguages:completionHandler:");
final _objc_msgSend_753 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_availableMediaCharacteristicsWithMediaSelectionOptions =
    objc.registerName("availableMediaCharacteristicsWithMediaSelectionOptions");

/// AVMediaSelectionGroup
class AVMediaSelectionGroup extends objc.NSObject {
  AVMediaSelectionGroup._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMediaSelectionGroup] that points to the same underlying object as [other].
  AVMediaSelectionGroup.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMediaSelectionGroup] that wraps the given raw object pointer.
  AVMediaSelectionGroup.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMediaSelectionGroup].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMediaSelectionGroup);
  }

  /// options
  objc.NSArray get options {
    final _ret = _objc_msgSend_33(this.pointer, _sel_options);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultOption
  AVMediaSelectionOption? get defaultOption {
    final _ret = _objc_msgSend_756(this.pointer, _sel_defaultOption);
    return _ret.address == 0
        ? null
        : AVMediaSelectionOption.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// allowsEmptySelection
  bool get allowsEmptySelection {
    return _objc_msgSend_13(this.pointer, _sel_allowsEmptySelection);
  }

  /// mediaSelectionOptionWithPropertyList:
  AVMediaSelectionOption? mediaSelectionOptionWithPropertyList_(
      objc.ObjCObjectBase plist) {
    final _ret = _objc_msgSend_757(this.pointer,
        _sel_mediaSelectionOptionWithPropertyList_, plist.pointer);
    return _ret.address == 0
        ? null
        : AVMediaSelectionOption.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// playableMediaSelectionOptionsFromArray:
  static objc.NSArray playableMediaSelectionOptionsFromArray_(
      objc.NSArray mediaSelectionOptions) {
    final _ret = _objc_msgSend_86(
        _class_AVMediaSelectionGroup,
        _sel_playableMediaSelectionOptionsFromArray_,
        mediaSelectionOptions.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionOptionsFromArray:filteredAndSortedAccordingToPreferredLanguages:
  static objc.NSArray
      mediaSelectionOptionsFromArray_filteredAndSortedAccordingToPreferredLanguages_(
          objc.NSArray mediaSelectionOptions, objc.NSArray preferredLanguages) {
    final _ret = _objc_msgSend_742(
        _class_AVMediaSelectionGroup,
        _sel_mediaSelectionOptionsFromArray_filteredAndSortedAccordingToPreferredLanguages_,
        mediaSelectionOptions.pointer,
        preferredLanguages.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionOptionsFromArray:withLocale:
  static objc.NSArray mediaSelectionOptionsFromArray_withLocale_(
      objc.NSArray mediaSelectionOptions, objc.NSLocale locale) {
    final _ret = _objc_msgSend_749(
        _class_AVMediaSelectionGroup,
        _sel_mediaSelectionOptionsFromArray_withLocale_,
        mediaSelectionOptions.pointer,
        locale.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionOptionsFromArray:withMediaCharacteristics:
  static objc.NSArray mediaSelectionOptionsFromArray_withMediaCharacteristics_(
      objc.NSArray mediaSelectionOptions, objc.NSArray mediaCharacteristics) {
    final _ret = _objc_msgSend_742(
        _class_AVMediaSelectionGroup,
        _sel_mediaSelectionOptionsFromArray_withMediaCharacteristics_,
        mediaSelectionOptions.pointer,
        mediaCharacteristics.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionOptionsFromArray:withoutMediaCharacteristics:
  static objc.NSArray
      mediaSelectionOptionsFromArray_withoutMediaCharacteristics_(
          objc.NSArray mediaSelectionOptions,
          objc.NSArray mediaCharacteristics) {
    final _ret = _objc_msgSend_742(
        _class_AVMediaSelectionGroup,
        _sel_mediaSelectionOptionsFromArray_withoutMediaCharacteristics_,
        mediaSelectionOptions.pointer,
        mediaCharacteristics.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVMediaSelectionGroup init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMediaSelectionGroup.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMediaSelectionGroup new1() {
    final _ret = _objc_msgSend_19(_class_AVMediaSelectionGroup, _sel_new);
    return AVMediaSelectionGroup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVMediaSelectionGroup allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVMediaSelectionGroup, _sel_allocWithZone_, zone);
    return AVMediaSelectionGroup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMediaSelectionGroup alloc() {
    final _ret = _objc_msgSend_19(_class_AVMediaSelectionGroup, _sel_alloc);
    return AVMediaSelectionGroup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMediaSelectionGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMediaSelectionGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMediaSelectionGroup, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVMediaSelectionGroup, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMediaSelectionGroup,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMediaSelectionGroup,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMediaSelectionGroup,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMediaSelectionGroup, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVMediaSelectionGroup, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMediaSelectionGroup =
    objc.getClass("AVMediaSelectionGroup");

/// AVMediaSelectionOption
class AVMediaSelectionOption extends objc.NSObject {
  AVMediaSelectionOption._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMediaSelectionOption] that points to the same underlying object as [other].
  AVMediaSelectionOption.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMediaSelectionOption] that wraps the given raw object pointer.
  AVMediaSelectionOption.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMediaSelectionOption].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMediaSelectionOption);
  }

  /// mediaType
  objc.NSString get mediaType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_mediaType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSubTypes
  objc.NSArray get mediaSubTypes {
    final _ret = _objc_msgSend_33(this.pointer, _sel_mediaSubTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// hasMediaCharacteristic:
  bool hasMediaCharacteristic_(objc.NSString mediaCharacteristic) {
    return _objc_msgSend_31(this.pointer, _sel_hasMediaCharacteristic_,
        mediaCharacteristic.pointer);
  }

  /// isPlayable
  bool get playable {
    return _objc_msgSend_13(this.pointer, _sel_isPlayable);
  }

  /// extendedLanguageTag
  objc.NSString? get extendedLanguageTag {
    final _ret = _objc_msgSend_20(this.pointer, _sel_extendedLanguageTag);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// locale
  objc.NSLocale? get locale {
    final _ret = _objc_msgSend_133(this.pointer, _sel_locale);
    return _ret.address == 0
        ? null
        : objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  /// commonMetadata
  objc.NSArray get commonMetadata {
    final _ret = _objc_msgSend_33(this.pointer, _sel_commonMetadata);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableMetadataFormats
  objc.NSArray get availableMetadataFormats {
    final _ret = _objc_msgSend_33(this.pointer, _sel_availableMetadataFormats);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataForFormat:
  objc.NSArray metadataForFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_metadataForFormat_, format.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// associatedMediaSelectionOptionInMediaSelectionGroup:
  AVMediaSelectionOption? associatedMediaSelectionOptionInMediaSelectionGroup_(
      AVMediaSelectionGroup mediaSelectionGroup) {
    final _ret = _objc_msgSend_754(
        this.pointer,
        _sel_associatedMediaSelectionOptionInMediaSelectionGroup_,
        mediaSelectionGroup.pointer);
    return _ret.address == 0
        ? null
        : AVMediaSelectionOption.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// propertyList
  objc.ObjCObjectBase propertyList() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_propertyList);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// displayNameWithLocale:
  objc.NSString displayNameWithLocale_(objc.NSLocale locale) {
    final _ret = _objc_msgSend_755(
        this.pointer, _sel_displayNameWithLocale_, locale.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// displayName
  objc.NSString get displayName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_displayName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVMediaSelectionOption init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMediaSelectionOption.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMediaSelectionOption new1() {
    final _ret = _objc_msgSend_19(_class_AVMediaSelectionOption, _sel_new);
    return AVMediaSelectionOption.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVMediaSelectionOption allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVMediaSelectionOption, _sel_allocWithZone_, zone);
    return AVMediaSelectionOption.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMediaSelectionOption alloc() {
    final _ret = _objc_msgSend_19(_class_AVMediaSelectionOption, _sel_alloc);
    return AVMediaSelectionOption.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMediaSelectionOption,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMediaSelectionOption,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMediaSelectionOption, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVMediaSelectionOption, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMediaSelectionOption,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMediaSelectionOption,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMediaSelectionOption,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMediaSelectionOption, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVMediaSelectionOption, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMediaSelectionOption =
    objc.getClass("AVMediaSelectionOption");
late final _sel_mediaSubTypes = objc.registerName("mediaSubTypes");
late final _sel_associatedMediaSelectionOptionInMediaSelectionGroup_ =
    objc.registerName("associatedMediaSelectionOptionInMediaSelectionGroup:");
final _objc_msgSend_754 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_propertyList = objc.registerName("propertyList");
late final _sel_displayNameWithLocale_ =
    objc.registerName("displayNameWithLocale:");
final _objc_msgSend_755 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_displayName = objc.registerName("displayName");
late final _sel_defaultOption = objc.registerName("defaultOption");
final _objc_msgSend_756 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_allowsEmptySelection =
    objc.registerName("allowsEmptySelection");
late final _sel_mediaSelectionOptionWithPropertyList_ =
    objc.registerName("mediaSelectionOptionWithPropertyList:");
final _objc_msgSend_757 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_playableMediaSelectionOptionsFromArray_ =
    objc.registerName("playableMediaSelectionOptionsFromArray:");
late final _sel_mediaSelectionOptionsFromArray_filteredAndSortedAccordingToPreferredLanguages_ =
    objc.registerName(
        "mediaSelectionOptionsFromArray:filteredAndSortedAccordingToPreferredLanguages:");
late final _sel_mediaSelectionOptionsFromArray_withLocale_ =
    objc.registerName("mediaSelectionOptionsFromArray:withLocale:");
late final _sel_mediaSelectionOptionsFromArray_withMediaCharacteristics_ = objc
    .registerName("mediaSelectionOptionsFromArray:withMediaCharacteristics:");
late final _sel_mediaSelectionOptionsFromArray_withoutMediaCharacteristics_ =
    objc.registerName(
        "mediaSelectionOptionsFromArray:withoutMediaCharacteristics:");
late final _sel_mediaSelectionGroupForMediaCharacteristic_ =
    objc.registerName("mediaSelectionGroupForMediaCharacteristic:");
final _objc_msgSend_758 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_AVMediaSelectionGroup_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVMediaSelectionGroup_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVMediaSelectionGroup_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVMediaSelectionGroup_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVMediaSelectionGroup, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_AVMediaSelectionGroup_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(AVMediaSelectionGroup.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(AVMediaSelectionGroup, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVMediaSelectionGroup_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            AVMediaSelectionGroup.castFromPointer(arg0,
                retain: false, release: true),
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVMediaSelectionGroup_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVMediaSelectionGroup_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            AVMediaSelectionGroup, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVMediaSelectionGroup arg0, objc.NSError? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_loadMediaSelectionGroupForMediaCharacteristic_completionHandler_ =
    objc.registerName(
        "loadMediaSelectionGroupForMediaCharacteristic:completionHandler:");
final _objc_msgSend_759 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVMediaSelection
class AVMediaSelection extends objc.NSObject {
  AVMediaSelection._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMediaSelection] that points to the same underlying object as [other].
  AVMediaSelection.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMediaSelection] that wraps the given raw object pointer.
  AVMediaSelection.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMediaSelection].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMediaSelection);
  }

  /// asset
  AVAsset? get asset {
    final _ret = _objc_msgSend_717(this.pointer, _sel_asset);
    return _ret.address == 0
        ? null
        : AVAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// selectedMediaOptionInMediaSelectionGroup:
  AVMediaSelectionOption? selectedMediaOptionInMediaSelectionGroup_(
      AVMediaSelectionGroup mediaSelectionGroup) {
    final _ret = _objc_msgSend_754(
        this.pointer,
        _sel_selectedMediaOptionInMediaSelectionGroup_,
        mediaSelectionGroup.pointer);
    return _ret.address == 0
        ? null
        : AVMediaSelectionOption.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup:
  bool mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup_(
      AVMediaSelectionGroup mediaSelectionGroup) {
    return _objc_msgSend_760(
        this.pointer,
        _sel_mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup_,
        mediaSelectionGroup.pointer);
  }

  /// init
  AVMediaSelection init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMediaSelection.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVMediaSelection new1() {
    final _ret = _objc_msgSend_19(_class_AVMediaSelection, _sel_new);
    return AVMediaSelection.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVMediaSelection allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMediaSelection, _sel_allocWithZone_, zone);
    return AVMediaSelection.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVMediaSelection alloc() {
    final _ret = _objc_msgSend_19(_class_AVMediaSelection, _sel_alloc);
    return AVMediaSelection.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMediaSelection,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMediaSelection,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMediaSelection, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMediaSelection, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMediaSelection,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMediaSelection,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMediaSelection,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMediaSelection, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVMediaSelection, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMediaSelection = objc.getClass("AVMediaSelection");
late final _sel_selectedMediaOptionInMediaSelectionGroup_ =
    objc.registerName("selectedMediaOptionInMediaSelectionGroup:");
late final _sel_mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup_ =
    objc.registerName(
        "mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup:");
final _objc_msgSend_760 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_preferredMediaSelection =
    objc.registerName("preferredMediaSelection");
final _objc_msgSend_761 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_allMediaSelections = objc.registerName("allMediaSelections");
late final _sel_hasProtectedContent = objc.registerName("hasProtectedContent");
late final _sel_canContainFragments = objc.registerName("canContainFragments");
late final _sel_containsFragments = objc.registerName("containsFragments");
late final _sel_overallDurationHint = objc.registerName("overallDurationHint");
late final _sel_isExportable = objc.registerName("isExportable");
late final _sel_isReadable = objc.registerName("isReadable");
late final _sel_isComposable = objc.registerName("isComposable");
late final _sel_isCompatibleWithSavedPhotosAlbum =
    objc.registerName("isCompatibleWithSavedPhotosAlbum");
late final _sel_isCompatibleWithAirPlayVideo =
    objc.registerName("isCompatibleWithAirPlayVideo");
late final _sel_unusedTrackID = objc.registerName("unusedTrackID");
void _ObjCBlock_ffiVoid_Int32_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Int32 arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
            .asFunction<void Function(int, ffi.Pointer<objc.ObjCObject>)>()(
        arg0, arg1);
void _ObjCBlock_ffiVoid_Int32_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        int, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_Int32_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32 arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int32, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_Int32_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>
      fromFunction(void Function(int, objc.NSError?) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int32, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_Int32_NSError_closureTrampoline)
                          .cast(),
                  (int arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                      fn(arg0, arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc
      .ObjCBlock<ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(int, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Int32, ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_Int32_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0,
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1,
                    retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_Int32_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int32,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_Int32_NSError_CallExtension on objc
    .ObjCBlock<ffi.Void Function(ffi.Int32, ffi.Pointer<objc.ObjCObject>)> {
  void call(int arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Int32 arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>, int,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_findUnusedTrackIDWithCompletionHandler_ =
    objc.registerName("findUnusedTrackIDWithCompletionHandler:");
final _objc_msgSend_762 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVURLAsset
class AVURLAsset extends AVAsset {
  AVURLAsset._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVURLAsset] that points to the same underlying object as [other].
  AVURLAsset.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVURLAsset] that wraps the given raw object pointer.
  AVURLAsset.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVURLAsset].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_AVURLAsset);
  }

  /// init
  AVURLAsset init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVURLAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVURLAsset new1() {
    final _ret = _objc_msgSend_19(_class_AVURLAsset, _sel_new);
    return AVURLAsset.castFromPointer(_ret, retain: false, release: true);
  }

  /// audiovisualTypes
  static objc.NSArray audiovisualTypes() {
    final _ret = _objc_msgSend_33(_class_AVURLAsset, _sel_audiovisualTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// audiovisualMIMETypes
  static objc.NSArray audiovisualMIMETypes() {
    final _ret = _objc_msgSend_33(_class_AVURLAsset, _sel_audiovisualMIMETypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isPlayableExtendedMIMEType:
  static bool isPlayableExtendedMIMEType_(objc.NSString extendedMIMEType) {
    return _objc_msgSend_31(_class_AVURLAsset, _sel_isPlayableExtendedMIMEType_,
        extendedMIMEType.pointer);
  }

  /// URLAssetWithURL:options:
  static AVURLAsset URLAssetWithURL_options_(
      objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(
        _class_AVURLAsset,
        _sel_URLAssetWithURL_options_,
        URL.pointer,
        options?.pointer ?? ffi.nullptr);
    return AVURLAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:options:
  AVURLAsset initWithURL_options_(objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(this.pointer, _sel_initWithURL_options_,
        URL.pointer, options?.pointer ?? ffi.nullptr);
    return AVURLAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// URL
  objc.NSURL get URL {
    final _ret = _objc_msgSend_40(this.pointer, _sel_URL);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// httpSessionIdentifier
  NSUUID get httpSessionIdentifier {
    final _ret = _objc_msgSend_767(this.pointer, _sel_httpSessionIdentifier);
    return NSUUID.castFromPointer(_ret, retain: true, release: true);
  }

  /// resourceLoader
  AVAssetResourceLoader get resourceLoader {
    final _ret = _objc_msgSend_768(this.pointer, _sel_resourceLoader);
    return AVAssetResourceLoader.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// assetCache
  AVAssetCache? get assetCache {
    final _ret = _objc_msgSend_770(this.pointer, _sel_assetCache);
    return _ret.address == 0
        ? null
        : AVAssetCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// compatibleTrackForCompositionTrack:
  AVAssetTrack? compatibleTrackForCompositionTrack_(
      AVCompositionTrack compositionTrack) {
    final _ret = _objc_msgSend_774(this.pointer,
        _sel_compatibleTrackForCompositionTrack_, compositionTrack.pointer);
    return _ret.address == 0
        ? null
        : AVAssetTrack.castFromPointer(_ret, retain: true, release: true);
  }

  /// findCompatibleTrackForCompositionTrack:completionHandler:
  void findCompatibleTrackForCompositionTrack_completionHandler_(
      AVCompositionTrack compositionTrack,
      objc.ObjCBlock<
              ffi.Void Function(AVAssetTrack, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_775(
        this.pointer,
        _sel_findCompatibleTrackForCompositionTrack_completionHandler_,
        compositionTrack.pointer,
        completionHandler.pointer);
  }

  /// variants
  objc.NSArray get variants {
    final _ret = _objc_msgSend_33(this.pointer, _sel_variants);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mayRequireContentKeysForMediaDataProcessing
  bool get mayRequireContentKeysForMediaDataProcessing {
    return _objc_msgSend_13(
        this.pointer, _sel_mayRequireContentKeysForMediaDataProcessing);
  }

  /// assetWithURL:
  static AVURLAsset assetWithURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_332(_class_AVURLAsset, _sel_assetWithURL_, URL.pointer);
    return AVURLAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVURLAsset allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_AVURLAsset, _sel_allocWithZone_, zone);
    return AVURLAsset.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVURLAsset alloc() {
    final _ret = _objc_msgSend_19(_class_AVURLAsset, _sel_alloc);
    return AVURLAsset.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVURLAsset,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVURLAsset,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVURLAsset, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVURLAsset, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVURLAsset,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVURLAsset,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVURLAsset,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVURLAsset, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVURLAsset, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVURLAsset = objc.getClass("AVURLAsset");
late final _sel_audiovisualTypes = objc.registerName("audiovisualTypes");
late final _sel_audiovisualMIMETypes =
    objc.registerName("audiovisualMIMETypes");
late final _sel_isPlayableExtendedMIMEType_ =
    objc.registerName("isPlayableExtendedMIMEType:");
late final _sel_URLAssetWithURL_options_ =
    objc.registerName("URLAssetWithURL:options:");
final _objc_msgSend_763 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithURL_options_ =
    objc.registerName("initWithURL:options:");

/// NSUUID
class NSUUID extends objc.NSObject {
  NSUUID._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSUUID] that points to the same underlying object as [other].
  NSUUID.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSUUID] that wraps the given raw object pointer.
  NSUUID.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSUUID].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSUUID);
  }

  /// UUID
  static NSUUID UUID() {
    final _ret = _objc_msgSend_19(_class_NSUUID, _sel_UUID);
    return NSUUID.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSUUID init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSUUID.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithUUIDString:
  NSUUID? initWithUUIDString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        this.pointer, _sel_initWithUUIDString_, string.pointer);
    return _ret.address == 0
        ? null
        : NSUUID.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithUUIDBytes:
  NSUUID initWithUUIDBytes_(ffi.Pointer<ffi.UnsignedChar> bytes) {
    final _ret =
        _objc_msgSend_764(this.pointer, _sel_initWithUUIDBytes_, bytes);
    return NSUUID.castFromPointer(_ret, retain: true, release: true);
  }

  /// getUUIDBytes:
  void getUUIDBytes_(ffi.Pointer<ffi.UnsignedChar> uuid) {
    _objc_msgSend_765(this.pointer, _sel_getUUIDBytes_, uuid);
  }

  /// compare:
  objc.NSComparisonResult compare_(NSUUID otherUUID) {
    final _ret =
        _objc_msgSend_766(this.pointer, _sel_compare_, otherUUID.pointer);
    return objc.NSComparisonResult.fromValue(_ret);
  }

  /// UUIDString
  objc.NSString get UUIDString {
    final _ret = _objc_msgSend_11(this.pointer, _sel_UUIDString);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSUUID new1() {
    final _ret = _objc_msgSend_19(_class_NSUUID, _sel_new);
    return NSUUID.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSUUID allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSUUID, _sel_allocWithZone_, zone);
    return NSUUID.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSUUID alloc() {
    final _ret = _objc_msgSend_19(_class_NSUUID, _sel_alloc);
    return NSUUID.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSUUID,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSUUID,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSUUID, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSUUID, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSUUID,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        _class_NSUUID, _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSUUID,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSUUID, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_NSUUID, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSUUID = objc.getClass("NSUUID");
late final _sel_UUID = objc.registerName("UUID");
late final _sel_initWithUUIDString_ = objc.registerName("initWithUUIDString:");
late final _sel_initWithUUIDBytes_ = objc.registerName("initWithUUIDBytes:");
final _objc_msgSend_764 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedChar>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.UnsignedChar>)>();
late final _sel_getUUIDBytes_ = objc.registerName("getUUIDBytes:");
final _objc_msgSend_765 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedChar>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.UnsignedChar>)>();
final _objc_msgSend_766 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_UUIDString = objc.registerName("UUIDString");
late final _sel_httpSessionIdentifier =
    objc.registerName("httpSessionIdentifier");
final _objc_msgSend_767 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVAssetResourceLoader
class AVAssetResourceLoader extends objc.NSObject {
  AVAssetResourceLoader._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetResourceLoader] that points to the same underlying object as [other].
  AVAssetResourceLoader.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetResourceLoader] that wraps the given raw object pointer.
  AVAssetResourceLoader.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetResourceLoader].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetResourceLoader);
  }

  /// init
  AVAssetResourceLoader init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetResourceLoader.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetResourceLoader new1() {
    final _ret = _objc_msgSend_19(_class_AVAssetResourceLoader, _sel_new);
    return AVAssetResourceLoader.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// setDelegate:queue:
  void setDelegate_queue_(
      objc.ObjCObjectBase? delegate, objc.NSObject? delegateQueue) {
    _objc_msgSend_697(
        this.pointer,
        _sel_setDelegate_queue_,
        delegate?.pointer ?? ffi.nullptr,
        delegateQueue?.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// delegateQueue
  objc.NSObject? get delegateQueue {
    final _ret = _objc_msgSend_400(this.pointer, _sel_delegateQueue);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// preloadsEligibleContentKeys
  bool get preloadsEligibleContentKeys {
    return _objc_msgSend_13(this.pointer, _sel_preloadsEligibleContentKeys);
  }

  /// setPreloadsEligibleContentKeys:
  set preloadsEligibleContentKeys(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setPreloadsEligibleContentKeys_, value);
  }

  /// allocWithZone:
  static AVAssetResourceLoader allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAssetResourceLoader, _sel_allocWithZone_, zone);
    return AVAssetResourceLoader.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetResourceLoader alloc() {
    final _ret = _objc_msgSend_19(_class_AVAssetResourceLoader, _sel_alloc);
    return AVAssetResourceLoader.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetResourceLoader,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetResourceLoader,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetResourceLoader, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAssetResourceLoader, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetResourceLoader,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetResourceLoader,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetResourceLoader,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetResourceLoader, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetResourceLoader, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetResourceLoader =
    objc.getClass("AVAssetResourceLoader");
late final _sel_preloadsEligibleContentKeys =
    objc.registerName("preloadsEligibleContentKeys");
late final _sel_setPreloadsEligibleContentKeys_ =
    objc.registerName("setPreloadsEligibleContentKeys:");
late final _sel_resourceLoader = objc.registerName("resourceLoader");
final _objc_msgSend_768 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVAssetCache
class AVAssetCache extends objc.NSObject {
  AVAssetCache._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetCache] that points to the same underlying object as [other].
  AVAssetCache.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetCache] that wraps the given raw object pointer.
  AVAssetCache.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetCache].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetCache);
  }

  /// isPlayableOffline
  bool get playableOffline {
    return _objc_msgSend_13(this.pointer, _sel_isPlayableOffline);
  }

  /// mediaSelectionOptionsInMediaSelectionGroup:
  objc.NSArray mediaSelectionOptionsInMediaSelectionGroup_(
      AVMediaSelectionGroup mediaSelectionGroup) {
    final _ret = _objc_msgSend_769(
        this.pointer,
        _sel_mediaSelectionOptionsInMediaSelectionGroup_,
        mediaSelectionGroup.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVAssetCache init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetCache.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAssetCache new1() {
    final _ret = _objc_msgSend_19(_class_AVAssetCache, _sel_new);
    return AVAssetCache.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAssetCache allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAssetCache, _sel_allocWithZone_, zone);
    return AVAssetCache.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAssetCache alloc() {
    final _ret = _objc_msgSend_19(_class_AVAssetCache, _sel_alloc);
    return AVAssetCache.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetCache,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetCache,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetCache, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAssetCache, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetCache,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetCache,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetCache,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetCache, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetCache, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetCache = objc.getClass("AVAssetCache");
late final _sel_isPlayableOffline = objc.registerName("isPlayableOffline");
late final _sel_mediaSelectionOptionsInMediaSelectionGroup_ =
    objc.registerName("mediaSelectionOptionsInMediaSelectionGroup:");
final _objc_msgSend_769 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_assetCache = objc.registerName("assetCache");
final _objc_msgSend_770 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVCompositionTrack
class AVCompositionTrack extends AVAssetTrack {
  AVCompositionTrack._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCompositionTrack] that points to the same underlying object as [other].
  AVCompositionTrack.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCompositionTrack] that wraps the given raw object pointer.
  AVCompositionTrack.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCompositionTrack].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCompositionTrack);
  }

  /// segments
  objc.NSArray get segments {
    final _ret = _objc_msgSend_33(this.pointer, _sel_segments);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// segmentForTrackTime:
  AVCompositionTrackSegment? segmentForTrackTime_(CMTime trackTime) {
    final _ret =
        _objc_msgSend_773(this.pointer, _sel_segmentForTrackTime_, trackTime);
    return _ret.address == 0
        ? null
        : AVCompositionTrackSegment.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// formatDescriptionReplacements
  objc.NSArray get formatDescriptionReplacements {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_formatDescriptionReplacements);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// hasMediaCharacteristic:
  bool hasMediaCharacteristic_(objc.NSString mediaCharacteristic) {
    return _objc_msgSend_31(this.pointer, _sel_hasMediaCharacteristic_,
        mediaCharacteristic.pointer);
  }

  /// samplePresentationTimeForTrackTime:
  void samplePresentationTimeForTrackTime_(
      ffi.Pointer<CMTime> stret, CMTime trackTime) {
    objc.useMsgSendVariants
        ? _objc_msgSend_723Stret(stret, this.pointer,
            _sel_samplePresentationTimeForTrackTime_, trackTime)
        : stret.ref = _objc_msgSend_723(
            this.pointer, _sel_samplePresentationTimeForTrackTime_, trackTime);
  }

  /// metadataForFormat:
  objc.NSArray metadataForFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_metadataForFormat_, format.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// associatedTracksOfType:
  objc.NSArray associatedTracksOfType_(objc.NSString trackAssociationType) {
    final _ret = _objc_msgSend_390(this.pointer, _sel_associatedTracksOfType_,
        trackAssociationType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVCompositionTrack init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCompositionTrack.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCompositionTrack new1() {
    final _ret = _objc_msgSend_19(_class_AVCompositionTrack, _sel_new);
    return AVCompositionTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVCompositionTrack allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCompositionTrack, _sel_allocWithZone_, zone);
    return AVCompositionTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCompositionTrack alloc() {
    final _ret = _objc_msgSend_19(_class_AVCompositionTrack, _sel_alloc);
    return AVCompositionTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCompositionTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCompositionTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCompositionTrack, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCompositionTrack, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCompositionTrack,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCompositionTrack,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCompositionTrack,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCompositionTrack, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCompositionTrack, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCompositionTrack = objc.getClass("AVCompositionTrack");

/// AVCompositionTrackSegment
class AVCompositionTrackSegment extends AVAssetTrackSegment {
  AVCompositionTrackSegment._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCompositionTrackSegment] that points to the same underlying object as [other].
  AVCompositionTrackSegment.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCompositionTrackSegment] that wraps the given raw object pointer.
  AVCompositionTrackSegment.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCompositionTrackSegment].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCompositionTrackSegment);
  }

  /// compositionTrackSegmentWithURL:trackID:sourceTimeRange:targetTimeRange:
  static AVCompositionTrackSegment
      compositionTrackSegmentWithURL_trackID_sourceTimeRange_targetTimeRange_(
          objc.NSURL URL,
          int trackID,
          CMTimeRange sourceTimeRange,
          CMTimeRange targetTimeRange) {
    final _ret = _objc_msgSend_771(
        _class_AVCompositionTrackSegment,
        _sel_compositionTrackSegmentWithURL_trackID_sourceTimeRange_targetTimeRange_,
        URL.pointer,
        trackID,
        sourceTimeRange,
        targetTimeRange);
    return AVCompositionTrackSegment.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// compositionTrackSegmentWithTimeRange:
  static AVCompositionTrackSegment compositionTrackSegmentWithTimeRange_(
      CMTimeRange timeRange) {
    final _ret = _objc_msgSend_772(_class_AVCompositionTrackSegment,
        _sel_compositionTrackSegmentWithTimeRange_, timeRange);
    return AVCompositionTrackSegment.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithURL:trackID:sourceTimeRange:targetTimeRange:
  AVCompositionTrackSegment
      initWithURL_trackID_sourceTimeRange_targetTimeRange_(
          objc.NSURL URL,
          int trackID,
          CMTimeRange sourceTimeRange,
          CMTimeRange targetTimeRange) {
    final _ret = _objc_msgSend_771(
        this.pointer,
        _sel_initWithURL_trackID_sourceTimeRange_targetTimeRange_,
        URL.pointer,
        trackID,
        sourceTimeRange,
        targetTimeRange);
    return AVCompositionTrackSegment.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithTimeRange:
  AVCompositionTrackSegment initWithTimeRange_(CMTimeRange timeRange) {
    final _ret =
        _objc_msgSend_772(this.pointer, _sel_initWithTimeRange_, timeRange);
    return AVCompositionTrackSegment.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// isEmpty
  bool get empty {
    return _objc_msgSend_13(this.pointer, _sel_isEmpty);
  }

  /// sourceURL
  objc.NSURL? get sourceURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_sourceURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceTrackID
  int get sourceTrackID {
    return _objc_msgSend_718(this.pointer, _sel_sourceTrackID);
  }

  /// init
  AVCompositionTrackSegment init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCompositionTrackSegment.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCompositionTrackSegment new1() {
    final _ret = _objc_msgSend_19(_class_AVCompositionTrackSegment, _sel_new);
    return AVCompositionTrackSegment.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVCompositionTrackSegment allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCompositionTrackSegment, _sel_allocWithZone_, zone);
    return AVCompositionTrackSegment.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCompositionTrackSegment alloc() {
    final _ret = _objc_msgSend_19(_class_AVCompositionTrackSegment, _sel_alloc);
    return AVCompositionTrackSegment.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCompositionTrackSegment,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCompositionTrackSegment,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCompositionTrackSegment, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCompositionTrackSegment, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCompositionTrackSegment,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCompositionTrackSegment,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCompositionTrackSegment,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCompositionTrackSegment, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCompositionTrackSegment, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCompositionTrackSegment =
    objc.getClass("AVCompositionTrackSegment");
late final _sel_compositionTrackSegmentWithURL_trackID_sourceTimeRange_targetTimeRange_ =
    objc.registerName(
        "compositionTrackSegmentWithURL:trackID:sourceTimeRange:targetTimeRange:");
final _objc_msgSend_771 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                CMTimeRange,
                CMTimeRange)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            CMTimeRange,
            CMTimeRange)>();
late final _sel_compositionTrackSegmentWithTimeRange_ =
    objc.registerName("compositionTrackSegmentWithTimeRange:");
final _objc_msgSend_772 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTimeRange)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTimeRange)>();
late final _sel_initWithURL_trackID_sourceTimeRange_targetTimeRange_ =
    objc.registerName("initWithURL:trackID:sourceTimeRange:targetTimeRange:");
late final _sel_initWithTimeRange_ = objc.registerName("initWithTimeRange:");
late final _sel_sourceURL = objc.registerName("sourceURL");
late final _sel_sourceTrackID = objc.registerName("sourceTrackID");
final _objc_msgSend_773 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTime)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTime)>();
late final _sel_formatDescriptionReplacements =
    objc.registerName("formatDescriptionReplacements");
late final _sel_compatibleTrackForCompositionTrack_ =
    objc.registerName("compatibleTrackForCompositionTrack:");
final _objc_msgSend_774 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_findCompatibleTrackForCompositionTrack_completionHandler_ = objc
    .registerName("findCompatibleTrackForCompositionTrack:completionHandler:");
final _objc_msgSend_775 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_variants = objc.registerName("variants");
late final _sel_mayRequireContentKeysForMediaDataProcessing =
    objc.registerName("mayRequireContentKeysForMediaDataProcessing");

/// AVFragmentedAsset
class AVFragmentedAsset extends AVURLAsset {
  AVFragmentedAsset._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVFragmentedAsset] that points to the same underlying object as [other].
  AVFragmentedAsset.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVFragmentedAsset] that wraps the given raw object pointer.
  AVFragmentedAsset.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVFragmentedAsset].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVFragmentedAsset);
  }

  /// fragmentedAssetWithURL:options:
  static AVFragmentedAsset fragmentedAssetWithURL_options_(
      objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(
        _class_AVFragmentedAsset,
        _sel_fragmentedAssetWithURL_options_,
        URL.pointer,
        options?.pointer ?? ffi.nullptr);
    return AVFragmentedAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// tracks
  objc.NSArray get tracks {
    final _ret = _objc_msgSend_33(this.pointer, _sel_tracks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// trackWithTrackID:
  AVFragmentedAssetTrack? trackWithTrackID_(int trackID) {
    final _ret =
        _objc_msgSend_776(this.pointer, _sel_trackWithTrackID_, trackID);
    return _ret.address == 0
        ? null
        : AVFragmentedAssetTrack.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// loadTrackWithTrackID:completionHandler:
  void loadTrackWithTrackID_completionHandler_(
      int trackID,
      objc.ObjCBlock<
              ffi.Void Function(
                  AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_777(
        this.pointer,
        _sel_loadTrackWithTrackID_completionHandler_,
        trackID,
        completionHandler.pointer);
  }

  /// tracksWithMediaType:
  objc.NSArray tracksWithMediaType_(objc.NSString mediaType) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_tracksWithMediaType_, mediaType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaType:completionHandler:
  void loadTracksWithMediaType_completionHandler_(
      objc.NSString mediaType,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaType_completionHandler_,
        mediaType.pointer,
        completionHandler.pointer);
  }

  /// tracksWithMediaCharacteristic:
  objc.NSArray tracksWithMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_390(this.pointer,
        _sel_tracksWithMediaCharacteristic_, mediaCharacteristic.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaCharacteristic:completionHandler:
  void loadTracksWithMediaCharacteristic_completionHandler_(
      objc.NSString mediaCharacteristic,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaCharacteristic_completionHandler_,
        mediaCharacteristic.pointer,
        completionHandler.pointer);
  }

  /// init
  AVFragmentedAsset init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVFragmentedAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVFragmentedAsset new1() {
    final _ret = _objc_msgSend_19(_class_AVFragmentedAsset, _sel_new);
    return AVFragmentedAsset.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// audiovisualTypes
  static objc.NSArray audiovisualTypes() {
    final _ret =
        _objc_msgSend_33(_class_AVFragmentedAsset, _sel_audiovisualTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// audiovisualMIMETypes
  static objc.NSArray audiovisualMIMETypes() {
    final _ret =
        _objc_msgSend_33(_class_AVFragmentedAsset, _sel_audiovisualMIMETypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isPlayableExtendedMIMEType:
  static bool isPlayableExtendedMIMEType_(objc.NSString extendedMIMEType) {
    return _objc_msgSend_31(_class_AVFragmentedAsset,
        _sel_isPlayableExtendedMIMEType_, extendedMIMEType.pointer);
  }

  /// URLAssetWithURL:options:
  static AVFragmentedAsset URLAssetWithURL_options_(
      objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(
        _class_AVFragmentedAsset,
        _sel_URLAssetWithURL_options_,
        URL.pointer,
        options?.pointer ?? ffi.nullptr);
    return AVFragmentedAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:options:
  AVFragmentedAsset initWithURL_options_(
      objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(this.pointer, _sel_initWithURL_options_,
        URL.pointer, options?.pointer ?? ffi.nullptr);
    return AVFragmentedAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// assetWithURL:
  static AVFragmentedAsset assetWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_332(
        _class_AVFragmentedAsset, _sel_assetWithURL_, URL.pointer);
    return AVFragmentedAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVFragmentedAsset allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVFragmentedAsset, _sel_allocWithZone_, zone);
    return AVFragmentedAsset.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVFragmentedAsset alloc() {
    final _ret = _objc_msgSend_19(_class_AVFragmentedAsset, _sel_alloc);
    return AVFragmentedAsset.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVFragmentedAsset,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVFragmentedAsset,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVFragmentedAsset, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVFragmentedAsset, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVFragmentedAsset,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVFragmentedAsset,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVFragmentedAsset,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVFragmentedAsset, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVFragmentedAsset, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVFragmentedAsset = objc.getClass("AVFragmentedAsset");
late final _sel_fragmentedAssetWithURL_options_ =
    objc.registerName("fragmentedAssetWithURL:options:");

/// AVFragmentedAssetTrack
class AVFragmentedAssetTrack extends AVAssetTrack {
  AVFragmentedAssetTrack._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVFragmentedAssetTrack] that points to the same underlying object as [other].
  AVFragmentedAssetTrack.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVFragmentedAssetTrack] that wraps the given raw object pointer.
  AVFragmentedAssetTrack.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVFragmentedAssetTrack].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVFragmentedAssetTrack);
  }

  /// init
  AVFragmentedAssetTrack init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVFragmentedAssetTrack.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVFragmentedAssetTrack new1() {
    final _ret = _objc_msgSend_19(_class_AVFragmentedAssetTrack, _sel_new);
    return AVFragmentedAssetTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVFragmentedAssetTrack allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVFragmentedAssetTrack, _sel_allocWithZone_, zone);
    return AVFragmentedAssetTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVFragmentedAssetTrack alloc() {
    final _ret = _objc_msgSend_19(_class_AVFragmentedAssetTrack, _sel_alloc);
    return AVFragmentedAssetTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVFragmentedAssetTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVFragmentedAssetTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVFragmentedAssetTrack, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVFragmentedAssetTrack, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVFragmentedAssetTrack,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVFragmentedAssetTrack,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVFragmentedAssetTrack,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVFragmentedAssetTrack, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVFragmentedAssetTrack, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVFragmentedAssetTrack =
    objc.getClass("AVFragmentedAssetTrack");
final _objc_msgSend_776 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
void _ObjCBlock_ffiVoid_AVFragmentedAssetTrack_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVFragmentedAssetTrack_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVFragmentedAssetTrack_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVFragmentedAssetTrack_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVFragmentedAssetTrack, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_AVFragmentedAssetTrack_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(AVFragmentedAssetTrack.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(AVFragmentedAssetTrack, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVFragmentedAssetTrack_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            AVFragmentedAssetTrack.castFromPointer(arg0,
                retain: false, release: true),
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVFragmentedAssetTrack_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVFragmentedAssetTrack_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            AVFragmentedAssetTrack, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVFragmentedAssetTrack arg0, objc.NSError? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1?.pointer ?? ffi.nullptr);
}

final _objc_msgSend_777 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVAssetExportSession
class AVAssetExportSession extends objc.NSObject {
  AVAssetExportSession._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetExportSession] that points to the same underlying object as [other].
  AVAssetExportSession.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetExportSession] that wraps the given raw object pointer.
  AVAssetExportSession.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetExportSession].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetExportSession);
  }

  /// init
  AVAssetExportSession init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetExportSession.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetExportSession new1() {
    final _ret = _objc_msgSend_19(_class_AVAssetExportSession, _sel_new);
    return AVAssetExportSession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// exportSessionWithAsset:presetName:
  static AVAssetExportSession? exportSessionWithAsset_presetName_(
      AVAsset asset, objc.NSString presetName) {
    final _ret = _objc_msgSend_778(
        _class_AVAssetExportSession,
        _sel_exportSessionWithAsset_presetName_,
        asset.pointer,
        presetName.pointer);
    return _ret.address == 0
        ? null
        : AVAssetExportSession.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithAsset:presetName:
  AVAssetExportSession? initWithAsset_presetName_(
      AVAsset asset, objc.NSString presetName) {
    final _ret = _objc_msgSend_778(this.pointer, _sel_initWithAsset_presetName_,
        asset.pointer, presetName.pointer);
    return _ret.address == 0
        ? null
        : AVAssetExportSession.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// presetName
  objc.NSString get presetName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_presetName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// asset
  AVAsset get asset {
    final _ret = _objc_msgSend_779(this.pointer, _sel_asset);
    return AVAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputFileType
  objc.NSString? get outputFileType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_outputFileType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setOutputFileType:
  set outputFileType(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setOutputFileType_, value?.pointer ?? ffi.nullptr);
  }

  /// outputURL
  objc.NSURL? get outputURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_outputURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setOutputURL:
  set outputURL(objc.NSURL? value) {
    return _objc_msgSend_25(
        this.pointer, _sel_setOutputURL_, value?.pointer ?? ffi.nullptr);
  }

  /// shouldOptimizeForNetworkUse
  bool get shouldOptimizeForNetworkUse {
    return _objc_msgSend_13(this.pointer, _sel_shouldOptimizeForNetworkUse);
  }

  /// setShouldOptimizeForNetworkUse:
  set shouldOptimizeForNetworkUse(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setShouldOptimizeForNetworkUse_, value);
  }

  /// allowsParallelizedExport
  bool get allowsParallelizedExport {
    return _objc_msgSend_13(this.pointer, _sel_allowsParallelizedExport);
  }

  /// setAllowsParallelizedExport:
  set allowsParallelizedExport(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAllowsParallelizedExport_, value);
  }

  /// status
  AVAssetExportSessionStatus get status {
    final _ret = _objc_msgSend_780(this.pointer, _sel_status);
    return AVAssetExportSessionStatus.fromValue(_ret);
  }

  /// error
  objc.NSError? get error {
    final _ret = _objc_msgSend_344(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// exportAsynchronouslyWithCompletionHandler:
  void exportAsynchronouslyWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function()> handler) {
    _objc_msgSend_261(this.pointer,
        _sel_exportAsynchronouslyWithCompletionHandler_, handler.pointer);
  }

  /// progress
  double get progress {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_progress)
        : _objc_msgSend_361(this.pointer, _sel_progress);
  }

  /// cancelExport
  void cancelExport() {
    _objc_msgSend_7(this.pointer, _sel_cancelExport);
  }

  /// allExportPresets
  static objc.NSArray allExportPresets() {
    final _ret =
        _objc_msgSend_33(_class_AVAssetExportSession, _sel_allExportPresets);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// exportPresetsCompatibleWithAsset:
  static objc.NSArray exportPresetsCompatibleWithAsset_(AVAsset asset) {
    final _ret = _objc_msgSend_781(_class_AVAssetExportSession,
        _sel_exportPresetsCompatibleWithAsset_, asset.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// determineCompatibilityOfExportPreset:withAsset:outputFileType:completionHandler:
  static void
      determineCompatibilityOfExportPreset_withAsset_outputFileType_completionHandler_(
          objc.NSString presetName,
          AVAsset asset,
          objc.NSString? outputFileType,
          objc.ObjCBlock<ffi.Void Function(ffi.Bool)> handler) {
    _objc_msgSend_782(
        _class_AVAssetExportSession,
        _sel_determineCompatibilityOfExportPreset_withAsset_outputFileType_completionHandler_,
        presetName.pointer,
        asset.pointer,
        outputFileType?.pointer ?? ffi.nullptr,
        handler.pointer);
  }

  /// supportedFileTypes
  objc.NSArray get supportedFileTypes {
    final _ret = _objc_msgSend_33(this.pointer, _sel_supportedFileTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// determineCompatibleFileTypesWithCompletionHandler:
  void determineCompatibleFileTypesWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function(objc.NSArray)> handler) {
    _objc_msgSend_555(
        this.pointer,
        _sel_determineCompatibleFileTypesWithCompletionHandler_,
        handler.pointer);
  }

  /// timeRange
  void getTimeRange(ffi.Pointer<CMTimeRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_719Stret(stret, this.pointer, _sel_timeRange)
        : stret.ref = _objc_msgSend_719(this.pointer, _sel_timeRange);
  }

  /// setTimeRange:
  set timeRange(CMTimeRange value) {
    return _objc_msgSend_783(this.pointer, _sel_setTimeRange_, value);
  }

  /// maxDuration
  void getMaxDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_maxDuration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_maxDuration);
  }

  /// estimatedOutputFileLength
  int get estimatedOutputFileLength {
    return _objc_msgSend_357(this.pointer, _sel_estimatedOutputFileLength);
  }

  /// fileLengthLimit
  int get fileLengthLimit {
    return _objc_msgSend_357(this.pointer, _sel_fileLengthLimit);
  }

  /// setFileLengthLimit:
  set fileLengthLimit(int value) {
    return _objc_msgSend_784(this.pointer, _sel_setFileLengthLimit_, value);
  }

  /// estimateMaximumDurationWithCompletionHandler:
  void estimateMaximumDurationWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function(CMTime, ffi.Pointer<objc.ObjCObject>)>
          handler) {
    _objc_msgSend_785(this.pointer,
        _sel_estimateMaximumDurationWithCompletionHandler_, handler.pointer);
  }

  /// estimateOutputFileLengthWithCompletionHandler:
  void estimateOutputFileLengthWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>
          handler) {
    _objc_msgSend_786(this.pointer,
        _sel_estimateOutputFileLengthWithCompletionHandler_, handler.pointer);
  }

  /// metadata
  objc.NSArray? get metadata {
    final _ret = _objc_msgSend_88(this.pointer, _sel_metadata);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMetadata:
  set metadata(objc.NSArray? value) {
    return _objc_msgSend_549(
        this.pointer, _sel_setMetadata_, value?.pointer ?? ffi.nullptr);
  }

  /// metadataItemFilter
  AVMetadataItemFilter? get metadataItemFilter {
    final _ret = _objc_msgSend_787(this.pointer, _sel_metadataItemFilter);
    return _ret.address == 0
        ? null
        : AVMetadataItemFilter.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setMetadataItemFilter:
  set metadataItemFilter(AVMetadataItemFilter? value) {
    return _objc_msgSend_788(this.pointer, _sel_setMetadataItemFilter_,
        value?.pointer ?? ffi.nullptr);
  }

  /// audioTimePitchAlgorithm
  objc.NSString get audioTimePitchAlgorithm {
    final _ret = _objc_msgSend_11(this.pointer, _sel_audioTimePitchAlgorithm);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAudioTimePitchAlgorithm:
  set audioTimePitchAlgorithm(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setAudioTimePitchAlgorithm_, value.pointer);
  }

  /// audioMix
  AVAudioMix? get audioMix {
    final _ret = _objc_msgSend_789(this.pointer, _sel_audioMix);
    return _ret.address == 0
        ? null
        : AVAudioMix.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAudioMix:
  set audioMix(AVAudioMix? value) {
    return _objc_msgSend_790(
        this.pointer, _sel_setAudioMix_, value?.pointer ?? ffi.nullptr);
  }

  /// videoComposition
  AVVideoComposition? get videoComposition {
    final _ret = _objc_msgSend_1015(this.pointer, _sel_videoComposition);
    return _ret.address == 0
        ? null
        : AVVideoComposition.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVideoComposition:
  set videoComposition(AVVideoComposition? value) {
    return _objc_msgSend_1016(
        this.pointer, _sel_setVideoComposition_, value?.pointer ?? ffi.nullptr);
  }

  /// customVideoCompositor
  objc.ObjCObjectBase? get customVideoCompositor {
    final _ret = _objc_msgSend_85(this.pointer, _sel_customVideoCompositor);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// audioTrackGroupHandling
  AVAssetTrackGroupOutputHandling get audioTrackGroupHandling {
    final _ret = _objc_msgSend_1017(this.pointer, _sel_audioTrackGroupHandling);
    return AVAssetTrackGroupOutputHandling.fromValue(_ret);
  }

  /// setAudioTrackGroupHandling:
  set audioTrackGroupHandling(AVAssetTrackGroupOutputHandling value) {
    return _objc_msgSend_1018(
        this.pointer, _sel_setAudioTrackGroupHandling_, value.value);
  }

  /// canPerformMultiplePassesOverSourceMediaData
  bool get canPerformMultiplePassesOverSourceMediaData {
    return _objc_msgSend_13(
        this.pointer, _sel_canPerformMultiplePassesOverSourceMediaData);
  }

  /// setCanPerformMultiplePassesOverSourceMediaData:
  set canPerformMultiplePassesOverSourceMediaData(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setCanPerformMultiplePassesOverSourceMediaData_, value);
  }

  /// directoryForTemporaryFiles
  objc.NSURL? get directoryForTemporaryFiles {
    final _ret =
        _objc_msgSend_24(this.pointer, _sel_directoryForTemporaryFiles);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDirectoryForTemporaryFiles:
  set directoryForTemporaryFiles(objc.NSURL? value) {
    return _objc_msgSend_25(this.pointer, _sel_setDirectoryForTemporaryFiles_,
        value?.pointer ?? ffi.nullptr);
  }

  /// allocWithZone:
  static AVAssetExportSession allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAssetExportSession, _sel_allocWithZone_, zone);
    return AVAssetExportSession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetExportSession alloc() {
    final _ret = _objc_msgSend_19(_class_AVAssetExportSession, _sel_alloc);
    return AVAssetExportSession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetExportSession,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetExportSession,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetExportSession, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAssetExportSession, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetExportSession,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetExportSession,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetExportSession,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetExportSession, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetExportSession, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetExportSession = objc.getClass("AVAssetExportSession");
late final _sel_exportSessionWithAsset_presetName_ =
    objc.registerName("exportSessionWithAsset:presetName:");
final _objc_msgSend_778 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithAsset_presetName_ =
    objc.registerName("initWithAsset:presetName:");
late final _sel_presetName = objc.registerName("presetName");
final _objc_msgSend_779 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_outputFileType = objc.registerName("outputFileType");
late final _sel_setOutputFileType_ = objc.registerName("setOutputFileType:");
late final _sel_outputURL = objc.registerName("outputURL");
late final _sel_setOutputURL_ = objc.registerName("setOutputURL:");
late final _sel_shouldOptimizeForNetworkUse =
    objc.registerName("shouldOptimizeForNetworkUse");
late final _sel_setShouldOptimizeForNetworkUse_ =
    objc.registerName("setShouldOptimizeForNetworkUse:");
late final _sel_allowsParallelizedExport =
    objc.registerName("allowsParallelizedExport");
late final _sel_setAllowsParallelizedExport_ =
    objc.registerName("setAllowsParallelizedExport:");

enum AVAssetExportSessionStatus {
  AVAssetExportSessionStatusUnknown(0),
  AVAssetExportSessionStatusWaiting(1),
  AVAssetExportSessionStatusExporting(2),
  AVAssetExportSessionStatusCompleted(3),
  AVAssetExportSessionStatusFailed(4),
  AVAssetExportSessionStatusCancelled(5);

  final int value;
  const AVAssetExportSessionStatus(this.value);

  static AVAssetExportSessionStatus fromValue(int value) => switch (value) {
        0 => AVAssetExportSessionStatusUnknown,
        1 => AVAssetExportSessionStatusWaiting,
        2 => AVAssetExportSessionStatusExporting,
        3 => AVAssetExportSessionStatusCompleted,
        4 => AVAssetExportSessionStatusFailed,
        5 => AVAssetExportSessionStatusCancelled,
        _ => throw ArgumentError(
            "Unknown value for AVAssetExportSessionStatus: $value"),
      };
}

final _objc_msgSend_780 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_exportAsynchronouslyWithCompletionHandler_ =
    objc.registerName("exportAsynchronouslyWithCompletionHandler:");
late final _sel_cancelExport = objc.registerName("cancelExport");
late final _sel_allExportPresets = objc.registerName("allExportPresets");
late final _sel_exportPresetsCompatibleWithAsset_ =
    objc.registerName("exportPresetsCompatibleWithAsset:");
final _objc_msgSend_781 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_determineCompatibilityOfExportPreset_withAsset_outputFileType_completionHandler_ =
    objc.registerName(
        "determineCompatibilityOfExportPreset:withAsset:outputFileType:completionHandler:");
final _objc_msgSend_782 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_supportedFileTypes = objc.registerName("supportedFileTypes");
late final _sel_determineCompatibleFileTypesWithCompletionHandler_ =
    objc.registerName("determineCompatibleFileTypesWithCompletionHandler:");
late final _sel_setTimeRange_ = objc.registerName("setTimeRange:");
final _objc_msgSend_783 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTimeRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTimeRange)>();
late final _sel_maxDuration = objc.registerName("maxDuration");
late final _sel_estimatedOutputFileLength =
    objc.registerName("estimatedOutputFileLength");
late final _sel_fileLengthLimit = objc.registerName("fileLengthLimit");
late final _sel_setFileLengthLimit_ = objc.registerName("setFileLengthLimit:");
final _objc_msgSend_784 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.LongLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_estimateMaximumDurationWithCompletionHandler_ =
    objc.registerName("estimateMaximumDurationWithCompletionHandler:");
final _objc_msgSend_785 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
void _ObjCBlock_ffiVoid_Int64_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Int64 arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
            .asFunction<void Function(int, ffi.Pointer<objc.ObjCObject>)>()(
        arg0, arg1);
void _ObjCBlock_ffiVoid_Int64_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        int, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_Int64_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int64 arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_Int64_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>
      fromFunction(void Function(int, objc.NSError?) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_Int64_NSError_closureTrampoline)
                          .cast(),
                  (int arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                      fn(arg0, arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc
      .ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(int, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Int64, ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_Int64_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0,
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1,
                    retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_Int64_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_Int64_NSError_CallExtension on objc
    .ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Pointer<objc.ObjCObject>)> {
  void call(int arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Int64 arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>, int,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_estimateOutputFileLengthWithCompletionHandler_ =
    objc.registerName("estimateOutputFileLengthWithCompletionHandler:");
final _objc_msgSend_786 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_setMetadata_ = objc.registerName("setMetadata:");
late final _sel_metadataItemFilter = objc.registerName("metadataItemFilter");
final _objc_msgSend_787 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMetadataItemFilter_ =
    objc.registerName("setMetadataItemFilter:");
final _objc_msgSend_788 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_audioTimePitchAlgorithm =
    objc.registerName("audioTimePitchAlgorithm");
late final _sel_setAudioTimePitchAlgorithm_ =
    objc.registerName("setAudioTimePitchAlgorithm:");

/// AVAudioMix
class AVAudioMix extends objc.NSObject {
  AVAudioMix._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioMix] that points to the same underlying object as [other].
  AVAudioMix.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioMix] that wraps the given raw object pointer.
  AVAudioMix.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioMix].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_AVAudioMix);
  }

  /// inputParameters
  objc.NSArray get inputParameters {
    final _ret = _objc_msgSend_33(this.pointer, _sel_inputParameters);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVAudioMix init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioMix.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAudioMix new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioMix, _sel_new);
    return AVAudioMix.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioMix allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_AVAudioMix, _sel_allocWithZone_, zone);
    return AVAudioMix.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioMix alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioMix, _sel_alloc);
    return AVAudioMix.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioMix,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioMix,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioMix, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioMix, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioMix,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioMix,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioMix,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioMix, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioMix, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioMix = objc.getClass("AVAudioMix");
late final _sel_inputParameters = objc.registerName("inputParameters");
late final _sel_audioMix = objc.registerName("audioMix");
final _objc_msgSend_789 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAudioMix_ = objc.registerName("setAudioMix:");
final _objc_msgSend_790 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// AVVideoComposition
class AVVideoComposition extends objc.NSObject {
  AVVideoComposition._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVVideoComposition] that points to the same underlying object as [other].
  AVVideoComposition.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVVideoComposition] that wraps the given raw object pointer.
  AVVideoComposition.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVVideoComposition].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVVideoComposition);
  }

  /// videoCompositionWithPropertiesOfAsset:
  static AVVideoComposition videoCompositionWithPropertiesOfAsset_(
      AVAsset asset) {
    final _ret = _objc_msgSend_791(_class_AVVideoComposition,
        _sel_videoCompositionWithPropertiesOfAsset_, asset.pointer);
    return AVVideoComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// videoCompositionWithPropertiesOfAsset:completionHandler:
  static void videoCompositionWithPropertiesOfAsset_completionHandler_(
      AVAsset asset,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_792(
        _class_AVVideoComposition,
        _sel_videoCompositionWithPropertiesOfAsset_completionHandler_,
        asset.pointer,
        completionHandler.pointer);
  }

  /// customVideoCompositorClass
  objc.ObjCObjectBase? get customVideoCompositorClass {
    final _ret =
        _objc_msgSend_85(this.pointer, _sel_customVideoCompositorClass);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// frameDuration
  void getFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_frameDuration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_frameDuration);
  }

  /// sourceTrackIDForFrameTiming
  int get sourceTrackIDForFrameTiming {
    return _objc_msgSend_718(this.pointer, _sel_sourceTrackIDForFrameTiming);
  }

  /// renderSize
  void getRenderSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_renderSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_renderSize);
  }

  /// renderScale
  double get renderScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_renderScale)
        : _objc_msgSend_361(this.pointer, _sel_renderScale);
  }

  /// instructions
  objc.NSArray get instructions {
    final _ret = _objc_msgSend_33(this.pointer, _sel_instructions);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// animationTool
  AVVideoCompositionCoreAnimationTool? get animationTool {
    final _ret = _objc_msgSend_843(this.pointer, _sel_animationTool);
    return _ret.address == 0
        ? null
        : AVVideoCompositionCoreAnimationTool.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// sourceSampleDataTrackIDs
  objc.NSArray get sourceSampleDataTrackIDs {
    final _ret = _objc_msgSend_33(this.pointer, _sel_sourceSampleDataTrackIDs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorPrimaries
  objc.NSString? get colorPrimaries {
    final _ret = _objc_msgSend_20(this.pointer, _sel_colorPrimaries);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorYCbCrMatrix
  objc.NSString? get colorYCbCrMatrix {
    final _ret = _objc_msgSend_20(this.pointer, _sel_colorYCbCrMatrix);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorTransferFunction
  objc.NSString? get colorTransferFunction {
    final _ret = _objc_msgSend_20(this.pointer, _sel_colorTransferFunction);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// perFrameHDRDisplayMetadataPolicy
  objc.NSString get perFrameHDRDisplayMetadataPolicy {
    final _ret =
        _objc_msgSend_11(this.pointer, _sel_perFrameHDRDisplayMetadataPolicy);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// videoCompositionWithAsset:applyingCIFiltersWithHandler:
  static AVVideoComposition
      videoCompositionWithAsset_applyingCIFiltersWithHandler_(
          AVAsset asset,
          objc.ObjCBlock<
                  ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>
              applier) {
    final _ret = _objc_msgSend_1011(
        _class_AVVideoComposition,
        _sel_videoCompositionWithAsset_applyingCIFiltersWithHandler_,
        asset.pointer,
        applier.pointer);
    return AVVideoComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler:
  static void
      videoCompositionWithAsset_applyingCIFiltersWithHandler_completionHandler_(
          AVAsset asset,
          objc.ObjCBlock<
                  ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>
              applier,
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>
              completionHandler) {
    _objc_msgSend_1012(
        _class_AVVideoComposition,
        _sel_videoCompositionWithAsset_applyingCIFiltersWithHandler_completionHandler_,
        asset.pointer,
        applier.pointer,
        completionHandler.pointer);
  }

  /// isValidForAsset:timeRange:validationDelegate:
  bool isValidForAsset_timeRange_validationDelegate_(AVAsset? asset,
      CMTimeRange timeRange, objc.ObjCObjectBase? validationDelegate) {
    return _objc_msgSend_1013(
        this.pointer,
        _sel_isValidForAsset_timeRange_validationDelegate_,
        asset?.pointer ?? ffi.nullptr,
        timeRange,
        validationDelegate?.pointer ?? ffi.nullptr);
  }

  /// determineValidityForAsset:timeRange:validationDelegate:completionHandler:
  void
      determineValidityForAsset_timeRange_validationDelegate_completionHandler_(
          AVAsset? asset,
          CMTimeRange timeRange,
          objc.ObjCObjectBase? validationDelegate,
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>
              completionHandler) {
    _objc_msgSend_1014(
        this.pointer,
        _sel_determineValidityForAsset_timeRange_validationDelegate_completionHandler_,
        asset?.pointer ?? ffi.nullptr,
        timeRange,
        validationDelegate?.pointer ?? ffi.nullptr,
        completionHandler.pointer);
  }

  /// init
  AVVideoComposition init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVVideoComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVVideoComposition new1() {
    final _ret = _objc_msgSend_19(_class_AVVideoComposition, _sel_new);
    return AVVideoComposition.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVVideoComposition allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVVideoComposition, _sel_allocWithZone_, zone);
    return AVVideoComposition.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVVideoComposition alloc() {
    final _ret = _objc_msgSend_19(_class_AVVideoComposition, _sel_alloc);
    return AVVideoComposition.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVVideoComposition,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVVideoComposition,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVVideoComposition, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVVideoComposition, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVVideoComposition,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVVideoComposition,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVVideoComposition,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVVideoComposition, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVVideoComposition, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVVideoComposition = objc.getClass("AVVideoComposition");
late final _sel_videoCompositionWithPropertiesOfAsset_ =
    objc.registerName("videoCompositionWithPropertiesOfAsset:");
final _objc_msgSend_791 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_AVVideoComposition_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVVideoComposition_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVVideoComposition_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVVideoComposition_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVVideoComposition?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_AVVideoComposition_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(arg0.address == 0 ? null : AVVideoComposition.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(AVVideoComposition?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVVideoComposition_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0.address == 0
                ? null
                : AVVideoComposition.castFromPointer(arg0,
                    retain: false, release: true),
            arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVVideoComposition_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVVideoComposition_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVVideoComposition? arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_videoCompositionWithPropertiesOfAsset_completionHandler_ = objc
    .registerName("videoCompositionWithPropertiesOfAsset:completionHandler:");
final _objc_msgSend_792 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_customVideoCompositorClass =
    objc.registerName("customVideoCompositorClass");
late final _sel_frameDuration = objc.registerName("frameDuration");
late final _sel_sourceTrackIDForFrameTiming =
    objc.registerName("sourceTrackIDForFrameTiming");
late final _sel_renderSize = objc.registerName("renderSize");
late final _sel_renderScale = objc.registerName("renderScale");
late final _sel_instructions = objc.registerName("instructions");

/// AVVideoCompositionCoreAnimationTool
class AVVideoCompositionCoreAnimationTool extends objc.NSObject {
  AVVideoCompositionCoreAnimationTool._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVVideoCompositionCoreAnimationTool] that points to the same underlying object as [other].
  AVVideoCompositionCoreAnimationTool.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVVideoCompositionCoreAnimationTool] that wraps the given raw object pointer.
  AVVideoCompositionCoreAnimationTool.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVVideoCompositionCoreAnimationTool].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVVideoCompositionCoreAnimationTool);
  }

  /// videoCompositionCoreAnimationToolWithAdditionalLayer:asTrackID:
  static AVVideoCompositionCoreAnimationTool
      videoCompositionCoreAnimationToolWithAdditionalLayer_asTrackID_(
          CALayer layer, int trackID) {
    final _ret = _objc_msgSend_840(
        _class_AVVideoCompositionCoreAnimationTool,
        _sel_videoCompositionCoreAnimationToolWithAdditionalLayer_asTrackID_,
        layer.pointer,
        trackID);
    return AVVideoCompositionCoreAnimationTool.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:inLayer:
  static AVVideoCompositionCoreAnimationTool
      videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer_inLayer_(
          CALayer videoLayer, CALayer animationLayer) {
    final _ret = _objc_msgSend_841(
        _class_AVVideoCompositionCoreAnimationTool,
        _sel_videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer_inLayer_,
        videoLayer.pointer,
        animationLayer.pointer);
    return AVVideoCompositionCoreAnimationTool.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers:inLayer:
  static AVVideoCompositionCoreAnimationTool
      videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers_inLayer_(
          objc.NSArray videoLayers, CALayer animationLayer) {
    final _ret = _objc_msgSend_842(
        _class_AVVideoCompositionCoreAnimationTool,
        _sel_videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers_inLayer_,
        videoLayers.pointer,
        animationLayer.pointer);
    return AVVideoCompositionCoreAnimationTool.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  AVVideoCompositionCoreAnimationTool init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVVideoCompositionCoreAnimationTool.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVVideoCompositionCoreAnimationTool new1() {
    final _ret =
        _objc_msgSend_19(_class_AVVideoCompositionCoreAnimationTool, _sel_new);
    return AVVideoCompositionCoreAnimationTool.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVVideoCompositionCoreAnimationTool allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVVideoCompositionCoreAnimationTool, _sel_allocWithZone_, zone);
    return AVVideoCompositionCoreAnimationTool.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVVideoCompositionCoreAnimationTool alloc() {
    final _ret = _objc_msgSend_19(
        _class_AVVideoCompositionCoreAnimationTool, _sel_alloc);
    return AVVideoCompositionCoreAnimationTool.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVVideoCompositionCoreAnimationTool,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVVideoCompositionCoreAnimationTool,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVVideoCompositionCoreAnimationTool,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVVideoCompositionCoreAnimationTool, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVVideoCompositionCoreAnimationTool,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVVideoCompositionCoreAnimationTool,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVVideoCompositionCoreAnimationTool,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVVideoCompositionCoreAnimationTool,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_AVVideoCompositionCoreAnimationTool,
        _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVVideoCompositionCoreAnimationTool =
    objc.getClass("AVVideoCompositionCoreAnimationTool");

/// CALayer
class CALayer extends objc.NSObject {
  CALayer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CALayer] that points to the same underlying object as [other].
  CALayer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CALayer] that wraps the given raw object pointer.
  CALayer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CALayer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_CALayer);
  }

  /// layer
  static CALayer layer() {
    final _ret = _objc_msgSend_19(_class_CALayer, _sel_layer);
    return CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CALayer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithLayer:
  CALayer initWithLayer_(objc.ObjCObjectBase layer) {
    final _ret =
        _objc_msgSend_616(this.pointer, _sel_initWithLayer_, layer.pointer);
    return CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// presentationLayer
  CALayer? presentationLayer() {
    final _ret = _objc_msgSend_85(this.pointer, _sel_presentationLayer);
    return _ret.address == 0
        ? null
        : CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// modelLayer
  CALayer modelLayer() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_modelLayer);
    return CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultValueForKey:
  static objc.ObjCObjectBase? defaultValueForKey_(objc.NSString key) {
    final _ret =
        _objc_msgSend_35(_class_CALayer, _sel_defaultValueForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// needsDisplayForKey:
  static bool needsDisplayForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        _class_CALayer, _sel_needsDisplayForKey_, key.pointer);
  }

  /// shouldArchiveValueForKey:
  bool shouldArchiveValueForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        this.pointer, _sel_shouldArchiveValueForKey_, key.pointer);
  }

  /// bounds
  void getBounds(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_793Stret(stret, this.pointer, _sel_bounds)
        : stret.ref = _objc_msgSend_793(this.pointer, _sel_bounds);
  }

  /// setBounds:
  set bounds(CGRect value) {
    return _objc_msgSend_794(this.pointer, _sel_setBounds_, value);
  }

  /// position
  void getPosition(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_795Stret(stret, this.pointer, _sel_position)
        : stret.ref = _objc_msgSend_795(this.pointer, _sel_position);
  }

  /// setPosition:
  set position(CGPoint value) {
    return _objc_msgSend_796(this.pointer, _sel_setPosition_, value);
  }

  /// zPosition
  double get zPosition {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_zPosition)
        : _objc_msgSend_18(this.pointer, _sel_zPosition);
  }

  /// setZPosition:
  set zPosition(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setZPosition_, value);
  }

  /// anchorPoint
  void getAnchorPoint(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_795Stret(stret, this.pointer, _sel_anchorPoint)
        : stret.ref = _objc_msgSend_795(this.pointer, _sel_anchorPoint);
  }

  /// setAnchorPoint:
  set anchorPoint(CGPoint value) {
    return _objc_msgSend_796(this.pointer, _sel_setAnchorPoint_, value);
  }

  /// anchorPointZ
  double get anchorPointZ {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_anchorPointZ)
        : _objc_msgSend_18(this.pointer, _sel_anchorPointZ);
  }

  /// setAnchorPointZ:
  set anchorPointZ(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setAnchorPointZ_, value);
  }

  /// transform
  void getTransform(ffi.Pointer<CATransform3D> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_797Stret(stret, this.pointer, _sel_transform)
        : stret.ref = _objc_msgSend_797(this.pointer, _sel_transform);
  }

  /// setTransform:
  set transform(CATransform3D value) {
    return _objc_msgSend_798(this.pointer, _sel_setTransform_, value);
  }

  /// affineTransform
  void affineTransform(ffi.Pointer<CGAffineTransform> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_713Stret(stret, this.pointer, _sel_affineTransform)
        : stret.ref = _objc_msgSend_713(this.pointer, _sel_affineTransform);
  }

  /// setAffineTransform:
  void setAffineTransform_(CGAffineTransform m) {
    _objc_msgSend_799(this.pointer, _sel_setAffineTransform_, m);
  }

  /// frame
  void getFrame(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_793Stret(stret, this.pointer, _sel_frame)
        : stret.ref = _objc_msgSend_793(this.pointer, _sel_frame);
  }

  /// setFrame:
  set frame(CGRect value) {
    return _objc_msgSend_794(this.pointer, _sel_setFrame_, value);
  }

  /// isHidden
  bool get hidden {
    return _objc_msgSend_13(this.pointer, _sel_isHidden);
  }

  /// setHidden:
  set hidden(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setHidden_, value);
  }

  /// isDoubleSided
  bool get doubleSided {
    return _objc_msgSend_13(this.pointer, _sel_isDoubleSided);
  }

  /// setDoubleSided:
  set doubleSided(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setDoubleSided_, value);
  }

  /// isGeometryFlipped
  bool get geometryFlipped {
    return _objc_msgSend_13(this.pointer, _sel_isGeometryFlipped);
  }

  /// setGeometryFlipped:
  set geometryFlipped(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setGeometryFlipped_, value);
  }

  /// contentsAreFlipped
  bool contentsAreFlipped() {
    return _objc_msgSend_13(this.pointer, _sel_contentsAreFlipped);
  }

  /// superlayer
  CALayer? get superlayer {
    final _ret = _objc_msgSend_800(this.pointer, _sel_superlayer);
    return _ret.address == 0
        ? null
        : CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// removeFromSuperlayer
  void removeFromSuperlayer() {
    _objc_msgSend_7(this.pointer, _sel_removeFromSuperlayer);
  }

  /// sublayers
  objc.NSArray? get sublayers {
    final _ret = _objc_msgSend_88(this.pointer, _sel_sublayers);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSublayers:
  set sublayers(objc.NSArray? value) {
    return _objc_msgSend_549(
        this.pointer, _sel_setSublayers_, value?.pointer ?? ffi.nullptr);
  }

  /// addSublayer:
  void addSublayer_(CALayer layer) {
    _objc_msgSend_801(this.pointer, _sel_addSublayer_, layer.pointer);
  }

  /// insertSublayer:atIndex:
  void insertSublayer_atIndex_(CALayer layer, int idx) {
    _objc_msgSend_802(
        this.pointer, _sel_insertSublayer_atIndex_, layer.pointer, idx);
  }

  /// insertSublayer:below:
  void insertSublayer_below_(CALayer layer, CALayer? sibling) {
    _objc_msgSend_803(this.pointer, _sel_insertSublayer_below_, layer.pointer,
        sibling?.pointer ?? ffi.nullptr);
  }

  /// insertSublayer:above:
  void insertSublayer_above_(CALayer layer, CALayer? sibling) {
    _objc_msgSend_803(this.pointer, _sel_insertSublayer_above_, layer.pointer,
        sibling?.pointer ?? ffi.nullptr);
  }

  /// replaceSublayer:with:
  void replaceSublayer_with_(CALayer oldLayer, CALayer newLayer) {
    _objc_msgSend_804(this.pointer, _sel_replaceSublayer_with_,
        oldLayer.pointer, newLayer.pointer);
  }

  /// sublayerTransform
  void getSublayerTransform(ffi.Pointer<CATransform3D> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_797Stret(stret, this.pointer, _sel_sublayerTransform)
        : stret.ref = _objc_msgSend_797(this.pointer, _sel_sublayerTransform);
  }

  /// setSublayerTransform:
  set sublayerTransform(CATransform3D value) {
    return _objc_msgSend_798(this.pointer, _sel_setSublayerTransform_, value);
  }

  /// mask
  CALayer? get mask {
    final _ret = _objc_msgSend_800(this.pointer, _sel_mask);
    return _ret.address == 0
        ? null
        : CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMask:
  set mask(CALayer? value) {
    return _objc_msgSend_805(
        this.pointer, _sel_setMask_, value?.pointer ?? ffi.nullptr);
  }

  /// masksToBounds
  bool get masksToBounds {
    return _objc_msgSend_13(this.pointer, _sel_masksToBounds);
  }

  /// setMasksToBounds:
  set masksToBounds(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setMasksToBounds_, value);
  }

  /// convertPoint:fromLayer:
  void convertPoint_fromLayer_(
      ffi.Pointer<CGPoint> stret, CGPoint p, CALayer? l) {
    objc.useMsgSendVariants
        ? _objc_msgSend_806Stret(stret, this.pointer,
            _sel_convertPoint_fromLayer_, p, l?.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_806(this.pointer,
            _sel_convertPoint_fromLayer_, p, l?.pointer ?? ffi.nullptr);
  }

  /// convertPoint:toLayer:
  void convertPoint_toLayer_(
      ffi.Pointer<CGPoint> stret, CGPoint p, CALayer? l) {
    objc.useMsgSendVariants
        ? _objc_msgSend_806Stret(stret, this.pointer,
            _sel_convertPoint_toLayer_, p, l?.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_806(this.pointer,
            _sel_convertPoint_toLayer_, p, l?.pointer ?? ffi.nullptr);
  }

  /// convertRect:fromLayer:
  void convertRect_fromLayer_(ffi.Pointer<CGRect> stret, CGRect r, CALayer? l) {
    objc.useMsgSendVariants
        ? _objc_msgSend_807Stret(stret, this.pointer,
            _sel_convertRect_fromLayer_, r, l?.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_807(this.pointer,
            _sel_convertRect_fromLayer_, r, l?.pointer ?? ffi.nullptr);
  }

  /// convertRect:toLayer:
  void convertRect_toLayer_(ffi.Pointer<CGRect> stret, CGRect r, CALayer? l) {
    objc.useMsgSendVariants
        ? _objc_msgSend_807Stret(stret, this.pointer, _sel_convertRect_toLayer_,
            r, l?.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_807(this.pointer, _sel_convertRect_toLayer_,
            r, l?.pointer ?? ffi.nullptr);
  }

  /// convertTime:fromLayer:
  double convertTime_fromLayer_(double t, CALayer? l) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_808Fpret(this.pointer, _sel_convertTime_fromLayer_, t,
            l?.pointer ?? ffi.nullptr)
        : _objc_msgSend_808(this.pointer, _sel_convertTime_fromLayer_, t,
            l?.pointer ?? ffi.nullptr);
  }

  /// convertTime:toLayer:
  double convertTime_toLayer_(double t, CALayer? l) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_808Fpret(this.pointer, _sel_convertTime_toLayer_, t,
            l?.pointer ?? ffi.nullptr)
        : _objc_msgSend_808(this.pointer, _sel_convertTime_toLayer_, t,
            l?.pointer ?? ffi.nullptr);
  }

  /// hitTest:
  CALayer? hitTest_(CGPoint p) {
    final _ret = _objc_msgSend_809(this.pointer, _sel_hitTest_, p);
    return _ret.address == 0
        ? null
        : CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// containsPoint:
  bool containsPoint_(CGPoint p) {
    return _objc_msgSend_810(this.pointer, _sel_containsPoint_, p);
  }

  /// contents
  objc.ObjCObjectBase? get contents {
    final _ret = _objc_msgSend_85(this.pointer, _sel_contents);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setContents:
  set contents(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setContents_, value?.pointer ?? ffi.nullptr);
  }

  /// contentsRect
  void getContentsRect(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_793Stret(stret, this.pointer, _sel_contentsRect)
        : stret.ref = _objc_msgSend_793(this.pointer, _sel_contentsRect);
  }

  /// setContentsRect:
  set contentsRect(CGRect value) {
    return _objc_msgSend_794(this.pointer, _sel_setContentsRect_, value);
  }

  /// contentsGravity
  objc.NSString get contentsGravity {
    final _ret = _objc_msgSend_11(this.pointer, _sel_contentsGravity);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setContentsGravity:
  set contentsGravity(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setContentsGravity_, value.pointer);
  }

  /// contentsScale
  double get contentsScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_contentsScale)
        : _objc_msgSend_18(this.pointer, _sel_contentsScale);
  }

  /// setContentsScale:
  set contentsScale(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setContentsScale_, value);
  }

  /// contentsCenter
  void getContentsCenter(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_793Stret(stret, this.pointer, _sel_contentsCenter)
        : stret.ref = _objc_msgSend_793(this.pointer, _sel_contentsCenter);
  }

  /// setContentsCenter:
  set contentsCenter(CGRect value) {
    return _objc_msgSend_794(this.pointer, _sel_setContentsCenter_, value);
  }

  /// contentsFormat
  objc.NSString get contentsFormat {
    final _ret = _objc_msgSend_11(this.pointer, _sel_contentsFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setContentsFormat:
  set contentsFormat(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setContentsFormat_, value.pointer);
  }

  /// wantsExtendedDynamicRangeContent
  bool get wantsExtendedDynamicRangeContent {
    return _objc_msgSend_13(
        this.pointer, _sel_wantsExtendedDynamicRangeContent);
  }

  /// setWantsExtendedDynamicRangeContent:
  set wantsExtendedDynamicRangeContent(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setWantsExtendedDynamicRangeContent_, value);
  }

  /// minificationFilter
  objc.NSString get minificationFilter {
    final _ret = _objc_msgSend_11(this.pointer, _sel_minificationFilter);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMinificationFilter:
  set minificationFilter(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setMinificationFilter_, value.pointer);
  }

  /// magnificationFilter
  objc.NSString get magnificationFilter {
    final _ret = _objc_msgSend_11(this.pointer, _sel_magnificationFilter);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMagnificationFilter:
  set magnificationFilter(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setMagnificationFilter_, value.pointer);
  }

  /// minificationFilterBias
  double get minificationFilterBias {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_minificationFilterBias)
        : _objc_msgSend_361(this.pointer, _sel_minificationFilterBias);
  }

  /// setMinificationFilterBias:
  set minificationFilterBias(double value) {
    return _objc_msgSend_362(
        this.pointer, _sel_setMinificationFilterBias_, value);
  }

  /// isOpaque
  bool get opaque {
    return _objc_msgSend_13(this.pointer, _sel_isOpaque);
  }

  /// setOpaque:
  set opaque(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setOpaque_, value);
  }

  /// display
  void display() {
    _objc_msgSend_7(this.pointer, _sel_display);
  }

  /// setNeedsDisplay
  void setNeedsDisplay() {
    _objc_msgSend_7(this.pointer, _sel_setNeedsDisplay);
  }

  /// setNeedsDisplayInRect:
  void setNeedsDisplayInRect_(CGRect r) {
    _objc_msgSend_811(this.pointer, _sel_setNeedsDisplayInRect_, r);
  }

  /// needsDisplay
  bool needsDisplay() {
    return _objc_msgSend_13(this.pointer, _sel_needsDisplay);
  }

  /// displayIfNeeded
  void displayIfNeeded() {
    _objc_msgSend_7(this.pointer, _sel_displayIfNeeded);
  }

  /// needsDisplayOnBoundsChange
  bool get needsDisplayOnBoundsChange {
    return _objc_msgSend_13(this.pointer, _sel_needsDisplayOnBoundsChange);
  }

  /// setNeedsDisplayOnBoundsChange:
  set needsDisplayOnBoundsChange(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setNeedsDisplayOnBoundsChange_, value);
  }

  /// drawsAsynchronously
  bool get drawsAsynchronously {
    return _objc_msgSend_13(this.pointer, _sel_drawsAsynchronously);
  }

  /// setDrawsAsynchronously:
  set drawsAsynchronously(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setDrawsAsynchronously_, value);
  }

  /// drawInContext:
  void drawInContext_(ffi.Pointer<CGContext> ctx) {
    _objc_msgSend_812(this.pointer, _sel_drawInContext_, ctx);
  }

  /// renderInContext:
  void renderInContext_(ffi.Pointer<CGContext> ctx) {
    _objc_msgSend_812(this.pointer, _sel_renderInContext_, ctx);
  }

  /// edgeAntialiasingMask
  CAEdgeAntialiasingMask get edgeAntialiasingMask {
    final _ret = _objc_msgSend_813(this.pointer, _sel_edgeAntialiasingMask);
    return CAEdgeAntialiasingMask.fromValue(_ret);
  }

  /// setEdgeAntialiasingMask:
  set edgeAntialiasingMask(CAEdgeAntialiasingMask value) {
    return _objc_msgSend_814(
        this.pointer, _sel_setEdgeAntialiasingMask_, value.value);
  }

  /// allowsEdgeAntialiasing
  bool get allowsEdgeAntialiasing {
    return _objc_msgSend_13(this.pointer, _sel_allowsEdgeAntialiasing);
  }

  /// setAllowsEdgeAntialiasing:
  set allowsEdgeAntialiasing(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAllowsEdgeAntialiasing_, value);
  }

  /// backgroundColor
  ffi.Pointer<CGColor> get backgroundColor {
    return _objc_msgSend_815(this.pointer, _sel_backgroundColor);
  }

  /// setBackgroundColor:
  set backgroundColor(ffi.Pointer<CGColor> value) {
    return _objc_msgSend_816(this.pointer, _sel_setBackgroundColor_, value);
  }

  /// cornerRadius
  double get cornerRadius {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_cornerRadius)
        : _objc_msgSend_18(this.pointer, _sel_cornerRadius);
  }

  /// setCornerRadius:
  set cornerRadius(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setCornerRadius_, value);
  }

  /// maskedCorners
  CACornerMask get maskedCorners {
    final _ret = _objc_msgSend_817(this.pointer, _sel_maskedCorners);
    return CACornerMask.fromValue(_ret);
  }

  /// setMaskedCorners:
  set maskedCorners(CACornerMask value) {
    return _objc_msgSend_818(this.pointer, _sel_setMaskedCorners_, value.value);
  }

  /// cornerCurve
  objc.NSString get cornerCurve {
    final _ret = _objc_msgSend_11(this.pointer, _sel_cornerCurve);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCornerCurve:
  set cornerCurve(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setCornerCurve_, value.pointer);
  }

  /// cornerCurveExpansionFactor:
  static double cornerCurveExpansionFactor_(objc.NSString curve) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_90Fpret(
            _class_CALayer, _sel_cornerCurveExpansionFactor_, curve.pointer)
        : _objc_msgSend_90(
            _class_CALayer, _sel_cornerCurveExpansionFactor_, curve.pointer);
  }

  /// borderWidth
  double get borderWidth {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_borderWidth)
        : _objc_msgSend_18(this.pointer, _sel_borderWidth);
  }

  /// setBorderWidth:
  set borderWidth(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setBorderWidth_, value);
  }

  /// borderColor
  ffi.Pointer<CGColor> get borderColor {
    return _objc_msgSend_815(this.pointer, _sel_borderColor);
  }

  /// setBorderColor:
  set borderColor(ffi.Pointer<CGColor> value) {
    return _objc_msgSend_816(this.pointer, _sel_setBorderColor_, value);
  }

  /// opacity
  double get opacity {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_opacity)
        : _objc_msgSend_361(this.pointer, _sel_opacity);
  }

  /// setOpacity:
  set opacity(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setOpacity_, value);
  }

  /// allowsGroupOpacity
  bool get allowsGroupOpacity {
    return _objc_msgSend_13(this.pointer, _sel_allowsGroupOpacity);
  }

  /// setAllowsGroupOpacity:
  set allowsGroupOpacity(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setAllowsGroupOpacity_, value);
  }

  /// compositingFilter
  objc.ObjCObjectBase? get compositingFilter {
    final _ret = _objc_msgSend_85(this.pointer, _sel_compositingFilter);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setCompositingFilter:
  set compositingFilter(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(this.pointer, _sel_setCompositingFilter_,
        value?.pointer ?? ffi.nullptr);
  }

  /// filters
  objc.NSArray? get filters {
    final _ret = _objc_msgSend_88(this.pointer, _sel_filters);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFilters:
  set filters(objc.NSArray? value) {
    return _objc_msgSend_549(
        this.pointer, _sel_setFilters_, value?.pointer ?? ffi.nullptr);
  }

  /// backgroundFilters
  objc.NSArray? get backgroundFilters {
    final _ret = _objc_msgSend_88(this.pointer, _sel_backgroundFilters);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setBackgroundFilters:
  set backgroundFilters(objc.NSArray? value) {
    return _objc_msgSend_549(this.pointer, _sel_setBackgroundFilters_,
        value?.pointer ?? ffi.nullptr);
  }

  /// shouldRasterize
  bool get shouldRasterize {
    return _objc_msgSend_13(this.pointer, _sel_shouldRasterize);
  }

  /// setShouldRasterize:
  set shouldRasterize(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setShouldRasterize_, value);
  }

  /// rasterizationScale
  double get rasterizationScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_rasterizationScale)
        : _objc_msgSend_18(this.pointer, _sel_rasterizationScale);
  }

  /// setRasterizationScale:
  set rasterizationScale(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setRasterizationScale_, value);
  }

  /// shadowColor
  ffi.Pointer<CGColor> get shadowColor {
    return _objc_msgSend_815(this.pointer, _sel_shadowColor);
  }

  /// setShadowColor:
  set shadowColor(ffi.Pointer<CGColor> value) {
    return _objc_msgSend_816(this.pointer, _sel_setShadowColor_, value);
  }

  /// shadowOpacity
  double get shadowOpacity {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_shadowOpacity)
        : _objc_msgSend_361(this.pointer, _sel_shadowOpacity);
  }

  /// setShadowOpacity:
  set shadowOpacity(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setShadowOpacity_, value);
  }

  /// shadowOffset
  void getShadowOffset(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_shadowOffset)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_shadowOffset);
  }

  /// setShadowOffset:
  set shadowOffset(CGSize value) {
    return _objc_msgSend_819(this.pointer, _sel_setShadowOffset_, value);
  }

  /// shadowRadius
  double get shadowRadius {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_shadowRadius)
        : _objc_msgSend_18(this.pointer, _sel_shadowRadius);
  }

  /// setShadowRadius:
  set shadowRadius(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setShadowRadius_, value);
  }

  /// shadowPath
  ffi.Pointer<CGPath> get shadowPath {
    return _objc_msgSend_820(this.pointer, _sel_shadowPath);
  }

  /// setShadowPath:
  set shadowPath(ffi.Pointer<CGPath> value) {
    return _objc_msgSend_821(this.pointer, _sel_setShadowPath_, value);
  }

  /// autoresizingMask
  CAAutoresizingMask get autoresizingMask {
    final _ret = _objc_msgSend_822(this.pointer, _sel_autoresizingMask);
    return CAAutoresizingMask.fromValue(_ret);
  }

  /// setAutoresizingMask:
  set autoresizingMask(CAAutoresizingMask value) {
    return _objc_msgSend_823(
        this.pointer, _sel_setAutoresizingMask_, value.value);
  }

  /// layoutManager
  objc.ObjCObjectBase? get layoutManager {
    final _ret = _objc_msgSend_85(this.pointer, _sel_layoutManager);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setLayoutManager:
  set layoutManager(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setLayoutManager_, value?.pointer ?? ffi.nullptr);
  }

  /// preferredFrameSize
  void preferredFrameSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_preferredFrameSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_preferredFrameSize);
  }

  /// setNeedsLayout
  void setNeedsLayout() {
    _objc_msgSend_7(this.pointer, _sel_setNeedsLayout);
  }

  /// needsLayout
  bool needsLayout() {
    return _objc_msgSend_13(this.pointer, _sel_needsLayout);
  }

  /// layoutIfNeeded
  void layoutIfNeeded() {
    _objc_msgSend_7(this.pointer, _sel_layoutIfNeeded);
  }

  /// layoutSublayers
  void layoutSublayers() {
    _objc_msgSend_7(this.pointer, _sel_layoutSublayers);
  }

  /// resizeSublayersWithOldSize:
  void resizeSublayersWithOldSize_(CGSize size) {
    _objc_msgSend_824(this.pointer, _sel_resizeSublayersWithOldSize_, size);
  }

  /// resizeWithOldSuperlayerSize:
  void resizeWithOldSuperlayerSize_(CGSize size) {
    _objc_msgSend_824(this.pointer, _sel_resizeWithOldSuperlayerSize_, size);
  }

  /// defaultActionForKey:
  static objc.ObjCObjectBase? defaultActionForKey_(objc.NSString event) {
    final _ret = _objc_msgSend_35(
        _class_CALayer, _sel_defaultActionForKey_, event.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// actionForKey:
  objc.ObjCObjectBase? actionForKey_(objc.NSString event) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_actionForKey_, event.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// actions
  objc.NSDictionary? get actions {
    final _ret = _objc_msgSend_84(this.pointer, _sel_actions);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setActions:
  set actions(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer, _sel_setActions_, value?.pointer ?? ffi.nullptr);
  }

  /// addAnimation:forKey:
  void addAnimation_forKey_(CAAnimation anim, objc.NSString? key) {
    _objc_msgSend_831(this.pointer, _sel_addAnimation_forKey_, anim.pointer,
        key?.pointer ?? ffi.nullptr);
  }

  /// removeAllAnimations
  void removeAllAnimations() {
    _objc_msgSend_7(this.pointer, _sel_removeAllAnimations);
  }

  /// removeAnimationForKey:
  void removeAnimationForKey_(objc.NSString key) {
    _objc_msgSend_110(this.pointer, _sel_removeAnimationForKey_, key.pointer);
  }

  /// animationKeys
  objc.NSArray? animationKeys() {
    final _ret = _objc_msgSend_88(this.pointer, _sel_animationKeys);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// animationForKey:
  CAAnimation? animationForKey_(objc.NSString key) {
    final _ret =
        _objc_msgSend_832(this.pointer, _sel_animationForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : CAAnimation.castFromPointer(_ret, retain: true, release: true);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_20(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// style
  objc.NSDictionary? get style {
    final _ret = _objc_msgSend_84(this.pointer, _sel_style);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setStyle:
  set style(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer, _sel_setStyle_, value?.pointer ?? ffi.nullptr);
  }

  /// constraints
  objc.NSArray? get constraints {
    final _ret = _objc_msgSend_88(this.pointer, _sel_constraints);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setConstraints:
  set constraints(objc.NSArray? value) {
    return _objc_msgSend_549(
        this.pointer, _sel_setConstraints_, value?.pointer ?? ffi.nullptr);
  }

  /// addConstraint:
  void addConstraint_(CAConstraint c) {
    _objc_msgSend_837(this.pointer, _sel_addConstraint_, c.pointer);
  }

  /// layerWithRemoteClientId:
  static CALayer layerWithRemoteClientId_(int client_id) {
    final _ret = _objc_msgSend_838(
        _class_CALayer, _sel_layerWithRemoteClientId_, client_id);
    return CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// scrollPoint:
  void scrollPoint_(CGPoint p) {
    _objc_msgSend_839(this.pointer, _sel_scrollPoint_, p);
  }

  /// scrollRectToVisible:
  void scrollRectToVisible_(CGRect r) {
    _objc_msgSend_811(this.pointer, _sel_scrollRectToVisible_, r);
  }

  /// visibleRect
  void getVisibleRect(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_793Stret(stret, this.pointer, _sel_visibleRect)
        : stret.ref = _objc_msgSend_793(this.pointer, _sel_visibleRect);
  }

  /// new
  static CALayer new1() {
    final _ret = _objc_msgSend_19(_class_CALayer, _sel_new);
    return CALayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CALayer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_CALayer, _sel_allocWithZone_, zone);
    return CALayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CALayer alloc() {
    final _ret = _objc_msgSend_19(_class_CALayer, _sel_alloc);
    return CALayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CALayer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CALayer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CALayer, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CALayer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CALayer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CALayer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CALayer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_CALayer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_CALayer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CALayer = objc.getClass("CALayer");
late final _sel_layer = objc.registerName("layer");
late final _sel_initWithLayer_ = objc.registerName("initWithLayer:");
late final _sel_presentationLayer = objc.registerName("presentationLayer");
late final _sel_modelLayer = objc.registerName("modelLayer");
late final _sel_defaultValueForKey_ = objc.registerName("defaultValueForKey:");
late final _sel_needsDisplayForKey_ = objc.registerName("needsDisplayForKey:");
late final _sel_shouldArchiveValueForKey_ =
    objc.registerName("shouldArchiveValueForKey:");

final class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

final class CGPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

late final _sel_bounds = objc.registerName("bounds");
final _objc_msgSend_793 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGRect Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CGRect Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_793Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<CGRect>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CGRect>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setBounds_ = objc.registerName("setBounds:");
final _objc_msgSend_794 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_position = objc.registerName("position");
final _objc_msgSend_795 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CGPoint Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_795Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CGPoint>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPosition_ = objc.registerName("setPosition:");
final _objc_msgSend_796 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
late final _sel_zPosition = objc.registerName("zPosition");
late final _sel_setZPosition_ = objc.registerName("setZPosition:");
late final _sel_anchorPoint = objc.registerName("anchorPoint");
late final _sel_setAnchorPoint_ = objc.registerName("setAnchorPoint:");
late final _sel_anchorPointZ = objc.registerName("anchorPointZ");
late final _sel_setAnchorPointZ_ = objc.registerName("setAnchorPointZ:");

final class CATransform3D extends ffi.Struct {
  @ffi.Double()
  external double m11;

  @ffi.Double()
  external double m12;

  @ffi.Double()
  external double m13;

  @ffi.Double()
  external double m14;

  @ffi.Double()
  external double m21;

  @ffi.Double()
  external double m22;

  @ffi.Double()
  external double m23;

  @ffi.Double()
  external double m24;

  @ffi.Double()
  external double m31;

  @ffi.Double()
  external double m32;

  @ffi.Double()
  external double m33;

  @ffi.Double()
  external double m34;

  @ffi.Double()
  external double m41;

  @ffi.Double()
  external double m42;

  @ffi.Double()
  external double m43;

  @ffi.Double()
  external double m44;
}

late final _sel_transform = objc.registerName("transform");
final _objc_msgSend_797 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CATransform3D Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CATransform3D Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_797Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CATransform3D>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CATransform3D>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTransform_ = objc.registerName("setTransform:");
final _objc_msgSend_798 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CATransform3D)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CATransform3D)>();
late final _sel_affineTransform = objc.registerName("affineTransform");
late final _sel_setAffineTransform_ = objc.registerName("setAffineTransform:");
final _objc_msgSend_799 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGAffineTransform)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGAffineTransform)>();
late final _sel_frame = objc.registerName("frame");
late final _sel_setFrame_ = objc.registerName("setFrame:");
late final _sel_isHidden = objc.registerName("isHidden");
late final _sel_setHidden_ = objc.registerName("setHidden:");
late final _sel_isDoubleSided = objc.registerName("isDoubleSided");
late final _sel_setDoubleSided_ = objc.registerName("setDoubleSided:");
late final _sel_isGeometryFlipped = objc.registerName("isGeometryFlipped");
late final _sel_setGeometryFlipped_ = objc.registerName("setGeometryFlipped:");
late final _sel_contentsAreFlipped = objc.registerName("contentsAreFlipped");
late final _sel_superlayer = objc.registerName("superlayer");
final _objc_msgSend_800 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_removeFromSuperlayer =
    objc.registerName("removeFromSuperlayer");
late final _sel_sublayers = objc.registerName("sublayers");
late final _sel_setSublayers_ = objc.registerName("setSublayers:");
late final _sel_addSublayer_ = objc.registerName("addSublayer:");
final _objc_msgSend_801 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_insertSublayer_atIndex_ =
    objc.registerName("insertSublayer:atIndex:");
final _objc_msgSend_802 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedInt)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_insertSublayer_below_ =
    objc.registerName("insertSublayer:below:");
final _objc_msgSend_803 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_insertSublayer_above_ =
    objc.registerName("insertSublayer:above:");
late final _sel_replaceSublayer_with_ =
    objc.registerName("replaceSublayer:with:");
final _objc_msgSend_804 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sublayerTransform = objc.registerName("sublayerTransform");
late final _sel_setSublayerTransform_ =
    objc.registerName("setSublayerTransform:");
late final _sel_mask = objc.registerName("mask");
late final _sel_setMask_ = objc.registerName("setMask:");
final _objc_msgSend_805 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_masksToBounds = objc.registerName("masksToBounds");
late final _sel_setMasksToBounds_ = objc.registerName("setMasksToBounds:");
late final _sel_convertPoint_fromLayer_ =
    objc.registerName("convertPoint:fromLayer:");
final _objc_msgSend_806 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        CGPoint Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_806Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGPoint>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertPoint_toLayer_ =
    objc.registerName("convertPoint:toLayer:");
late final _sel_convertRect_fromLayer_ =
    objc.registerName("convertRect:fromLayer:");
final _objc_msgSend_807 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGRect Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        CGRect Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_807Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGRect>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGRect>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertRect_toLayer_ =
    objc.registerName("convertRect:toLayer:");
late final _sel_convertTime_fromLayer_ =
    objc.registerName("convertTime:fromLayer:");
final _objc_msgSend_808 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_808Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertTime_toLayer_ =
    objc.registerName("convertTime:toLayer:");
late final _sel_hitTest_ = objc.registerName("hitTest:");
final _objc_msgSend_809 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
late final _sel_containsPoint_ = objc.registerName("containsPoint:");
final _objc_msgSend_810 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
late final _sel_contents = objc.registerName("contents");
late final _sel_setContents_ = objc.registerName("setContents:");
late final _sel_contentsRect = objc.registerName("contentsRect");
late final _sel_setContentsRect_ = objc.registerName("setContentsRect:");
late final _sel_contentsGravity = objc.registerName("contentsGravity");
late final _sel_setContentsGravity_ = objc.registerName("setContentsGravity:");
late final _sel_contentsScale = objc.registerName("contentsScale");
late final _sel_setContentsScale_ = objc.registerName("setContentsScale:");
late final _sel_contentsCenter = objc.registerName("contentsCenter");
late final _sel_setContentsCenter_ = objc.registerName("setContentsCenter:");
late final _sel_contentsFormat = objc.registerName("contentsFormat");
late final _sel_setContentsFormat_ = objc.registerName("setContentsFormat:");
late final _sel_wantsExtendedDynamicRangeContent =
    objc.registerName("wantsExtendedDynamicRangeContent");
late final _sel_setWantsExtendedDynamicRangeContent_ =
    objc.registerName("setWantsExtendedDynamicRangeContent:");
late final _sel_minificationFilter = objc.registerName("minificationFilter");
late final _sel_setMinificationFilter_ =
    objc.registerName("setMinificationFilter:");
late final _sel_magnificationFilter = objc.registerName("magnificationFilter");
late final _sel_setMagnificationFilter_ =
    objc.registerName("setMagnificationFilter:");
late final _sel_minificationFilterBias =
    objc.registerName("minificationFilterBias");
late final _sel_setMinificationFilterBias_ =
    objc.registerName("setMinificationFilterBias:");
late final _sel_isOpaque = objc.registerName("isOpaque");
late final _sel_setOpaque_ = objc.registerName("setOpaque:");
late final _sel_display = objc.registerName("display");
late final _sel_setNeedsDisplay = objc.registerName("setNeedsDisplay");
late final _sel_setNeedsDisplayInRect_ =
    objc.registerName("setNeedsDisplayInRect:");
final _objc_msgSend_811 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_needsDisplay = objc.registerName("needsDisplay");
late final _sel_displayIfNeeded = objc.registerName("displayIfNeeded");
late final _sel_needsDisplayOnBoundsChange =
    objc.registerName("needsDisplayOnBoundsChange");
late final _sel_setNeedsDisplayOnBoundsChange_ =
    objc.registerName("setNeedsDisplayOnBoundsChange:");
late final _sel_drawsAsynchronously = objc.registerName("drawsAsynchronously");
late final _sel_setDrawsAsynchronously_ =
    objc.registerName("setDrawsAsynchronously:");

final class CGContext extends ffi.Opaque {}

late final _sel_drawInContext_ = objc.registerName("drawInContext:");
final _objc_msgSend_812 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGContext>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGContext>)>();
late final _sel_renderInContext_ = objc.registerName("renderInContext:");

enum CAEdgeAntialiasingMask {
  kCALayerLeftEdge(1),
  kCALayerRightEdge(2),
  kCALayerBottomEdge(4),
  kCALayerTopEdge(8);

  final int value;
  const CAEdgeAntialiasingMask(this.value);

  static CAEdgeAntialiasingMask fromValue(int value) => switch (value) {
        1 => kCALayerLeftEdge,
        2 => kCALayerRightEdge,
        4 => kCALayerBottomEdge,
        8 => kCALayerTopEdge,
        _ => throw ArgumentError(
            "Unknown value for CAEdgeAntialiasingMask: $value"),
      };
}

late final _sel_edgeAntialiasingMask =
    objc.registerName("edgeAntialiasingMask");
final _objc_msgSend_813 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setEdgeAntialiasingMask_ =
    objc.registerName("setEdgeAntialiasingMask:");
final _objc_msgSend_814 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_allowsEdgeAntialiasing =
    objc.registerName("allowsEdgeAntialiasing");
late final _sel_setAllowsEdgeAntialiasing_ =
    objc.registerName("setAllowsEdgeAntialiasing:");

final class CGColor extends ffi.Opaque {}

late final _sel_backgroundColor = objc.registerName("backgroundColor");
final _objc_msgSend_815 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGColor> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<CGColor> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setBackgroundColor_ = objc.registerName("setBackgroundColor:");
final _objc_msgSend_816 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColor>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColor>)>();
late final _sel_cornerRadius = objc.registerName("cornerRadius");
late final _sel_setCornerRadius_ = objc.registerName("setCornerRadius:");

enum CACornerMask {
  kCALayerMinXMinYCorner(1),
  kCALayerMaxXMinYCorner(2),
  kCALayerMinXMaxYCorner(4),
  kCALayerMaxXMaxYCorner(8);

  final int value;
  const CACornerMask(this.value);

  static CACornerMask fromValue(int value) => switch (value) {
        1 => kCALayerMinXMinYCorner,
        2 => kCALayerMaxXMinYCorner,
        4 => kCALayerMinXMaxYCorner,
        8 => kCALayerMaxXMaxYCorner,
        _ => throw ArgumentError("Unknown value for CACornerMask: $value"),
      };
}

late final _sel_maskedCorners = objc.registerName("maskedCorners");
final _objc_msgSend_817 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMaskedCorners_ = objc.registerName("setMaskedCorners:");
final _objc_msgSend_818 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_cornerCurve = objc.registerName("cornerCurve");
late final _sel_setCornerCurve_ = objc.registerName("setCornerCurve:");
late final _sel_cornerCurveExpansionFactor_ =
    objc.registerName("cornerCurveExpansionFactor:");
late final _sel_borderWidth = objc.registerName("borderWidth");
late final _sel_setBorderWidth_ = objc.registerName("setBorderWidth:");
late final _sel_borderColor = objc.registerName("borderColor");
late final _sel_setBorderColor_ = objc.registerName("setBorderColor:");
late final _sel_opacity = objc.registerName("opacity");
late final _sel_setOpacity_ = objc.registerName("setOpacity:");
late final _sel_allowsGroupOpacity = objc.registerName("allowsGroupOpacity");
late final _sel_setAllowsGroupOpacity_ =
    objc.registerName("setAllowsGroupOpacity:");
late final _sel_compositingFilter = objc.registerName("compositingFilter");
late final _sel_setCompositingFilter_ =
    objc.registerName("setCompositingFilter:");
late final _sel_filters = objc.registerName("filters");
late final _sel_setFilters_ = objc.registerName("setFilters:");
late final _sel_backgroundFilters = objc.registerName("backgroundFilters");
late final _sel_setBackgroundFilters_ =
    objc.registerName("setBackgroundFilters:");
late final _sel_shouldRasterize = objc.registerName("shouldRasterize");
late final _sel_setShouldRasterize_ = objc.registerName("setShouldRasterize:");
late final _sel_rasterizationScale = objc.registerName("rasterizationScale");
late final _sel_setRasterizationScale_ =
    objc.registerName("setRasterizationScale:");
late final _sel_shadowColor = objc.registerName("shadowColor");
late final _sel_setShadowColor_ = objc.registerName("setShadowColor:");
late final _sel_shadowOpacity = objc.registerName("shadowOpacity");
late final _sel_setShadowOpacity_ = objc.registerName("setShadowOpacity:");
late final _sel_shadowOffset = objc.registerName("shadowOffset");
late final _sel_setShadowOffset_ = objc.registerName("setShadowOffset:");
final _objc_msgSend_819 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGSize)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGSize)>();
late final _sel_shadowRadius = objc.registerName("shadowRadius");
late final _sel_setShadowRadius_ = objc.registerName("setShadowRadius:");

final class CGPath extends ffi.Opaque {}

late final _sel_shadowPath = objc.registerName("shadowPath");
final _objc_msgSend_820 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGPath> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<CGPath> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setShadowPath_ = objc.registerName("setShadowPath:");
final _objc_msgSend_821 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGPath>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGPath>)>();

enum CAAutoresizingMask {
  kCALayerNotSizable(0),
  kCALayerMinXMargin(1),
  kCALayerWidthSizable(2),
  kCALayerMaxXMargin(4),
  kCALayerMinYMargin(8),
  kCALayerHeightSizable(16),
  kCALayerMaxYMargin(32);

  final int value;
  const CAAutoresizingMask(this.value);

  static CAAutoresizingMask fromValue(int value) => switch (value) {
        0 => kCALayerNotSizable,
        1 => kCALayerMinXMargin,
        2 => kCALayerWidthSizable,
        4 => kCALayerMaxXMargin,
        8 => kCALayerMinYMargin,
        16 => kCALayerHeightSizable,
        32 => kCALayerMaxYMargin,
        _ =>
          throw ArgumentError("Unknown value for CAAutoresizingMask: $value"),
      };
}

late final _sel_autoresizingMask = objc.registerName("autoresizingMask");
final _objc_msgSend_822 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAutoresizingMask_ =
    objc.registerName("setAutoresizingMask:");
final _objc_msgSend_823 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_layoutManager = objc.registerName("layoutManager");
late final _sel_setLayoutManager_ = objc.registerName("setLayoutManager:");
late final _sel_preferredFrameSize = objc.registerName("preferredFrameSize");
late final _sel_setNeedsLayout = objc.registerName("setNeedsLayout");
late final _sel_needsLayout = objc.registerName("needsLayout");
late final _sel_layoutIfNeeded = objc.registerName("layoutIfNeeded");
late final _sel_layoutSublayers = objc.registerName("layoutSublayers");
late final _sel_resizeSublayersWithOldSize_ =
    objc.registerName("resizeSublayersWithOldSize:");
final _objc_msgSend_824 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGSize)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGSize)>();
late final _sel_resizeWithOldSuperlayerSize_ =
    objc.registerName("resizeWithOldSuperlayerSize:");
late final _sel_defaultActionForKey_ =
    objc.registerName("defaultActionForKey:");
late final _sel_actionForKey_ = objc.registerName("actionForKey:");
late final _sel_actions = objc.registerName("actions");
late final _sel_setActions_ = objc.registerName("setActions:");

/// CAAnimation
class CAAnimation extends objc.NSObject {
  CAAnimation._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CAAnimation] that points to the same underlying object as [other].
  CAAnimation.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CAAnimation] that wraps the given raw object pointer.
  CAAnimation.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CAAnimation].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CAAnimation);
  }

  /// animation
  static CAAnimation animation() {
    final _ret = _objc_msgSend_19(_class_CAAnimation, _sel_animation);
    return CAAnimation.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultValueForKey:
  static objc.ObjCObjectBase? defaultValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_35(
        _class_CAAnimation, _sel_defaultValueForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// shouldArchiveValueForKey:
  bool shouldArchiveValueForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        this.pointer, _sel_shouldArchiveValueForKey_, key.pointer);
  }

  /// timingFunction
  CAMediaTimingFunction? get timingFunction {
    final _ret = _objc_msgSend_827(this.pointer, _sel_timingFunction);
    return _ret.address == 0
        ? null
        : CAMediaTimingFunction.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setTimingFunction:
  set timingFunction(CAMediaTimingFunction? value) {
    return _objc_msgSend_828(
        this.pointer, _sel_setTimingFunction_, value?.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// isRemovedOnCompletion
  bool get removedOnCompletion {
    return _objc_msgSend_13(this.pointer, _sel_isRemovedOnCompletion);
  }

  /// setRemovedOnCompletion:
  set removedOnCompletion(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setRemovedOnCompletion_, value);
  }

  /// preferredFrameRateRange
  void getPreferredFrameRateRange(ffi.Pointer<CAFrameRateRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_829Stret(
            stret, this.pointer, _sel_preferredFrameRateRange)
        : stret.ref =
            _objc_msgSend_829(this.pointer, _sel_preferredFrameRateRange);
  }

  /// setPreferredFrameRateRange:
  set preferredFrameRateRange(CAFrameRateRange value) {
    return _objc_msgSend_830(
        this.pointer, _sel_setPreferredFrameRateRange_, value);
  }

  /// init
  CAAnimation init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CAAnimation.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CAAnimation new1() {
    final _ret = _objc_msgSend_19(_class_CAAnimation, _sel_new);
    return CAAnimation.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CAAnimation allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_CAAnimation, _sel_allocWithZone_, zone);
    return CAAnimation.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CAAnimation alloc() {
    final _ret = _objc_msgSend_19(_class_CAAnimation, _sel_alloc);
    return CAAnimation.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CAAnimation,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CAAnimation,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CAAnimation, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CAAnimation, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CAAnimation,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CAAnimation,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CAAnimation,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_CAAnimation, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_CAAnimation, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CAAnimation = objc.getClass("CAAnimation");
late final _sel_animation = objc.registerName("animation");

/// CAMediaTimingFunction
class CAMediaTimingFunction extends objc.NSObject {
  CAMediaTimingFunction._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CAMediaTimingFunction] that points to the same underlying object as [other].
  CAMediaTimingFunction.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CAMediaTimingFunction] that wraps the given raw object pointer.
  CAMediaTimingFunction.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CAMediaTimingFunction].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CAMediaTimingFunction);
  }

  /// functionWithName:
  static CAMediaTimingFunction functionWithName_(objc.NSString name) {
    final _ret = _objc_msgSend_63(
        _class_CAMediaTimingFunction, _sel_functionWithName_, name.pointer);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// functionWithControlPoints::::
  static CAMediaTimingFunction functionWithControlPoints____(
      double c1x, double c1y, double c2x, double c2y) {
    final _ret = _objc_msgSend_825(_class_CAMediaTimingFunction,
        _sel_functionWithControlPoints____, c1x, c1y, c2x, c2y);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithControlPoints::::
  CAMediaTimingFunction initWithControlPoints____(
      double c1x, double c1y, double c2x, double c2y) {
    final _ret = _objc_msgSend_825(
        this.pointer, _sel_initWithControlPoints____, c1x, c1y, c2x, c2y);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// getControlPointAtIndex:values:
  void getControlPointAtIndex_values_(int idx, ffi.Pointer<ffi.Float> ptr) {
    _objc_msgSend_826(
        this.pointer, _sel_getControlPointAtIndex_values_, idx, ptr);
  }

  /// init
  CAMediaTimingFunction init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CAMediaTimingFunction new1() {
    final _ret = _objc_msgSend_19(_class_CAMediaTimingFunction, _sel_new);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CAMediaTimingFunction allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_CAMediaTimingFunction, _sel_allocWithZone_, zone);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CAMediaTimingFunction alloc() {
    final _ret = _objc_msgSend_19(_class_CAMediaTimingFunction, _sel_alloc);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CAMediaTimingFunction,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CAMediaTimingFunction,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CAMediaTimingFunction, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_CAMediaTimingFunction, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CAMediaTimingFunction,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CAMediaTimingFunction,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CAMediaTimingFunction,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_CAMediaTimingFunction, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_CAMediaTimingFunction, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CAMediaTimingFunction =
    objc.getClass("CAMediaTimingFunction");
late final _sel_functionWithName_ = objc.registerName("functionWithName:");
late final _sel_functionWithControlPoints____ =
    objc.registerName("functionWithControlPoints::::");
final _objc_msgSend_825 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Float,
                ffi.Float,
                ffi.Float,
                ffi.Float)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double, double, double)>();
late final _sel_initWithControlPoints____ =
    objc.registerName("initWithControlPoints::::");
late final _sel_getControlPointAtIndex_values_ =
    objc.registerName("getControlPointAtIndex:values:");
final _objc_msgSend_826 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Size,
                ffi.Pointer<ffi.Float>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<ffi.Float>)>();
late final _sel_timingFunction = objc.registerName("timingFunction");
final _objc_msgSend_827 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTimingFunction_ = objc.registerName("setTimingFunction:");
final _objc_msgSend_828 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isRemovedOnCompletion =
    objc.registerName("isRemovedOnCompletion");
late final _sel_setRemovedOnCompletion_ =
    objc.registerName("setRemovedOnCompletion:");

final class CAFrameRateRange extends ffi.Struct {
  @ffi.Float()
  external double minimum;

  @ffi.Float()
  external double maximum;

  @ffi.Float()
  external double preferred;
}

late final _sel_preferredFrameRateRange =
    objc.registerName("preferredFrameRateRange");
final _objc_msgSend_829 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CAFrameRateRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CAFrameRateRange Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_829Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CAFrameRateRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CAFrameRateRange>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPreferredFrameRateRange_ =
    objc.registerName("setPreferredFrameRateRange:");
final _objc_msgSend_830 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CAFrameRateRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CAFrameRateRange)>();
late final _sel_addAnimation_forKey_ =
    objc.registerName("addAnimation:forKey:");
final _objc_msgSend_831 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeAllAnimations = objc.registerName("removeAllAnimations");
late final _sel_removeAnimationForKey_ =
    objc.registerName("removeAnimationForKey:");
late final _sel_animationKeys = objc.registerName("animationKeys");
late final _sel_animationForKey_ = objc.registerName("animationForKey:");
final _objc_msgSend_832 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_style = objc.registerName("style");
late final _sel_setStyle_ = objc.registerName("setStyle:");
late final _sel_constraints = objc.registerName("constraints");
late final _sel_setConstraints_ = objc.registerName("setConstraints:");

/// CAConstraint
class CAConstraint extends objc.NSObject {
  CAConstraint._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CAConstraint] that points to the same underlying object as [other].
  CAConstraint.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CAConstraint] that wraps the given raw object pointer.
  CAConstraint.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CAConstraint].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CAConstraint);
  }

  /// constraintWithAttribute:relativeTo:attribute:scale:offset:
  static CAConstraint
      constraintWithAttribute_relativeTo_attribute_scale_offset_(
          CAConstraintAttribute attr,
          objc.NSString srcId,
          CAConstraintAttribute srcAttr,
          double m,
          double c) {
    final _ret = _objc_msgSend_833(
        _class_CAConstraint,
        _sel_constraintWithAttribute_relativeTo_attribute_scale_offset_,
        attr.value,
        srcId.pointer,
        srcAttr.value,
        m,
        c);
    return CAConstraint.castFromPointer(_ret, retain: true, release: true);
  }

  /// constraintWithAttribute:relativeTo:attribute:offset:
  static CAConstraint constraintWithAttribute_relativeTo_attribute_offset_(
      CAConstraintAttribute attr,
      objc.NSString srcId,
      CAConstraintAttribute srcAttr,
      double c) {
    final _ret = _objc_msgSend_834(
        _class_CAConstraint,
        _sel_constraintWithAttribute_relativeTo_attribute_offset_,
        attr.value,
        srcId.pointer,
        srcAttr.value,
        c);
    return CAConstraint.castFromPointer(_ret, retain: true, release: true);
  }

  /// constraintWithAttribute:relativeTo:attribute:
  static CAConstraint constraintWithAttribute_relativeTo_attribute_(
      CAConstraintAttribute attr,
      objc.NSString srcId,
      CAConstraintAttribute srcAttr) {
    final _ret = _objc_msgSend_835(
        _class_CAConstraint,
        _sel_constraintWithAttribute_relativeTo_attribute_,
        attr.value,
        srcId.pointer,
        srcAttr.value);
    return CAConstraint.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithAttribute:relativeTo:attribute:scale:offset:
  CAConstraint initWithAttribute_relativeTo_attribute_scale_offset_(
      CAConstraintAttribute attr,
      objc.NSString srcId,
      CAConstraintAttribute srcAttr,
      double m,
      double c) {
    final _ret = _objc_msgSend_833(
        this.pointer,
        _sel_initWithAttribute_relativeTo_attribute_scale_offset_,
        attr.value,
        srcId.pointer,
        srcAttr.value,
        m,
        c);
    return CAConstraint.castFromPointer(_ret, retain: true, release: true);
  }

  /// attribute
  CAConstraintAttribute get attribute {
    final _ret = _objc_msgSend_836(this.pointer, _sel_attribute);
    return CAConstraintAttribute.fromValue(_ret);
  }

  /// sourceName
  objc.NSString get sourceName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_sourceName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceAttribute
  CAConstraintAttribute get sourceAttribute {
    final _ret = _objc_msgSend_836(this.pointer, _sel_sourceAttribute);
    return CAConstraintAttribute.fromValue(_ret);
  }

  /// scale
  double get scale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_scale)
        : _objc_msgSend_18(this.pointer, _sel_scale);
  }

  /// offset
  double get offset {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_offset)
        : _objc_msgSend_18(this.pointer, _sel_offset);
  }

  /// init
  CAConstraint init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CAConstraint.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CAConstraint new1() {
    final _ret = _objc_msgSend_19(_class_CAConstraint, _sel_new);
    return CAConstraint.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CAConstraint allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_CAConstraint, _sel_allocWithZone_, zone);
    return CAConstraint.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CAConstraint alloc() {
    final _ret = _objc_msgSend_19(_class_CAConstraint, _sel_alloc);
    return CAConstraint.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CAConstraint,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CAConstraint,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CAConstraint, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CAConstraint, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CAConstraint,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CAConstraint,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CAConstraint,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_CAConstraint, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_CAConstraint, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CAConstraint = objc.getClass("CAConstraint");

enum CAConstraintAttribute {
  kCAConstraintMinX(0),
  kCAConstraintMidX(1),
  kCAConstraintMaxX(2),
  kCAConstraintWidth(3),
  kCAConstraintMinY(4),
  kCAConstraintMidY(5),
  kCAConstraintMaxY(6),
  kCAConstraintHeight(7);

  final int value;
  const CAConstraintAttribute(this.value);

  static CAConstraintAttribute fromValue(int value) => switch (value) {
        0 => kCAConstraintMinX,
        1 => kCAConstraintMidX,
        2 => kCAConstraintMaxX,
        3 => kCAConstraintWidth,
        4 => kCAConstraintMinY,
        5 => kCAConstraintMidY,
        6 => kCAConstraintMaxY,
        7 => kCAConstraintHeight,
        _ => throw ArgumentError(
            "Unknown value for CAConstraintAttribute: $value"),
      };
}

late final _sel_constraintWithAttribute_relativeTo_attribute_scale_offset_ =
    objc.registerName(
        "constraintWithAttribute:relativeTo:attribute:scale:offset:");
final _objc_msgSend_833 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedInt,
                ffi.Double,
                ffi.Double)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int,
            double,
            double)>();
late final _sel_constraintWithAttribute_relativeTo_attribute_offset_ =
    objc.registerName("constraintWithAttribute:relativeTo:attribute:offset:");
final _objc_msgSend_834 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedInt,
                ffi.Double)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int,
            double)>();
late final _sel_constraintWithAttribute_relativeTo_attribute_ =
    objc.registerName("constraintWithAttribute:relativeTo:attribute:");
final _objc_msgSend_835 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedInt)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_initWithAttribute_relativeTo_attribute_scale_offset_ =
    objc.registerName("initWithAttribute:relativeTo:attribute:scale:offset:");
late final _sel_attribute = objc.registerName("attribute");
final _objc_msgSend_836 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sourceName = objc.registerName("sourceName");
late final _sel_sourceAttribute = objc.registerName("sourceAttribute");
late final _sel_scale = objc.registerName("scale");
late final _sel_offset = objc.registerName("offset");
late final _sel_addConstraint_ = objc.registerName("addConstraint:");
final _objc_msgSend_837 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_layerWithRemoteClientId_ =
    objc.registerName("layerWithRemoteClientId:");
final _objc_msgSend_838 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_scrollPoint_ = objc.registerName("scrollPoint:");
final _objc_msgSend_839 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
late final _sel_scrollRectToVisible_ =
    objc.registerName("scrollRectToVisible:");
late final _sel_visibleRect = objc.registerName("visibleRect");
late final _sel_videoCompositionCoreAnimationToolWithAdditionalLayer_asTrackID_ =
    objc.registerName(
        "videoCompositionCoreAnimationToolWithAdditionalLayer:asTrackID:");
final _objc_msgSend_840 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer_inLayer_ =
    objc.registerName(
        "videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:inLayer:");
final _objc_msgSend_841 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers_inLayer_ =
    objc.registerName(
        "videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers:inLayer:");
final _objc_msgSend_842 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_animationTool = objc.registerName("animationTool");
final _objc_msgSend_843 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sourceSampleDataTrackIDs =
    objc.registerName("sourceSampleDataTrackIDs");
late final _sel_colorPrimaries = objc.registerName("colorPrimaries");
late final _sel_colorYCbCrMatrix = objc.registerName("colorYCbCrMatrix");
late final _sel_colorTransferFunction =
    objc.registerName("colorTransferFunction");
late final _sel_perFrameHDRDisplayMetadataPolicy =
    objc.registerName("perFrameHDRDisplayMetadataPolicy");
void _ObjCBlock_ffiVoid_AVAsynchronousCIImageFilteringRequest_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_AVAsynchronousCIImageFilteringRequest_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>`.
abstract final class ObjCBlock_ffiVoid_AVAsynchronousCIImageFilteringRequest {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
      ffi.Void Function(AVAsynchronousCIImageFilteringRequest)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>(
          pointer,
          retain: retain,
          release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Void Function(
                                  ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_AVAsynchronousCIImageFilteringRequest_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVAsynchronousCIImageFilteringRequest)> fromFunction(
          void Function(AVAsynchronousCIImageFilteringRequest) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(
                              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_AVAsynchronousCIImageFilteringRequest_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(AVAsynchronousCIImageFilteringRequest.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc
      .ObjCBlock<ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>
      listener(void Function(AVAsynchronousCIImageFilteringRequest) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVAsynchronousCIImageFilteringRequest_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(
            AVAsynchronousCIImageFilteringRequest.castFromPointer(arg0,
                retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVAsynchronousCIImageFilteringRequest(
            raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>`.
extension ObjCBlock_ffiVoid_AVAsynchronousCIImageFilteringRequest_CallExtension
    on objc
    .ObjCBlock<ffi.Void Function(AVAsynchronousCIImageFilteringRequest)> {
  void call(AVAsynchronousCIImageFilteringRequest arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

/// AVAsynchronousCIImageFilteringRequest
class AVAsynchronousCIImageFilteringRequest extends objc.NSObject {
  AVAsynchronousCIImageFilteringRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAsynchronousCIImageFilteringRequest] that points to the same underlying object as [other].
  AVAsynchronousCIImageFilteringRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAsynchronousCIImageFilteringRequest] that wraps the given raw object pointer.
  AVAsynchronousCIImageFilteringRequest.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAsynchronousCIImageFilteringRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVAsynchronousCIImageFilteringRequest);
  }

  /// renderSize
  void getRenderSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_renderSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_renderSize);
  }

  /// compositionTime
  void getCompositionTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_compositionTime)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_compositionTime);
  }

  /// sourceImage
  CIImage get sourceImage {
    final _ret = _objc_msgSend_871(this.pointer, _sel_sourceImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// finishWithImage:context:
  void finishWithImage_context_(CIImage filteredImage, CIContext? context) {
    _objc_msgSend_1010(this.pointer, _sel_finishWithImage_context_,
        filteredImage.pointer, context?.pointer ?? ffi.nullptr);
  }

  /// finishWithError:
  void finishWithError_(objc.NSError error) {
    _objc_msgSend_706(this.pointer, _sel_finishWithError_, error.pointer);
  }

  /// init
  AVAsynchronousCIImageFilteringRequest init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAsynchronousCIImageFilteringRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAsynchronousCIImageFilteringRequest new1() {
    final _ret = _objc_msgSend_19(
        _class_AVAsynchronousCIImageFilteringRequest, _sel_new);
    return AVAsynchronousCIImageFilteringRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVAsynchronousCIImageFilteringRequest allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_AVAsynchronousCIImageFilteringRequest,
        _sel_allocWithZone_, zone);
    return AVAsynchronousCIImageFilteringRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAsynchronousCIImageFilteringRequest alloc() {
    final _ret = _objc_msgSend_19(
        _class_AVAsynchronousCIImageFilteringRequest, _sel_alloc);
    return AVAsynchronousCIImageFilteringRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAsynchronousCIImageFilteringRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAsynchronousCIImageFilteringRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVAsynchronousCIImageFilteringRequest,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAsynchronousCIImageFilteringRequest, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAsynchronousCIImageFilteringRequest,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAsynchronousCIImageFilteringRequest,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAsynchronousCIImageFilteringRequest,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVAsynchronousCIImageFilteringRequest,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_AVAsynchronousCIImageFilteringRequest,
        _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAsynchronousCIImageFilteringRequest =
    objc.getClass("AVAsynchronousCIImageFilteringRequest");
late final _sel_compositionTime = objc.registerName("compositionTime");

/// CIImage
class CIImage extends objc.NSObject {
  CIImage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIImage] that points to the same underlying object as [other].
  CIImage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIImage] that wraps the given raw object pointer.
  CIImage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIImage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_CIImage);
  }

  /// imageWithCGImage:
  static CIImage imageWithCGImage_(ffi.Pointer<CGImage> image) {
    final _ret =
        _objc_msgSend_844(_class_CIImage, _sel_imageWithCGImage_, image);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCGImage:options:
  static CIImage imageWithCGImage_options_(
      ffi.Pointer<CGImage> image, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_845(_class_CIImage,
        _sel_imageWithCGImage_options_, image, options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCGImageSource:index:options:
  static CIImage imageWithCGImageSource_index_options_(
      ffi.Pointer<CGImageSource> source, int index, objc.NSDictionary? dict) {
    final _ret = _objc_msgSend_846(
        _class_CIImage,
        _sel_imageWithCGImageSource_index_options_,
        source,
        index,
        dict?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCGLayer:
  static CIImage imageWithCGLayer_(ffi.Pointer<CGLayer> layer) {
    final _ret =
        _objc_msgSend_847(_class_CIImage, _sel_imageWithCGLayer_, layer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCGLayer:options:
  static CIImage imageWithCGLayer_options_(
      ffi.Pointer<CGLayer> layer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_848(_class_CIImage,
        _sel_imageWithCGLayer_options_, layer, options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithBitmapData:bytesPerRow:size:format:colorSpace:
  static CIImage imageWithBitmapData_bytesPerRow_size_format_colorSpace_(
      objc.NSData data,
      int bytesPerRow,
      CGSize size,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_849(
        _class_CIImage,
        _sel_imageWithBitmapData_bytesPerRow_size_format_colorSpace_,
        data.pointer,
        bytesPerRow,
        size,
        format,
        colorSpace);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithTexture:size:flipped:colorSpace:
  static CIImage imageWithTexture_size_flipped_colorSpace_(int name,
      CGSize size, bool flipped, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_850(
        _class_CIImage,
        _sel_imageWithTexture_size_flipped_colorSpace_,
        name,
        size,
        flipped,
        colorSpace);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithTexture:size:flipped:options:
  static CIImage imageWithTexture_size_flipped_options_(
      int name, CGSize size, bool flipped, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_851(
        _class_CIImage,
        _sel_imageWithTexture_size_flipped_options_,
        name,
        size,
        flipped,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithMTLTexture:options:
  static CIImage? imageWithMTLTexture_options_(
      objc.ObjCObjectBase texture, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_852(
        _class_CIImage,
        _sel_imageWithMTLTexture_options_,
        texture.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithContentsOfURL:
  static CIImage? imageWithContentsOfURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_853(
        _class_CIImage, _sel_imageWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithContentsOfURL:options:
  static CIImage? imageWithContentsOfURL_options_(
      objc.NSURL url, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_854(
        _class_CIImage,
        _sel_imageWithContentsOfURL_options_,
        url.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithData:
  static CIImage? imageWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_855(_class_CIImage, _sel_imageWithData_, data.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithData:options:
  static CIImage? imageWithData_options_(
      objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_856(_class_CIImage, _sel_imageWithData_options_,
        data.pointer, options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCVImageBuffer:
  static CIImage imageWithCVImageBuffer_(ffi.Pointer<__CVBuffer> imageBuffer) {
    final _ret = _objc_msgSend_857(
        _class_CIImage, _sel_imageWithCVImageBuffer_, imageBuffer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCVImageBuffer:options:
  static CIImage imageWithCVImageBuffer_options_(
      ffi.Pointer<__CVBuffer> imageBuffer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_858(
        _class_CIImage,
        _sel_imageWithCVImageBuffer_options_,
        imageBuffer,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCVPixelBuffer:
  static CIImage imageWithCVPixelBuffer_(ffi.Pointer<__CVBuffer> pixelBuffer) {
    final _ret = _objc_msgSend_857(
        _class_CIImage, _sel_imageWithCVPixelBuffer_, pixelBuffer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCVPixelBuffer:options:
  static CIImage imageWithCVPixelBuffer_options_(
      ffi.Pointer<__CVBuffer> pixelBuffer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_858(
        _class_CIImage,
        _sel_imageWithCVPixelBuffer_options_,
        pixelBuffer,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithIOSurface:
  static CIImage imageWithIOSurface_(ffi.Pointer<__IOSurface> surface) {
    final _ret =
        _objc_msgSend_859(_class_CIImage, _sel_imageWithIOSurface_, surface);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithIOSurface:options:
  static CIImage imageWithIOSurface_options_(
      ffi.Pointer<__IOSurface> surface, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_860(
        _class_CIImage,
        _sel_imageWithIOSurface_options_,
        surface,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithColor:
  static CIImage imageWithColor_(CIColor color) {
    final _ret =
        _objc_msgSend_870(_class_CIImage, _sel_imageWithColor_, color.pointer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// emptyImage
  static CIImage emptyImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_emptyImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// blackImage
  static CIImage getBlackImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_blackImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// whiteImage
  static CIImage getWhiteImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_whiteImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// grayImage
  static CIImage getGrayImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_grayImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// redImage
  static CIImage getRedImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_redImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// greenImage
  static CIImage getGreenImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_greenImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// blueImage
  static CIImage getBlueImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_blueImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// cyanImage
  static CIImage getCyanImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_cyanImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// magentaImage
  static CIImage getMagentaImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_magentaImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// yellowImage
  static CIImage getYellowImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_yellowImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// clearImage
  static CIImage getClearImage() {
    final _ret = _objc_msgSend_871(_class_CIImage, _sel_clearImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCGImage:
  CIImage initWithCGImage_(ffi.Pointer<CGImage> image) {
    final _ret = _objc_msgSend_872(this.pointer, _sel_initWithCGImage_, image);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCGImage:options:
  CIImage initWithCGImage_options_(
      ffi.Pointer<CGImage> image, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_873(this.pointer, _sel_initWithCGImage_options_,
        image, options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCGImageSource:index:options:
  CIImage initWithCGImageSource_index_options_(
      ffi.Pointer<CGImageSource> source, int index, objc.NSDictionary? dict) {
    final _ret = _objc_msgSend_874(
        this.pointer,
        _sel_initWithCGImageSource_index_options_,
        source,
        index,
        dict?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCGLayer:
  CIImage initWithCGLayer_(ffi.Pointer<CGLayer> layer) {
    final _ret = _objc_msgSend_875(this.pointer, _sel_initWithCGLayer_, layer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCGLayer:options:
  CIImage initWithCGLayer_options_(
      ffi.Pointer<CGLayer> layer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_876(this.pointer, _sel_initWithCGLayer_options_,
        layer, options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:
  CIImage? initWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_341(this.pointer, _sel_initWithData_, data.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:options:
  CIImage? initWithData_options_(objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_877(this.pointer, _sel_initWithData_options_,
        data.pointer, options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithBitmapData:bytesPerRow:size:format:colorSpace:
  CIImage initWithBitmapData_bytesPerRow_size_format_colorSpace_(
      objc.NSData data,
      int bytesPerRow,
      CGSize size,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_878(
        this.pointer,
        _sel_initWithBitmapData_bytesPerRow_size_format_colorSpace_,
        data.pointer,
        bytesPerRow,
        size,
        format,
        colorSpace);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithTexture:size:flipped:colorSpace:
  CIImage initWithTexture_size_flipped_colorSpace_(int name, CGSize size,
      bool flipped, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_879(
        this.pointer,
        _sel_initWithTexture_size_flipped_colorSpace_,
        name,
        size,
        flipped,
        colorSpace);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithTexture:size:flipped:options:
  CIImage initWithTexture_size_flipped_options_(
      int name, CGSize size, bool flipped, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_880(
        this.pointer,
        _sel_initWithTexture_size_flipped_options_,
        name,
        size,
        flipped,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithMTLTexture:options:
  CIImage? initWithMTLTexture_options_(
      objc.ObjCObjectBase texture, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_881(
        this.pointer,
        _sel_initWithMTLTexture_options_,
        texture.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfURL:
  CIImage? initWithContentsOfURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_36(
        this.pointer, _sel_initWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfURL:options:
  CIImage? initWithContentsOfURL_options_(
      objc.NSURL url, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_882(
        this.pointer,
        _sel_initWithContentsOfURL_options_,
        url.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithIOSurface:
  CIImage initWithIOSurface_(ffi.Pointer<__IOSurface> surface) {
    final _ret =
        _objc_msgSend_883(this.pointer, _sel_initWithIOSurface_, surface);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithIOSurface:options:
  CIImage initWithIOSurface_options_(
      ffi.Pointer<__IOSurface> surface, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_884(
        this.pointer,
        _sel_initWithIOSurface_options_,
        surface,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithIOSurface:plane:format:options:
  CIImage initWithIOSurface_plane_format_options_(
      ffi.Pointer<__IOSurface> surface,
      int plane,
      int format,
      objc.NSDictionary? options) {
    final _ret = _objc_msgSend_885(
        this.pointer,
        _sel_initWithIOSurface_plane_format_options_,
        surface,
        plane,
        format,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCVImageBuffer:
  CIImage initWithCVImageBuffer_(ffi.Pointer<__CVBuffer> imageBuffer) {
    final _ret = _objc_msgSend_886(
        this.pointer, _sel_initWithCVImageBuffer_, imageBuffer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCVImageBuffer:options:
  CIImage initWithCVImageBuffer_options_(
      ffi.Pointer<__CVBuffer> imageBuffer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_887(
        this.pointer,
        _sel_initWithCVImageBuffer_options_,
        imageBuffer,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCVPixelBuffer:
  CIImage initWithCVPixelBuffer_(ffi.Pointer<__CVBuffer> pixelBuffer) {
    final _ret = _objc_msgSend_886(
        this.pointer, _sel_initWithCVPixelBuffer_, pixelBuffer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCVPixelBuffer:options:
  CIImage initWithCVPixelBuffer_options_(
      ffi.Pointer<__CVBuffer> pixelBuffer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_887(
        this.pointer,
        _sel_initWithCVPixelBuffer_options_,
        pixelBuffer,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithColor:
  CIImage initWithColor_(CIColor color) {
    final _ret =
        _objc_msgSend_888(this.pointer, _sel_initWithColor_, color.pointer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingTransform:
  CIImage imageByApplyingTransform_(CGAffineTransform matrix) {
    final _ret =
        _objc_msgSend_889(this.pointer, _sel_imageByApplyingTransform_, matrix);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingTransform:highQualityDownsample:
  CIImage imageByApplyingTransform_highQualityDownsample_(
      CGAffineTransform matrix, bool highQualityDownsample) {
    final _ret = _objc_msgSend_890(
        this.pointer,
        _sel_imageByApplyingTransform_highQualityDownsample_,
        matrix,
        highQualityDownsample);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingOrientation:
  CIImage imageByApplyingOrientation_(int orientation) {
    final _ret = _objc_msgSend_891(
        this.pointer, _sel_imageByApplyingOrientation_, orientation);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageTransformForOrientation:
  void imageTransformForOrientation_(
      ffi.Pointer<CGAffineTransform> stret, int orientation) {
    objc.useMsgSendVariants
        ? _objc_msgSend_892Stret(stret, this.pointer,
            _sel_imageTransformForOrientation_, orientation)
        : stret.ref = _objc_msgSend_892(
            this.pointer, _sel_imageTransformForOrientation_, orientation);
  }

  /// imageByApplyingCGOrientation:
  CIImage imageByApplyingCGOrientation_(
      CGImagePropertyOrientation orientation) {
    final _ret = _objc_msgSend_893(
        this.pointer, _sel_imageByApplyingCGOrientation_, orientation.value);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageTransformForCGOrientation:
  void imageTransformForCGOrientation_(ffi.Pointer<CGAffineTransform> stret,
      CGImagePropertyOrientation orientation) {
    objc.useMsgSendVariants
        ? _objc_msgSend_894Stret(stret, this.pointer,
            _sel_imageTransformForCGOrientation_, orientation.value)
        : stret.ref = _objc_msgSend_894(this.pointer,
            _sel_imageTransformForCGOrientation_, orientation.value);
  }

  /// imageByCompositingOverImage:
  CIImage imageByCompositingOverImage_(CIImage dest) {
    final _ret = _objc_msgSend_895(
        this.pointer, _sel_imageByCompositingOverImage_, dest.pointer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByCroppingToRect:
  CIImage imageByCroppingToRect_(CGRect rect) {
    final _ret =
        _objc_msgSend_896(this.pointer, _sel_imageByCroppingToRect_, rect);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByClampingToExtent
  CIImage imageByClampingToExtent() {
    final _ret = _objc_msgSend_871(this.pointer, _sel_imageByClampingToExtent);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByClampingToRect:
  CIImage imageByClampingToRect_(CGRect rect) {
    final _ret =
        _objc_msgSend_896(this.pointer, _sel_imageByClampingToRect_, rect);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingFilter:withInputParameters:
  CIImage imageByApplyingFilter_withInputParameters_(
      objc.NSString filterName, objc.NSDictionary? params) {
    final _ret = _objc_msgSend_897(
        this.pointer,
        _sel_imageByApplyingFilter_withInputParameters_,
        filterName.pointer,
        params?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingFilter:
  CIImage imageByApplyingFilter_(objc.NSString filterName) {
    final _ret = _objc_msgSend_898(
        this.pointer, _sel_imageByApplyingFilter_, filterName.pointer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByColorMatchingColorSpaceToWorkingSpace:
  CIImage? imageByColorMatchingColorSpaceToWorkingSpace_(
      ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_899(this.pointer,
        _sel_imageByColorMatchingColorSpaceToWorkingSpace_, colorSpace);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByColorMatchingWorkingSpaceToColorSpace:
  CIImage? imageByColorMatchingWorkingSpaceToColorSpace_(
      ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_899(this.pointer,
        _sel_imageByColorMatchingWorkingSpaceToColorSpace_, colorSpace);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByPremultiplyingAlpha
  CIImage imageByPremultiplyingAlpha() {
    final _ret =
        _objc_msgSend_871(this.pointer, _sel_imageByPremultiplyingAlpha);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByUnpremultiplyingAlpha
  CIImage imageByUnpremultiplyingAlpha() {
    final _ret =
        _objc_msgSend_871(this.pointer, _sel_imageByUnpremultiplyingAlpha);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageBySettingAlphaOneInExtent:
  CIImage imageBySettingAlphaOneInExtent_(CGRect extent) {
    final _ret = _objc_msgSend_896(
        this.pointer, _sel_imageBySettingAlphaOneInExtent_, extent);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingGaussianBlurWithSigma:
  CIImage imageByApplyingGaussianBlurWithSigma_(double sigma) {
    final _ret = _objc_msgSend_900(
        this.pointer, _sel_imageByApplyingGaussianBlurWithSigma_, sigma);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageBySettingProperties:
  CIImage imageBySettingProperties_(objc.NSDictionary properties) {
    final _ret = _objc_msgSend_901(
        this.pointer, _sel_imageBySettingProperties_, properties.pointer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageBySamplingLinear
  CIImage imageBySamplingLinear() {
    final _ret = _objc_msgSend_871(this.pointer, _sel_imageBySamplingLinear);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageBySamplingNearest
  CIImage imageBySamplingNearest() {
    final _ret = _objc_msgSend_871(this.pointer, _sel_imageBySamplingNearest);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByInsertingIntermediate
  CIImage imageByInsertingIntermediate() {
    final _ret =
        _objc_msgSend_871(this.pointer, _sel_imageByInsertingIntermediate);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByInsertingIntermediate:
  CIImage imageByInsertingIntermediate_(bool cache) {
    final _ret = _objc_msgSend_902(
        this.pointer, _sel_imageByInsertingIntermediate_, cache);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// extent
  void getExtent(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_793Stret(stret, this.pointer, _sel_extent)
        : stret.ref = _objc_msgSend_793(this.pointer, _sel_extent);
  }

  /// properties
  objc.NSDictionary get properties {
    final _ret = _objc_msgSend_123(this.pointer, _sel_properties);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// definition
  CIFilterShape get definition {
    final _ret = _objc_msgSend_908(this.pointer, _sel_definition);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// url
  objc.NSURL? get url {
    final _ret = _objc_msgSend_24(this.pointer, _sel_url);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorSpace
  ffi.Pointer<CGColorSpace> get colorSpace {
    return _objc_msgSend_868(this.pointer, _sel_colorSpace);
  }

  /// pixelBuffer
  ffi.Pointer<__CVBuffer> get pixelBuffer {
    return _objc_msgSend_909(this.pointer, _sel_pixelBuffer);
  }

  /// CGImage
  ffi.Pointer<CGImage> get CGImage1 {
    return _objc_msgSend_910(this.pointer, _sel_CGImage);
  }

  /// regionOfInterestForImage:inRect:
  void regionOfInterestForImage_inRect_(
      ffi.Pointer<CGRect> stret, CIImage image, CGRect rect) {
    objc.useMsgSendVariants
        ? _objc_msgSend_911Stret(stret, this.pointer,
            _sel_regionOfInterestForImage_inRect_, image.pointer, rect)
        : stret.ref = _objc_msgSend_911(this.pointer,
            _sel_regionOfInterestForImage_inRect_, image.pointer, rect);
  }

  /// autoAdjustmentFilters
  objc.NSArray autoAdjustmentFilters() {
    final _ret = _objc_msgSend_33(this.pointer, _sel_autoAdjustmentFilters);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// autoAdjustmentFiltersWithOptions:
  objc.NSArray autoAdjustmentFiltersWithOptions_(objc.NSDictionary? options) {
    final _ret = _objc_msgSend_912(
        this.pointer,
        _sel_autoAdjustmentFiltersWithOptions_,
        options?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByConvertingWorkingSpaceToLab
  CIImage imageByConvertingWorkingSpaceToLab() {
    final _ret = _objc_msgSend_871(
        this.pointer, _sel_imageByConvertingWorkingSpaceToLab);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByConvertingLabToWorkingSpace
  CIImage imageByConvertingLabToWorkingSpace() {
    final _ret = _objc_msgSend_871(
        this.pointer, _sel_imageByConvertingLabToWorkingSpace);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// depthData
  AVDepthData? get depthData {
    final _ret = _objc_msgSend_921(this.pointer, _sel_depthData);
    return _ret.address == 0
        ? null
        : AVDepthData.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithDepthData:options:
  CIImage? initWithDepthData_options_(
      AVDepthData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_922(
        this.pointer,
        _sel_initWithDepthData_options_,
        data.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithDepthData:
  CIImage? initWithDepthData_(AVDepthData data) {
    final _ret =
        _objc_msgSend_923(this.pointer, _sel_initWithDepthData_, data.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithDepthData:options:
  static CIImage? imageWithDepthData_options_(
      AVDepthData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_922(
        _class_CIImage,
        _sel_imageWithDepthData_options_,
        data.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithDepthData:
  static CIImage? imageWithDepthData_(AVDepthData data) {
    final _ret = _objc_msgSend_923(
        _class_CIImage, _sel_imageWithDepthData_, data.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// portraitEffectsMatte
  AVPortraitEffectsMatte? get portraitEffectsMatte {
    final _ret = _objc_msgSend_924(this.pointer, _sel_portraitEffectsMatte);
    return _ret.address == 0
        ? null
        : AVPortraitEffectsMatte.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithPortaitEffectsMatte:options:
  CIImage? initWithPortaitEffectsMatte_options_(
      AVPortraitEffectsMatte matte, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_925(
        this.pointer,
        _sel_initWithPortaitEffectsMatte_options_,
        matte.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithPortaitEffectsMatte:
  CIImage? initWithPortaitEffectsMatte_(AVPortraitEffectsMatte matte) {
    final _ret = _objc_msgSend_926(
        this.pointer, _sel_initWithPortaitEffectsMatte_, matte.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithPortaitEffectsMatte:options:
  static CIImage? imageWithPortaitEffectsMatte_options_(
      AVPortraitEffectsMatte matte, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_925(
        _class_CIImage,
        _sel_imageWithPortaitEffectsMatte_options_,
        matte.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithPortaitEffectsMatte:
  static CIImage? imageWithPortaitEffectsMatte_(AVPortraitEffectsMatte matte) {
    final _ret = _objc_msgSend_926(
        _class_CIImage, _sel_imageWithPortaitEffectsMatte_, matte.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// semanticSegmentationMatte
  AVSemanticSegmentationMatte? get semanticSegmentationMatte {
    final _ret =
        _objc_msgSend_928(this.pointer, _sel_semanticSegmentationMatte);
    return _ret.address == 0
        ? null
        : AVSemanticSegmentationMatte.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithSemanticSegmentationMatte:options:
  CIImage? initWithSemanticSegmentationMatte_options_(
      AVSemanticSegmentationMatte matte, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_929(
        this.pointer,
        _sel_initWithSemanticSegmentationMatte_options_,
        matte.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithSemanticSegmentationMatte:
  CIImage? initWithSemanticSegmentationMatte_(
      AVSemanticSegmentationMatte matte) {
    final _ret = _objc_msgSend_930(
        this.pointer, _sel_initWithSemanticSegmentationMatte_, matte.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithSemanticSegmentationMatte:options:
  static CIImage? imageWithSemanticSegmentationMatte_options_(
      AVSemanticSegmentationMatte matte, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_929(
        _class_CIImage,
        _sel_imageWithSemanticSegmentationMatte_options_,
        matte.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithSemanticSegmentationMatte:
  static CIImage? imageWithSemanticSegmentationMatte_(
      AVSemanticSegmentationMatte matte) {
    final _ret = _objc_msgSend_930(_class_CIImage,
        _sel_imageWithSemanticSegmentationMatte_, matte.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithImageProvider:size::format:colorSpace:options:
  static CIImage imageWithImageProvider_size__format_colorSpace_options_(
      objc.ObjCObjectBase p,
      int width,
      int height,
      int f,
      ffi.Pointer<CGColorSpace> cs,
      objc.NSDictionary? options) {
    final _ret = _objc_msgSend_931(
        _class_CIImage,
        _sel_imageWithImageProvider_size__format_colorSpace_options_,
        p.pointer,
        width,
        height,
        f,
        cs,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithImageProvider:size::format:colorSpace:options:
  CIImage initWithImageProvider_size__format_colorSpace_options_(
      objc.ObjCObjectBase p,
      int width,
      int height,
      int f,
      ffi.Pointer<CGColorSpace> cs,
      objc.NSDictionary? options) {
    final _ret = _objc_msgSend_932(
        this.pointer,
        _sel_initWithImageProvider_size__format_colorSpace_options_,
        p.pointer,
        width,
        height,
        f,
        cs,
        options?.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CIImage init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CIImage new1() {
    final _ret = _objc_msgSend_19(_class_CIImage, _sel_new);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIImage allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_CIImage, _sel_allocWithZone_, zone);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIImage alloc() {
    final _ret = _objc_msgSend_19(_class_CIImage, _sel_alloc);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIImage,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIImage,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIImage, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIImage, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIImage,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIImage,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIImage,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_CIImage, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_CIImage, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIImage = objc.getClass("CIImage");

final class CGImage extends ffi.Opaque {}

late final _sel_imageWithCGImage_ = objc.registerName("imageWithCGImage:");
final _objc_msgSend_844 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGImage>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGImage>)>();
late final _sel_imageWithCGImage_options_ =
    objc.registerName("imageWithCGImage:options:");
final _objc_msgSend_845 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImage>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGImage>,
            ffi.Pointer<objc.ObjCObject>)>();

final class CGImageSource extends ffi.Opaque {}

late final _sel_imageWithCGImageSource_index_options_ =
    objc.registerName("imageWithCGImageSource:index:options:");
final _objc_msgSend_846 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImageSource>,
                ffi.Size,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGImageSource>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

final class CGLayer extends ffi.Opaque {}

late final _sel_imageWithCGLayer_ = objc.registerName("imageWithCGLayer:");
final _objc_msgSend_847 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGLayer>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGLayer>)>();
late final _sel_imageWithCGLayer_options_ =
    objc.registerName("imageWithCGLayer:options:");
final _objc_msgSend_848 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGLayer>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGLayer>,
            ffi.Pointer<objc.ObjCObject>)>();

final class CGColorSpace extends ffi.Opaque {}

late final _sel_imageWithBitmapData_bytesPerRow_size_format_colorSpace_ = objc
    .registerName("imageWithBitmapData:bytesPerRow:size:format:colorSpace:");
final _objc_msgSend_849 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Size,
                CGSize,
                ffi.Int,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            CGSize,
            int,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_imageWithTexture_size_flipped_colorSpace_ =
    objc.registerName("imageWithTexture:size:flipped:colorSpace:");
final _objc_msgSend_850 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                CGSize,
                ffi.Bool,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            CGSize,
            bool,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_imageWithTexture_size_flipped_options_ =
    objc.registerName("imageWithTexture:size:flipped:options:");
final _objc_msgSend_851 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                CGSize,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            CGSize,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithMTLTexture_options_ =
    objc.registerName("imageWithMTLTexture:options:");
final _objc_msgSend_852 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithContentsOfURL_ =
    objc.registerName("imageWithContentsOfURL:");
final _objc_msgSend_853 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithContentsOfURL_options_ =
    objc.registerName("imageWithContentsOfURL:options:");
final _objc_msgSend_854 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithData_ = objc.registerName("imageWithData:");
final _objc_msgSend_855 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithData_options_ =
    objc.registerName("imageWithData:options:");
final _objc_msgSend_856 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

final class __CVBuffer extends ffi.Opaque {}

late final _sel_imageWithCVImageBuffer_ =
    objc.registerName("imageWithCVImageBuffer:");
final _objc_msgSend_857 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__CVBuffer>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__CVBuffer>)>();
late final _sel_imageWithCVImageBuffer_options_ =
    objc.registerName("imageWithCVImageBuffer:options:");
final _objc_msgSend_858 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__CVBuffer>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__CVBuffer>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithCVPixelBuffer_ =
    objc.registerName("imageWithCVPixelBuffer:");
late final _sel_imageWithCVPixelBuffer_options_ =
    objc.registerName("imageWithCVPixelBuffer:options:");

final class __IOSurface extends ffi.Opaque {}

late final _sel_imageWithIOSurface_ = objc.registerName("imageWithIOSurface:");
final _objc_msgSend_859 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__IOSurface>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__IOSurface>)>();
late final _sel_imageWithIOSurface_options_ =
    objc.registerName("imageWithIOSurface:options:");
final _objc_msgSend_860 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__IOSurface>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__IOSurface>,
            ffi.Pointer<objc.ObjCObject>)>();

/// CIColor
class CIColor extends objc.NSObject {
  CIColor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIColor] that points to the same underlying object as [other].
  CIColor.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIColor] that wraps the given raw object pointer.
  CIColor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIColor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_CIColor);
  }

  /// colorWithCGColor:
  static CIColor colorWithCGColor_(ffi.Pointer<CGColor> c) {
    final _ret = _objc_msgSend_861(_class_CIColor, _sel_colorWithCGColor_, c);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithRed:green:blue:alpha:
  static CIColor colorWithRed_green_blue_alpha_(
      double r, double g, double b, double a) {
    final _ret = _objc_msgSend_862(
        _class_CIColor, _sel_colorWithRed_green_blue_alpha_, r, g, b, a);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithRed:green:blue:
  static CIColor colorWithRed_green_blue_(double r, double g, double b) {
    final _ret = _objc_msgSend_863(
        _class_CIColor, _sel_colorWithRed_green_blue_, r, g, b);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithRed:green:blue:alpha:colorSpace:
  static CIColor? colorWithRed_green_blue_alpha_colorSpace_(double r, double g,
      double b, double a, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_864(_class_CIColor,
        _sel_colorWithRed_green_blue_alpha_colorSpace_, r, g, b, a, colorSpace);
    return _ret.address == 0
        ? null
        : CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithRed:green:blue:colorSpace:
  static CIColor? colorWithRed_green_blue_colorSpace_(
      double r, double g, double b, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_865(_class_CIColor,
        _sel_colorWithRed_green_blue_colorSpace_, r, g, b, colorSpace);
    return _ret.address == 0
        ? null
        : CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithString:
  static CIColor colorWithString_(objc.NSString representation) {
    final _ret = _objc_msgSend_63(
        _class_CIColor, _sel_colorWithString_, representation.pointer);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCGColor:
  CIColor initWithCGColor_(ffi.Pointer<CGColor> c) {
    final _ret = _objc_msgSend_861(this.pointer, _sel_initWithCGColor_, c);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithRed:green:blue:alpha:
  CIColor initWithRed_green_blue_alpha_(
      double r, double g, double b, double a) {
    final _ret = _objc_msgSend_862(
        this.pointer, _sel_initWithRed_green_blue_alpha_, r, g, b, a);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithRed:green:blue:
  CIColor initWithRed_green_blue_(double r, double g, double b) {
    final _ret =
        _objc_msgSend_863(this.pointer, _sel_initWithRed_green_blue_, r, g, b);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithRed:green:blue:alpha:colorSpace:
  CIColor? initWithRed_green_blue_alpha_colorSpace_(double r, double g,
      double b, double a, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_864(this.pointer,
        _sel_initWithRed_green_blue_alpha_colorSpace_, r, g, b, a, colorSpace);
    return _ret.address == 0
        ? null
        : CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithRed:green:blue:colorSpace:
  CIColor? initWithRed_green_blue_colorSpace_(
      double r, double g, double b, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_865(this.pointer,
        _sel_initWithRed_green_blue_colorSpace_, r, g, b, colorSpace);
    return _ret.address == 0
        ? null
        : CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// numberOfComponents
  int get numberOfComponents {
    return _objc_msgSend_866(this.pointer, _sel_numberOfComponents);
  }

  /// components
  ffi.Pointer<ffi.Double> get components {
    return _objc_msgSend_867(this.pointer, _sel_components);
  }

  /// alpha
  double get alpha {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_alpha)
        : _objc_msgSend_18(this.pointer, _sel_alpha);
  }

  /// colorSpace
  ffi.Pointer<CGColorSpace> get colorSpace {
    return _objc_msgSend_868(this.pointer, _sel_colorSpace);
  }

  /// red
  double get red {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_red)
        : _objc_msgSend_18(this.pointer, _sel_red);
  }

  /// green
  double get green {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_green)
        : _objc_msgSend_18(this.pointer, _sel_green);
  }

  /// blue
  double get blue {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_blue)
        : _objc_msgSend_18(this.pointer, _sel_blue);
  }

  /// stringRepresentation
  objc.NSString get stringRepresentation {
    final _ret = _objc_msgSend_11(this.pointer, _sel_stringRepresentation);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// blackColor
  static CIColor getBlackColor() {
    final _ret = _objc_msgSend_869(_class_CIColor, _sel_blackColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// whiteColor
  static CIColor getWhiteColor() {
    final _ret = _objc_msgSend_869(_class_CIColor, _sel_whiteColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// grayColor
  static CIColor getGrayColor() {
    final _ret = _objc_msgSend_869(_class_CIColor, _sel_grayColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// redColor
  static CIColor getRedColor() {
    final _ret = _objc_msgSend_869(_class_CIColor, _sel_redColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// greenColor
  static CIColor getGreenColor() {
    final _ret = _objc_msgSend_869(_class_CIColor, _sel_greenColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// blueColor
  static CIColor getBlueColor() {
    final _ret = _objc_msgSend_869(_class_CIColor, _sel_blueColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// cyanColor
  static CIColor getCyanColor() {
    final _ret = _objc_msgSend_869(_class_CIColor, _sel_cyanColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// magentaColor
  static CIColor getMagentaColor() {
    final _ret = _objc_msgSend_869(_class_CIColor, _sel_magentaColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// yellowColor
  static CIColor getYellowColor() {
    final _ret = _objc_msgSend_869(_class_CIColor, _sel_yellowColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// clearColor
  static CIColor getClearColor() {
    final _ret = _objc_msgSend_869(_class_CIColor, _sel_clearColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CIColor init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CIColor new1() {
    final _ret = _objc_msgSend_19(_class_CIColor, _sel_new);
    return CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIColor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_CIColor, _sel_allocWithZone_, zone);
    return CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIColor alloc() {
    final _ret = _objc_msgSend_19(_class_CIColor, _sel_alloc);
    return CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIColor,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIColor,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIColor, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIColor, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIColor,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIColor,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIColor,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_CIColor, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_CIColor, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIColor = objc.getClass("CIColor");
late final _sel_colorWithCGColor_ = objc.registerName("colorWithCGColor:");
final _objc_msgSend_861 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColor>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColor>)>();
late final _sel_colorWithRed_green_blue_alpha_ =
    objc.registerName("colorWithRed:green:blue:alpha:");
final _objc_msgSend_862 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Double,
                ffi.Double,
                ffi.Double)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double, double, double)>();
late final _sel_colorWithRed_green_blue_ =
    objc.registerName("colorWithRed:green:blue:");
final _objc_msgSend_863 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Double,
                ffi.Double)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double, double)>();
late final _sel_colorWithRed_green_blue_alpha_colorSpace_ =
    objc.registerName("colorWithRed:green:blue:alpha:colorSpace:");
final _objc_msgSend_864 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Double,
                ffi.Double,
                ffi.Double,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            double,
            double,
            double,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_colorWithRed_green_blue_colorSpace_ =
    objc.registerName("colorWithRed:green:blue:colorSpace:");
final _objc_msgSend_865 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Double,
                ffi.Double,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            double,
            double,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_colorWithString_ = objc.registerName("colorWithString:");
late final _sel_initWithCGColor_ = objc.registerName("initWithCGColor:");
late final _sel_initWithRed_green_blue_alpha_ =
    objc.registerName("initWithRed:green:blue:alpha:");
late final _sel_initWithRed_green_blue_ =
    objc.registerName("initWithRed:green:blue:");
late final _sel_initWithRed_green_blue_alpha_colorSpace_ =
    objc.registerName("initWithRed:green:blue:alpha:colorSpace:");
late final _sel_initWithRed_green_blue_colorSpace_ =
    objc.registerName("initWithRed:green:blue:colorSpace:");
late final _sel_numberOfComponents = objc.registerName("numberOfComponents");
final _objc_msgSend_866 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Size Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_867 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Double> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.Double> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_alpha = objc.registerName("alpha");
late final _sel_colorSpace = objc.registerName("colorSpace");
final _objc_msgSend_868 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGColorSpace> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<CGColorSpace> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_red = objc.registerName("red");
late final _sel_green = objc.registerName("green");
late final _sel_blue = objc.registerName("blue");
late final _sel_stringRepresentation =
    objc.registerName("stringRepresentation");
late final _sel_blackColor = objc.registerName("blackColor");
final _objc_msgSend_869 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_whiteColor = objc.registerName("whiteColor");
late final _sel_grayColor = objc.registerName("grayColor");
late final _sel_redColor = objc.registerName("redColor");
late final _sel_greenColor = objc.registerName("greenColor");
late final _sel_blueColor = objc.registerName("blueColor");
late final _sel_cyanColor = objc.registerName("cyanColor");
late final _sel_magentaColor = objc.registerName("magentaColor");
late final _sel_yellowColor = objc.registerName("yellowColor");
late final _sel_clearColor = objc.registerName("clearColor");
late final _sel_imageWithColor_ = objc.registerName("imageWithColor:");
final _objc_msgSend_870 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_emptyImage = objc.registerName("emptyImage");
final _objc_msgSend_871 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_blackImage = objc.registerName("blackImage");
late final _sel_whiteImage = objc.registerName("whiteImage");
late final _sel_grayImage = objc.registerName("grayImage");
late final _sel_redImage = objc.registerName("redImage");
late final _sel_greenImage = objc.registerName("greenImage");
late final _sel_blueImage = objc.registerName("blueImage");
late final _sel_cyanImage = objc.registerName("cyanImage");
late final _sel_magentaImage = objc.registerName("magentaImage");
late final _sel_yellowImage = objc.registerName("yellowImage");
late final _sel_clearImage = objc.registerName("clearImage");
late final _sel_initWithCGImage_ = objc.registerName("initWithCGImage:");
final _objc_msgSend_872 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGImage>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGImage>)>();
late final _sel_initWithCGImage_options_ =
    objc.registerName("initWithCGImage:options:");
final _objc_msgSend_873 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImage>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGImage>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCGImageSource_index_options_ =
    objc.registerName("initWithCGImageSource:index:options:");
final _objc_msgSend_874 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImageSource>,
                ffi.Size,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGImageSource>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCGLayer_ = objc.registerName("initWithCGLayer:");
final _objc_msgSend_875 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGLayer>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGLayer>)>();
late final _sel_initWithCGLayer_options_ =
    objc.registerName("initWithCGLayer:options:");
final _objc_msgSend_876 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGLayer>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGLayer>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithData_options_ =
    objc.registerName("initWithData:options:");
final _objc_msgSend_877 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithBitmapData_bytesPerRow_size_format_colorSpace_ =
    objc.registerName("initWithBitmapData:bytesPerRow:size:format:colorSpace:");
final _objc_msgSend_878 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Size,
                CGSize,
                ffi.Int,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            CGSize,
            int,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_initWithTexture_size_flipped_colorSpace_ =
    objc.registerName("initWithTexture:size:flipped:colorSpace:");
final _objc_msgSend_879 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                CGSize,
                ffi.Bool,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            CGSize,
            bool,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_initWithTexture_size_flipped_options_ =
    objc.registerName("initWithTexture:size:flipped:options:");
final _objc_msgSend_880 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                CGSize,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            CGSize,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithMTLTexture_options_ =
    objc.registerName("initWithMTLTexture:options:");
final _objc_msgSend_881 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithContentsOfURL_options_ =
    objc.registerName("initWithContentsOfURL:options:");
final _objc_msgSend_882 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithIOSurface_ = objc.registerName("initWithIOSurface:");
final _objc_msgSend_883 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__IOSurface>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__IOSurface>)>();
late final _sel_initWithIOSurface_options_ =
    objc.registerName("initWithIOSurface:options:");
final _objc_msgSend_884 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__IOSurface>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__IOSurface>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithIOSurface_plane_format_options_ =
    objc.registerName("initWithIOSurface:plane:format:options:");
final _objc_msgSend_885 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__IOSurface>,
                ffi.Size,
                ffi.Int,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__IOSurface>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCVImageBuffer_ =
    objc.registerName("initWithCVImageBuffer:");
final _objc_msgSend_886 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__CVBuffer>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__CVBuffer>)>();
late final _sel_initWithCVImageBuffer_options_ =
    objc.registerName("initWithCVImageBuffer:options:");
final _objc_msgSend_887 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__CVBuffer>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__CVBuffer>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCVPixelBuffer_ =
    objc.registerName("initWithCVPixelBuffer:");
late final _sel_initWithCVPixelBuffer_options_ =
    objc.registerName("initWithCVPixelBuffer:options:");
late final _sel_initWithColor_ = objc.registerName("initWithColor:");
final _objc_msgSend_888 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageByApplyingTransform_ =
    objc.registerName("imageByApplyingTransform:");
final _objc_msgSend_889 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGAffineTransform)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGAffineTransform)>();
late final _sel_imageByApplyingTransform_highQualityDownsample_ =
    objc.registerName("imageByApplyingTransform:highQualityDownsample:");
final _objc_msgSend_890 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGAffineTransform, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGAffineTransform, bool)>();
late final _sel_imageByApplyingOrientation_ =
    objc.registerName("imageByApplyingOrientation:");
final _objc_msgSend_891 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_imageTransformForOrientation_ =
    objc.registerName("imageTransformForOrientation:");
final _objc_msgSend_892 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGAffineTransform Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int)>>()
    .asFunction<
        CGAffineTransform Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_892Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGAffineTransform>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGAffineTransform>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int)>();

enum CGImagePropertyOrientation {
  kCGImagePropertyOrientationUp(1),
  kCGImagePropertyOrientationUpMirrored(2),
  kCGImagePropertyOrientationDown(3),
  kCGImagePropertyOrientationDownMirrored(4),
  kCGImagePropertyOrientationLeftMirrored(5),
  kCGImagePropertyOrientationRight(6),
  kCGImagePropertyOrientationRightMirrored(7),
  kCGImagePropertyOrientationLeft(8);

  final int value;
  const CGImagePropertyOrientation(this.value);

  static CGImagePropertyOrientation fromValue(int value) => switch (value) {
        1 => kCGImagePropertyOrientationUp,
        2 => kCGImagePropertyOrientationUpMirrored,
        3 => kCGImagePropertyOrientationDown,
        4 => kCGImagePropertyOrientationDownMirrored,
        5 => kCGImagePropertyOrientationLeftMirrored,
        6 => kCGImagePropertyOrientationRight,
        7 => kCGImagePropertyOrientationRightMirrored,
        8 => kCGImagePropertyOrientationLeft,
        _ => throw ArgumentError(
            "Unknown value for CGImagePropertyOrientation: $value"),
      };
}

late final _sel_imageByApplyingCGOrientation_ =
    objc.registerName("imageByApplyingCGOrientation:");
final _objc_msgSend_893 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_imageTransformForCGOrientation_ =
    objc.registerName("imageTransformForCGOrientation:");
final _objc_msgSend_894 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGAffineTransform Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint32)>>()
    .asFunction<
        CGAffineTransform Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_894Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGAffineTransform>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Uint32)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGAffineTransform>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int)>();
late final _sel_imageByCompositingOverImage_ =
    objc.registerName("imageByCompositingOverImage:");
final _objc_msgSend_895 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageByCroppingToRect_ =
    objc.registerName("imageByCroppingToRect:");
final _objc_msgSend_896 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_imageByClampingToExtent =
    objc.registerName("imageByClampingToExtent");
late final _sel_imageByClampingToRect_ =
    objc.registerName("imageByClampingToRect:");
late final _sel_imageByApplyingFilter_withInputParameters_ =
    objc.registerName("imageByApplyingFilter:withInputParameters:");
final _objc_msgSend_897 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageByApplyingFilter_ =
    objc.registerName("imageByApplyingFilter:");
final _objc_msgSend_898 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageByColorMatchingColorSpaceToWorkingSpace_ =
    objc.registerName("imageByColorMatchingColorSpaceToWorkingSpace:");
final _objc_msgSend_899 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColorSpace>)>();
late final _sel_imageByColorMatchingWorkingSpaceToColorSpace_ =
    objc.registerName("imageByColorMatchingWorkingSpaceToColorSpace:");
late final _sel_imageByPremultiplyingAlpha =
    objc.registerName("imageByPremultiplyingAlpha");
late final _sel_imageByUnpremultiplyingAlpha =
    objc.registerName("imageByUnpremultiplyingAlpha");
late final _sel_imageBySettingAlphaOneInExtent_ =
    objc.registerName("imageBySettingAlphaOneInExtent:");
late final _sel_imageByApplyingGaussianBlurWithSigma_ =
    objc.registerName("imageByApplyingGaussianBlurWithSigma:");
final _objc_msgSend_900 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_imageBySettingProperties_ =
    objc.registerName("imageBySettingProperties:");
final _objc_msgSend_901 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageBySamplingLinear =
    objc.registerName("imageBySamplingLinear");
late final _sel_imageBySamplingNearest =
    objc.registerName("imageBySamplingNearest");
late final _sel_imageByInsertingIntermediate =
    objc.registerName("imageByInsertingIntermediate");
late final _sel_imageByInsertingIntermediate_ =
    objc.registerName("imageByInsertingIntermediate:");
final _objc_msgSend_902 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_extent = objc.registerName("extent");

/// CIFilterShape
class CIFilterShape extends objc.NSObject {
  CIFilterShape._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIFilterShape] that points to the same underlying object as [other].
  CIFilterShape.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIFilterShape] that wraps the given raw object pointer.
  CIFilterShape.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIFilterShape].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CIFilterShape);
  }

  /// shapeWithRect:
  static CIFilterShape shapeWithRect_(CGRect r) {
    final _ret =
        _objc_msgSend_903(_class_CIFilterShape, _sel_shapeWithRect_, r);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithRect:
  CIFilterShape initWithRect_(CGRect r) {
    final _ret = _objc_msgSend_903(this.pointer, _sel_initWithRect_, r);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// transformBy:interior:
  CIFilterShape transformBy_interior_(CGAffineTransform m, bool flag) {
    final _ret =
        _objc_msgSend_904(this.pointer, _sel_transformBy_interior_, m, flag);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// insetByX:Y:
  CIFilterShape insetByX_Y_(int dx, int dy) {
    final _ret = _objc_msgSend_905(this.pointer, _sel_insetByX_Y_, dx, dy);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// unionWith:
  CIFilterShape unionWith_(CIFilterShape s2) {
    final _ret = _objc_msgSend_906(this.pointer, _sel_unionWith_, s2.pointer);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// unionWithRect:
  CIFilterShape unionWithRect_(CGRect r) {
    final _ret = _objc_msgSend_907(this.pointer, _sel_unionWithRect_, r);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// intersectWith:
  CIFilterShape intersectWith_(CIFilterShape s2) {
    final _ret =
        _objc_msgSend_906(this.pointer, _sel_intersectWith_, s2.pointer);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// intersectWithRect:
  CIFilterShape intersectWithRect_(CGRect r) {
    final _ret = _objc_msgSend_907(this.pointer, _sel_intersectWithRect_, r);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// extent
  void getExtent(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_793Stret(stret, this.pointer, _sel_extent)
        : stret.ref = _objc_msgSend_793(this.pointer, _sel_extent);
  }

  /// init
  CIFilterShape init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CIFilterShape new1() {
    final _ret = _objc_msgSend_19(_class_CIFilterShape, _sel_new);
    return CIFilterShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIFilterShape allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_CIFilterShape, _sel_allocWithZone_, zone);
    return CIFilterShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIFilterShape alloc() {
    final _ret = _objc_msgSend_19(_class_CIFilterShape, _sel_alloc);
    return CIFilterShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIFilterShape,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIFilterShape,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIFilterShape, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIFilterShape, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIFilterShape,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIFilterShape,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIFilterShape,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_CIFilterShape, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_CIFilterShape, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIFilterShape = objc.getClass("CIFilterShape");
late final _sel_shapeWithRect_ = objc.registerName("shapeWithRect:");
final _objc_msgSend_903 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_initWithRect_ = objc.registerName("initWithRect:");
late final _sel_transformBy_interior_ =
    objc.registerName("transformBy:interior:");
final _objc_msgSend_904 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGAffineTransform, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGAffineTransform, bool)>();
late final _sel_insetByX_Y_ = objc.registerName("insetByX:Y:");
final _objc_msgSend_905 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int, ffi.Int)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_unionWith_ = objc.registerName("unionWith:");
final _objc_msgSend_906 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_unionWithRect_ = objc.registerName("unionWithRect:");
final _objc_msgSend_907 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_intersectWith_ = objc.registerName("intersectWith:");
late final _sel_intersectWithRect_ = objc.registerName("intersectWithRect:");
late final _sel_definition = objc.registerName("definition");
final _objc_msgSend_908 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_url = objc.registerName("url");
late final _sel_pixelBuffer = objc.registerName("pixelBuffer");
final _objc_msgSend_909 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<__CVBuffer> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<__CVBuffer> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_CGImage = objc.registerName("CGImage");
final _objc_msgSend_910 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGImage> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<CGImage> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_regionOfInterestForImage_inRect_ =
    objc.registerName("regionOfInterestForImage:inRect:");
final _objc_msgSend_911 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGRect Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect)>>()
    .asFunction<
        CGRect Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect)>();
final _objc_msgSend_911Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGRect>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGRect>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect)>();
late final _sel_autoAdjustmentFilters =
    objc.registerName("autoAdjustmentFilters");
late final _sel_autoAdjustmentFiltersWithOptions_ =
    objc.registerName("autoAdjustmentFiltersWithOptions:");
final _objc_msgSend_912 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageByConvertingWorkingSpaceToLab =
    objc.registerName("imageByConvertingWorkingSpaceToLab");
late final _sel_imageByConvertingLabToWorkingSpace =
    objc.registerName("imageByConvertingLabToWorkingSpace");

/// AVDepthData
class AVDepthData extends objc.NSObject {
  AVDepthData._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVDepthData] that points to the same underlying object as [other].
  AVDepthData.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVDepthData] that wraps the given raw object pointer.
  AVDepthData.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVDepthData].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVDepthData);
  }

  /// init
  AVDepthData init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVDepthData.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVDepthData new1() {
    final _ret = _objc_msgSend_19(_class_AVDepthData, _sel_new);
    return AVDepthData.castFromPointer(_ret, retain: false, release: true);
  }

  /// depthDataFromDictionaryRepresentation:error:
  static AVDepthData? depthDataFromDictionaryRepresentation_error_(
      objc.NSDictionary imageSourceAuxDataInfoDictionary,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_913(
        _class_AVDepthData,
        _sel_depthDataFromDictionaryRepresentation_error_,
        imageSourceAuxDataInfoDictionary.pointer,
        outError);
    return _ret.address == 0
        ? null
        : AVDepthData.castFromPointer(_ret, retain: true, release: true);
  }

  /// depthDataByConvertingToDepthDataType:
  AVDepthData depthDataByConvertingToDepthDataType_(int depthDataType) {
    final _ret = _objc_msgSend_914(this.pointer,
        _sel_depthDataByConvertingToDepthDataType_, depthDataType);
    return AVDepthData.castFromPointer(_ret, retain: true, release: true);
  }

  /// depthDataByApplyingExifOrientation:
  AVDepthData depthDataByApplyingExifOrientation_(
      CGImagePropertyOrientation exifOrientation) {
    final _ret = _objc_msgSend_915(this.pointer,
        _sel_depthDataByApplyingExifOrientation_, exifOrientation.value);
    return AVDepthData.castFromPointer(_ret, retain: true, release: true);
  }

  /// depthDataByReplacingDepthDataMapWithPixelBuffer:error:
  AVDepthData? depthDataByReplacingDepthDataMapWithPixelBuffer_error_(
      ffi.Pointer<__CVBuffer> pixelBuffer,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_916(
        this.pointer,
        _sel_depthDataByReplacingDepthDataMapWithPixelBuffer_error_,
        pixelBuffer,
        outError);
    return _ret.address == 0
        ? null
        : AVDepthData.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableDepthDataTypes
  objc.NSArray get availableDepthDataTypes {
    final _ret = _objc_msgSend_33(this.pointer, _sel_availableDepthDataTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// dictionaryRepresentationForAuxiliaryDataType:
  objc.NSDictionary? dictionaryRepresentationForAuxiliaryDataType_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outAuxDataType) {
    final _ret = _objc_msgSend_917(this.pointer,
        _sel_dictionaryRepresentationForAuxiliaryDataType_, outAuxDataType);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// depthDataType
  int get depthDataType {
    return _objc_msgSend_647(this.pointer, _sel_depthDataType);
  }

  /// depthDataMap
  ffi.Pointer<__CVBuffer> get depthDataMap {
    return _objc_msgSend_909(this.pointer, _sel_depthDataMap);
  }

  /// depthDataQuality
  AVDepthDataQuality get depthDataQuality {
    final _ret = _objc_msgSend_918(this.pointer, _sel_depthDataQuality);
    return AVDepthDataQuality.fromValue(_ret);
  }

  /// isDepthDataFiltered
  bool get depthDataFiltered {
    return _objc_msgSend_13(this.pointer, _sel_isDepthDataFiltered);
  }

  /// depthDataAccuracy
  AVDepthDataAccuracy get depthDataAccuracy {
    final _ret = _objc_msgSend_919(this.pointer, _sel_depthDataAccuracy);
    return AVDepthDataAccuracy.fromValue(_ret);
  }

  /// cameraCalibrationData
  AVCameraCalibrationData? get cameraCalibrationData {
    final _ret = _objc_msgSend_920(this.pointer, _sel_cameraCalibrationData);
    return _ret.address == 0
        ? null
        : AVCameraCalibrationData.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// allocWithZone:
  static AVDepthData allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVDepthData, _sel_allocWithZone_, zone);
    return AVDepthData.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVDepthData alloc() {
    final _ret = _objc_msgSend_19(_class_AVDepthData, _sel_alloc);
    return AVDepthData.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVDepthData,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVDepthData,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVDepthData, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVDepthData, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVDepthData,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVDepthData,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVDepthData,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVDepthData, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVDepthData, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVDepthData = objc.getClass("AVDepthData");
late final _sel_depthDataFromDictionaryRepresentation_error_ =
    objc.registerName("depthDataFromDictionaryRepresentation:error:");
final _objc_msgSend_913 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_depthDataByConvertingToDepthDataType_ =
    objc.registerName("depthDataByConvertingToDepthDataType:");
final _objc_msgSend_914 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_depthDataByApplyingExifOrientation_ =
    objc.registerName("depthDataByApplyingExifOrientation:");
final _objc_msgSend_915 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint32)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_depthDataByReplacingDepthDataMapWithPixelBuffer_error_ =
    objc.registerName("depthDataByReplacingDepthDataMapWithPixelBuffer:error:");
final _objc_msgSend_916 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__CVBuffer>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__CVBuffer>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_availableDepthDataTypes =
    objc.registerName("availableDepthDataTypes");
late final _sel_dictionaryRepresentationForAuxiliaryDataType_ =
    objc.registerName("dictionaryRepresentationForAuxiliaryDataType:");
final _objc_msgSend_917 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_depthDataType = objc.registerName("depthDataType");
late final _sel_depthDataMap = objc.registerName("depthDataMap");

enum AVDepthDataQuality {
  AVDepthDataQualityLow(0),
  AVDepthDataQualityHigh(1);

  final int value;
  const AVDepthDataQuality(this.value);

  static AVDepthDataQuality fromValue(int value) => switch (value) {
        0 => AVDepthDataQualityLow,
        1 => AVDepthDataQualityHigh,
        _ =>
          throw ArgumentError("Unknown value for AVDepthDataQuality: $value"),
      };
}

late final _sel_depthDataQuality = objc.registerName("depthDataQuality");
final _objc_msgSend_918 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isDepthDataFiltered = objc.registerName("isDepthDataFiltered");

enum AVDepthDataAccuracy {
  AVDepthDataAccuracyRelative(0),
  AVDepthDataAccuracyAbsolute(1);

  final int value;
  const AVDepthDataAccuracy(this.value);

  static AVDepthDataAccuracy fromValue(int value) => switch (value) {
        0 => AVDepthDataAccuracyRelative,
        1 => AVDepthDataAccuracyAbsolute,
        _ =>
          throw ArgumentError("Unknown value for AVDepthDataAccuracy: $value"),
      };
}

late final _sel_depthDataAccuracy = objc.registerName("depthDataAccuracy");
final _objc_msgSend_919 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVCameraCalibrationData
class AVCameraCalibrationData extends objc.NSObject {
  AVCameraCalibrationData._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCameraCalibrationData] that points to the same underlying object as [other].
  AVCameraCalibrationData.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCameraCalibrationData] that wraps the given raw object pointer.
  AVCameraCalibrationData.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCameraCalibrationData].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCameraCalibrationData);
  }

  /// init
  AVCameraCalibrationData init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCameraCalibrationData.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCameraCalibrationData new1() {
    final _ret = _objc_msgSend_19(_class_AVCameraCalibrationData, _sel_new);
    return AVCameraCalibrationData.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// intrinsicMatrixReferenceDimensions
  void getIntrinsicMatrixReferenceDimensions(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(
            stret, this.pointer, _sel_intrinsicMatrixReferenceDimensions)
        : stret.ref = _objc_msgSend_714(
            this.pointer, _sel_intrinsicMatrixReferenceDimensions);
  }

  /// pixelSize
  double get pixelSize {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_pixelSize)
        : _objc_msgSend_361(this.pointer, _sel_pixelSize);
  }

  /// lensDistortionLookupTable
  objc.NSData? get lensDistortionLookupTable {
    final _ret =
        _objc_msgSend_337(this.pointer, _sel_lensDistortionLookupTable);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// inverseLensDistortionLookupTable
  objc.NSData? get inverseLensDistortionLookupTable {
    final _ret =
        _objc_msgSend_337(this.pointer, _sel_inverseLensDistortionLookupTable);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// lensDistortionCenter
  void getLensDistortionCenter(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_795Stret(stret, this.pointer, _sel_lensDistortionCenter)
        : stret.ref =
            _objc_msgSend_795(this.pointer, _sel_lensDistortionCenter);
  }

  /// allocWithZone:
  static AVCameraCalibrationData allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCameraCalibrationData, _sel_allocWithZone_, zone);
    return AVCameraCalibrationData.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCameraCalibrationData alloc() {
    final _ret = _objc_msgSend_19(_class_AVCameraCalibrationData, _sel_alloc);
    return AVCameraCalibrationData.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCameraCalibrationData,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCameraCalibrationData,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCameraCalibrationData, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCameraCalibrationData, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCameraCalibrationData,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCameraCalibrationData,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCameraCalibrationData,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCameraCalibrationData, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCameraCalibrationData, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCameraCalibrationData =
    objc.getClass("AVCameraCalibrationData");
late final _sel_intrinsicMatrixReferenceDimensions =
    objc.registerName("intrinsicMatrixReferenceDimensions");
late final _sel_pixelSize = objc.registerName("pixelSize");
late final _sel_lensDistortionLookupTable =
    objc.registerName("lensDistortionLookupTable");
late final _sel_inverseLensDistortionLookupTable =
    objc.registerName("inverseLensDistortionLookupTable");
late final _sel_lensDistortionCenter =
    objc.registerName("lensDistortionCenter");
late final _sel_cameraCalibrationData =
    objc.registerName("cameraCalibrationData");
final _objc_msgSend_920 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_depthData = objc.registerName("depthData");
final _objc_msgSend_921 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initWithDepthData_options_ =
    objc.registerName("initWithDepthData:options:");
final _objc_msgSend_922 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithDepthData_ = objc.registerName("initWithDepthData:");
final _objc_msgSend_923 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithDepthData_options_ =
    objc.registerName("imageWithDepthData:options:");
late final _sel_imageWithDepthData_ = objc.registerName("imageWithDepthData:");

/// AVPortraitEffectsMatte
class AVPortraitEffectsMatte extends objc.NSObject {
  AVPortraitEffectsMatte._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPortraitEffectsMatte] that points to the same underlying object as [other].
  AVPortraitEffectsMatte.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPortraitEffectsMatte] that wraps the given raw object pointer.
  AVPortraitEffectsMatte.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPortraitEffectsMatte].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVPortraitEffectsMatte);
  }

  /// init
  AVPortraitEffectsMatte init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPortraitEffectsMatte.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPortraitEffectsMatte new1() {
    final _ret = _objc_msgSend_19(_class_AVPortraitEffectsMatte, _sel_new);
    return AVPortraitEffectsMatte.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// portraitEffectsMatteFromDictionaryRepresentation:error:
  static AVPortraitEffectsMatte?
      portraitEffectsMatteFromDictionaryRepresentation_error_(
          objc.NSDictionary imageSourceAuxDataInfoDictionary,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_913(
        _class_AVPortraitEffectsMatte,
        _sel_portraitEffectsMatteFromDictionaryRepresentation_error_,
        imageSourceAuxDataInfoDictionary.pointer,
        outError);
    return _ret.address == 0
        ? null
        : AVPortraitEffectsMatte.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// portraitEffectsMatteByApplyingExifOrientation:
  AVPortraitEffectsMatte portraitEffectsMatteByApplyingExifOrientation_(
      CGImagePropertyOrientation exifOrientation) {
    final _ret = _objc_msgSend_915(
        this.pointer,
        _sel_portraitEffectsMatteByApplyingExifOrientation_,
        exifOrientation.value);
    return AVPortraitEffectsMatte.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer:error:
  AVPortraitEffectsMatte?
      portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer_error_(
          ffi.Pointer<__CVBuffer> pixelBuffer,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_916(
        this.pointer,
        _sel_portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer_error_,
        pixelBuffer,
        outError);
    return _ret.address == 0
        ? null
        : AVPortraitEffectsMatte.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// dictionaryRepresentationForAuxiliaryDataType:
  objc.NSDictionary? dictionaryRepresentationForAuxiliaryDataType_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outAuxDataType) {
    final _ret = _objc_msgSend_917(this.pointer,
        _sel_dictionaryRepresentationForAuxiliaryDataType_, outAuxDataType);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// pixelFormatType
  int get pixelFormatType {
    return _objc_msgSend_647(this.pointer, _sel_pixelFormatType);
  }

  /// mattingImage
  ffi.Pointer<__CVBuffer> get mattingImage {
    return _objc_msgSend_909(this.pointer, _sel_mattingImage);
  }

  /// allocWithZone:
  static AVPortraitEffectsMatte allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVPortraitEffectsMatte, _sel_allocWithZone_, zone);
    return AVPortraitEffectsMatte.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPortraitEffectsMatte alloc() {
    final _ret = _objc_msgSend_19(_class_AVPortraitEffectsMatte, _sel_alloc);
    return AVPortraitEffectsMatte.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPortraitEffectsMatte,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPortraitEffectsMatte,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVPortraitEffectsMatte, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVPortraitEffectsMatte, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPortraitEffectsMatte,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPortraitEffectsMatte,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPortraitEffectsMatte,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVPortraitEffectsMatte, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPortraitEffectsMatte, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPortraitEffectsMatte =
    objc.getClass("AVPortraitEffectsMatte");
late final _sel_portraitEffectsMatteFromDictionaryRepresentation_error_ = objc
    .registerName("portraitEffectsMatteFromDictionaryRepresentation:error:");
late final _sel_portraitEffectsMatteByApplyingExifOrientation_ =
    objc.registerName("portraitEffectsMatteByApplyingExifOrientation:");
late final _sel_portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer_error_ =
    objc.registerName(
        "portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer:error:");
late final _sel_pixelFormatType = objc.registerName("pixelFormatType");
late final _sel_mattingImage = objc.registerName("mattingImage");
late final _sel_portraitEffectsMatte =
    objc.registerName("portraitEffectsMatte");
final _objc_msgSend_924 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initWithPortaitEffectsMatte_options_ =
    objc.registerName("initWithPortaitEffectsMatte:options:");
final _objc_msgSend_925 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithPortaitEffectsMatte_ =
    objc.registerName("initWithPortaitEffectsMatte:");
final _objc_msgSend_926 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithPortaitEffectsMatte_options_ =
    objc.registerName("imageWithPortaitEffectsMatte:options:");
late final _sel_imageWithPortaitEffectsMatte_ =
    objc.registerName("imageWithPortaitEffectsMatte:");

/// AVSemanticSegmentationMatte
class AVSemanticSegmentationMatte extends objc.NSObject {
  AVSemanticSegmentationMatte._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVSemanticSegmentationMatte] that points to the same underlying object as [other].
  AVSemanticSegmentationMatte.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVSemanticSegmentationMatte] that wraps the given raw object pointer.
  AVSemanticSegmentationMatte.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVSemanticSegmentationMatte].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVSemanticSegmentationMatte);
  }

  /// init
  AVSemanticSegmentationMatte init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVSemanticSegmentationMatte.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVSemanticSegmentationMatte new1() {
    final _ret = _objc_msgSend_19(_class_AVSemanticSegmentationMatte, _sel_new);
    return AVSemanticSegmentationMatte.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// semanticSegmentationMatteFromImageSourceAuxiliaryDataType:dictionaryRepresentation:error:
  static AVSemanticSegmentationMatte?
      semanticSegmentationMatteFromImageSourceAuxiliaryDataType_dictionaryRepresentation_error_(
          ffi.Pointer<__CFString> imageSourceAuxiliaryDataType,
          objc.NSDictionary imageSourceAuxiliaryDataInfoDictionary,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_927(
        _class_AVSemanticSegmentationMatte,
        _sel_semanticSegmentationMatteFromImageSourceAuxiliaryDataType_dictionaryRepresentation_error_,
        imageSourceAuxiliaryDataType,
        imageSourceAuxiliaryDataInfoDictionary.pointer,
        outError);
    return _ret.address == 0
        ? null
        : AVSemanticSegmentationMatte.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// matteType
  objc.NSString get matteType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_matteType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// semanticSegmentationMatteByApplyingExifOrientation:
  AVSemanticSegmentationMatte
      semanticSegmentationMatteByApplyingExifOrientation_(
          CGImagePropertyOrientation exifOrientation) {
    final _ret = _objc_msgSend_915(
        this.pointer,
        _sel_semanticSegmentationMatteByApplyingExifOrientation_,
        exifOrientation.value);
    return AVSemanticSegmentationMatte.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// semanticSegmentationMatteByReplacingSemanticSegmentationMatteWithPixelBuffer:error:
  AVSemanticSegmentationMatte?
      semanticSegmentationMatteByReplacingSemanticSegmentationMatteWithPixelBuffer_error_(
          ffi.Pointer<__CVBuffer> pixelBuffer,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_916(
        this.pointer,
        _sel_semanticSegmentationMatteByReplacingSemanticSegmentationMatteWithPixelBuffer_error_,
        pixelBuffer,
        outError);
    return _ret.address == 0
        ? null
        : AVSemanticSegmentationMatte.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// dictionaryRepresentationForAuxiliaryDataType:
  objc.NSDictionary? dictionaryRepresentationForAuxiliaryDataType_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outAuxDataType) {
    final _ret = _objc_msgSend_917(this.pointer,
        _sel_dictionaryRepresentationForAuxiliaryDataType_, outAuxDataType);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// pixelFormatType
  int get pixelFormatType {
    return _objc_msgSend_647(this.pointer, _sel_pixelFormatType);
  }

  /// mattingImage
  ffi.Pointer<__CVBuffer> get mattingImage {
    return _objc_msgSend_909(this.pointer, _sel_mattingImage);
  }

  /// allocWithZone:
  static AVSemanticSegmentationMatte allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVSemanticSegmentationMatte, _sel_allocWithZone_, zone);
    return AVSemanticSegmentationMatte.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVSemanticSegmentationMatte alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVSemanticSegmentationMatte, _sel_alloc);
    return AVSemanticSegmentationMatte.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVSemanticSegmentationMatte,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVSemanticSegmentationMatte,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVSemanticSegmentationMatte,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVSemanticSegmentationMatte, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVSemanticSegmentationMatte,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVSemanticSegmentationMatte,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVSemanticSegmentationMatte,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVSemanticSegmentationMatte,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVSemanticSegmentationMatte, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVSemanticSegmentationMatte =
    objc.getClass("AVSemanticSegmentationMatte");

final class __CFString extends ffi.Opaque {}

late final _sel_semanticSegmentationMatteFromImageSourceAuxiliaryDataType_dictionaryRepresentation_error_ =
    objc.registerName(
        "semanticSegmentationMatteFromImageSourceAuxiliaryDataType:dictionaryRepresentation:error:");
final _objc_msgSend_927 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__CFString>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__CFString>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_matteType = objc.registerName("matteType");
late final _sel_semanticSegmentationMatteByApplyingExifOrientation_ =
    objc.registerName("semanticSegmentationMatteByApplyingExifOrientation:");
late final _sel_semanticSegmentationMatteByReplacingSemanticSegmentationMatteWithPixelBuffer_error_ =
    objc.registerName(
        "semanticSegmentationMatteByReplacingSemanticSegmentationMatteWithPixelBuffer:error:");
late final _sel_semanticSegmentationMatte =
    objc.registerName("semanticSegmentationMatte");
final _objc_msgSend_928 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initWithSemanticSegmentationMatte_options_ =
    objc.registerName("initWithSemanticSegmentationMatte:options:");
final _objc_msgSend_929 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithSemanticSegmentationMatte_ =
    objc.registerName("initWithSemanticSegmentationMatte:");
final _objc_msgSend_930 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithSemanticSegmentationMatte_options_ =
    objc.registerName("imageWithSemanticSegmentationMatte:options:");
late final _sel_imageWithSemanticSegmentationMatte_ =
    objc.registerName("imageWithSemanticSegmentationMatte:");
late final _sel_imageWithImageProvider_size__format_colorSpace_options_ = objc
    .registerName("imageWithImageProvider:size::format:colorSpace:options:");
final _objc_msgSend_931 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Size,
                ffi.Size,
                ffi.Int,
                ffi.Pointer<CGColorSpace>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int,
            ffi.Pointer<CGColorSpace>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithImageProvider_size__format_colorSpace_options_ =
    objc.registerName("initWithImageProvider:size::format:colorSpace:options:");
final _objc_msgSend_932 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Size,
                ffi.Size,
                ffi.Int,
                ffi.Pointer<CGColorSpace>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int,
            ffi.Pointer<CGColorSpace>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sourceImage = objc.registerName("sourceImage");

/// CIContext
class CIContext extends objc.NSObject {
  CIContext._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIContext] that points to the same underlying object as [other].
  CIContext.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIContext] that wraps the given raw object pointer.
  CIContext.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIContext].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_CIContext);
  }

  /// contextWithCGLContext:pixelFormat:colorSpace:options:
  static CIContext contextWithCGLContext_pixelFormat_colorSpace_options_(
      ffi.Pointer<_CGLContextObject> cglctx,
      ffi.Pointer<_CGLPixelFormatObject> pixelFormat,
      ffi.Pointer<CGColorSpace> colorSpace,
      objc.NSDictionary? options) {
    final _ret = _objc_msgSend_933(
        _class_CIContext,
        _sel_contextWithCGLContext_pixelFormat_colorSpace_options_,
        cglctx,
        pixelFormat,
        colorSpace,
        options?.pointer ?? ffi.nullptr);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// contextWithCGLContext:pixelFormat:options:
  static CIContext contextWithCGLContext_pixelFormat_options_(
      ffi.Pointer<_CGLContextObject> cglctx,
      ffi.Pointer<_CGLPixelFormatObject> pixelFormat,
      objc.NSDictionary? options) {
    final _ret = _objc_msgSend_934(
        _class_CIContext,
        _sel_contextWithCGLContext_pixelFormat_options_,
        cglctx,
        pixelFormat,
        options?.pointer ?? ffi.nullptr);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// contextWithCGContext:options:
  static CIContext contextWithCGContext_options_(
      ffi.Pointer<CGContext> cgctx, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_935(
        _class_CIContext,
        _sel_contextWithCGContext_options_,
        cgctx,
        options?.pointer ?? ffi.nullptr);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// contextWithOptions:
  static CIContext contextWithOptions_(objc.NSDictionary? options) {
    final _ret = _objc_msgSend_936(_class_CIContext, _sel_contextWithOptions_,
        options?.pointer ?? ffi.nullptr);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// context
  static CIContext context() {
    final _ret = _objc_msgSend_937(_class_CIContext, _sel_context);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithOptions:
  CIContext initWithOptions_(objc.NSDictionary? options) {
    final _ret = _objc_msgSend_938(
        this.pointer, _sel_initWithOptions_, options?.pointer ?? ffi.nullptr);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CIContext init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// contextWithMTLDevice:
  static CIContext contextWithMTLDevice_(objc.ObjCObjectBase device) {
    final _ret = _objc_msgSend_939(
        _class_CIContext, _sel_contextWithMTLDevice_, device.pointer);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// contextWithMTLDevice:options:
  static CIContext contextWithMTLDevice_options_(
      objc.ObjCObjectBase device, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_940(
        _class_CIContext,
        _sel_contextWithMTLDevice_options_,
        device.pointer,
        options?.pointer ?? ffi.nullptr);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// contextWithMTLCommandQueue:
  static CIContext contextWithMTLCommandQueue_(
      objc.ObjCObjectBase commandQueue) {
    final _ret = _objc_msgSend_939(_class_CIContext,
        _sel_contextWithMTLCommandQueue_, commandQueue.pointer);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// contextWithMTLCommandQueue:options:
  static CIContext contextWithMTLCommandQueue_options_(
      objc.ObjCObjectBase commandQueue, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_940(
        _class_CIContext,
        _sel_contextWithMTLCommandQueue_options_,
        commandQueue.pointer,
        options?.pointer ?? ffi.nullptr);
    return CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// workingColorSpace
  ffi.Pointer<CGColorSpace> get workingColorSpace {
    return _objc_msgSend_868(this.pointer, _sel_workingColorSpace);
  }

  /// workingFormat
  int get workingFormat {
    return _objc_msgSend_276(this.pointer, _sel_workingFormat);
  }

  /// drawImage:atPoint:fromRect:
  void drawImage_atPoint_fromRect_(
      CIImage image, CGPoint atPoint, CGRect fromRect) {
    _objc_msgSend_941(this.pointer, _sel_drawImage_atPoint_fromRect_,
        image.pointer, atPoint, fromRect);
  }

  /// drawImage:inRect:fromRect:
  void drawImage_inRect_fromRect_(
      CIImage image, CGRect inRect, CGRect fromRect) {
    _objc_msgSend_942(this.pointer, _sel_drawImage_inRect_fromRect_,
        image.pointer, inRect, fromRect);
  }

  /// createCGLayerWithSize:info:
  ffi.Pointer<CGLayer> createCGLayerWithSize_info_(
      CGSize size, ffi.Pointer<__CFDictionary> info) {
    return _objc_msgSend_943(
        this.pointer, _sel_createCGLayerWithSize_info_, size, info);
  }

  /// render:toBitmap:rowBytes:bounds:format:colorSpace:
  void render_toBitmap_rowBytes_bounds_format_colorSpace_(
      CIImage image,
      ffi.Pointer<ffi.Void> data,
      int rowBytes,
      CGRect bounds,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace) {
    _objc_msgSend_944(
        this.pointer,
        _sel_render_toBitmap_rowBytes_bounds_format_colorSpace_,
        image.pointer,
        data,
        rowBytes,
        bounds,
        format,
        colorSpace);
  }

  /// render:toIOSurface:bounds:colorSpace:
  void render_toIOSurface_bounds_colorSpace_(
      CIImage image,
      ffi.Pointer<__IOSurface> surface,
      CGRect bounds,
      ffi.Pointer<CGColorSpace> colorSpace) {
    _objc_msgSend_945(this.pointer, _sel_render_toIOSurface_bounds_colorSpace_,
        image.pointer, surface, bounds, colorSpace);
  }

  /// render:toCVPixelBuffer:
  void render_toCVPixelBuffer_(CIImage image, ffi.Pointer<__CVBuffer> buffer) {
    _objc_msgSend_946(
        this.pointer, _sel_render_toCVPixelBuffer_, image.pointer, buffer);
  }

  /// render:toCVPixelBuffer:bounds:colorSpace:
  void render_toCVPixelBuffer_bounds_colorSpace_(
      CIImage image,
      ffi.Pointer<__CVBuffer> buffer,
      CGRect bounds,
      ffi.Pointer<CGColorSpace> colorSpace) {
    _objc_msgSend_947(
        this.pointer,
        _sel_render_toCVPixelBuffer_bounds_colorSpace_,
        image.pointer,
        buffer,
        bounds,
        colorSpace);
  }

  /// render:toMTLTexture:commandBuffer:bounds:colorSpace:
  void render_toMTLTexture_commandBuffer_bounds_colorSpace_(
      CIImage image,
      objc.ObjCObjectBase texture,
      objc.ObjCObjectBase? commandBuffer,
      CGRect bounds,
      ffi.Pointer<CGColorSpace> colorSpace) {
    _objc_msgSend_948(
        this.pointer,
        _sel_render_toMTLTexture_commandBuffer_bounds_colorSpace_,
        image.pointer,
        texture.pointer,
        commandBuffer?.pointer ?? ffi.nullptr,
        bounds,
        colorSpace);
  }

  /// reclaimResources
  void reclaimResources() {
    _objc_msgSend_7(this.pointer, _sel_reclaimResources);
  }

  /// clearCaches
  void clearCaches() {
    _objc_msgSend_7(this.pointer, _sel_clearCaches);
  }

  /// inputImageMaximumSize
  void inputImageMaximumSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(
            stret, this.pointer, _sel_inputImageMaximumSize)
        : stret.ref =
            _objc_msgSend_714(this.pointer, _sel_inputImageMaximumSize);
  }

  /// outputImageMaximumSize
  void outputImageMaximumSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(
            stret, this.pointer, _sel_outputImageMaximumSize)
        : stret.ref =
            _objc_msgSend_714(this.pointer, _sel_outputImageMaximumSize);
  }

  /// createCGImage:fromRect:
  ffi.Pointer<CGImage> createCGImage_fromRect_(CIImage image, CGRect fromRect) {
    return _objc_msgSend_949(
        this.pointer, _sel_createCGImage_fromRect_, image.pointer, fromRect);
  }

  /// createCGImage:fromRect:format:colorSpace:
  ffi.Pointer<CGImage> createCGImage_fromRect_format_colorSpace_(CIImage image,
      CGRect fromRect, int format, ffi.Pointer<CGColorSpace> colorSpace) {
    return _objc_msgSend_950(
        this.pointer,
        _sel_createCGImage_fromRect_format_colorSpace_,
        image.pointer,
        fromRect,
        format,
        colorSpace);
  }

  /// createCGImage:fromRect:format:colorSpace:deferred:
  ffi.Pointer<CGImage> createCGImage_fromRect_format_colorSpace_deferred_(
      CIImage image,
      CGRect fromRect,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace,
      bool deferred) {
    return _objc_msgSend_951(
        this.pointer,
        _sel_createCGImage_fromRect_format_colorSpace_deferred_,
        image.pointer,
        fromRect,
        format,
        colorSpace,
        deferred);
  }

  /// offlineGPUCount
  static int offlineGPUCount() {
    return _objc_msgSend_647(_class_CIContext, _sel_offlineGPUCount);
  }

  /// contextForOfflineGPUAtIndex:
  static CIContext? contextForOfflineGPUAtIndex_(int index) {
    final _ret = _objc_msgSend_952(
        _class_CIContext, _sel_contextForOfflineGPUAtIndex_, index);
    return _ret.address == 0
        ? null
        : CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// contextForOfflineGPUAtIndex:colorSpace:options:sharedContext:
  static CIContext?
      contextForOfflineGPUAtIndex_colorSpace_options_sharedContext_(
          int index,
          ffi.Pointer<CGColorSpace> colorSpace,
          objc.NSDictionary? options,
          ffi.Pointer<_CGLContextObject> sharedContext) {
    final _ret = _objc_msgSend_953(
        _class_CIContext,
        _sel_contextForOfflineGPUAtIndex_colorSpace_options_sharedContext_,
        index,
        colorSpace,
        options?.pointer ?? ffi.nullptr,
        sharedContext);
    return _ret.address == 0
        ? null
        : CIContext.castFromPointer(_ret, retain: true, release: true);
  }

  /// TIFFRepresentationOfImage:format:colorSpace:options:
  objc.NSData? TIFFRepresentationOfImage_format_colorSpace_options_(
      CIImage image,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace,
      objc.NSDictionary options) {
    final _ret = _objc_msgSend_954(
        this.pointer,
        _sel_TIFFRepresentationOfImage_format_colorSpace_options_,
        image.pointer,
        format,
        colorSpace,
        options.pointer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// JPEGRepresentationOfImage:colorSpace:options:
  objc.NSData? JPEGRepresentationOfImage_colorSpace_options_(CIImage image,
      ffi.Pointer<CGColorSpace> colorSpace, objc.NSDictionary options) {
    final _ret = _objc_msgSend_955(
        this.pointer,
        _sel_JPEGRepresentationOfImage_colorSpace_options_,
        image.pointer,
        colorSpace,
        options.pointer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// HEIFRepresentationOfImage:format:colorSpace:options:
  objc.NSData? HEIFRepresentationOfImage_format_colorSpace_options_(
      CIImage image,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace,
      objc.NSDictionary options) {
    final _ret = _objc_msgSend_954(
        this.pointer,
        _sel_HEIFRepresentationOfImage_format_colorSpace_options_,
        image.pointer,
        format,
        colorSpace,
        options.pointer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// HEIF10RepresentationOfImage:colorSpace:options:error:
  objc.NSData? HEIF10RepresentationOfImage_colorSpace_options_error_(
      CIImage image,
      ffi.Pointer<CGColorSpace> colorSpace,
      objc.NSDictionary options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    final _ret = _objc_msgSend_956(
        this.pointer,
        _sel_HEIF10RepresentationOfImage_colorSpace_options_error_,
        image.pointer,
        colorSpace,
        options.pointer,
        errorPtr);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// PNGRepresentationOfImage:format:colorSpace:options:
  objc.NSData? PNGRepresentationOfImage_format_colorSpace_options_(
      CIImage image,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace,
      objc.NSDictionary options) {
    final _ret = _objc_msgSend_954(
        this.pointer,
        _sel_PNGRepresentationOfImage_format_colorSpace_options_,
        image.pointer,
        format,
        colorSpace,
        options.pointer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// OpenEXRRepresentationOfImage:options:error:
  objc.NSData? OpenEXRRepresentationOfImage_options_error_(
      CIImage image,
      objc.NSDictionary options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    final _ret = _objc_msgSend_957(
        this.pointer,
        _sel_OpenEXRRepresentationOfImage_options_error_,
        image.pointer,
        options.pointer,
        errorPtr);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// writeTIFFRepresentationOfImage:toURL:format:colorSpace:options:error:
  bool writeTIFFRepresentationOfImage_toURL_format_colorSpace_options_error_(
      CIImage image,
      objc.NSURL url,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace,
      objc.NSDictionary options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    return _objc_msgSend_958(
        this.pointer,
        _sel_writeTIFFRepresentationOfImage_toURL_format_colorSpace_options_error_,
        image.pointer,
        url.pointer,
        format,
        colorSpace,
        options.pointer,
        errorPtr);
  }

  /// writePNGRepresentationOfImage:toURL:format:colorSpace:options:error:
  bool writePNGRepresentationOfImage_toURL_format_colorSpace_options_error_(
      CIImage image,
      objc.NSURL url,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace,
      objc.NSDictionary options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    return _objc_msgSend_958(
        this.pointer,
        _sel_writePNGRepresentationOfImage_toURL_format_colorSpace_options_error_,
        image.pointer,
        url.pointer,
        format,
        colorSpace,
        options.pointer,
        errorPtr);
  }

  /// writeJPEGRepresentationOfImage:toURL:colorSpace:options:error:
  bool writeJPEGRepresentationOfImage_toURL_colorSpace_options_error_(
      CIImage image,
      objc.NSURL url,
      ffi.Pointer<CGColorSpace> colorSpace,
      objc.NSDictionary options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    return _objc_msgSend_959(
        this.pointer,
        _sel_writeJPEGRepresentationOfImage_toURL_colorSpace_options_error_,
        image.pointer,
        url.pointer,
        colorSpace,
        options.pointer,
        errorPtr);
  }

  /// writeHEIFRepresentationOfImage:toURL:format:colorSpace:options:error:
  bool writeHEIFRepresentationOfImage_toURL_format_colorSpace_options_error_(
      CIImage image,
      objc.NSURL url,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace,
      objc.NSDictionary options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    return _objc_msgSend_958(
        this.pointer,
        _sel_writeHEIFRepresentationOfImage_toURL_format_colorSpace_options_error_,
        image.pointer,
        url.pointer,
        format,
        colorSpace,
        options.pointer,
        errorPtr);
  }

  /// writeHEIF10RepresentationOfImage:toURL:colorSpace:options:error:
  bool writeHEIF10RepresentationOfImage_toURL_colorSpace_options_error_(
      CIImage image,
      objc.NSURL url,
      ffi.Pointer<CGColorSpace> colorSpace,
      objc.NSDictionary options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    return _objc_msgSend_959(
        this.pointer,
        _sel_writeHEIF10RepresentationOfImage_toURL_colorSpace_options_error_,
        image.pointer,
        url.pointer,
        colorSpace,
        options.pointer,
        errorPtr);
  }

  /// writeOpenEXRRepresentationOfImage:toURL:options:error:
  bool writeOpenEXRRepresentationOfImage_toURL_options_error_(
      CIImage image,
      objc.NSURL url,
      objc.NSDictionary options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    return _objc_msgSend_960(
        this.pointer,
        _sel_writeOpenEXRRepresentationOfImage_toURL_options_error_,
        image.pointer,
        url.pointer,
        options.pointer,
        errorPtr);
  }

  /// depthBlurEffectFilterForImageURL:options:
  CIFilter? depthBlurEffectFilterForImageURL_options_(
      objc.NSURL url, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_980(
        this.pointer,
        _sel_depthBlurEffectFilterForImageURL_options_,
        url.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// depthBlurEffectFilterForImageData:options:
  CIFilter? depthBlurEffectFilterForImageData_options_(
      objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_981(
        this.pointer,
        _sel_depthBlurEffectFilterForImageData_options_,
        data.pointer,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:orientation:options:
  CIFilter?
      depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_orientation_options_(
          CIImage image,
          CIImage disparityImage,
          CIImage? portraitEffectsMatte,
          CGImagePropertyOrientation orientation,
          objc.NSDictionary? options) {
    final _ret = _objc_msgSend_982(
        this.pointer,
        _sel_depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_orientation_options_,
        image.pointer,
        disparityImage.pointer,
        portraitEffectsMatte?.pointer ?? ffi.nullptr,
        orientation.value,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:orientation:options:
  CIFilter?
      depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_hairSemanticSegmentation_orientation_options_(
          CIImage image,
          CIImage disparityImage,
          CIImage? portraitEffectsMatte,
          CIImage? hairSemanticSegmentation,
          CGImagePropertyOrientation orientation,
          objc.NSDictionary? options) {
    final _ret = _objc_msgSend_983(
        this.pointer,
        _sel_depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_hairSemanticSegmentation_orientation_options_,
        image.pointer,
        disparityImage.pointer,
        portraitEffectsMatte?.pointer ?? ffi.nullptr,
        hairSemanticSegmentation?.pointer ?? ffi.nullptr,
        orientation.value,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:glassesMatte:gainMap:orientation:options:
  CIFilter?
      depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_hairSemanticSegmentation_glassesMatte_gainMap_orientation_options_(
          CIImage image,
          CIImage disparityImage,
          CIImage? portraitEffectsMatte,
          CIImage? hairSemanticSegmentation,
          CIImage? glassesMatte,
          CIImage? gainMap,
          CGImagePropertyOrientation orientation,
          objc.NSDictionary? options) {
    final _ret = _objc_msgSend_984(
        this.pointer,
        _sel_depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_hairSemanticSegmentation_glassesMatte_gainMap_orientation_options_,
        image.pointer,
        disparityImage.pointer,
        portraitEffectsMatte?.pointer ?? ffi.nullptr,
        hairSemanticSegmentation?.pointer ?? ffi.nullptr,
        glassesMatte?.pointer ?? ffi.nullptr,
        gainMap?.pointer ?? ffi.nullptr,
        orientation.value,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// startTaskToRender:fromRect:toDestination:atPoint:error:
  CIRenderTask? startTaskToRender_fromRect_toDestination_atPoint_error_(
      CIImage image,
      CGRect fromRect,
      CIRenderDestination destination,
      CGPoint atPoint,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_1006(
        this.pointer,
        _sel_startTaskToRender_fromRect_toDestination_atPoint_error_,
        image.pointer,
        fromRect,
        destination.pointer,
        atPoint,
        error);
    return _ret.address == 0
        ? null
        : CIRenderTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// startTaskToRender:toDestination:error:
  CIRenderTask? startTaskToRender_toDestination_error_(
      CIImage image,
      CIRenderDestination destination,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_1007(
        this.pointer,
        _sel_startTaskToRender_toDestination_error_,
        image.pointer,
        destination.pointer,
        error);
    return _ret.address == 0
        ? null
        : CIRenderTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// prepareRender:fromRect:toDestination:atPoint:error:
  bool prepareRender_fromRect_toDestination_atPoint_error_(
      CIImage image,
      CGRect fromRect,
      CIRenderDestination destination,
      CGPoint atPoint,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_1008(
        this.pointer,
        _sel_prepareRender_fromRect_toDestination_atPoint_error_,
        image.pointer,
        fromRect,
        destination.pointer,
        atPoint,
        error);
  }

  /// startTaskToClear:error:
  CIRenderTask? startTaskToClear_error_(CIRenderDestination destination,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_1009(
        this.pointer, _sel_startTaskToClear_error_, destination.pointer, error);
    return _ret.address == 0
        ? null
        : CIRenderTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CIContext new1() {
    final _ret = _objc_msgSend_19(_class_CIContext, _sel_new);
    return CIContext.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIContext allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_CIContext, _sel_allocWithZone_, zone);
    return CIContext.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIContext alloc() {
    final _ret = _objc_msgSend_19(_class_CIContext, _sel_alloc);
    return CIContext.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIContext,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIContext,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIContext, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIContext, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIContext,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIContext,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIContext,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_CIContext, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_CIContext, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIContext = objc.getClass("CIContext");

final class _CGLContextObject extends ffi.Opaque {}

final class _CGLPixelFormatObject extends ffi.Opaque {}

late final _sel_contextWithCGLContext_pixelFormat_colorSpace_options_ =
    objc.registerName("contextWithCGLContext:pixelFormat:colorSpace:options:");
final _objc_msgSend_933 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<_CGLContextObject>,
                ffi.Pointer<_CGLPixelFormatObject>,
                ffi.Pointer<CGColorSpace>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<_CGLContextObject>,
            ffi.Pointer<_CGLPixelFormatObject>,
            ffi.Pointer<CGColorSpace>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_contextWithCGLContext_pixelFormat_options_ =
    objc.registerName("contextWithCGLContext:pixelFormat:options:");
final _objc_msgSend_934 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<_CGLContextObject>,
                ffi.Pointer<_CGLPixelFormatObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<_CGLContextObject>,
            ffi.Pointer<_CGLPixelFormatObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_contextWithCGContext_options_ =
    objc.registerName("contextWithCGContext:options:");
final _objc_msgSend_935 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGContext>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGContext>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_contextWithOptions_ = objc.registerName("contextWithOptions:");
final _objc_msgSend_936 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_context = objc.registerName("context");
final _objc_msgSend_937 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_938 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_contextWithMTLDevice_ =
    objc.registerName("contextWithMTLDevice:");
final _objc_msgSend_939 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_contextWithMTLDevice_options_ =
    objc.registerName("contextWithMTLDevice:options:");
final _objc_msgSend_940 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_contextWithMTLCommandQueue_ =
    objc.registerName("contextWithMTLCommandQueue:");
late final _sel_contextWithMTLCommandQueue_options_ =
    objc.registerName("contextWithMTLCommandQueue:options:");
late final _sel_workingColorSpace = objc.registerName("workingColorSpace");
late final _sel_workingFormat = objc.registerName("workingFormat");
late final _sel_drawImage_atPoint_fromRect_ =
    objc.registerName("drawImage:atPoint:fromRect:");
final _objc_msgSend_941 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGPoint,
                CGRect)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGPoint,
            CGRect)>();
late final _sel_drawImage_inRect_fromRect_ =
    objc.registerName("drawImage:inRect:fromRect:");
final _objc_msgSend_942 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect,
                CGRect)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect,
            CGRect)>();

final class __CFDictionary extends ffi.Opaque {}

late final _sel_createCGLayerWithSize_info_ =
    objc.registerName("createCGLayerWithSize:info:");
final _objc_msgSend_943 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGLayer> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGSize,
                ffi.Pointer<__CFDictionary>)>>()
    .asFunction<
        ffi.Pointer<CGLayer> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGSize,
            ffi.Pointer<__CFDictionary>)>();
late final _sel_render_toBitmap_rowBytes_bounds_format_colorSpace_ =
    objc.registerName("render:toBitmap:rowBytes:bounds:format:colorSpace:");
final _objc_msgSend_944 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Void>,
                ffi.Long,
                CGRect,
                ffi.Int,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Void>,
            int,
            CGRect,
            int,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_render_toIOSurface_bounds_colorSpace_ =
    objc.registerName("render:toIOSurface:bounds:colorSpace:");
final _objc_msgSend_945 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__IOSurface>,
                CGRect,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__IOSurface>,
            CGRect,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_render_toCVPixelBuffer_ =
    objc.registerName("render:toCVPixelBuffer:");
final _objc_msgSend_946 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__CVBuffer>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__CVBuffer>)>();
late final _sel_render_toCVPixelBuffer_bounds_colorSpace_ =
    objc.registerName("render:toCVPixelBuffer:bounds:colorSpace:");
final _objc_msgSend_947 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__CVBuffer>,
                CGRect,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__CVBuffer>,
            CGRect,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_render_toMTLTexture_commandBuffer_bounds_colorSpace_ =
    objc.registerName("render:toMTLTexture:commandBuffer:bounds:colorSpace:");
final _objc_msgSend_948 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_reclaimResources = objc.registerName("reclaimResources");
late final _sel_clearCaches = objc.registerName("clearCaches");
late final _sel_inputImageMaximumSize =
    objc.registerName("inputImageMaximumSize");
late final _sel_outputImageMaximumSize =
    objc.registerName("outputImageMaximumSize");
late final _sel_createCGImage_fromRect_ =
    objc.registerName("createCGImage:fromRect:");
final _objc_msgSend_949 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGImage> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect)>>()
    .asFunction<
        ffi.Pointer<CGImage> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect)>();
late final _sel_createCGImage_fromRect_format_colorSpace_ =
    objc.registerName("createCGImage:fromRect:format:colorSpace:");
final _objc_msgSend_950 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGImage> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect,
                ffi.Int,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        ffi.Pointer<CGImage> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect,
            int,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_createCGImage_fromRect_format_colorSpace_deferred_ =
    objc.registerName("createCGImage:fromRect:format:colorSpace:deferred:");
final _objc_msgSend_951 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGImage> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect,
                ffi.Int,
                ffi.Pointer<CGColorSpace>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<CGImage> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect,
            int,
            ffi.Pointer<CGColorSpace>,
            bool)>();
late final _sel_offlineGPUCount = objc.registerName("offlineGPUCount");
late final _sel_contextForOfflineGPUAtIndex_ =
    objc.registerName("contextForOfflineGPUAtIndex:");
final _objc_msgSend_952 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_contextForOfflineGPUAtIndex_colorSpace_options_sharedContext_ =
    objc.registerName(
        "contextForOfflineGPUAtIndex:colorSpace:options:sharedContext:");
final _objc_msgSend_953 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<CGColorSpace>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<_CGLContextObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<CGColorSpace>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<_CGLContextObject>)>();
late final _sel_TIFFRepresentationOfImage_format_colorSpace_options_ =
    objc.registerName("TIFFRepresentationOfImage:format:colorSpace:options:");
final _objc_msgSend_954 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int,
                ffi.Pointer<CGColorSpace>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<CGColorSpace>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_JPEGRepresentationOfImage_colorSpace_options_ =
    objc.registerName("JPEGRepresentationOfImage:colorSpace:options:");
final _objc_msgSend_955 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<CGColorSpace>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<CGColorSpace>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_HEIFRepresentationOfImage_format_colorSpace_options_ =
    objc.registerName("HEIFRepresentationOfImage:format:colorSpace:options:");
late final _sel_HEIF10RepresentationOfImage_colorSpace_options_error_ =
    objc.registerName("HEIF10RepresentationOfImage:colorSpace:options:error:");
final _objc_msgSend_956 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<CGColorSpace>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<CGColorSpace>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_PNGRepresentationOfImage_format_colorSpace_options_ =
    objc.registerName("PNGRepresentationOfImage:format:colorSpace:options:");
late final _sel_OpenEXRRepresentationOfImage_options_error_ =
    objc.registerName("OpenEXRRepresentationOfImage:options:error:");
final _objc_msgSend_957 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_writeTIFFRepresentationOfImage_toURL_format_colorSpace_options_error_ =
    objc.registerName(
        "writeTIFFRepresentationOfImage:toURL:format:colorSpace:options:error:");
final _objc_msgSend_958 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int,
                ffi.Pointer<CGColorSpace>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<CGColorSpace>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_writePNGRepresentationOfImage_toURL_format_colorSpace_options_error_ =
    objc.registerName(
        "writePNGRepresentationOfImage:toURL:format:colorSpace:options:error:");
late final _sel_writeJPEGRepresentationOfImage_toURL_colorSpace_options_error_ =
    objc.registerName(
        "writeJPEGRepresentationOfImage:toURL:colorSpace:options:error:");
final _objc_msgSend_959 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<CGColorSpace>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<CGColorSpace>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_writeHEIFRepresentationOfImage_toURL_format_colorSpace_options_error_ =
    objc.registerName(
        "writeHEIFRepresentationOfImage:toURL:format:colorSpace:options:error:");
late final _sel_writeHEIF10RepresentationOfImage_toURL_colorSpace_options_error_ =
    objc.registerName(
        "writeHEIF10RepresentationOfImage:toURL:colorSpace:options:error:");
late final _sel_writeOpenEXRRepresentationOfImage_toURL_options_error_ =
    objc.registerName("writeOpenEXRRepresentationOfImage:toURL:options:error:");
final _objc_msgSend_960 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

/// CIFilter
class CIFilter extends objc.NSObject {
  CIFilter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIFilter] that points to the same underlying object as [other].
  CIFilter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIFilter] that wraps the given raw object pointer.
  CIFilter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIFilter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_CIFilter);
  }

  /// outputImage
  CIImage? get outputImage {
    final _ret = _objc_msgSend_961(this.pointer, _sel_outputImage);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_11(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setName_, value.pointer);
  }

  /// isEnabled
  bool get enabled {
    return _objc_msgSend_13(this.pointer, _sel_isEnabled);
  }

  /// setEnabled:
  set enabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setEnabled_, value);
  }

  /// inputKeys
  objc.NSArray get inputKeys {
    final _ret = _objc_msgSend_33(this.pointer, _sel_inputKeys);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputKeys
  objc.NSArray get outputKeys {
    final _ret = _objc_msgSend_33(this.pointer, _sel_outputKeys);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDefaults
  void setDefaults() {
    _objc_msgSend_7(this.pointer, _sel_setDefaults);
  }

  /// attributes
  objc.NSDictionary get attributes {
    final _ret = _objc_msgSend_123(this.pointer, _sel_attributes);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// apply:arguments:options:
  CIImage? apply_arguments_options_(
      CIKernel k, objc.NSArray? args, objc.NSDictionary? dict) {
    final _ret = _objc_msgSend_967(this.pointer, _sel_apply_arguments_options_,
        k.pointer, args?.pointer ?? ffi.nullptr, dict?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// apply:
  CIImage? apply_(CIKernel k) {
    final _ret = _objc_msgSend_968(this.pointer, _sel_apply_, k.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// filterWithName:
  static CIFilter? filterWithName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_969(_class_CIFilter, _sel_filterWithName_, name.pointer);
    return _ret.address == 0
        ? null
        : CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// filterWithName:keysAndValues:
  static CIFilter? filterWithName_keysAndValues_(
      objc.NSString name, objc.ObjCObjectBase key0) {
    final _ret = _objc_msgSend_970(_class_CIFilter,
        _sel_filterWithName_keysAndValues_, name.pointer, key0.pointer);
    return _ret.address == 0
        ? null
        : CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// filterWithName:withInputParameters:
  static CIFilter? filterWithName_withInputParameters_(
      objc.NSString name, objc.NSDictionary? params) {
    final _ret = _objc_msgSend_971(
        _class_CIFilter,
        _sel_filterWithName_withInputParameters_,
        name.pointer,
        params?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// filterNamesInCategory:
  static objc.NSArray filterNamesInCategory_(objc.NSString? category) {
    final _ret = _objc_msgSend_972(_class_CIFilter, _sel_filterNamesInCategory_,
        category?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// filterNamesInCategories:
  static objc.NSArray filterNamesInCategories_(objc.NSArray? categories) {
    final _ret = _objc_msgSend_973(_class_CIFilter,
        _sel_filterNamesInCategories_, categories?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// registerFilterName:constructor:classAttributes:
  static void registerFilterName_constructor_classAttributes_(
      objc.NSString name,
      objc.ObjCObjectBase anObject,
      objc.NSDictionary attributes) {
    _objc_msgSend_974(
        _class_CIFilter,
        _sel_registerFilterName_constructor_classAttributes_,
        name.pointer,
        anObject.pointer,
        attributes.pointer);
  }

  /// localizedNameForFilterName:
  static objc.NSString? localizedNameForFilterName_(objc.NSString filterName) {
    final _ret = _objc_msgSend_42(
        _class_CIFilter, _sel_localizedNameForFilterName_, filterName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedNameForCategory:
  static objc.NSString localizedNameForCategory_(objc.NSString category) {
    final _ret = _objc_msgSend_309(
        _class_CIFilter, _sel_localizedNameForCategory_, category.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedDescriptionForFilterName:
  static objc.NSString? localizedDescriptionForFilterName_(
      objc.NSString filterName) {
    final _ret = _objc_msgSend_42(_class_CIFilter,
        _sel_localizedDescriptionForFilterName_, filterName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedReferenceDocumentationForFilterName:
  static objc.NSURL? localizedReferenceDocumentationForFilterName_(
      objc.NSString filterName) {
    final _ret = _objc_msgSend_41(_class_CIFilter,
        _sel_localizedReferenceDocumentationForFilterName_, filterName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// serializedXMPFromFilters:inputImageExtent:
  static objc.NSData? serializedXMPFromFilters_inputImageExtent_(
      objc.NSArray filters, CGRect extent) {
    final _ret = _objc_msgSend_975(
        _class_CIFilter,
        _sel_serializedXMPFromFilters_inputImageExtent_,
        filters.pointer,
        extent);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// filterArrayFromSerializedXMP:inputImageExtent:error:
  static objc.NSArray filterArrayFromSerializedXMP_inputImageExtent_error_(
      objc.NSData xmpData,
      CGRect extent,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_976(
        _class_CIFilter,
        _sel_filterArrayFromSerializedXMP_inputImageExtent_error_,
        xmpData.pointer,
        extent,
        outError);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// filterWithImageURL:options:
  static CIFilter filterWithImageURL_options_(
      objc.NSURL url, objc.NSDictionary options) {
    final _ret = _objc_msgSend_977(_class_CIFilter,
        _sel_filterWithImageURL_options_, url.pointer, options.pointer);
    return CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// filterWithImageData:options:
  static CIFilter filterWithImageData_options_(
      objc.NSData data, objc.NSDictionary options) {
    final _ret = _objc_msgSend_978(_class_CIFilter,
        _sel_filterWithImageData_options_, data.pointer, options.pointer);
    return CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// filterWithCVPixelBuffer:properties:options:
  static CIFilter filterWithCVPixelBuffer_properties_options_(
      ffi.Pointer<__CVBuffer> pixelBuffer,
      objc.NSDictionary properties,
      objc.NSDictionary options) {
    final _ret = _objc_msgSend_979(
        _class_CIFilter,
        _sel_filterWithCVPixelBuffer_properties_options_,
        pixelBuffer,
        properties.pointer,
        options.pointer);
    return CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportedRawCameraModels
  static objc.NSArray supportedRawCameraModels() {
    final _ret =
        _objc_msgSend_33(_class_CIFilter, _sel_supportedRawCameraModels);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CIFilter init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIFilter.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CIFilter new1() {
    final _ret = _objc_msgSend_19(_class_CIFilter, _sel_new);
    return CIFilter.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIFilter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_CIFilter, _sel_allocWithZone_, zone);
    return CIFilter.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIFilter alloc() {
    final _ret = _objc_msgSend_19(_class_CIFilter, _sel_alloc);
    return CIFilter.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIFilter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIFilter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIFilter, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIFilter, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIFilter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIFilter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIFilter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_CIFilter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_CIFilter, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIFilter = objc.getClass("CIFilter");
late final _sel_outputImage = objc.registerName("outputImage");
final _objc_msgSend_961 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setEnabled_ = objc.registerName("setEnabled:");
late final _sel_inputKeys = objc.registerName("inputKeys");
late final _sel_outputKeys = objc.registerName("outputKeys");
late final _sel_setDefaults = objc.registerName("setDefaults");

/// CIKernel
class CIKernel extends objc.NSObject {
  CIKernel._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIKernel] that points to the same underlying object as [other].
  CIKernel.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIKernel] that wraps the given raw object pointer.
  CIKernel.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIKernel].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_CIKernel);
  }

  /// kernelsWithString:
  static objc.NSArray? kernelsWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_302(
        _class_CIKernel, _sel_kernelsWithString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelsWithMetalString:error:
  static objc.NSArray? kernelsWithMetalString_error_(
      objc.NSString source, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_293(_class_CIKernel,
        _sel_kernelsWithMetalString_error_, source.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelWithString:
  static CIKernel? kernelWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        _class_CIKernel, _sel_kernelWithString_, string.pointer);
    return _ret.address == 0
        ? null
        : CIKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelWithFunctionName:fromMetalLibraryData:error:
  static CIKernel? kernelWithFunctionName_fromMetalLibraryData_error_(
      objc.NSString name,
      objc.NSData data,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_962(
        _class_CIKernel,
        _sel_kernelWithFunctionName_fromMetalLibraryData_error_,
        name.pointer,
        data.pointer,
        error);
    return _ret.address == 0
        ? null
        : CIKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelWithFunctionName:fromMetalLibraryData:outputPixelFormat:error:
  static CIKernel?
      kernelWithFunctionName_fromMetalLibraryData_outputPixelFormat_error_(
          objc.NSString name,
          objc.NSData data,
          int format,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_963(
        _class_CIKernel,
        _sel_kernelWithFunctionName_fromMetalLibraryData_outputPixelFormat_error_,
        name.pointer,
        data.pointer,
        format,
        error);
    return _ret.address == 0
        ? null
        : CIKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelNamesFromMetalLibraryData:
  static objc.NSArray kernelNamesFromMetalLibraryData_(objc.NSData data) {
    final _ret = _objc_msgSend_964(
        _class_CIKernel, _sel_kernelNamesFromMetalLibraryData_, data.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_11(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setROISelector:
  void setROISelector_(ffi.Pointer<objc.ObjCSelector> method) {
    _objc_msgSend_965(this.pointer, _sel_setROISelector_, method);
  }

  /// applyWithExtent:roiCallback:arguments:
  CIImage? applyWithExtent_roiCallback_arguments_(
      CGRect extent,
      objc.ObjCBlock<CGRect Function(ffi.Int, CGRect)> callback,
      objc.NSArray? args) {
    final _ret = _objc_msgSend_966(
        this.pointer,
        _sel_applyWithExtent_roiCallback_arguments_,
        extent,
        callback.pointer,
        args?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CIKernel init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CIKernel new1() {
    final _ret = _objc_msgSend_19(_class_CIKernel, _sel_new);
    return CIKernel.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIKernel allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_CIKernel, _sel_allocWithZone_, zone);
    return CIKernel.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIKernel alloc() {
    final _ret = _objc_msgSend_19(_class_CIKernel, _sel_alloc);
    return CIKernel.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIKernel,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIKernel,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIKernel, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIKernel, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIKernel,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIKernel,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIKernel,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_CIKernel, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_CIKernel, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIKernel = objc.getClass("CIKernel");
late final _sel_kernelsWithString_ = objc.registerName("kernelsWithString:");
late final _sel_kernelsWithMetalString_error_ =
    objc.registerName("kernelsWithMetalString:error:");
late final _sel_kernelWithString_ = objc.registerName("kernelWithString:");
late final _sel_kernelWithFunctionName_fromMetalLibraryData_error_ =
    objc.registerName("kernelWithFunctionName:fromMetalLibraryData:error:");
final _objc_msgSend_962 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_kernelWithFunctionName_fromMetalLibraryData_outputPixelFormat_error_ =
    objc.registerName(
        "kernelWithFunctionName:fromMetalLibraryData:outputPixelFormat:error:");
final _objc_msgSend_963 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_kernelNamesFromMetalLibraryData_ =
    objc.registerName("kernelNamesFromMetalLibraryData:");
final _objc_msgSend_964 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setROISelector_ = objc.registerName("setROISelector:");
final _objc_msgSend_965 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCSelector>)>();
CGRect _ObjCBlock_CGRect_ffiInt_CGRect_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0, CGRect arg1) =>
    block.ref.target
        .cast<ffi.NativeFunction<CGRect Function(ffi.Int arg0, CGRect arg1)>>()
        .asFunction<CGRect Function(int, CGRect)>()(arg0, arg1);
CGRect _ObjCBlock_CGRect_ffiInt_CGRect_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0, CGRect arg1) =>
    (objc.getBlockClosure(block) as CGRect Function(int, CGRect))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<CGRect Function(ffi.Int, CGRect)>`.
abstract final class ObjCBlock_CGRect_ffiInt_CGRect {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<CGRect Function(ffi.Int, CGRect)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<CGRect Function(ffi.Int, CGRect)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<CGRect Function(ffi.Int, CGRect)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<CGRect Function(ffi.Int arg0, CGRect arg1)>> ptr) =>
          objc.ObjCBlock<CGRect Function(ffi.Int, CGRect)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              CGRect Function(
                                  ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int, CGRect)>(
                          _ObjCBlock_CGRect_ffiInt_CGRect_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<CGRect Function(ffi.Int, CGRect)> fromFunction(
          CGRect Function(int, CGRect) fn) =>
      objc.ObjCBlock<CGRect Function(ffi.Int, CGRect)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          CGRect Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Int, CGRect)>(
                      _ObjCBlock_CGRect_ffiInt_CGRect_closureTrampoline)
                  .cast(),
              (int arg0, CGRect arg1) => fn(arg0, arg1)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<CGRect Function(ffi.Int, CGRect)>`.
extension ObjCBlock_CGRect_ffiInt_CGRect_CallExtension
    on objc.ObjCBlock<CGRect Function(ffi.Int, CGRect)> {
  CGRect call(int arg0, CGRect arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  CGRect Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Int arg0, CGRect arg1)>>()
          .asFunction<
              CGRect Function(ffi.Pointer<objc.ObjCBlockImpl>, int, CGRect)>()(
      pointer, arg0, arg1);
}

late final _sel_applyWithExtent_roiCallback_arguments_ =
    objc.registerName("applyWithExtent:roiCallback:arguments:");
final _objc_msgSend_966 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect,
                ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_apply_arguments_options_ =
    objc.registerName("apply:arguments:options:");
final _objc_msgSend_967 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_apply_ = objc.registerName("apply:");
final _objc_msgSend_968 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_filterWithName_ = objc.registerName("filterWithName:");
final _objc_msgSend_969 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_filterWithName_keysAndValues_ =
    objc.registerName("filterWithName:keysAndValues:");
final _objc_msgSend_970 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_filterWithName_withInputParameters_ =
    objc.registerName("filterWithName:withInputParameters:");
final _objc_msgSend_971 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_filterNamesInCategory_ =
    objc.registerName("filterNamesInCategory:");
final _objc_msgSend_972 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_filterNamesInCategories_ =
    objc.registerName("filterNamesInCategories:");
final _objc_msgSend_973 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_registerFilterName_constructor_classAttributes_ =
    objc.registerName("registerFilterName:constructor:classAttributes:");
final _objc_msgSend_974 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localizedNameForFilterName_ =
    objc.registerName("localizedNameForFilterName:");
late final _sel_localizedNameForCategory_ =
    objc.registerName("localizedNameForCategory:");
late final _sel_localizedDescriptionForFilterName_ =
    objc.registerName("localizedDescriptionForFilterName:");
late final _sel_localizedReferenceDocumentationForFilterName_ =
    objc.registerName("localizedReferenceDocumentationForFilterName:");
late final _sel_serializedXMPFromFilters_inputImageExtent_ =
    objc.registerName("serializedXMPFromFilters:inputImageExtent:");
final _objc_msgSend_975 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect)>();
late final _sel_filterArrayFromSerializedXMP_inputImageExtent_error_ =
    objc.registerName("filterArrayFromSerializedXMP:inputImageExtent:error:");
final _objc_msgSend_976 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_filterWithImageURL_options_ =
    objc.registerName("filterWithImageURL:options:");
final _objc_msgSend_977 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_filterWithImageData_options_ =
    objc.registerName("filterWithImageData:options:");
final _objc_msgSend_978 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_filterWithCVPixelBuffer_properties_options_ =
    objc.registerName("filterWithCVPixelBuffer:properties:options:");
final _objc_msgSend_979 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__CVBuffer>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__CVBuffer>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_supportedRawCameraModels =
    objc.registerName("supportedRawCameraModels");
late final _sel_depthBlurEffectFilterForImageURL_options_ =
    objc.registerName("depthBlurEffectFilterForImageURL:options:");
final _objc_msgSend_980 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_depthBlurEffectFilterForImageData_options_ =
    objc.registerName("depthBlurEffectFilterForImageData:options:");
final _objc_msgSend_981 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_orientation_options_ =
    objc.registerName(
        "depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:orientation:options:");
final _objc_msgSend_982 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Uint32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_hairSemanticSegmentation_orientation_options_ =
    objc.registerName(
        "depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:orientation:options:");
final _objc_msgSend_983 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Uint32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_depthBlurEffectFilterForImage_disparityImage_portraitEffectsMatte_hairSemanticSegmentation_glassesMatte_gainMap_orientation_options_ =
    objc.registerName(
        "depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:glassesMatte:gainMap:orientation:options:");
final _objc_msgSend_984 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Uint32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

/// CIRenderTask
class CIRenderTask extends objc.NSObject {
  CIRenderTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIRenderTask] that points to the same underlying object as [other].
  CIRenderTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIRenderTask] that wraps the given raw object pointer.
  CIRenderTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIRenderTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CIRenderTask);
  }

  /// waitUntilCompletedAndReturnError:
  CIRenderInfo? waitUntilCompletedAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_985(
        this.pointer, _sel_waitUntilCompletedAndReturnError_, error);
    return _ret.address == 0
        ? null
        : CIRenderInfo.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CIRenderTask init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIRenderTask.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CIRenderTask new1() {
    final _ret = _objc_msgSend_19(_class_CIRenderTask, _sel_new);
    return CIRenderTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIRenderTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_CIRenderTask, _sel_allocWithZone_, zone);
    return CIRenderTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIRenderTask alloc() {
    final _ret = _objc_msgSend_19(_class_CIRenderTask, _sel_alloc);
    return CIRenderTask.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIRenderTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIRenderTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIRenderTask, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIRenderTask, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIRenderTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIRenderTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIRenderTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_CIRenderTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_CIRenderTask, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIRenderTask = objc.getClass("CIRenderTask");

/// CIRenderInfo
class CIRenderInfo extends objc.NSObject {
  CIRenderInfo._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIRenderInfo] that points to the same underlying object as [other].
  CIRenderInfo.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIRenderInfo] that wraps the given raw object pointer.
  CIRenderInfo.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIRenderInfo].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CIRenderInfo);
  }

  /// kernelExecutionTime
  double get kernelExecutionTime {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_kernelExecutionTime)
        : _objc_msgSend_18(this.pointer, _sel_kernelExecutionTime);
  }

  /// kernelCompileTime
  double get kernelCompileTime {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_kernelCompileTime)
        : _objc_msgSend_18(this.pointer, _sel_kernelCompileTime);
  }

  /// passCount
  int get passCount {
    return _objc_msgSend_125(this.pointer, _sel_passCount);
  }

  /// pixelsProcessed
  int get pixelsProcessed {
    return _objc_msgSend_125(this.pointer, _sel_pixelsProcessed);
  }

  /// init
  CIRenderInfo init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIRenderInfo.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CIRenderInfo new1() {
    final _ret = _objc_msgSend_19(_class_CIRenderInfo, _sel_new);
    return CIRenderInfo.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIRenderInfo allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_CIRenderInfo, _sel_allocWithZone_, zone);
    return CIRenderInfo.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIRenderInfo alloc() {
    final _ret = _objc_msgSend_19(_class_CIRenderInfo, _sel_alloc);
    return CIRenderInfo.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIRenderInfo,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIRenderInfo,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIRenderInfo, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIRenderInfo, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIRenderInfo,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIRenderInfo,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIRenderInfo,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_CIRenderInfo, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_CIRenderInfo, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIRenderInfo = objc.getClass("CIRenderInfo");
late final _sel_kernelExecutionTime = objc.registerName("kernelExecutionTime");
late final _sel_kernelCompileTime = objc.registerName("kernelCompileTime");
late final _sel_passCount = objc.registerName("passCount");
late final _sel_pixelsProcessed = objc.registerName("pixelsProcessed");
late final _sel_waitUntilCompletedAndReturnError_ =
    objc.registerName("waitUntilCompletedAndReturnError:");
final _objc_msgSend_985 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

/// CIRenderDestination
class CIRenderDestination extends objc.NSObject {
  CIRenderDestination._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIRenderDestination] that points to the same underlying object as [other].
  CIRenderDestination.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIRenderDestination] that wraps the given raw object pointer.
  CIRenderDestination.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIRenderDestination].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CIRenderDestination);
  }

  /// initWithPixelBuffer:
  CIRenderDestination initWithPixelBuffer_(
      ffi.Pointer<__CVBuffer> pixelBuffer) {
    final _ret =
        _objc_msgSend_886(this.pointer, _sel_initWithPixelBuffer_, pixelBuffer);
    return CIRenderDestination.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithIOSurface:
  CIRenderDestination initWithIOSurface_(IOSurface surface) {
    final _ret = _objc_msgSend_992(
        this.pointer, _sel_initWithIOSurface_, surface.pointer);
    return CIRenderDestination.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithMTLTexture:commandBuffer:
  CIRenderDestination initWithMTLTexture_commandBuffer_(
      objc.ObjCObjectBase texture, objc.ObjCObjectBase? commandBuffer) {
    final _ret = _objc_msgSend_993(
        this.pointer,
        _sel_initWithMTLTexture_commandBuffer_,
        texture.pointer,
        commandBuffer?.pointer ?? ffi.nullptr);
    return CIRenderDestination.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithWidth:height:pixelFormat:commandBuffer:mtlTextureProvider:
  CIRenderDestination
      initWithWidth_height_pixelFormat_commandBuffer_mtlTextureProvider_(
          int width,
          int height,
          MTLPixelFormat pixelFormat,
          objc.ObjCObjectBase? commandBuffer,
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>? block) {
    final _ret = _objc_msgSend_994(
        this.pointer,
        _sel_initWithWidth_height_pixelFormat_commandBuffer_mtlTextureProvider_,
        width,
        height,
        pixelFormat.value,
        commandBuffer?.pointer ?? ffi.nullptr,
        block?.pointer ?? ffi.nullptr);
    return CIRenderDestination.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithGLTexture:target:width:height:
  CIRenderDestination initWithGLTexture_target_width_height_(
      int texture, int target, int width, int height) {
    final _ret = _objc_msgSend_995(
        this.pointer,
        _sel_initWithGLTexture_target_width_height_,
        texture,
        target,
        width,
        height);
    return CIRenderDestination.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithBitmapData:width:height:bytesPerRow:format:
  CIRenderDestination initWithBitmapData_width_height_bytesPerRow_format_(
      ffi.Pointer<ffi.Void> data,
      int width,
      int height,
      int bytesPerRow,
      int format) {
    final _ret = _objc_msgSend_996(
        this.pointer,
        _sel_initWithBitmapData_width_height_bytesPerRow_format_,
        data,
        width,
        height,
        bytesPerRow,
        format);
    return CIRenderDestination.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// width
  int get width {
    return _objc_msgSend_57(this.pointer, _sel_width);
  }

  /// height
  int get height {
    return _objc_msgSend_57(this.pointer, _sel_height);
  }

  /// alphaMode
  CIRenderDestinationAlphaMode get alphaMode {
    final _ret = _objc_msgSend_997(this.pointer, _sel_alphaMode);
    return CIRenderDestinationAlphaMode.fromValue(_ret);
  }

  /// setAlphaMode:
  set alphaMode(CIRenderDestinationAlphaMode value) {
    return _objc_msgSend_998(this.pointer, _sel_setAlphaMode_, value.value);
  }

  /// isFlipped
  bool get flipped {
    return _objc_msgSend_13(this.pointer, _sel_isFlipped);
  }

  /// setFlipped:
  set flipped(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setFlipped_, value);
  }

  /// isDithered
  bool get dithered {
    return _objc_msgSend_13(this.pointer, _sel_isDithered);
  }

  /// setDithered:
  set dithered(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setDithered_, value);
  }

  /// isClamped
  bool get clamped {
    return _objc_msgSend_13(this.pointer, _sel_isClamped);
  }

  /// setClamped:
  set clamped(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setClamped_, value);
  }

  /// colorSpace
  ffi.Pointer<CGColorSpace> get colorSpace {
    return _objc_msgSend_868(this.pointer, _sel_colorSpace);
  }

  /// setColorSpace:
  set colorSpace(ffi.Pointer<CGColorSpace> value) {
    return _objc_msgSend_999(this.pointer, _sel_setColorSpace_, value);
  }

  /// blendKernel
  CIBlendKernel? get blendKernel {
    final _ret = _objc_msgSend_1004(this.pointer, _sel_blendKernel);
    return _ret.address == 0
        ? null
        : CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// setBlendKernel:
  set blendKernel(CIBlendKernel? value) {
    return _objc_msgSend_1005(
        this.pointer, _sel_setBlendKernel_, value?.pointer ?? ffi.nullptr);
  }

  /// blendsInDestinationColorSpace
  bool get blendsInDestinationColorSpace {
    return _objc_msgSend_13(this.pointer, _sel_blendsInDestinationColorSpace);
  }

  /// setBlendsInDestinationColorSpace:
  set blendsInDestinationColorSpace(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setBlendsInDestinationColorSpace_, value);
  }

  /// init
  CIRenderDestination init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIRenderDestination.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CIRenderDestination new1() {
    final _ret = _objc_msgSend_19(_class_CIRenderDestination, _sel_new);
    return CIRenderDestination.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CIRenderDestination allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_CIRenderDestination, _sel_allocWithZone_, zone);
    return CIRenderDestination.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CIRenderDestination alloc() {
    final _ret = _objc_msgSend_19(_class_CIRenderDestination, _sel_alloc);
    return CIRenderDestination.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIRenderDestination,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIRenderDestination,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIRenderDestination, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIRenderDestination, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIRenderDestination,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIRenderDestination,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIRenderDestination,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_CIRenderDestination, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_CIRenderDestination, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIRenderDestination = objc.getClass("CIRenderDestination");
late final _sel_initWithPixelBuffer_ =
    objc.registerName("initWithPixelBuffer:");

/// IOSurface
class IOSurface extends objc.NSObject {
  IOSurface._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [IOSurface] that points to the same underlying object as [other].
  IOSurface.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [IOSurface] that wraps the given raw object pointer.
  IOSurface.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [IOSurface].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_IOSurface);
  }

  /// initWithProperties:
  IOSurface? initWithProperties_(objc.NSDictionary properties) {
    final _ret = _objc_msgSend_323(
        this.pointer, _sel_initWithProperties_, properties.pointer);
    return _ret.address == 0
        ? null
        : IOSurface.castFromPointer(_ret, retain: true, release: true);
  }

  /// lockWithOptions:seed:
  int lockWithOptions_seed_(
      IOSurfaceLockOptions options, ffi.Pointer<ffi.Uint32> seed) {
    return _objc_msgSend_986(
        this.pointer, _sel_lockWithOptions_seed_, options.value, seed);
  }

  /// unlockWithOptions:seed:
  int unlockWithOptions_seed_(
      IOSurfaceLockOptions options, ffi.Pointer<ffi.Uint32> seed) {
    return _objc_msgSend_986(
        this.pointer, _sel_unlockWithOptions_seed_, options.value, seed);
  }

  /// allocationSize
  int get allocationSize {
    return _objc_msgSend_125(this.pointer, _sel_allocationSize);
  }

  /// width
  int get width {
    return _objc_msgSend_125(this.pointer, _sel_width);
  }

  /// height
  int get height {
    return _objc_msgSend_125(this.pointer, _sel_height);
  }

  /// baseAddress
  ffi.Pointer<ffi.Void> get baseAddress {
    return _objc_msgSend_987(this.pointer, _sel_baseAddress);
  }

  /// pixelFormat
  int get pixelFormat {
    return _objc_msgSend_647(this.pointer, _sel_pixelFormat);
  }

  /// bytesPerRow
  int get bytesPerRow {
    return _objc_msgSend_125(this.pointer, _sel_bytesPerRow);
  }

  /// bytesPerElement
  int get bytesPerElement {
    return _objc_msgSend_125(this.pointer, _sel_bytesPerElement);
  }

  /// elementWidth
  int get elementWidth {
    return _objc_msgSend_125(this.pointer, _sel_elementWidth);
  }

  /// elementHeight
  int get elementHeight {
    return _objc_msgSend_125(this.pointer, _sel_elementHeight);
  }

  /// seed
  int get seed {
    return _objc_msgSend_988(this.pointer, _sel_seed);
  }

  /// planeCount
  int get planeCount {
    return _objc_msgSend_57(this.pointer, _sel_planeCount);
  }

  /// widthOfPlaneAtIndex:
  int widthOfPlaneAtIndex_(int planeIndex) {
    return _objc_msgSend_989(
        this.pointer, _sel_widthOfPlaneAtIndex_, planeIndex);
  }

  /// heightOfPlaneAtIndex:
  int heightOfPlaneAtIndex_(int planeIndex) {
    return _objc_msgSend_989(
        this.pointer, _sel_heightOfPlaneAtIndex_, planeIndex);
  }

  /// bytesPerRowOfPlaneAtIndex:
  int bytesPerRowOfPlaneAtIndex_(int planeIndex) {
    return _objc_msgSend_989(
        this.pointer, _sel_bytesPerRowOfPlaneAtIndex_, planeIndex);
  }

  /// bytesPerElementOfPlaneAtIndex:
  int bytesPerElementOfPlaneAtIndex_(int planeIndex) {
    return _objc_msgSend_989(
        this.pointer, _sel_bytesPerElementOfPlaneAtIndex_, planeIndex);
  }

  /// elementWidthOfPlaneAtIndex:
  int elementWidthOfPlaneAtIndex_(int planeIndex) {
    return _objc_msgSend_989(
        this.pointer, _sel_elementWidthOfPlaneAtIndex_, planeIndex);
  }

  /// elementHeightOfPlaneAtIndex:
  int elementHeightOfPlaneAtIndex_(int planeIndex) {
    return _objc_msgSend_989(
        this.pointer, _sel_elementHeightOfPlaneAtIndex_, planeIndex);
  }

  /// baseAddressOfPlaneAtIndex:
  ffi.Pointer<ffi.Void> baseAddressOfPlaneAtIndex_(int planeIndex) {
    return _objc_msgSend_423(
        this.pointer, _sel_baseAddressOfPlaneAtIndex_, planeIndex);
  }

  /// setAttachment:forKey:
  void setAttachment_forKey_(objc.ObjCObjectBase anObject, objc.NSString key) {
    _objc_msgSend_990(this.pointer, _sel_setAttachment_forKey_,
        anObject.pointer, key.pointer);
  }

  /// attachmentForKey:
  objc.ObjCObjectBase? attachmentForKey_(objc.NSString key) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_attachmentForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// removeAttachmentForKey:
  void removeAttachmentForKey_(objc.NSString key) {
    _objc_msgSend_110(this.pointer, _sel_removeAttachmentForKey_, key.pointer);
  }

  /// setAllAttachments:
  void setAllAttachments_(objc.NSDictionary dict) {
    _objc_msgSend_642(this.pointer, _sel_setAllAttachments_, dict.pointer);
  }

  /// allAttachments
  objc.NSDictionary? allAttachments() {
    final _ret = _objc_msgSend_84(this.pointer, _sel_allAttachments);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// removeAllAttachments
  void removeAllAttachments() {
    _objc_msgSend_7(this.pointer, _sel_removeAllAttachments);
  }

  /// isInUse
  bool get inUse {
    return _objc_msgSend_13(this.pointer, _sel_isInUse);
  }

  /// incrementUseCount
  void incrementUseCount() {
    _objc_msgSend_7(this.pointer, _sel_incrementUseCount);
  }

  /// decrementUseCount
  void decrementUseCount() {
    _objc_msgSend_7(this.pointer, _sel_decrementUseCount);
  }

  /// localUseCount
  int get localUseCount {
    return _objc_msgSend_718(this.pointer, _sel_localUseCount);
  }

  /// allowsPixelSizeCasting
  bool get allowsPixelSizeCasting {
    return _objc_msgSend_13(this.pointer, _sel_allowsPixelSizeCasting);
  }

  /// setPurgeable:oldState:
  int setPurgeable_oldState_(
      IOSurfacePurgeabilityState newState, ffi.Pointer<ffi.Uint32> oldState) {
    return _objc_msgSend_991(
        this.pointer, _sel_setPurgeable_oldState_, newState.value, oldState);
  }

  /// init
  IOSurface init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return IOSurface.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static IOSurface new1() {
    final _ret = _objc_msgSend_19(_class_IOSurface, _sel_new);
    return IOSurface.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static IOSurface allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_IOSurface, _sel_allocWithZone_, zone);
    return IOSurface.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static IOSurface alloc() {
    final _ret = _objc_msgSend_19(_class_IOSurface, _sel_alloc);
    return IOSurface.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_IOSurface,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_IOSurface,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_IOSurface, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_IOSurface, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_IOSurface,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_IOSurface,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_IOSurface,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_IOSurface, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_IOSurface, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_IOSurface = objc.getClass("IOSurface");

enum IOSurfaceLockOptions {
  kIOSurfaceLockReadOnly(1),
  kIOSurfaceLockAvoidSync(2);

  final int value;
  const IOSurfaceLockOptions(this.value);

  static IOSurfaceLockOptions fromValue(int value) => switch (value) {
        1 => kIOSurfaceLockReadOnly,
        2 => kIOSurfaceLockAvoidSync,
        _ =>
          throw ArgumentError("Unknown value for IOSurfaceLockOptions: $value"),
      };
}

late final _sel_lockWithOptions_seed_ =
    objc.registerName("lockWithOptions:seed:");
final _objc_msgSend_986 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Uint32,
                ffi.Pointer<ffi.Uint32>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<ffi.Uint32>)>();
late final _sel_unlockWithOptions_seed_ =
    objc.registerName("unlockWithOptions:seed:");
late final _sel_allocationSize = objc.registerName("allocationSize");
late final _sel_width = objc.registerName("width");
late final _sel_height = objc.registerName("height");
late final _sel_baseAddress = objc.registerName("baseAddress");
final _objc_msgSend_987 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_pixelFormat = objc.registerName("pixelFormat");
late final _sel_bytesPerRow = objc.registerName("bytesPerRow");
late final _sel_bytesPerElement = objc.registerName("bytesPerElement");
late final _sel_elementWidth = objc.registerName("elementWidth");
late final _sel_elementHeight = objc.registerName("elementHeight");
late final _sel_seed = objc.registerName("seed");
final _objc_msgSend_988 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Uint32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_planeCount = objc.registerName("planeCount");
late final _sel_widthOfPlaneAtIndex_ =
    objc.registerName("widthOfPlaneAtIndex:");
final _objc_msgSend_989 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_heightOfPlaneAtIndex_ =
    objc.registerName("heightOfPlaneAtIndex:");
late final _sel_bytesPerRowOfPlaneAtIndex_ =
    objc.registerName("bytesPerRowOfPlaneAtIndex:");
late final _sel_bytesPerElementOfPlaneAtIndex_ =
    objc.registerName("bytesPerElementOfPlaneAtIndex:");
late final _sel_elementWidthOfPlaneAtIndex_ =
    objc.registerName("elementWidthOfPlaneAtIndex:");
late final _sel_elementHeightOfPlaneAtIndex_ =
    objc.registerName("elementHeightOfPlaneAtIndex:");
late final _sel_baseAddressOfPlaneAtIndex_ =
    objc.registerName("baseAddressOfPlaneAtIndex:");
late final _sel_setAttachment_forKey_ =
    objc.registerName("setAttachment:forKey:");
final _objc_msgSend_990 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attachmentForKey_ = objc.registerName("attachmentForKey:");
late final _sel_removeAttachmentForKey_ =
    objc.registerName("removeAttachmentForKey:");
late final _sel_setAllAttachments_ = objc.registerName("setAllAttachments:");
late final _sel_allAttachments = objc.registerName("allAttachments");
late final _sel_removeAllAttachments =
    objc.registerName("removeAllAttachments");
late final _sel_isInUse = objc.registerName("isInUse");
late final _sel_incrementUseCount = objc.registerName("incrementUseCount");
late final _sel_decrementUseCount = objc.registerName("decrementUseCount");
late final _sel_localUseCount = objc.registerName("localUseCount");
late final _sel_allowsPixelSizeCasting =
    objc.registerName("allowsPixelSizeCasting");

enum IOSurfacePurgeabilityState {
  kIOSurfacePurgeableNonVolatile(0),
  kIOSurfacePurgeableVolatile(1),
  kIOSurfacePurgeableEmpty(2),
  kIOSurfacePurgeableKeepCurrent(3);

  final int value;
  const IOSurfacePurgeabilityState(this.value);

  static IOSurfacePurgeabilityState fromValue(int value) => switch (value) {
        0 => kIOSurfacePurgeableNonVolatile,
        1 => kIOSurfacePurgeableVolatile,
        2 => kIOSurfacePurgeableEmpty,
        3 => kIOSurfacePurgeableKeepCurrent,
        _ => throw ArgumentError(
            "Unknown value for IOSurfacePurgeabilityState: $value"),
      };
}

late final _sel_setPurgeable_oldState_ =
    objc.registerName("setPurgeable:oldState:");
final _objc_msgSend_991 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Uint32,
                ffi.Pointer<ffi.Uint32>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<ffi.Uint32>)>();
final _objc_msgSend_992 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithMTLTexture_commandBuffer_ =
    objc.registerName("initWithMTLTexture:commandBuffer:");
final _objc_msgSend_993 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

enum MTLPixelFormat {
  MTLPixelFormatInvalid(0),
  MTLPixelFormatA8Unorm(1),
  MTLPixelFormatR8Unorm(10),
  MTLPixelFormatR8Unorm_sRGB(11),
  MTLPixelFormatR8Snorm(12),
  MTLPixelFormatR8Uint(13),
  MTLPixelFormatR8Sint(14),
  MTLPixelFormatR16Unorm(20),
  MTLPixelFormatR16Snorm(22),
  MTLPixelFormatR16Uint(23),
  MTLPixelFormatR16Sint(24),
  MTLPixelFormatR16Float(25),
  MTLPixelFormatRG8Unorm(30),
  MTLPixelFormatRG8Unorm_sRGB(31),
  MTLPixelFormatRG8Snorm(32),
  MTLPixelFormatRG8Uint(33),
  MTLPixelFormatRG8Sint(34),
  MTLPixelFormatB5G6R5Unorm(40),
  MTLPixelFormatA1BGR5Unorm(41),
  MTLPixelFormatABGR4Unorm(42),
  MTLPixelFormatBGR5A1Unorm(43),
  MTLPixelFormatR32Uint(53),
  MTLPixelFormatR32Sint(54),
  MTLPixelFormatR32Float(55),
  MTLPixelFormatRG16Unorm(60),
  MTLPixelFormatRG16Snorm(62),
  MTLPixelFormatRG16Uint(63),
  MTLPixelFormatRG16Sint(64),
  MTLPixelFormatRG16Float(65),
  MTLPixelFormatRGBA8Unorm(70),
  MTLPixelFormatRGBA8Unorm_sRGB(71),
  MTLPixelFormatRGBA8Snorm(72),
  MTLPixelFormatRGBA8Uint(73),
  MTLPixelFormatRGBA8Sint(74),
  MTLPixelFormatBGRA8Unorm(80),
  MTLPixelFormatBGRA8Unorm_sRGB(81),
  MTLPixelFormatRGB10A2Unorm(90),
  MTLPixelFormatRGB10A2Uint(91),
  MTLPixelFormatRG11B10Float(92),
  MTLPixelFormatRGB9E5Float(93),
  MTLPixelFormatBGR10A2Unorm(94),
  MTLPixelFormatBGR10_XR(554),
  MTLPixelFormatBGR10_XR_sRGB(555),
  MTLPixelFormatRG32Uint(103),
  MTLPixelFormatRG32Sint(104),
  MTLPixelFormatRG32Float(105),
  MTLPixelFormatRGBA16Unorm(110),
  MTLPixelFormatRGBA16Snorm(112),
  MTLPixelFormatRGBA16Uint(113),
  MTLPixelFormatRGBA16Sint(114),
  MTLPixelFormatRGBA16Float(115),
  MTLPixelFormatBGRA10_XR(552),
  MTLPixelFormatBGRA10_XR_sRGB(553),
  MTLPixelFormatRGBA32Uint(123),
  MTLPixelFormatRGBA32Sint(124),
  MTLPixelFormatRGBA32Float(125),
  MTLPixelFormatBC1_RGBA(130),
  MTLPixelFormatBC1_RGBA_sRGB(131),
  MTLPixelFormatBC2_RGBA(132),
  MTLPixelFormatBC2_RGBA_sRGB(133),
  MTLPixelFormatBC3_RGBA(134),
  MTLPixelFormatBC3_RGBA_sRGB(135),
  MTLPixelFormatBC4_RUnorm(140),
  MTLPixelFormatBC4_RSnorm(141),
  MTLPixelFormatBC5_RGUnorm(142),
  MTLPixelFormatBC5_RGSnorm(143),
  MTLPixelFormatBC6H_RGBFloat(150),
  MTLPixelFormatBC6H_RGBUfloat(151),
  MTLPixelFormatBC7_RGBAUnorm(152),
  MTLPixelFormatBC7_RGBAUnorm_sRGB(153),
  MTLPixelFormatPVRTC_RGB_2BPP(160),
  MTLPixelFormatPVRTC_RGB_2BPP_sRGB(161),
  MTLPixelFormatPVRTC_RGB_4BPP(162),
  MTLPixelFormatPVRTC_RGB_4BPP_sRGB(163),
  MTLPixelFormatPVRTC_RGBA_2BPP(164),
  MTLPixelFormatPVRTC_RGBA_2BPP_sRGB(165),
  MTLPixelFormatPVRTC_RGBA_4BPP(166),
  MTLPixelFormatPVRTC_RGBA_4BPP_sRGB(167),
  MTLPixelFormatEAC_R11Unorm(170),
  MTLPixelFormatEAC_R11Snorm(172),
  MTLPixelFormatEAC_RG11Unorm(174),
  MTLPixelFormatEAC_RG11Snorm(176),
  MTLPixelFormatEAC_RGBA8(178),
  MTLPixelFormatEAC_RGBA8_sRGB(179),
  MTLPixelFormatETC2_RGB8(180),
  MTLPixelFormatETC2_RGB8_sRGB(181),
  MTLPixelFormatETC2_RGB8A1(182),
  MTLPixelFormatETC2_RGB8A1_sRGB(183),
  MTLPixelFormatASTC_4x4_sRGB(186),
  MTLPixelFormatASTC_5x4_sRGB(187),
  MTLPixelFormatASTC_5x5_sRGB(188),
  MTLPixelFormatASTC_6x5_sRGB(189),
  MTLPixelFormatASTC_6x6_sRGB(190),
  MTLPixelFormatASTC_8x5_sRGB(192),
  MTLPixelFormatASTC_8x6_sRGB(193),
  MTLPixelFormatASTC_8x8_sRGB(194),
  MTLPixelFormatASTC_10x5_sRGB(195),
  MTLPixelFormatASTC_10x6_sRGB(196),
  MTLPixelFormatASTC_10x8_sRGB(197),
  MTLPixelFormatASTC_10x10_sRGB(198),
  MTLPixelFormatASTC_12x10_sRGB(199),
  MTLPixelFormatASTC_12x12_sRGB(200),
  MTLPixelFormatASTC_4x4_LDR(204),
  MTLPixelFormatASTC_5x4_LDR(205),
  MTLPixelFormatASTC_5x5_LDR(206),
  MTLPixelFormatASTC_6x5_LDR(207),
  MTLPixelFormatASTC_6x6_LDR(208),
  MTLPixelFormatASTC_8x5_LDR(210),
  MTLPixelFormatASTC_8x6_LDR(211),
  MTLPixelFormatASTC_8x8_LDR(212),
  MTLPixelFormatASTC_10x5_LDR(213),
  MTLPixelFormatASTC_10x6_LDR(214),
  MTLPixelFormatASTC_10x8_LDR(215),
  MTLPixelFormatASTC_10x10_LDR(216),
  MTLPixelFormatASTC_12x10_LDR(217),
  MTLPixelFormatASTC_12x12_LDR(218),
  MTLPixelFormatASTC_4x4_HDR(222),
  MTLPixelFormatASTC_5x4_HDR(223),
  MTLPixelFormatASTC_5x5_HDR(224),
  MTLPixelFormatASTC_6x5_HDR(225),
  MTLPixelFormatASTC_6x6_HDR(226),
  MTLPixelFormatASTC_8x5_HDR(228),
  MTLPixelFormatASTC_8x6_HDR(229),
  MTLPixelFormatASTC_8x8_HDR(230),
  MTLPixelFormatASTC_10x5_HDR(231),
  MTLPixelFormatASTC_10x6_HDR(232),
  MTLPixelFormatASTC_10x8_HDR(233),
  MTLPixelFormatASTC_10x10_HDR(234),
  MTLPixelFormatASTC_12x10_HDR(235),
  MTLPixelFormatASTC_12x12_HDR(236),
  MTLPixelFormatGBGR422(240),
  MTLPixelFormatBGRG422(241),
  MTLPixelFormatDepth16Unorm(250),
  MTLPixelFormatDepth32Float(252),
  MTLPixelFormatStencil8(253),
  MTLPixelFormatDepth24Unorm_Stencil8(255),
  MTLPixelFormatDepth32Float_Stencil8(260),
  MTLPixelFormatX32_Stencil8(261),
  MTLPixelFormatX24_Stencil8(262);

  final int value;
  const MTLPixelFormat(this.value);

  static MTLPixelFormat fromValue(int value) => switch (value) {
        0 => MTLPixelFormatInvalid,
        1 => MTLPixelFormatA8Unorm,
        10 => MTLPixelFormatR8Unorm,
        11 => MTLPixelFormatR8Unorm_sRGB,
        12 => MTLPixelFormatR8Snorm,
        13 => MTLPixelFormatR8Uint,
        14 => MTLPixelFormatR8Sint,
        20 => MTLPixelFormatR16Unorm,
        22 => MTLPixelFormatR16Snorm,
        23 => MTLPixelFormatR16Uint,
        24 => MTLPixelFormatR16Sint,
        25 => MTLPixelFormatR16Float,
        30 => MTLPixelFormatRG8Unorm,
        31 => MTLPixelFormatRG8Unorm_sRGB,
        32 => MTLPixelFormatRG8Snorm,
        33 => MTLPixelFormatRG8Uint,
        34 => MTLPixelFormatRG8Sint,
        40 => MTLPixelFormatB5G6R5Unorm,
        41 => MTLPixelFormatA1BGR5Unorm,
        42 => MTLPixelFormatABGR4Unorm,
        43 => MTLPixelFormatBGR5A1Unorm,
        53 => MTLPixelFormatR32Uint,
        54 => MTLPixelFormatR32Sint,
        55 => MTLPixelFormatR32Float,
        60 => MTLPixelFormatRG16Unorm,
        62 => MTLPixelFormatRG16Snorm,
        63 => MTLPixelFormatRG16Uint,
        64 => MTLPixelFormatRG16Sint,
        65 => MTLPixelFormatRG16Float,
        70 => MTLPixelFormatRGBA8Unorm,
        71 => MTLPixelFormatRGBA8Unorm_sRGB,
        72 => MTLPixelFormatRGBA8Snorm,
        73 => MTLPixelFormatRGBA8Uint,
        74 => MTLPixelFormatRGBA8Sint,
        80 => MTLPixelFormatBGRA8Unorm,
        81 => MTLPixelFormatBGRA8Unorm_sRGB,
        90 => MTLPixelFormatRGB10A2Unorm,
        91 => MTLPixelFormatRGB10A2Uint,
        92 => MTLPixelFormatRG11B10Float,
        93 => MTLPixelFormatRGB9E5Float,
        94 => MTLPixelFormatBGR10A2Unorm,
        554 => MTLPixelFormatBGR10_XR,
        555 => MTLPixelFormatBGR10_XR_sRGB,
        103 => MTLPixelFormatRG32Uint,
        104 => MTLPixelFormatRG32Sint,
        105 => MTLPixelFormatRG32Float,
        110 => MTLPixelFormatRGBA16Unorm,
        112 => MTLPixelFormatRGBA16Snorm,
        113 => MTLPixelFormatRGBA16Uint,
        114 => MTLPixelFormatRGBA16Sint,
        115 => MTLPixelFormatRGBA16Float,
        552 => MTLPixelFormatBGRA10_XR,
        553 => MTLPixelFormatBGRA10_XR_sRGB,
        123 => MTLPixelFormatRGBA32Uint,
        124 => MTLPixelFormatRGBA32Sint,
        125 => MTLPixelFormatRGBA32Float,
        130 => MTLPixelFormatBC1_RGBA,
        131 => MTLPixelFormatBC1_RGBA_sRGB,
        132 => MTLPixelFormatBC2_RGBA,
        133 => MTLPixelFormatBC2_RGBA_sRGB,
        134 => MTLPixelFormatBC3_RGBA,
        135 => MTLPixelFormatBC3_RGBA_sRGB,
        140 => MTLPixelFormatBC4_RUnorm,
        141 => MTLPixelFormatBC4_RSnorm,
        142 => MTLPixelFormatBC5_RGUnorm,
        143 => MTLPixelFormatBC5_RGSnorm,
        150 => MTLPixelFormatBC6H_RGBFloat,
        151 => MTLPixelFormatBC6H_RGBUfloat,
        152 => MTLPixelFormatBC7_RGBAUnorm,
        153 => MTLPixelFormatBC7_RGBAUnorm_sRGB,
        160 => MTLPixelFormatPVRTC_RGB_2BPP,
        161 => MTLPixelFormatPVRTC_RGB_2BPP_sRGB,
        162 => MTLPixelFormatPVRTC_RGB_4BPP,
        163 => MTLPixelFormatPVRTC_RGB_4BPP_sRGB,
        164 => MTLPixelFormatPVRTC_RGBA_2BPP,
        165 => MTLPixelFormatPVRTC_RGBA_2BPP_sRGB,
        166 => MTLPixelFormatPVRTC_RGBA_4BPP,
        167 => MTLPixelFormatPVRTC_RGBA_4BPP_sRGB,
        170 => MTLPixelFormatEAC_R11Unorm,
        172 => MTLPixelFormatEAC_R11Snorm,
        174 => MTLPixelFormatEAC_RG11Unorm,
        176 => MTLPixelFormatEAC_RG11Snorm,
        178 => MTLPixelFormatEAC_RGBA8,
        179 => MTLPixelFormatEAC_RGBA8_sRGB,
        180 => MTLPixelFormatETC2_RGB8,
        181 => MTLPixelFormatETC2_RGB8_sRGB,
        182 => MTLPixelFormatETC2_RGB8A1,
        183 => MTLPixelFormatETC2_RGB8A1_sRGB,
        186 => MTLPixelFormatASTC_4x4_sRGB,
        187 => MTLPixelFormatASTC_5x4_sRGB,
        188 => MTLPixelFormatASTC_5x5_sRGB,
        189 => MTLPixelFormatASTC_6x5_sRGB,
        190 => MTLPixelFormatASTC_6x6_sRGB,
        192 => MTLPixelFormatASTC_8x5_sRGB,
        193 => MTLPixelFormatASTC_8x6_sRGB,
        194 => MTLPixelFormatASTC_8x8_sRGB,
        195 => MTLPixelFormatASTC_10x5_sRGB,
        196 => MTLPixelFormatASTC_10x6_sRGB,
        197 => MTLPixelFormatASTC_10x8_sRGB,
        198 => MTLPixelFormatASTC_10x10_sRGB,
        199 => MTLPixelFormatASTC_12x10_sRGB,
        200 => MTLPixelFormatASTC_12x12_sRGB,
        204 => MTLPixelFormatASTC_4x4_LDR,
        205 => MTLPixelFormatASTC_5x4_LDR,
        206 => MTLPixelFormatASTC_5x5_LDR,
        207 => MTLPixelFormatASTC_6x5_LDR,
        208 => MTLPixelFormatASTC_6x6_LDR,
        210 => MTLPixelFormatASTC_8x5_LDR,
        211 => MTLPixelFormatASTC_8x6_LDR,
        212 => MTLPixelFormatASTC_8x8_LDR,
        213 => MTLPixelFormatASTC_10x5_LDR,
        214 => MTLPixelFormatASTC_10x6_LDR,
        215 => MTLPixelFormatASTC_10x8_LDR,
        216 => MTLPixelFormatASTC_10x10_LDR,
        217 => MTLPixelFormatASTC_12x10_LDR,
        218 => MTLPixelFormatASTC_12x12_LDR,
        222 => MTLPixelFormatASTC_4x4_HDR,
        223 => MTLPixelFormatASTC_5x4_HDR,
        224 => MTLPixelFormatASTC_5x5_HDR,
        225 => MTLPixelFormatASTC_6x5_HDR,
        226 => MTLPixelFormatASTC_6x6_HDR,
        228 => MTLPixelFormatASTC_8x5_HDR,
        229 => MTLPixelFormatASTC_8x6_HDR,
        230 => MTLPixelFormatASTC_8x8_HDR,
        231 => MTLPixelFormatASTC_10x5_HDR,
        232 => MTLPixelFormatASTC_10x6_HDR,
        233 => MTLPixelFormatASTC_10x8_HDR,
        234 => MTLPixelFormatASTC_10x10_HDR,
        235 => MTLPixelFormatASTC_12x10_HDR,
        236 => MTLPixelFormatASTC_12x12_HDR,
        240 => MTLPixelFormatGBGR422,
        241 => MTLPixelFormatBGRG422,
        250 => MTLPixelFormatDepth16Unorm,
        252 => MTLPixelFormatDepth32Float,
        253 => MTLPixelFormatStencil8,
        255 => MTLPixelFormatDepth24Unorm_Stencil8,
        260 => MTLPixelFormatDepth32Float_Stencil8,
        261 => MTLPixelFormatX32_Stencil8,
        262 => MTLPixelFormatX24_Stencil8,
        _ => throw ArgumentError("Unknown value for MTLPixelFormat: $value"),
      };
}

ffi.Pointer<objc.ObjCObject> _ObjCBlock_objcObjCObject_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function()>>()
        .asFunction<ffi.Pointer<objc.ObjCObject> Function()>()();
ffi.Pointer<objc.ObjCObject> _ObjCBlock_objcObjCObject_closureTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function())();

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>`.
abstract final class ObjCBlock_objcObjCObject {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function()>>
              ptr) =>
      objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>(
          objc.newPointerBlock(
              _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>)>(
                      _ObjCBlock_objcObjCObject_fnPtrTrampoline)
                  .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()> fromFunction(
          objc.ObjCObjectBase Function() fn) =>
      objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>)>(
                      _ObjCBlock_objcObjCObject_closureTrampoline)
                  .cast(),
              () => fn().retainAndReturnPointer()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>`.
extension ObjCBlock_objcObjCObject_CallExtension
    on objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()> {
  objc.ObjCObjectBase call() => objc.ObjCObjectBase(
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block)>>()
          .asFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlockImpl>)>()(
        pointer,
      ),
      retain: false,
      release: true);
}

late final _sel_initWithWidth_height_pixelFormat_commandBuffer_mtlTextureProvider_ =
    objc.registerName(
        "initWithWidth:height:pixelFormat:commandBuffer:mtlTextureProvider:");
final _objc_msgSend_994 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_initWithGLTexture_target_width_height_ =
    objc.registerName("initWithGLTexture:target:width:height:");
final _objc_msgSend_995 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.UnsignedInt,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int, int, int)>();
late final _sel_initWithBitmapData_width_height_bytesPerRow_format_ =
    objc.registerName("initWithBitmapData:width:height:bytesPerRow:format:");
final _objc_msgSend_996 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Int)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Void>,
            int,
            int,
            int,
            int)>();

enum CIRenderDestinationAlphaMode {
  CIRenderDestinationAlphaNone(0),
  CIRenderDestinationAlphaPremultiplied(1),
  CIRenderDestinationAlphaUnpremultiplied(2);

  final int value;
  const CIRenderDestinationAlphaMode(this.value);

  static CIRenderDestinationAlphaMode fromValue(int value) => switch (value) {
        0 => CIRenderDestinationAlphaNone,
        1 => CIRenderDestinationAlphaPremultiplied,
        2 => CIRenderDestinationAlphaUnpremultiplied,
        _ => throw ArgumentError(
            "Unknown value for CIRenderDestinationAlphaMode: $value"),
      };
}

late final _sel_alphaMode = objc.registerName("alphaMode");
final _objc_msgSend_997 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAlphaMode_ = objc.registerName("setAlphaMode:");
final _objc_msgSend_998 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isFlipped = objc.registerName("isFlipped");
late final _sel_setFlipped_ = objc.registerName("setFlipped:");
late final _sel_isDithered = objc.registerName("isDithered");
late final _sel_setDithered_ = objc.registerName("setDithered:");
late final _sel_isClamped = objc.registerName("isClamped");
late final _sel_setClamped_ = objc.registerName("setClamped:");
late final _sel_setColorSpace_ = objc.registerName("setColorSpace:");
final _objc_msgSend_999 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColorSpace>)>();

/// CIBlendKernel
class CIBlendKernel extends CIColorKernel {
  CIBlendKernel._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIBlendKernel] that points to the same underlying object as [other].
  CIBlendKernel.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIBlendKernel] that wraps the given raw object pointer.
  CIBlendKernel.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIBlendKernel].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CIBlendKernel);
  }

  /// kernelWithString:
  static CIBlendKernel? kernelWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        _class_CIBlendKernel, _sel_kernelWithString_, string.pointer);
    return _ret.address == 0
        ? null
        : CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// applyWithForeground:background:
  CIImage? applyWithForeground_background_(
      CIImage foreground, CIImage background) {
    final _ret = _objc_msgSend_1000(
        this.pointer,
        _sel_applyWithForeground_background_,
        foreground.pointer,
        background.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// applyWithForeground:background:colorSpace:
  CIImage? applyWithForeground_background_colorSpace_(CIImage foreground,
      CIImage background, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_1001(
        this.pointer,
        _sel_applyWithForeground_background_colorSpace_,
        foreground.pointer,
        background.pointer,
        colorSpace);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// componentAdd
  static CIBlendKernel getComponentAdd() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_componentAdd);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// componentMultiply
  static CIBlendKernel getComponentMultiply() {
    final _ret =
        _objc_msgSend_1002(_class_CIBlendKernel, _sel_componentMultiply);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// componentMin
  static CIBlendKernel getComponentMin() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_componentMin);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// componentMax
  static CIBlendKernel getComponentMax() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_componentMax);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// clear
  static CIBlendKernel getClear() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_clear);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// source
  static CIBlendKernel getSource() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_source);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// destination
  static CIBlendKernel getDestination() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_destination);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceOver
  static CIBlendKernel getSourceOver() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_sourceOver);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// destinationOver
  static CIBlendKernel getDestinationOver() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_destinationOver);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceIn
  static CIBlendKernel getSourceIn() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_sourceIn);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// destinationIn
  static CIBlendKernel getDestinationIn() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_destinationIn);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceOut
  static CIBlendKernel getSourceOut() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_sourceOut);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// destinationOut
  static CIBlendKernel getDestinationOut() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_destinationOut);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceAtop
  static CIBlendKernel getSourceAtop() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_sourceAtop);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// destinationAtop
  static CIBlendKernel getDestinationAtop() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_destinationAtop);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// exclusiveOr
  static CIBlendKernel getExclusiveOr() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_exclusiveOr);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// multiply
  static CIBlendKernel getMultiply() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_multiply);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// screen
  static CIBlendKernel getScreen() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_screen);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// overlay
  static CIBlendKernel getOverlay() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_overlay);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// darken
  static CIBlendKernel getDarken() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_darken);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// lighten
  static CIBlendKernel getLighten() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_lighten);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorDodge
  static CIBlendKernel getColorDodge() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_colorDodge);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorBurn
  static CIBlendKernel getColorBurn() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_colorBurn);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// hardLight
  static CIBlendKernel getHardLight() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_hardLight);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// softLight
  static CIBlendKernel getSoftLight() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_softLight);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// difference
  static CIBlendKernel getDifference() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_difference);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// exclusion
  static CIBlendKernel getExclusion() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_exclusion);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// hue
  static CIBlendKernel getHue() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_hue);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// saturation
  static CIBlendKernel getSaturation() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_saturation);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// color
  static CIBlendKernel getColor() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_color);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// luminosity
  static CIBlendKernel getLuminosity() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_luminosity);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// subtract
  static CIBlendKernel getSubtract() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_subtract);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// divide
  static CIBlendKernel getDivide() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_divide);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// linearBurn
  static CIBlendKernel getLinearBurn() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_linearBurn);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// linearDodge
  static CIBlendKernel getLinearDodge() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_linearDodge);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// vividLight
  static CIBlendKernel getVividLight() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_vividLight);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// linearLight
  static CIBlendKernel getLinearLight() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_linearLight);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// pinLight
  static CIBlendKernel getPinLight() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_pinLight);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// hardMix
  static CIBlendKernel getHardMix() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_hardMix);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// darkerColor
  static CIBlendKernel getDarkerColor() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_darkerColor);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// lighterColor
  static CIBlendKernel getLighterColor() {
    final _ret = _objc_msgSend_1002(_class_CIBlendKernel, _sel_lighterColor);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelsWithString:
  static objc.NSArray? kernelsWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_302(
        _class_CIBlendKernel, _sel_kernelsWithString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelsWithMetalString:error:
  static objc.NSArray? kernelsWithMetalString_error_(
      objc.NSString source, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_293(_class_CIBlendKernel,
        _sel_kernelsWithMetalString_error_, source.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelWithFunctionName:fromMetalLibraryData:error:
  static CIBlendKernel? kernelWithFunctionName_fromMetalLibraryData_error_(
      objc.NSString name,
      objc.NSData data,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_962(
        _class_CIBlendKernel,
        _sel_kernelWithFunctionName_fromMetalLibraryData_error_,
        name.pointer,
        data.pointer,
        error);
    return _ret.address == 0
        ? null
        : CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelWithFunctionName:fromMetalLibraryData:outputPixelFormat:error:
  static CIBlendKernel?
      kernelWithFunctionName_fromMetalLibraryData_outputPixelFormat_error_(
          objc.NSString name,
          objc.NSData data,
          int format,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_963(
        _class_CIBlendKernel,
        _sel_kernelWithFunctionName_fromMetalLibraryData_outputPixelFormat_error_,
        name.pointer,
        data.pointer,
        format,
        error);
    return _ret.address == 0
        ? null
        : CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelNamesFromMetalLibraryData:
  static objc.NSArray kernelNamesFromMetalLibraryData_(objc.NSData data) {
    final _ret = _objc_msgSend_964(_class_CIBlendKernel,
        _sel_kernelNamesFromMetalLibraryData_, data.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CIBlendKernel init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIBlendKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CIBlendKernel new1() {
    final _ret = _objc_msgSend_19(_class_CIBlendKernel, _sel_new);
    return CIBlendKernel.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIBlendKernel allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_CIBlendKernel, _sel_allocWithZone_, zone);
    return CIBlendKernel.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIBlendKernel alloc() {
    final _ret = _objc_msgSend_19(_class_CIBlendKernel, _sel_alloc);
    return CIBlendKernel.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIBlendKernel,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIBlendKernel,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIBlendKernel, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIBlendKernel, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIBlendKernel,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIBlendKernel,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIBlendKernel,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_CIBlendKernel, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_CIBlendKernel, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIBlendKernel = objc.getClass("CIBlendKernel");
late final _sel_applyWithForeground_background_ =
    objc.registerName("applyWithForeground:background:");
final _objc_msgSend_1000 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_applyWithForeground_background_colorSpace_ =
    objc.registerName("applyWithForeground:background:colorSpace:");
final _objc_msgSend_1001 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<CGColorSpace>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_componentAdd = objc.registerName("componentAdd");
final _objc_msgSend_1002 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_componentMultiply = objc.registerName("componentMultiply");
late final _sel_componentMin = objc.registerName("componentMin");
late final _sel_componentMax = objc.registerName("componentMax");
late final _sel_clear = objc.registerName("clear");
late final _sel_source = objc.registerName("source");
late final _sel_destination = objc.registerName("destination");
late final _sel_sourceOver = objc.registerName("sourceOver");
late final _sel_destinationOver = objc.registerName("destinationOver");
late final _sel_sourceIn = objc.registerName("sourceIn");
late final _sel_destinationIn = objc.registerName("destinationIn");
late final _sel_sourceOut = objc.registerName("sourceOut");
late final _sel_destinationOut = objc.registerName("destinationOut");
late final _sel_sourceAtop = objc.registerName("sourceAtop");
late final _sel_destinationAtop = objc.registerName("destinationAtop");
late final _sel_exclusiveOr = objc.registerName("exclusiveOr");
late final _sel_multiply = objc.registerName("multiply");
late final _sel_screen = objc.registerName("screen");
late final _sel_overlay = objc.registerName("overlay");
late final _sel_darken = objc.registerName("darken");
late final _sel_lighten = objc.registerName("lighten");
late final _sel_colorDodge = objc.registerName("colorDodge");
late final _sel_colorBurn = objc.registerName("colorBurn");
late final _sel_hardLight = objc.registerName("hardLight");
late final _sel_softLight = objc.registerName("softLight");
late final _sel_difference = objc.registerName("difference");
late final _sel_exclusion = objc.registerName("exclusion");
late final _sel_hue = objc.registerName("hue");
late final _sel_saturation = objc.registerName("saturation");
late final _sel_color = objc.registerName("color");
late final _sel_luminosity = objc.registerName("luminosity");
late final _sel_subtract = objc.registerName("subtract");
late final _sel_divide = objc.registerName("divide");
late final _sel_linearBurn = objc.registerName("linearBurn");
late final _sel_linearDodge = objc.registerName("linearDodge");
late final _sel_vividLight = objc.registerName("vividLight");
late final _sel_linearLight = objc.registerName("linearLight");
late final _sel_pinLight = objc.registerName("pinLight");
late final _sel_hardMix = objc.registerName("hardMix");
late final _sel_darkerColor = objc.registerName("darkerColor");
late final _sel_lighterColor = objc.registerName("lighterColor");

/// CIColorKernel
class CIColorKernel extends CIKernel {
  CIColorKernel._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIColorKernel] that points to the same underlying object as [other].
  CIColorKernel.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIColorKernel] that wraps the given raw object pointer.
  CIColorKernel.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIColorKernel].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CIColorKernel);
  }

  /// kernelWithString:
  static CIColorKernel? kernelWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        _class_CIColorKernel, _sel_kernelWithString_, string.pointer);
    return _ret.address == 0
        ? null
        : CIColorKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// applyWithExtent:arguments:
  CIImage? applyWithExtent_arguments_(CGRect extent, objc.NSArray? args) {
    final _ret = _objc_msgSend_1003(this.pointer,
        _sel_applyWithExtent_arguments_, extent, args?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelsWithString:
  static objc.NSArray? kernelsWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_302(
        _class_CIColorKernel, _sel_kernelsWithString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelsWithMetalString:error:
  static objc.NSArray? kernelsWithMetalString_error_(
      objc.NSString source, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_293(_class_CIColorKernel,
        _sel_kernelsWithMetalString_error_, source.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelWithFunctionName:fromMetalLibraryData:error:
  static CIColorKernel? kernelWithFunctionName_fromMetalLibraryData_error_(
      objc.NSString name,
      objc.NSData data,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_962(
        _class_CIColorKernel,
        _sel_kernelWithFunctionName_fromMetalLibraryData_error_,
        name.pointer,
        data.pointer,
        error);
    return _ret.address == 0
        ? null
        : CIColorKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelWithFunctionName:fromMetalLibraryData:outputPixelFormat:error:
  static CIColorKernel?
      kernelWithFunctionName_fromMetalLibraryData_outputPixelFormat_error_(
          objc.NSString name,
          objc.NSData data,
          int format,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_963(
        _class_CIColorKernel,
        _sel_kernelWithFunctionName_fromMetalLibraryData_outputPixelFormat_error_,
        name.pointer,
        data.pointer,
        format,
        error);
    return _ret.address == 0
        ? null
        : CIColorKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// kernelNamesFromMetalLibraryData:
  static objc.NSArray kernelNamesFromMetalLibraryData_(objc.NSData data) {
    final _ret = _objc_msgSend_964(_class_CIColorKernel,
        _sel_kernelNamesFromMetalLibraryData_, data.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CIColorKernel init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIColorKernel.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static CIColorKernel new1() {
    final _ret = _objc_msgSend_19(_class_CIColorKernel, _sel_new);
    return CIColorKernel.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIColorKernel allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_CIColorKernel, _sel_allocWithZone_, zone);
    return CIColorKernel.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIColorKernel alloc() {
    final _ret = _objc_msgSend_19(_class_CIColorKernel, _sel_alloc);
    return CIColorKernel.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIColorKernel,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIColorKernel,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIColorKernel, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIColorKernel, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIColorKernel,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIColorKernel,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIColorKernel,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_CIColorKernel, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_CIColorKernel, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIColorKernel = objc.getClass("CIColorKernel");
late final _sel_applyWithExtent_arguments_ =
    objc.registerName("applyWithExtent:arguments:");
final _objc_msgSend_1003 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_blendKernel = objc.registerName("blendKernel");
final _objc_msgSend_1004 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setBlendKernel_ = objc.registerName("setBlendKernel:");
final _objc_msgSend_1005 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_blendsInDestinationColorSpace =
    objc.registerName("blendsInDestinationColorSpace");
late final _sel_setBlendsInDestinationColorSpace_ =
    objc.registerName("setBlendsInDestinationColorSpace:");
late final _sel_startTaskToRender_fromRect_toDestination_atPoint_error_ = objc
    .registerName("startTaskToRender:fromRect:toDestination:atPoint:error:");
final _objc_msgSend_1006 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect,
                ffi.Pointer<objc.ObjCObject>,
                CGPoint,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>,
            CGPoint,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_startTaskToRender_toDestination_error_ =
    objc.registerName("startTaskToRender:toDestination:error:");
final _objc_msgSend_1007 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_prepareRender_fromRect_toDestination_atPoint_error_ =
    objc.registerName("prepareRender:fromRect:toDestination:atPoint:error:");
final _objc_msgSend_1008 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CGRect,
                ffi.Pointer<objc.ObjCObject>,
                CGPoint,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>,
            CGPoint,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_startTaskToClear_error_ =
    objc.registerName("startTaskToClear:error:");
final _objc_msgSend_1009 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_finishWithImage_context_ =
    objc.registerName("finishWithImage:context:");
final _objc_msgSend_1010 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_finishWithError_ = objc.registerName("finishWithError:");
late final _sel_videoCompositionWithAsset_applyingCIFiltersWithHandler_ = objc
    .registerName("videoCompositionWithAsset:applyingCIFiltersWithHandler:");
final _objc_msgSend_1011 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_videoCompositionWithAsset_applyingCIFiltersWithHandler_completionHandler_ =
    objc.registerName(
        "videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler:");
final _objc_msgSend_1012 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_isValidForAsset_timeRange_validationDelegate_ =
    objc.registerName("isValidForAsset:timeRange:validationDelegate:");
final _objc_msgSend_1013 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CMTimeRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CMTimeRange,
            ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_bool_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        bool arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Bool arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
            .asFunction<void Function(bool, ffi.Pointer<objc.ObjCObject>)>()(
        arg0, arg1);
void _ObjCBlock_ffiVoid_bool_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        bool arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        bool, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_bool_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_bool_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>
      fromFunction(void Function(bool, objc.NSError?) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_bool_NSError_closureTrampoline)
                          .cast(),
                  (bool arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                      fn(arg0, arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc
      .ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(bool, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_bool_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (bool arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0,
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1,
                    retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_bool_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_bool_NSError_CallExtension on objc
    .ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)> {
  void call(bool arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Bool arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>, bool,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_determineValidityForAsset_timeRange_validationDelegate_completionHandler_ =
    objc.registerName(
        "determineValidityForAsset:timeRange:validationDelegate:completionHandler:");
final _objc_msgSend_1014 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CMTimeRange,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CMTimeRange,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_videoComposition = objc.registerName("videoComposition");
final _objc_msgSend_1015 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVideoComposition_ =
    objc.registerName("setVideoComposition:");
final _objc_msgSend_1016 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_customVideoCompositor =
    objc.registerName("customVideoCompositor");

enum AVAssetTrackGroupOutputHandling {
  AVAssetTrackGroupOutputHandlingNone(0),
  AVAssetTrackGroupOutputHandlingPreserveAlternateTracks(1);

  static const AVAssetTrackGroupOutputHandlingDefaultPolicy =
      AVAssetTrackGroupOutputHandlingNone;

  final int value;
  const AVAssetTrackGroupOutputHandling(this.value);

  static AVAssetTrackGroupOutputHandling fromValue(int value) =>
      switch (value) {
        0 => AVAssetTrackGroupOutputHandlingNone,
        1 => AVAssetTrackGroupOutputHandlingPreserveAlternateTracks,
        _ => throw ArgumentError(
            "Unknown value for AVAssetTrackGroupOutputHandling: $value"),
      };

  @override
  String toString() {
    if (this == AVAssetTrackGroupOutputHandlingNone)
      return "AVAssetTrackGroupOutputHandling.AVAssetTrackGroupOutputHandlingNone, AVAssetTrackGroupOutputHandling.AVAssetTrackGroupOutputHandlingDefaultPolicy";
    return super.toString();
  }
}

late final _sel_audioTrackGroupHandling =
    objc.registerName("audioTrackGroupHandling");
final _objc_msgSend_1017 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAudioTrackGroupHandling_ =
    objc.registerName("setAudioTrackGroupHandling:");
final _objc_msgSend_1018 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_canPerformMultiplePassesOverSourceMediaData =
    objc.registerName("canPerformMultiplePassesOverSourceMediaData");
late final _sel_setCanPerformMultiplePassesOverSourceMediaData_ =
    objc.registerName("setCanPerformMultiplePassesOverSourceMediaData:");
late final _sel_directoryForTemporaryFiles =
    objc.registerName("directoryForTemporaryFiles");
late final _sel_setDirectoryForTemporaryFiles_ =
    objc.registerName("setDirectoryForTemporaryFiles:");

/// AVMetadataGroup
class AVMetadataGroup extends objc.NSObject {
  AVMetadataGroup._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMetadataGroup] that points to the same underlying object as [other].
  AVMetadataGroup.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMetadataGroup] that wraps the given raw object pointer.
  AVMetadataGroup.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMetadataGroup].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMetadataGroup);
  }

  /// items
  objc.NSArray get items {
    final _ret = _objc_msgSend_33(this.pointer, _sel_items);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classifyingLabel
  objc.NSString? get classifyingLabel {
    final _ret = _objc_msgSend_20(this.pointer, _sel_classifyingLabel);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// uniqueID
  objc.NSString? get uniqueID {
    final _ret = _objc_msgSend_20(this.pointer, _sel_uniqueID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVMetadataGroup init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMetadataGroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVMetadataGroup new1() {
    final _ret = _objc_msgSend_19(_class_AVMetadataGroup, _sel_new);
    return AVMetadataGroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVMetadataGroup allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMetadataGroup, _sel_allocWithZone_, zone);
    return AVMetadataGroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVMetadataGroup alloc() {
    final _ret = _objc_msgSend_19(_class_AVMetadataGroup, _sel_alloc);
    return AVMetadataGroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMetadataGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMetadataGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMetadataGroup, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMetadataGroup, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMetadataGroup,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMetadataGroup,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMetadataGroup,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMetadataGroup, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVMetadataGroup, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMetadataGroup = objc.getClass("AVMetadataGroup");
late final _sel_items = objc.registerName("items");
late final _sel_classifyingLabel = objc.registerName("classifyingLabel");
late final _sel_uniqueID = objc.registerName("uniqueID");

/// AVTimedMetadataGroup
class AVTimedMetadataGroup extends AVMetadataGroup {
  AVTimedMetadataGroup._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVTimedMetadataGroup] that points to the same underlying object as [other].
  AVTimedMetadataGroup.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVTimedMetadataGroup] that wraps the given raw object pointer.
  AVTimedMetadataGroup.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVTimedMetadataGroup].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVTimedMetadataGroup);
  }

  /// initWithItems:timeRange:
  AVTimedMetadataGroup initWithItems_timeRange_(
      objc.NSArray items, CMTimeRange timeRange) {
    final _ret = _objc_msgSend_1019(
        this.pointer, _sel_initWithItems_timeRange_, items.pointer, timeRange);
    return AVTimedMetadataGroup.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithSampleBuffer:
  AVTimedMetadataGroup? initWithSampleBuffer_(
      ffi.Pointer<opaqueCMSampleBuffer> sampleBuffer) {
    final _ret = _objc_msgSend_1020(
        this.pointer, _sel_initWithSampleBuffer_, sampleBuffer);
    return _ret.address == 0
        ? null
        : AVTimedMetadataGroup.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// timeRange
  void getTimeRange(ffi.Pointer<CMTimeRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_719Stret(stret, this.pointer, _sel_timeRange)
        : stret.ref = _objc_msgSend_719(this.pointer, _sel_timeRange);
  }

  /// items
  objc.NSArray get items {
    final _ret = _objc_msgSend_33(this.pointer, _sel_items);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// copyFormatDescription
  ffi.Pointer<opaqueCMFormatDescription> copyFormatDescription() {
    return _objc_msgSend_730(this.pointer, _sel_copyFormatDescription);
  }

  /// init
  AVTimedMetadataGroup init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVTimedMetadataGroup.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVTimedMetadataGroup new1() {
    final _ret = _objc_msgSend_19(_class_AVTimedMetadataGroup, _sel_new);
    return AVTimedMetadataGroup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVTimedMetadataGroup allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVTimedMetadataGroup, _sel_allocWithZone_, zone);
    return AVTimedMetadataGroup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVTimedMetadataGroup alloc() {
    final _ret = _objc_msgSend_19(_class_AVTimedMetadataGroup, _sel_alloc);
    return AVTimedMetadataGroup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVTimedMetadataGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVTimedMetadataGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVTimedMetadataGroup, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVTimedMetadataGroup, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVTimedMetadataGroup,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVTimedMetadataGroup,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVTimedMetadataGroup,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVTimedMetadataGroup, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVTimedMetadataGroup, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVTimedMetadataGroup = objc.getClass("AVTimedMetadataGroup");
late final _sel_initWithItems_timeRange_ =
    objc.registerName("initWithItems:timeRange:");
final _objc_msgSend_1019 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CMTimeRange)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CMTimeRange)>();

final class opaqueCMSampleBuffer extends ffi.Opaque {}

late final _sel_initWithSampleBuffer_ =
    objc.registerName("initWithSampleBuffer:");
final _objc_msgSend_1020 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<opaqueCMSampleBuffer>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<opaqueCMSampleBuffer>)>();
late final _sel_copyFormatDescription =
    objc.registerName("copyFormatDescription");

/// AVMutableVideoComposition
class AVMutableVideoComposition extends AVVideoComposition {
  AVMutableVideoComposition._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMutableVideoComposition] that points to the same underlying object as [other].
  AVMutableVideoComposition.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMutableVideoComposition] that wraps the given raw object pointer.
  AVMutableVideoComposition.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMutableVideoComposition].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMutableVideoComposition);
  }

  /// videoComposition
  static AVMutableVideoComposition videoComposition() {
    final _ret = _objc_msgSend_1021(
        _class_AVMutableVideoComposition, _sel_videoComposition);
    return AVMutableVideoComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// videoCompositionWithPropertiesOfAsset:
  static AVVideoComposition videoCompositionWithPropertiesOfAsset_(
      AVAsset asset) {
    final _ret = _objc_msgSend_791(_class_AVMutableVideoComposition,
        _sel_videoCompositionWithPropertiesOfAsset_, asset.pointer);
    return AVVideoComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// videoCompositionWithPropertiesOfAsset:completionHandler:
  static void videoCompositionWithPropertiesOfAsset_completionHandler_(
      AVAsset asset,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_792(
        _class_AVMutableVideoComposition,
        _sel_videoCompositionWithPropertiesOfAsset_completionHandler_,
        asset.pointer,
        completionHandler.pointer);
  }

  /// videoCompositionWithPropertiesOfAsset:prototypeInstruction:
  static AVMutableVideoComposition
      videoCompositionWithPropertiesOfAsset_prototypeInstruction_(
          AVAsset asset, AVVideoCompositionInstruction prototypeInstruction) {
    final _ret = _objc_msgSend_1024(
        _class_AVMutableVideoComposition,
        _sel_videoCompositionWithPropertiesOfAsset_prototypeInstruction_,
        asset.pointer,
        prototypeInstruction.pointer);
    return AVMutableVideoComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// videoCompositionWithPropertiesOfAsset:prototypeInstruction:completionHandler:
  static void
      videoCompositionWithPropertiesOfAsset_prototypeInstruction_completionHandler_(
          AVAsset asset,
          AVVideoCompositionInstruction prototypeInstruction,
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>
              completionHandler) {
    _objc_msgSend_1025(
        _class_AVMutableVideoComposition,
        _sel_videoCompositionWithPropertiesOfAsset_prototypeInstruction_completionHandler_,
        asset.pointer,
        prototypeInstruction.pointer,
        completionHandler.pointer);
  }

  /// customVideoCompositorClass
  objc.ObjCObjectBase? get customVideoCompositorClass {
    final _ret =
        _objc_msgSend_85(this.pointer, _sel_customVideoCompositorClass);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setCustomVideoCompositorClass:
  set customVideoCompositorClass(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(this.pointer, _sel_setCustomVideoCompositorClass_,
        value?.pointer ?? ffi.nullptr);
  }

  /// frameDuration
  void getFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_frameDuration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_frameDuration);
  }

  /// setFrameDuration:
  set frameDuration(CMTime value) {
    return _objc_msgSend_1026(this.pointer, _sel_setFrameDuration_, value);
  }

  /// sourceTrackIDForFrameTiming
  int get sourceTrackIDForFrameTiming {
    return _objc_msgSend_718(this.pointer, _sel_sourceTrackIDForFrameTiming);
  }

  /// setSourceTrackIDForFrameTiming:
  set sourceTrackIDForFrameTiming(int value) {
    return _objc_msgSend_1027(
        this.pointer, _sel_setSourceTrackIDForFrameTiming_, value);
  }

  /// renderSize
  void getRenderSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_renderSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_renderSize);
  }

  /// setRenderSize:
  set renderSize(CGSize value) {
    return _objc_msgSend_819(this.pointer, _sel_setRenderSize_, value);
  }

  /// renderScale
  double get renderScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_renderScale)
        : _objc_msgSend_361(this.pointer, _sel_renderScale);
  }

  /// setRenderScale:
  set renderScale(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setRenderScale_, value);
  }

  /// instructions
  objc.NSArray get instructions {
    final _ret = _objc_msgSend_33(this.pointer, _sel_instructions);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setInstructions:
  set instructions(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setInstructions_, value.pointer);
  }

  /// animationTool
  AVVideoCompositionCoreAnimationTool? get animationTool {
    final _ret = _objc_msgSend_843(this.pointer, _sel_animationTool);
    return _ret.address == 0
        ? null
        : AVVideoCompositionCoreAnimationTool.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setAnimationTool:
  set animationTool(AVVideoCompositionCoreAnimationTool? value) {
    return _objc_msgSend_1028(
        this.pointer, _sel_setAnimationTool_, value?.pointer ?? ffi.nullptr);
  }

  /// sourceSampleDataTrackIDs
  objc.NSArray get sourceSampleDataTrackIDs {
    final _ret = _objc_msgSend_33(this.pointer, _sel_sourceSampleDataTrackIDs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSourceSampleDataTrackIDs:
  set sourceSampleDataTrackIDs(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setSourceSampleDataTrackIDs_, value.pointer);
  }

  /// colorPrimaries
  objc.NSString? get colorPrimaries {
    final _ret = _objc_msgSend_20(this.pointer, _sel_colorPrimaries);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setColorPrimaries:
  set colorPrimaries(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setColorPrimaries_, value?.pointer ?? ffi.nullptr);
  }

  /// colorYCbCrMatrix
  objc.NSString? get colorYCbCrMatrix {
    final _ret = _objc_msgSend_20(this.pointer, _sel_colorYCbCrMatrix);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setColorYCbCrMatrix:
  set colorYCbCrMatrix(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setColorYCbCrMatrix_, value?.pointer ?? ffi.nullptr);
  }

  /// colorTransferFunction
  objc.NSString? get colorTransferFunction {
    final _ret = _objc_msgSend_20(this.pointer, _sel_colorTransferFunction);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setColorTransferFunction:
  set colorTransferFunction(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setColorTransferFunction_,
        value?.pointer ?? ffi.nullptr);
  }

  /// perFrameHDRDisplayMetadataPolicy
  objc.NSString get perFrameHDRDisplayMetadataPolicy {
    final _ret =
        _objc_msgSend_11(this.pointer, _sel_perFrameHDRDisplayMetadataPolicy);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPerFrameHDRDisplayMetadataPolicy:
  set perFrameHDRDisplayMetadataPolicy(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setPerFrameHDRDisplayMetadataPolicy_, value.pointer);
  }

  /// videoCompositionWithAsset:applyingCIFiltersWithHandler:
  static AVVideoComposition
      videoCompositionWithAsset_applyingCIFiltersWithHandler_(
          AVAsset asset,
          objc.ObjCBlock<
                  ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>
              applier) {
    final _ret = _objc_msgSend_1011(
        _class_AVMutableVideoComposition,
        _sel_videoCompositionWithAsset_applyingCIFiltersWithHandler_,
        asset.pointer,
        applier.pointer);
    return AVVideoComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler:
  static void
      videoCompositionWithAsset_applyingCIFiltersWithHandler_completionHandler_(
          AVAsset asset,
          objc.ObjCBlock<
                  ffi.Void Function(AVAsynchronousCIImageFilteringRequest)>
              applier,
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>
              completionHandler) {
    _objc_msgSend_1012(
        _class_AVMutableVideoComposition,
        _sel_videoCompositionWithAsset_applyingCIFiltersWithHandler_completionHandler_,
        asset.pointer,
        applier.pointer,
        completionHandler.pointer);
  }

  /// init
  AVMutableVideoComposition init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMutableVideoComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMutableVideoComposition new1() {
    final _ret = _objc_msgSend_19(_class_AVMutableVideoComposition, _sel_new);
    return AVMutableVideoComposition.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVMutableVideoComposition allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVMutableVideoComposition, _sel_allocWithZone_, zone);
    return AVMutableVideoComposition.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMutableVideoComposition alloc() {
    final _ret = _objc_msgSend_19(_class_AVMutableVideoComposition, _sel_alloc);
    return AVMutableVideoComposition.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMutableVideoComposition,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMutableVideoComposition,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMutableVideoComposition, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVMutableVideoComposition, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMutableVideoComposition,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMutableVideoComposition,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMutableVideoComposition,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMutableVideoComposition, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVMutableVideoComposition, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMutableVideoComposition =
    objc.getClass("AVMutableVideoComposition");
final _objc_msgSend_1021 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1022 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_AVMutableVideoComposition_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVMutableVideoComposition_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVMutableVideoComposition_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVMutableVideoComposition_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVMutableVideoComposition?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_AVMutableVideoComposition_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(arg0.address == 0 ? null : AVMutableVideoComposition.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(AVMutableVideoComposition?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVMutableVideoComposition_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0.address == 0
                ? null
                : AVMutableVideoComposition.castFromPointer(arg0,
                    retain: false, release: true),
            arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVMutableVideoComposition_NSError(
            raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVMutableVideoComposition_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVMutableVideoComposition? arg0, objc.NSError? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

final _objc_msgSend_1023 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVVideoCompositionInstruction
class AVVideoCompositionInstruction extends objc.NSObject {
  AVVideoCompositionInstruction._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVVideoCompositionInstruction] that points to the same underlying object as [other].
  AVVideoCompositionInstruction.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVVideoCompositionInstruction] that wraps the given raw object pointer.
  AVVideoCompositionInstruction.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVVideoCompositionInstruction].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVVideoCompositionInstruction);
  }

  /// timeRange
  void getTimeRange(ffi.Pointer<CMTimeRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_719Stret(stret, this.pointer, _sel_timeRange)
        : stret.ref = _objc_msgSend_719(this.pointer, _sel_timeRange);
  }

  /// backgroundColor
  ffi.Pointer<CGColor> get backgroundColor {
    return _objc_msgSend_815(this.pointer, _sel_backgroundColor);
  }

  /// layerInstructions
  objc.NSArray get layerInstructions {
    final _ret = _objc_msgSend_33(this.pointer, _sel_layerInstructions);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// enablePostProcessing
  bool get enablePostProcessing {
    return _objc_msgSend_13(this.pointer, _sel_enablePostProcessing);
  }

  /// requiredSourceTrackIDs
  objc.NSArray get requiredSourceTrackIDs {
    final _ret = _objc_msgSend_33(this.pointer, _sel_requiredSourceTrackIDs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// passthroughTrackID
  int get passthroughTrackID {
    return _objc_msgSend_718(this.pointer, _sel_passthroughTrackID);
  }

  /// requiredSourceSampleDataTrackIDs
  objc.NSArray get requiredSourceSampleDataTrackIDs {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_requiredSourceSampleDataTrackIDs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVVideoCompositionInstruction init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVVideoCompositionInstruction.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVVideoCompositionInstruction new1() {
    final _ret =
        _objc_msgSend_19(_class_AVVideoCompositionInstruction, _sel_new);
    return AVVideoCompositionInstruction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVVideoCompositionInstruction allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVVideoCompositionInstruction, _sel_allocWithZone_, zone);
    return AVVideoCompositionInstruction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVVideoCompositionInstruction alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVVideoCompositionInstruction, _sel_alloc);
    return AVVideoCompositionInstruction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVVideoCompositionInstruction,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVVideoCompositionInstruction,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVVideoCompositionInstruction,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVVideoCompositionInstruction, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVVideoCompositionInstruction,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVVideoCompositionInstruction,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVVideoCompositionInstruction,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVVideoCompositionInstruction,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVVideoCompositionInstruction, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVVideoCompositionInstruction =
    objc.getClass("AVVideoCompositionInstruction");
late final _sel_layerInstructions = objc.registerName("layerInstructions");
late final _sel_enablePostProcessing =
    objc.registerName("enablePostProcessing");
late final _sel_requiredSourceTrackIDs =
    objc.registerName("requiredSourceTrackIDs");
late final _sel_passthroughTrackID = objc.registerName("passthroughTrackID");
late final _sel_requiredSourceSampleDataTrackIDs =
    objc.registerName("requiredSourceSampleDataTrackIDs");
late final _sel_videoCompositionWithPropertiesOfAsset_prototypeInstruction_ =
    objc.registerName(
        "videoCompositionWithPropertiesOfAsset:prototypeInstruction:");
final _objc_msgSend_1024 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_videoCompositionWithPropertiesOfAsset_prototypeInstruction_completionHandler_ =
    objc.registerName(
        "videoCompositionWithPropertiesOfAsset:prototypeInstruction:completionHandler:");
final _objc_msgSend_1025 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_setCustomVideoCompositorClass_ =
    objc.registerName("setCustomVideoCompositorClass:");
late final _sel_setFrameDuration_ = objc.registerName("setFrameDuration:");
final _objc_msgSend_1026 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTime)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTime)>();
late final _sel_setSourceTrackIDForFrameTiming_ =
    objc.registerName("setSourceTrackIDForFrameTiming:");
final _objc_msgSend_1027 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setRenderSize_ = objc.registerName("setRenderSize:");
late final _sel_setRenderScale_ = objc.registerName("setRenderScale:");
late final _sel_setInstructions_ = objc.registerName("setInstructions:");
late final _sel_setAnimationTool_ = objc.registerName("setAnimationTool:");
final _objc_msgSend_1028 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setSourceSampleDataTrackIDs_ =
    objc.registerName("setSourceSampleDataTrackIDs:");
late final _sel_setColorPrimaries_ = objc.registerName("setColorPrimaries:");
late final _sel_setColorYCbCrMatrix_ =
    objc.registerName("setColorYCbCrMatrix:");
late final _sel_setColorTransferFunction_ =
    objc.registerName("setColorTransferFunction:");
late final _sel_setPerFrameHDRDisplayMetadataPolicy_ =
    objc.registerName("setPerFrameHDRDisplayMetadataPolicy:");
final _objc_msgSend_1029 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
final _objc_msgSend_1030 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVAssetReaderOutput
class AVAssetReaderOutput extends objc.NSObject {
  AVAssetReaderOutput._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetReaderOutput] that points to the same underlying object as [other].
  AVAssetReaderOutput.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetReaderOutput] that wraps the given raw object pointer.
  AVAssetReaderOutput.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetReaderOutput].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetReaderOutput);
  }

  /// mediaType
  objc.NSString get mediaType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_mediaType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// alwaysCopiesSampleData
  bool get alwaysCopiesSampleData {
    return _objc_msgSend_13(this.pointer, _sel_alwaysCopiesSampleData);
  }

  /// setAlwaysCopiesSampleData:
  set alwaysCopiesSampleData(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAlwaysCopiesSampleData_, value);
  }

  /// copyNextSampleBuffer
  ffi.Pointer<opaqueCMSampleBuffer> copyNextSampleBuffer() {
    return _objc_msgSend_1031(this.pointer, _sel_copyNextSampleBuffer);
  }

  /// supportsRandomAccess
  bool get supportsRandomAccess {
    return _objc_msgSend_13(this.pointer, _sel_supportsRandomAccess);
  }

  /// setSupportsRandomAccess:
  set supportsRandomAccess(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setSupportsRandomAccess_, value);
  }

  /// resetForReadingTimeRanges:
  void resetForReadingTimeRanges_(objc.NSArray timeRanges) {
    _objc_msgSend_254(
        this.pointer, _sel_resetForReadingTimeRanges_, timeRanges.pointer);
  }

  /// markConfigurationAsFinal
  void markConfigurationAsFinal() {
    _objc_msgSend_7(this.pointer, _sel_markConfigurationAsFinal);
  }

  /// init
  AVAssetReaderOutput init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetReaderOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetReaderOutput new1() {
    final _ret = _objc_msgSend_19(_class_AVAssetReaderOutput, _sel_new);
    return AVAssetReaderOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVAssetReaderOutput allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAssetReaderOutput, _sel_allocWithZone_, zone);
    return AVAssetReaderOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetReaderOutput alloc() {
    final _ret = _objc_msgSend_19(_class_AVAssetReaderOutput, _sel_alloc);
    return AVAssetReaderOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetReaderOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetReaderOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetReaderOutput, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAssetReaderOutput, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetReaderOutput,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetReaderOutput,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetReaderOutput,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetReaderOutput, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetReaderOutput, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetReaderOutput = objc.getClass("AVAssetReaderOutput");
late final _sel_alwaysCopiesSampleData =
    objc.registerName("alwaysCopiesSampleData");
late final _sel_setAlwaysCopiesSampleData_ =
    objc.registerName("setAlwaysCopiesSampleData:");
late final _sel_copyNextSampleBuffer =
    objc.registerName("copyNextSampleBuffer");
final _objc_msgSend_1031 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<opaqueCMSampleBuffer> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<opaqueCMSampleBuffer> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_supportsRandomAccess =
    objc.registerName("supportsRandomAccess");
late final _sel_setSupportsRandomAccess_ =
    objc.registerName("setSupportsRandomAccess:");
late final _sel_resetForReadingTimeRanges_ =
    objc.registerName("resetForReadingTimeRanges:");
late final _sel_markConfigurationAsFinal =
    objc.registerName("markConfigurationAsFinal");

/// AVAssetReaderOutputCaptionAdaptor
class AVAssetReaderOutputCaptionAdaptor extends objc.NSObject {
  AVAssetReaderOutputCaptionAdaptor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetReaderOutputCaptionAdaptor] that points to the same underlying object as [other].
  AVAssetReaderOutputCaptionAdaptor.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetReaderOutputCaptionAdaptor] that wraps the given raw object pointer.
  AVAssetReaderOutputCaptionAdaptor.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetReaderOutputCaptionAdaptor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVAssetReaderOutputCaptionAdaptor);
  }

  /// init
  AVAssetReaderOutputCaptionAdaptor init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetReaderOutputCaptionAdaptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetReaderOutputCaptionAdaptor new1() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetReaderOutputCaptionAdaptor, _sel_new);
    return AVAssetReaderOutputCaptionAdaptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// assetReaderOutputCaptionAdaptorWithAssetReaderTrackOutput:
  static AVAssetReaderOutputCaptionAdaptor
      assetReaderOutputCaptionAdaptorWithAssetReaderTrackOutput_(
          AVAssetReaderTrackOutput trackOutput) {
    final _ret = _objc_msgSend_1034(
        _class_AVAssetReaderOutputCaptionAdaptor,
        _sel_assetReaderOutputCaptionAdaptorWithAssetReaderTrackOutput_,
        trackOutput.pointer);
    return AVAssetReaderOutputCaptionAdaptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithAssetReaderTrackOutput:
  AVAssetReaderOutputCaptionAdaptor initWithAssetReaderTrackOutput_(
      AVAssetReaderTrackOutput trackOutput) {
    final _ret = _objc_msgSend_1034(this.pointer,
        _sel_initWithAssetReaderTrackOutput_, trackOutput.pointer);
    return AVAssetReaderOutputCaptionAdaptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// assetReaderTrackOutput
  AVAssetReaderTrackOutput get assetReaderTrackOutput {
    final _ret = _objc_msgSend_1035(this.pointer, _sel_assetReaderTrackOutput);
    return AVAssetReaderTrackOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// nextCaptionGroup
  AVCaptionGroup? nextCaptionGroup() {
    final _ret = _objc_msgSend_1036(this.pointer, _sel_nextCaptionGroup);
    return _ret.address == 0
        ? null
        : AVCaptionGroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// captionsNotPresentInPreviousGroupsInCaptionGroup:
  objc.NSArray captionsNotPresentInPreviousGroupsInCaptionGroup_(
      AVCaptionGroup captionGroup) {
    final _ret = _objc_msgSend_1037(
        this.pointer,
        _sel_captionsNotPresentInPreviousGroupsInCaptionGroup_,
        captionGroup.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// validationDelegate
  objc.ObjCObjectBase? get validationDelegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_validationDelegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setValidationDelegate:
  set validationDelegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(this.pointer, _sel_setValidationDelegate_,
        value?.pointer ?? ffi.nullptr);
  }

  /// allocWithZone:
  static AVAssetReaderOutputCaptionAdaptor allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAssetReaderOutputCaptionAdaptor, _sel_allocWithZone_, zone);
    return AVAssetReaderOutputCaptionAdaptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetReaderOutputCaptionAdaptor alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetReaderOutputCaptionAdaptor, _sel_alloc);
    return AVAssetReaderOutputCaptionAdaptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetReaderOutputCaptionAdaptor,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetReaderOutputCaptionAdaptor,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVAssetReaderOutputCaptionAdaptor,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAssetReaderOutputCaptionAdaptor, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetReaderOutputCaptionAdaptor,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetReaderOutputCaptionAdaptor,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetReaderOutputCaptionAdaptor,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVAssetReaderOutputCaptionAdaptor,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetReaderOutputCaptionAdaptor, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetReaderOutputCaptionAdaptor =
    objc.getClass("AVAssetReaderOutputCaptionAdaptor");

/// AVAssetReaderTrackOutput
class AVAssetReaderTrackOutput extends AVAssetReaderOutput {
  AVAssetReaderTrackOutput._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetReaderTrackOutput] that points to the same underlying object as [other].
  AVAssetReaderTrackOutput.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetReaderTrackOutput] that wraps the given raw object pointer.
  AVAssetReaderTrackOutput.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetReaderTrackOutput].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetReaderTrackOutput);
  }

  /// init
  AVAssetReaderTrackOutput init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetReaderTrackOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetReaderTrackOutput new1() {
    final _ret = _objc_msgSend_19(_class_AVAssetReaderTrackOutput, _sel_new);
    return AVAssetReaderTrackOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// assetReaderTrackOutputWithTrack:outputSettings:
  static AVAssetReaderTrackOutput
      assetReaderTrackOutputWithTrack_outputSettings_(
          AVAssetTrack track, objc.NSDictionary? outputSettings) {
    final _ret = _objc_msgSend_1032(
        _class_AVAssetReaderTrackOutput,
        _sel_assetReaderTrackOutputWithTrack_outputSettings_,
        track.pointer,
        outputSettings?.pointer ?? ffi.nullptr);
    return AVAssetReaderTrackOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithTrack:outputSettings:
  AVAssetReaderTrackOutput initWithTrack_outputSettings_(
      AVAssetTrack track, objc.NSDictionary? outputSettings) {
    final _ret = _objc_msgSend_1032(
        this.pointer,
        _sel_initWithTrack_outputSettings_,
        track.pointer,
        outputSettings?.pointer ?? ffi.nullptr);
    return AVAssetReaderTrackOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// track
  AVAssetTrack get track {
    final _ret = _objc_msgSend_1033(this.pointer, _sel_track);
    return AVAssetTrack.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputSettings
  objc.NSDictionary? get outputSettings {
    final _ret = _objc_msgSend_84(this.pointer, _sel_outputSettings);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// audioTimePitchAlgorithm
  objc.NSString get audioTimePitchAlgorithm {
    final _ret = _objc_msgSend_11(this.pointer, _sel_audioTimePitchAlgorithm);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAudioTimePitchAlgorithm:
  set audioTimePitchAlgorithm(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setAudioTimePitchAlgorithm_, value.pointer);
  }

  /// allocWithZone:
  static AVAssetReaderTrackOutput allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAssetReaderTrackOutput, _sel_allocWithZone_, zone);
    return AVAssetReaderTrackOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetReaderTrackOutput alloc() {
    final _ret = _objc_msgSend_19(_class_AVAssetReaderTrackOutput, _sel_alloc);
    return AVAssetReaderTrackOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetReaderTrackOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetReaderTrackOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetReaderTrackOutput, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAssetReaderTrackOutput, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetReaderTrackOutput,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetReaderTrackOutput,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetReaderTrackOutput,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetReaderTrackOutput, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetReaderTrackOutput, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetReaderTrackOutput =
    objc.getClass("AVAssetReaderTrackOutput");
late final _sel_assetReaderTrackOutputWithTrack_outputSettings_ =
    objc.registerName("assetReaderTrackOutputWithTrack:outputSettings:");
final _objc_msgSend_1032 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithTrack_outputSettings_ =
    objc.registerName("initWithTrack:outputSettings:");
late final _sel_track = objc.registerName("track");
final _objc_msgSend_1033 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_outputSettings = objc.registerName("outputSettings");
late final _sel_assetReaderOutputCaptionAdaptorWithAssetReaderTrackOutput_ =
    objc.registerName(
        "assetReaderOutputCaptionAdaptorWithAssetReaderTrackOutput:");
final _objc_msgSend_1034 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithAssetReaderTrackOutput_ =
    objc.registerName("initWithAssetReaderTrackOutput:");
late final _sel_assetReaderTrackOutput =
    objc.registerName("assetReaderTrackOutput");
final _objc_msgSend_1035 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVCaptionGroup
class AVCaptionGroup extends objc.NSObject {
  AVCaptionGroup._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptionGroup] that points to the same underlying object as [other].
  AVCaptionGroup.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptionGroup] that wraps the given raw object pointer.
  AVCaptionGroup.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptionGroup].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptionGroup);
  }

  /// initWithCaptions:timeRange:
  AVCaptionGroup initWithCaptions_timeRange_(
      objc.NSArray captions, CMTimeRange timeRange) {
    final _ret = _objc_msgSend_1019(this.pointer,
        _sel_initWithCaptions_timeRange_, captions.pointer, timeRange);
    return AVCaptionGroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithTimeRange:
  AVCaptionGroup initWithTimeRange_(CMTimeRange timeRange) {
    final _ret =
        _objc_msgSend_772(this.pointer, _sel_initWithTimeRange_, timeRange);
    return AVCaptionGroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeRange
  void getTimeRange(ffi.Pointer<CMTimeRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_719Stret(stret, this.pointer, _sel_timeRange)
        : stret.ref = _objc_msgSend_719(this.pointer, _sel_timeRange);
  }

  /// captions
  objc.NSArray get captions {
    final _ret = _objc_msgSend_33(this.pointer, _sel_captions);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVCaptionGroup init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptionGroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVCaptionGroup new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptionGroup, _sel_new);
    return AVCaptionGroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVCaptionGroup allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCaptionGroup, _sel_allocWithZone_, zone);
    return AVCaptionGroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVCaptionGroup alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptionGroup, _sel_alloc);
    return AVCaptionGroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptionGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptionGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptionGroup, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCaptionGroup, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptionGroup,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptionGroup,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptionGroup,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptionGroup, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptionGroup, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptionGroup = objc.getClass("AVCaptionGroup");
late final _sel_initWithCaptions_timeRange_ =
    objc.registerName("initWithCaptions:timeRange:");
late final _sel_captions = objc.registerName("captions");
late final _sel_nextCaptionGroup = objc.registerName("nextCaptionGroup");
final _objc_msgSend_1036 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_captionsNotPresentInPreviousGroupsInCaptionGroup_ =
    objc.registerName("captionsNotPresentInPreviousGroupsInCaptionGroup:");
final _objc_msgSend_1037 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_validationDelegate = objc.registerName("validationDelegate");
late final _sel_setValidationDelegate_ =
    objc.registerName("setValidationDelegate:");

/// AVAssetResourceLoadingRequest
class AVAssetResourceLoadingRequest extends objc.NSObject {
  AVAssetResourceLoadingRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetResourceLoadingRequest] that points to the same underlying object as [other].
  AVAssetResourceLoadingRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetResourceLoadingRequest] that wraps the given raw object pointer.
  AVAssetResourceLoadingRequest.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetResourceLoadingRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetResourceLoadingRequest);
  }

  /// init
  AVAssetResourceLoadingRequest init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetResourceLoadingRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetResourceLoadingRequest new1() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetResourceLoadingRequest, _sel_new);
    return AVAssetResourceLoadingRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// request
  NSURLRequest get request {
    final _ret = _objc_msgSend_481(this.pointer, _sel_request);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// isFinished
  bool get finished {
    return _objc_msgSend_13(this.pointer, _sel_isFinished);
  }

  /// isCancelled
  bool get cancelled {
    return _objc_msgSend_13(this.pointer, _sel_isCancelled);
  }

  /// contentInformationRequest
  AVAssetResourceLoadingContentInformationRequest?
      get contentInformationRequest {
    final _ret =
        _objc_msgSend_1038(this.pointer, _sel_contentInformationRequest);
    return _ret.address == 0
        ? null
        : AVAssetResourceLoadingContentInformationRequest.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// dataRequest
  AVAssetResourceLoadingDataRequest? get dataRequest {
    final _ret = _objc_msgSend_1039(this.pointer, _sel_dataRequest);
    return _ret.address == 0
        ? null
        : AVAssetResourceLoadingDataRequest.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// response
  NSURLResponse? get response {
    final _ret = _objc_msgSend_358(this.pointer, _sel_response);
    return _ret.address == 0
        ? null
        : NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  /// setResponse:
  set response(NSURLResponse? value) {
    return _objc_msgSend_1040(
        this.pointer, _sel_setResponse_, value?.pointer ?? ffi.nullptr);
  }

  /// redirect
  NSURLRequest? get redirect {
    final _ret = _objc_msgSend_355(this.pointer, _sel_redirect);
    return _ret.address == 0
        ? null
        : NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRedirect:
  set redirect(NSURLRequest? value) {
    return _objc_msgSend_1041(
        this.pointer, _sel_setRedirect_, value?.pointer ?? ffi.nullptr);
  }

  /// requestor
  AVAssetResourceLoadingRequestor get requestor {
    final _ret = _objc_msgSend_1042(this.pointer, _sel_requestor);
    return AVAssetResourceLoadingRequestor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// finishLoading
  void finishLoading() {
    _objc_msgSend_7(this.pointer, _sel_finishLoading);
  }

  /// finishLoadingWithError:
  void finishLoadingWithError_(objc.NSError? error) {
    _objc_msgSend_1043(this.pointer, _sel_finishLoadingWithError_,
        error?.pointer ?? ffi.nullptr);
  }

  /// streamingContentKeyRequestDataForApp:contentIdentifier:options:error:
  objc.NSData?
      streamingContentKeyRequestDataForApp_contentIdentifier_options_error_(
          objc.NSData appIdentifier,
          objc.NSData contentIdentifier,
          objc.NSDictionary? options,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1044(
        this.pointer,
        _sel_streamingContentKeyRequestDataForApp_contentIdentifier_options_error_,
        appIdentifier.pointer,
        contentIdentifier.pointer,
        options?.pointer ?? ffi.nullptr,
        outError);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// persistentContentKeyFromKeyVendorResponse:options:error:
  objc.NSData? persistentContentKeyFromKeyVendorResponse_options_error_(
      objc.NSData keyVendorResponse,
      objc.NSDictionary? options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1045(
        this.pointer,
        _sel_persistentContentKeyFromKeyVendorResponse_options_error_,
        keyVendorResponse.pointer,
        options?.pointer ?? ffi.nullptr,
        outError);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// finishLoadingWithResponse:data:redirect:
  void finishLoadingWithResponse_data_redirect_(
      NSURLResponse? response, objc.NSData? data, NSURLRequest? redirect) {
    _objc_msgSend_1046(
        this.pointer,
        _sel_finishLoadingWithResponse_data_redirect_,
        response?.pointer ?? ffi.nullptr,
        data?.pointer ?? ffi.nullptr,
        redirect?.pointer ?? ffi.nullptr);
  }

  /// allocWithZone:
  static AVAssetResourceLoadingRequest allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAssetResourceLoadingRequest, _sel_allocWithZone_, zone);
    return AVAssetResourceLoadingRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetResourceLoadingRequest alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetResourceLoadingRequest, _sel_alloc);
    return AVAssetResourceLoadingRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetResourceLoadingRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetResourceLoadingRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVAssetResourceLoadingRequest,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAssetResourceLoadingRequest, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetResourceLoadingRequest,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetResourceLoadingRequest,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetResourceLoadingRequest,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVAssetResourceLoadingRequest,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetResourceLoadingRequest, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetResourceLoadingRequest =
    objc.getClass("AVAssetResourceLoadingRequest");

/// AVAssetResourceLoadingContentInformationRequest
class AVAssetResourceLoadingContentInformationRequest extends objc.NSObject {
  AVAssetResourceLoadingContentInformationRequest._(
      ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false,
      bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetResourceLoadingContentInformationRequest] that points to the same underlying object as [other].
  AVAssetResourceLoadingContentInformationRequest.castFrom(
      objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetResourceLoadingContentInformationRequest] that wraps the given raw object pointer.
  AVAssetResourceLoadingContentInformationRequest.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetResourceLoadingContentInformationRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVAssetResourceLoadingContentInformationRequest);
  }

  /// init
  AVAssetResourceLoadingContentInformationRequest init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetResourceLoadingContentInformationRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetResourceLoadingContentInformationRequest new1() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetResourceLoadingContentInformationRequest, _sel_new);
    return AVAssetResourceLoadingContentInformationRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// contentType
  objc.NSString? get contentType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_contentType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setContentType:
  set contentType(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setContentType_, value?.pointer ?? ffi.nullptr);
  }

  /// allowedContentTypes
  objc.NSArray? get allowedContentTypes {
    final _ret = _objc_msgSend_88(this.pointer, _sel_allowedContentTypes);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// contentLength
  int get contentLength {
    return _objc_msgSend_357(this.pointer, _sel_contentLength);
  }

  /// setContentLength:
  set contentLength(int value) {
    return _objc_msgSend_784(this.pointer, _sel_setContentLength_, value);
  }

  /// isByteRangeAccessSupported
  bool get byteRangeAccessSupported {
    return _objc_msgSend_13(this.pointer, _sel_isByteRangeAccessSupported);
  }

  /// setByteRangeAccessSupported:
  set byteRangeAccessSupported(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setByteRangeAccessSupported_, value);
  }

  /// renewalDate
  objc.NSDate? get renewalDate {
    final _ret = _objc_msgSend_126(this.pointer, _sel_renewalDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRenewalDate:
  set renewalDate(objc.NSDate? value) {
    return _objc_msgSend_172(
        this.pointer, _sel_setRenewalDate_, value?.pointer ?? ffi.nullptr);
  }

  /// isEntireLengthAvailableOnDemand
  bool get entireLengthAvailableOnDemand {
    return _objc_msgSend_13(this.pointer, _sel_isEntireLengthAvailableOnDemand);
  }

  /// setEntireLengthAvailableOnDemand:
  set entireLengthAvailableOnDemand(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setEntireLengthAvailableOnDemand_, value);
  }

  /// allocWithZone:
  static AVAssetResourceLoadingContentInformationRequest allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAssetResourceLoadingContentInformationRequest,
        _sel_allocWithZone_,
        zone);
    return AVAssetResourceLoadingContentInformationRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetResourceLoadingContentInformationRequest alloc() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetResourceLoadingContentInformationRequest, _sel_alloc);
    return AVAssetResourceLoadingContentInformationRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetResourceLoadingContentInformationRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetResourceLoadingContentInformationRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetResourceLoadingContentInformationRequest,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAssetResourceLoadingContentInformationRequest,
        _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(
        _class_AVAssetResourceLoadingContentInformationRequest,
        _sel_keyPathsForValuesAffectingValueForKey_,
        key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        _class_AVAssetResourceLoadingContentInformationRequest,
        _sel_automaticallyNotifiesObserversForKey_,
        key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetResourceLoadingContentInformationRequest,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetResourceLoadingContentInformationRequest,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetResourceLoadingContentInformationRequest,
        _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetResourceLoadingContentInformationRequest =
    objc.getClass("AVAssetResourceLoadingContentInformationRequest");
late final _sel_contentType = objc.registerName("contentType");
late final _sel_setContentType_ = objc.registerName("setContentType:");
late final _sel_allowedContentTypes = objc.registerName("allowedContentTypes");
late final _sel_contentLength = objc.registerName("contentLength");
late final _sel_setContentLength_ = objc.registerName("setContentLength:");
late final _sel_isByteRangeAccessSupported =
    objc.registerName("isByteRangeAccessSupported");
late final _sel_setByteRangeAccessSupported_ =
    objc.registerName("setByteRangeAccessSupported:");
late final _sel_renewalDate = objc.registerName("renewalDate");
late final _sel_setRenewalDate_ = objc.registerName("setRenewalDate:");
late final _sel_isEntireLengthAvailableOnDemand =
    objc.registerName("isEntireLengthAvailableOnDemand");
late final _sel_setEntireLengthAvailableOnDemand_ =
    objc.registerName("setEntireLengthAvailableOnDemand:");
late final _sel_contentInformationRequest =
    objc.registerName("contentInformationRequest");
final _objc_msgSend_1038 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVAssetResourceLoadingDataRequest
class AVAssetResourceLoadingDataRequest extends objc.NSObject {
  AVAssetResourceLoadingDataRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetResourceLoadingDataRequest] that points to the same underlying object as [other].
  AVAssetResourceLoadingDataRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetResourceLoadingDataRequest] that wraps the given raw object pointer.
  AVAssetResourceLoadingDataRequest.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetResourceLoadingDataRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVAssetResourceLoadingDataRequest);
  }

  /// init
  AVAssetResourceLoadingDataRequest init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetResourceLoadingDataRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetResourceLoadingDataRequest new1() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetResourceLoadingDataRequest, _sel_new);
    return AVAssetResourceLoadingDataRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// requestedOffset
  int get requestedOffset {
    return _objc_msgSend_357(this.pointer, _sel_requestedOffset);
  }

  /// requestedLength
  int get requestedLength {
    return _objc_msgSend_125(this.pointer, _sel_requestedLength);
  }

  /// requestsAllDataToEndOfResource
  bool get requestsAllDataToEndOfResource {
    return _objc_msgSend_13(this.pointer, _sel_requestsAllDataToEndOfResource);
  }

  /// currentOffset
  int get currentOffset {
    return _objc_msgSend_357(this.pointer, _sel_currentOffset);
  }

  /// respondWithData:
  void respondWithData_(objc.NSData data) {
    _objc_msgSend_278(this.pointer, _sel_respondWithData_, data.pointer);
  }

  /// allocWithZone:
  static AVAssetResourceLoadingDataRequest allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAssetResourceLoadingDataRequest, _sel_allocWithZone_, zone);
    return AVAssetResourceLoadingDataRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetResourceLoadingDataRequest alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetResourceLoadingDataRequest, _sel_alloc);
    return AVAssetResourceLoadingDataRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetResourceLoadingDataRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetResourceLoadingDataRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVAssetResourceLoadingDataRequest,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAssetResourceLoadingDataRequest, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetResourceLoadingDataRequest,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetResourceLoadingDataRequest,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetResourceLoadingDataRequest,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVAssetResourceLoadingDataRequest,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetResourceLoadingDataRequest, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetResourceLoadingDataRequest =
    objc.getClass("AVAssetResourceLoadingDataRequest");
late final _sel_requestedOffset = objc.registerName("requestedOffset");
late final _sel_requestedLength = objc.registerName("requestedLength");
late final _sel_requestsAllDataToEndOfResource =
    objc.registerName("requestsAllDataToEndOfResource");
late final _sel_currentOffset = objc.registerName("currentOffset");
late final _sel_respondWithData_ = objc.registerName("respondWithData:");
late final _sel_dataRequest = objc.registerName("dataRequest");
final _objc_msgSend_1039 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setResponse_ = objc.registerName("setResponse:");
final _objc_msgSend_1040 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_redirect = objc.registerName("redirect");
late final _sel_setRedirect_ = objc.registerName("setRedirect:");
final _objc_msgSend_1041 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// AVAssetResourceLoadingRequestor
class AVAssetResourceLoadingRequestor extends objc.NSObject {
  AVAssetResourceLoadingRequestor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetResourceLoadingRequestor] that points to the same underlying object as [other].
  AVAssetResourceLoadingRequestor.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetResourceLoadingRequestor] that wraps the given raw object pointer.
  AVAssetResourceLoadingRequestor.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetResourceLoadingRequestor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVAssetResourceLoadingRequestor);
  }

  /// init
  AVAssetResourceLoadingRequestor init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetResourceLoadingRequestor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetResourceLoadingRequestor new1() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetResourceLoadingRequestor, _sel_new);
    return AVAssetResourceLoadingRequestor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// providesExpiredSessionReports
  bool get providesExpiredSessionReports {
    return _objc_msgSend_13(this.pointer, _sel_providesExpiredSessionReports);
  }

  /// allocWithZone:
  static AVAssetResourceLoadingRequestor allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAssetResourceLoadingRequestor, _sel_allocWithZone_, zone);
    return AVAssetResourceLoadingRequestor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetResourceLoadingRequestor alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetResourceLoadingRequestor, _sel_alloc);
    return AVAssetResourceLoadingRequestor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetResourceLoadingRequestor,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetResourceLoadingRequestor,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVAssetResourceLoadingRequestor,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAssetResourceLoadingRequestor, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetResourceLoadingRequestor,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetResourceLoadingRequestor,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetResourceLoadingRequestor,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVAssetResourceLoadingRequestor,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetResourceLoadingRequestor, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetResourceLoadingRequestor =
    objc.getClass("AVAssetResourceLoadingRequestor");
late final _sel_providesExpiredSessionReports =
    objc.registerName("providesExpiredSessionReports");
late final _sel_requestor = objc.registerName("requestor");
final _objc_msgSend_1042 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_finishLoading = objc.registerName("finishLoading");
late final _sel_finishLoadingWithError_ =
    objc.registerName("finishLoadingWithError:");
final _objc_msgSend_1043 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_streamingContentKeyRequestDataForApp_contentIdentifier_options_error_ =
    objc.registerName(
        "streamingContentKeyRequestDataForApp:contentIdentifier:options:error:");
final _objc_msgSend_1044 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_persistentContentKeyFromKeyVendorResponse_options_error_ = objc
    .registerName("persistentContentKeyFromKeyVendorResponse:options:error:");
final _objc_msgSend_1045 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_finishLoadingWithResponse_data_redirect_ =
    objc.registerName("finishLoadingWithResponse:data:redirect:");
final _objc_msgSend_1046 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// UTType
class UTType extends objc.NSObject {
  UTType._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UTType] that points to the same underlying object as [other].
  UTType.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [UTType] that wraps the given raw object pointer.
  UTType.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UTType].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_UTType);
  }

  /// new
  static UTType new1() {
    final _ret = _objc_msgSend_19(_class_UTType, _sel_new);
    return UTType.castFromPointer(_ret, retain: false, release: true);
  }

  /// init
  UTType init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// typeWithIdentifier:
  static UTType? typeWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_35(
        _class_UTType, _sel_typeWithIdentifier_, identifier.pointer);
    return _ret.address == 0
        ? null
        : UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// typeWithFilenameExtension:
  static UTType? typeWithFilenameExtension_(objc.NSString filenameExtension) {
    final _ret = _objc_msgSend_35(_class_UTType,
        _sel_typeWithFilenameExtension_, filenameExtension.pointer);
    return _ret.address == 0
        ? null
        : UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// typeWithFilenameExtension:conformingToType:
  static UTType? typeWithFilenameExtension_conformingToType_(
      objc.NSString filenameExtension, UTType supertype) {
    final _ret = _objc_msgSend_1047(
        _class_UTType,
        _sel_typeWithFilenameExtension_conformingToType_,
        filenameExtension.pointer,
        supertype.pointer);
    return _ret.address == 0
        ? null
        : UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// typeWithMIMEType:
  static UTType? typeWithMIMEType_(objc.NSString mimeType) {
    final _ret = _objc_msgSend_35(
        _class_UTType, _sel_typeWithMIMEType_, mimeType.pointer);
    return _ret.address == 0
        ? null
        : UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// typeWithMIMEType:conformingToType:
  static UTType? typeWithMIMEType_conformingToType_(
      objc.NSString mimeType, UTType supertype) {
    final _ret = _objc_msgSend_1047(
        _class_UTType,
        _sel_typeWithMIMEType_conformingToType_,
        mimeType.pointer,
        supertype.pointer);
    return _ret.address == 0
        ? null
        : UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// identifier
  objc.NSString get identifier {
    final _ret = _objc_msgSend_11(this.pointer, _sel_identifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredFilenameExtension
  objc.NSString? get preferredFilenameExtension {
    final _ret =
        _objc_msgSend_20(this.pointer, _sel_preferredFilenameExtension);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredMIMEType
  objc.NSString? get preferredMIMEType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_preferredMIMEType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedDescription
  objc.NSString? get localizedDescription {
    final _ret = _objc_msgSend_20(this.pointer, _sel_localizedDescription);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// version
  objc.NSNumber? get version {
    final _ret = _objc_msgSend_22(this.pointer, _sel_version);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// referenceURL
  objc.NSURL? get referenceURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_referenceURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// isDynamic
  bool get dynamic1 {
    return _objc_msgSend_13(this.pointer, _sel_isDynamic);
  }

  /// isDeclared
  bool get declared {
    return _objc_msgSend_13(this.pointer, _sel_isDeclared);
  }

  /// isPublicType
  bool get publicType {
    return _objc_msgSend_13(this.pointer, _sel_isPublicType);
  }

  /// conformsToType:
  bool conformsToType_(UTType type) {
    return _objc_msgSend_1048(this.pointer, _sel_conformsToType_, type.pointer);
  }

  /// isSupertypeOfType:
  bool isSupertypeOfType_(UTType type) {
    return _objc_msgSend_1048(
        this.pointer, _sel_isSupertypeOfType_, type.pointer);
  }

  /// isSubtypeOfType:
  bool isSubtypeOfType_(UTType type) {
    return _objc_msgSend_1048(
        this.pointer, _sel_isSubtypeOfType_, type.pointer);
  }

  /// supertypes
  objc.NSSet get supertypes {
    final _ret = _objc_msgSend_1049(this.pointer, _sel_supertypes);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// typeWithTag:tagClass:conformingToType:
  static UTType? typeWithTag_tagClass_conformingToType_(
      objc.NSString tag, objc.NSString tagClass, UTType? supertype) {
    final _ret = _objc_msgSend_1050(
        _class_UTType,
        _sel_typeWithTag_tagClass_conformingToType_,
        tag.pointer,
        tagClass.pointer,
        supertype?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// typesWithTag:tagClass:conformingToType:
  static objc.NSArray typesWithTag_tagClass_conformingToType_(
      objc.NSString tag, objc.NSString tagClass, UTType? supertype) {
    final _ret = _objc_msgSend_1051(
        _class_UTType,
        _sel_typesWithTag_tagClass_conformingToType_,
        tag.pointer,
        tagClass.pointer,
        supertype?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// tags
  objc.NSDictionary get tags {
    final _ret = _objc_msgSend_123(this.pointer, _sel_tags);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// exportedTypeWithIdentifier:
  static UTType exportedTypeWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_1052(
        _class_UTType, _sel_exportedTypeWithIdentifier_, identifier.pointer);
    return UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// exportedTypeWithIdentifier:conformingToType:
  static UTType exportedTypeWithIdentifier_conformingToType_(
      objc.NSString identifier, UTType parentType) {
    final _ret = _objc_msgSend_1053(
        _class_UTType,
        _sel_exportedTypeWithIdentifier_conformingToType_,
        identifier.pointer,
        parentType.pointer);
    return UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// importedTypeWithIdentifier:
  static UTType importedTypeWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_1052(
        _class_UTType, _sel_importedTypeWithIdentifier_, identifier.pointer);
    return UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// importedTypeWithIdentifier:conformingToType:
  static UTType importedTypeWithIdentifier_conformingToType_(
      objc.NSString identifier, UTType parentType) {
    final _ret = _objc_msgSend_1053(
        _class_UTType,
        _sel_importedTypeWithIdentifier_conformingToType_,
        identifier.pointer,
        parentType.pointer);
    return UTType.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static UTType allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_UTType, _sel_allocWithZone_, zone);
    return UTType.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UTType alloc() {
    final _ret = _objc_msgSend_19(_class_UTType, _sel_alloc);
    return UTType.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_UTType,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_UTType,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_UTType, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_UTType, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_UTType,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        _class_UTType, _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_UTType,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_UTType, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_UTType, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_UTType = objc.getClass("UTType");
late final _sel_typeWithIdentifier_ = objc.registerName("typeWithIdentifier:");
late final _sel_typeWithFilenameExtension_ =
    objc.registerName("typeWithFilenameExtension:");
late final _sel_typeWithFilenameExtension_conformingToType_ =
    objc.registerName("typeWithFilenameExtension:conformingToType:");
final _objc_msgSend_1047 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_typeWithMIMEType_ = objc.registerName("typeWithMIMEType:");
late final _sel_typeWithMIMEType_conformingToType_ =
    objc.registerName("typeWithMIMEType:conformingToType:");
late final _sel_preferredFilenameExtension =
    objc.registerName("preferredFilenameExtension");
late final _sel_preferredMIMEType = objc.registerName("preferredMIMEType");
late final _sel_referenceURL = objc.registerName("referenceURL");
late final _sel_isDynamic = objc.registerName("isDynamic");
late final _sel_isDeclared = objc.registerName("isDeclared");
late final _sel_isPublicType = objc.registerName("isPublicType");
late final _sel_conformsToType_ = objc.registerName("conformsToType:");
final _objc_msgSend_1048 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isSupertypeOfType_ = objc.registerName("isSupertypeOfType:");
late final _sel_isSubtypeOfType_ = objc.registerName("isSubtypeOfType:");
late final _sel_supertypes = objc.registerName("supertypes");
final _objc_msgSend_1049 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_typeWithTag_tagClass_conformingToType_ =
    objc.registerName("typeWithTag:tagClass:conformingToType:");
final _objc_msgSend_1050 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_typesWithTag_tagClass_conformingToType_ =
    objc.registerName("typesWithTag:tagClass:conformingToType:");
final _objc_msgSend_1051 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_tags = objc.registerName("tags");
late final _sel_exportedTypeWithIdentifier_ =
    objc.registerName("exportedTypeWithIdentifier:");
final _objc_msgSend_1052 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_exportedTypeWithIdentifier_conformingToType_ =
    objc.registerName("exportedTypeWithIdentifier:conformingToType:");
final _objc_msgSend_1053 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_importedTypeWithIdentifier_ =
    objc.registerName("importedTypeWithIdentifier:");
late final _sel_importedTypeWithIdentifier_conformingToType_ =
    objc.registerName("importedTypeWithIdentifier:conformingToType:");

/// AVAssetWriter
class AVAssetWriter extends objc.NSObject {
  AVAssetWriter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetWriter] that points to the same underlying object as [other].
  AVAssetWriter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetWriter] that wraps the given raw object pointer.
  AVAssetWriter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetWriter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetWriter);
  }

  /// init
  AVAssetWriter init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetWriter.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAssetWriter new1() {
    final _ret = _objc_msgSend_19(_class_AVAssetWriter, _sel_new);
    return AVAssetWriter.castFromPointer(_ret, retain: false, release: true);
  }

  /// assetWriterWithURL:fileType:error:
  static AVAssetWriter? assetWriterWithURL_fileType_error_(
      objc.NSURL outputURL,
      objc.NSString outputFileType,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1054(
        _class_AVAssetWriter,
        _sel_assetWriterWithURL_fileType_error_,
        outputURL.pointer,
        outputFileType.pointer,
        outError);
    return _ret.address == 0
        ? null
        : AVAssetWriter.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:fileType:error:
  AVAssetWriter? initWithURL_fileType_error_(
      objc.NSURL outputURL,
      objc.NSString outputFileType,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1054(
        this.pointer,
        _sel_initWithURL_fileType_error_,
        outputURL.pointer,
        outputFileType.pointer,
        outError);
    return _ret.address == 0
        ? null
        : AVAssetWriter.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentType:
  AVAssetWriter initWithContentType_(UTType outputContentType) {
    final _ret = _objc_msgSend_1055(
        this.pointer, _sel_initWithContentType_, outputContentType.pointer);
    return AVAssetWriter.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputURL
  objc.NSURL get outputURL {
    final _ret = _objc_msgSend_40(this.pointer, _sel_outputURL);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputFileType
  objc.NSString get outputFileType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_outputFileType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableMediaTypes
  objc.NSArray get availableMediaTypes {
    final _ret = _objc_msgSend_33(this.pointer, _sel_availableMediaTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// status
  AVAssetWriterStatus get status {
    final _ret = _objc_msgSend_1056(this.pointer, _sel_status);
    return AVAssetWriterStatus.fromValue(_ret);
  }

  /// error
  objc.NSError? get error {
    final _ret = _objc_msgSend_344(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadata
  objc.NSArray get metadata {
    final _ret = _objc_msgSend_33(this.pointer, _sel_metadata);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMetadata:
  set metadata(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer, _sel_setMetadata_, value.pointer);
  }

  /// shouldOptimizeForNetworkUse
  bool get shouldOptimizeForNetworkUse {
    return _objc_msgSend_13(this.pointer, _sel_shouldOptimizeForNetworkUse);
  }

  /// setShouldOptimizeForNetworkUse:
  set shouldOptimizeForNetworkUse(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setShouldOptimizeForNetworkUse_, value);
  }

  /// directoryForTemporaryFiles
  objc.NSURL? get directoryForTemporaryFiles {
    final _ret =
        _objc_msgSend_24(this.pointer, _sel_directoryForTemporaryFiles);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDirectoryForTemporaryFiles:
  set directoryForTemporaryFiles(objc.NSURL? value) {
    return _objc_msgSend_25(this.pointer, _sel_setDirectoryForTemporaryFiles_,
        value?.pointer ?? ffi.nullptr);
  }

  /// inputs
  objc.NSArray get inputs {
    final _ret = _objc_msgSend_33(this.pointer, _sel_inputs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// canApplyOutputSettings:forMediaType:
  bool canApplyOutputSettings_forMediaType_(
      objc.NSDictionary? outputSettings, objc.NSString mediaType) {
    return _objc_msgSend_1057(
        this.pointer,
        _sel_canApplyOutputSettings_forMediaType_,
        outputSettings?.pointer ?? ffi.nullptr,
        mediaType.pointer);
  }

  /// canAddInput:
  bool canAddInput_(AVAssetWriterInput input) {
    return _objc_msgSend_1065(this.pointer, _sel_canAddInput_, input.pointer);
  }

  /// addInput:
  void addInput_(AVAssetWriterInput input) {
    _objc_msgSend_1066(this.pointer, _sel_addInput_, input.pointer);
  }

  /// startWriting
  bool startWriting() {
    return _objc_msgSend_13(this.pointer, _sel_startWriting);
  }

  /// startSessionAtSourceTime:
  void startSessionAtSourceTime_(CMTime startTime) {
    _objc_msgSend_1067(this.pointer, _sel_startSessionAtSourceTime_, startTime);
  }

  /// endSessionAtSourceTime:
  void endSessionAtSourceTime_(CMTime endTime) {
    _objc_msgSend_1067(this.pointer, _sel_endSessionAtSourceTime_, endTime);
  }

  /// cancelWriting
  void cancelWriting() {
    _objc_msgSend_7(this.pointer, _sel_cancelWriting);
  }

  /// finishWriting
  bool finishWriting() {
    return _objc_msgSend_13(this.pointer, _sel_finishWriting);
  }

  /// finishWritingWithCompletionHandler:
  void finishWritingWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function()> handler) {
    _objc_msgSend_261(this.pointer, _sel_finishWritingWithCompletionHandler_,
        handler.pointer);
  }

  /// movieFragmentInterval
  void getMovieFragmentInterval(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_movieFragmentInterval)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_movieFragmentInterval);
  }

  /// setMovieFragmentInterval:
  set movieFragmentInterval(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setMovieFragmentInterval_, value);
  }

  /// initialMovieFragmentInterval
  void getInitialMovieFragmentInterval(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_initialMovieFragmentInterval)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_initialMovieFragmentInterval);
  }

  /// setInitialMovieFragmentInterval:
  set initialMovieFragmentInterval(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setInitialMovieFragmentInterval_, value);
  }

  /// initialMovieFragmentSequenceNumber
  int get initialMovieFragmentSequenceNumber {
    return _objc_msgSend_125(
        this.pointer, _sel_initialMovieFragmentSequenceNumber);
  }

  /// setInitialMovieFragmentSequenceNumber:
  set initialMovieFragmentSequenceNumber(int value) {
    return _objc_msgSend_144(
        this.pointer, _sel_setInitialMovieFragmentSequenceNumber_, value);
  }

  /// producesCombinableFragments
  bool get producesCombinableFragments {
    return _objc_msgSend_13(this.pointer, _sel_producesCombinableFragments);
  }

  /// setProducesCombinableFragments:
  set producesCombinableFragments(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setProducesCombinableFragments_, value);
  }

  /// overallDurationHint
  void getOverallDurationHint(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_overallDurationHint)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_overallDurationHint);
  }

  /// setOverallDurationHint:
  set overallDurationHint(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setOverallDurationHint_, value);
  }

  /// movieTimeScale
  int get movieTimeScale {
    return _objc_msgSend_718(this.pointer, _sel_movieTimeScale);
  }

  /// setMovieTimeScale:
  set movieTimeScale(int value) {
    return _objc_msgSend_1027(this.pointer, _sel_setMovieTimeScale_, value);
  }

  /// canAddInputGroup:
  bool canAddInputGroup_(AVAssetWriterInputGroup inputGroup) {
    return _objc_msgSend_1070(
        this.pointer, _sel_canAddInputGroup_, inputGroup.pointer);
  }

  /// addInputGroup:
  void addInputGroup_(AVAssetWriterInputGroup inputGroup) {
    _objc_msgSend_1071(this.pointer, _sel_addInputGroup_, inputGroup.pointer);
  }

  /// inputGroups
  objc.NSArray get inputGroups {
    final _ret = _objc_msgSend_33(this.pointer, _sel_inputGroups);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredOutputSegmentInterval
  void getPreferredOutputSegmentInterval(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_preferredOutputSegmentInterval)
        : stret.ref = _objc_msgSend_712(
            this.pointer, _sel_preferredOutputSegmentInterval);
  }

  /// setPreferredOutputSegmentInterval:
  set preferredOutputSegmentInterval(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setPreferredOutputSegmentInterval_, value);
  }

  /// initialSegmentStartTime
  void getInitialSegmentStartTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_initialSegmentStartTime)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_initialSegmentStartTime);
  }

  /// setInitialSegmentStartTime:
  set initialSegmentStartTime(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setInitialSegmentStartTime_, value);
  }

  /// outputFileTypeProfile
  objc.NSString? get outputFileTypeProfile {
    final _ret = _objc_msgSend_20(this.pointer, _sel_outputFileTypeProfile);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setOutputFileTypeProfile:
  set outputFileTypeProfile(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setOutputFileTypeProfile_,
        value?.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// flushSegment
  void flushSegment() {
    _objc_msgSend_7(this.pointer, _sel_flushSegment);
  }

  /// allocWithZone:
  static AVAssetWriter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAssetWriter, _sel_allocWithZone_, zone);
    return AVAssetWriter.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAssetWriter alloc() {
    final _ret = _objc_msgSend_19(_class_AVAssetWriter, _sel_alloc);
    return AVAssetWriter.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetWriter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetWriter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetWriter, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAssetWriter, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetWriter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetWriter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetWriter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetWriter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetWriter, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetWriter = objc.getClass("AVAssetWriter");
late final _sel_assetWriterWithURL_fileType_error_ =
    objc.registerName("assetWriterWithURL:fileType:error:");
final _objc_msgSend_1054 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithURL_fileType_error_ =
    objc.registerName("initWithURL:fileType:error:");
late final _sel_initWithContentType_ =
    objc.registerName("initWithContentType:");
final _objc_msgSend_1055 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_availableMediaTypes = objc.registerName("availableMediaTypes");

enum AVAssetWriterStatus {
  AVAssetWriterStatusUnknown(0),
  AVAssetWriterStatusWriting(1),
  AVAssetWriterStatusCompleted(2),
  AVAssetWriterStatusFailed(3),
  AVAssetWriterStatusCancelled(4);

  final int value;
  const AVAssetWriterStatus(this.value);

  static AVAssetWriterStatus fromValue(int value) => switch (value) {
        0 => AVAssetWriterStatusUnknown,
        1 => AVAssetWriterStatusWriting,
        2 => AVAssetWriterStatusCompleted,
        3 => AVAssetWriterStatusFailed,
        4 => AVAssetWriterStatusCancelled,
        _ =>
          throw ArgumentError("Unknown value for AVAssetWriterStatus: $value"),
      };
}

final _objc_msgSend_1056 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_inputs = objc.registerName("inputs");
late final _sel_canApplyOutputSettings_forMediaType_ =
    objc.registerName("canApplyOutputSettings:forMediaType:");
final _objc_msgSend_1057 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// AVAssetWriterInput
class AVAssetWriterInput extends objc.NSObject {
  AVAssetWriterInput._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetWriterInput] that points to the same underlying object as [other].
  AVAssetWriterInput.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetWriterInput] that wraps the given raw object pointer.
  AVAssetWriterInput.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetWriterInput].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetWriterInput);
  }

  /// init
  AVAssetWriterInput init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetWriterInput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetWriterInput new1() {
    final _ret = _objc_msgSend_19(_class_AVAssetWriterInput, _sel_new);
    return AVAssetWriterInput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// assetWriterInputWithMediaType:outputSettings:
  static AVAssetWriterInput assetWriterInputWithMediaType_outputSettings_(
      objc.NSString mediaType, objc.NSDictionary? outputSettings) {
    final _ret = _objc_msgSend_64(
        _class_AVAssetWriterInput,
        _sel_assetWriterInputWithMediaType_outputSettings_,
        mediaType.pointer,
        outputSettings?.pointer ?? ffi.nullptr);
    return AVAssetWriterInput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// assetWriterInputWithMediaType:outputSettings:sourceFormatHint:
  static AVAssetWriterInput
      assetWriterInputWithMediaType_outputSettings_sourceFormatHint_(
          objc.NSString mediaType,
          objc.NSDictionary? outputSettings,
          ffi.Pointer<opaqueCMFormatDescription> sourceFormatHint) {
    final _ret = _objc_msgSend_1058(
        _class_AVAssetWriterInput,
        _sel_assetWriterInputWithMediaType_outputSettings_sourceFormatHint_,
        mediaType.pointer,
        outputSettings?.pointer ?? ffi.nullptr,
        sourceFormatHint);
    return AVAssetWriterInput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithMediaType:outputSettings:
  AVAssetWriterInput initWithMediaType_outputSettings_(
      objc.NSString mediaType, objc.NSDictionary? outputSettings) {
    final _ret = _objc_msgSend_64(
        this.pointer,
        _sel_initWithMediaType_outputSettings_,
        mediaType.pointer,
        outputSettings?.pointer ?? ffi.nullptr);
    return AVAssetWriterInput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithMediaType:outputSettings:sourceFormatHint:
  AVAssetWriterInput initWithMediaType_outputSettings_sourceFormatHint_(
      objc.NSString mediaType,
      objc.NSDictionary? outputSettings,
      ffi.Pointer<opaqueCMFormatDescription> sourceFormatHint) {
    final _ret = _objc_msgSend_1058(
        this.pointer,
        _sel_initWithMediaType_outputSettings_sourceFormatHint_,
        mediaType.pointer,
        outputSettings?.pointer ?? ffi.nullptr,
        sourceFormatHint);
    return AVAssetWriterInput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// mediaType
  objc.NSString get mediaType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_mediaType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputSettings
  objc.NSDictionary? get outputSettings {
    final _ret = _objc_msgSend_84(this.pointer, _sel_outputSettings);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceFormatHint
  ffi.Pointer<opaqueCMFormatDescription> get sourceFormatHint {
    return _objc_msgSend_730(this.pointer, _sel_sourceFormatHint);
  }

  /// metadata
  objc.NSArray get metadata {
    final _ret = _objc_msgSend_33(this.pointer, _sel_metadata);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMetadata:
  set metadata(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer, _sel_setMetadata_, value.pointer);
  }

  /// isReadyForMoreMediaData
  bool get readyForMoreMediaData {
    return _objc_msgSend_13(this.pointer, _sel_isReadyForMoreMediaData);
  }

  /// expectsMediaDataInRealTime
  bool get expectsMediaDataInRealTime {
    return _objc_msgSend_13(this.pointer, _sel_expectsMediaDataInRealTime);
  }

  /// setExpectsMediaDataInRealTime:
  set expectsMediaDataInRealTime(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setExpectsMediaDataInRealTime_, value);
  }

  /// requestMediaDataWhenReadyOnQueue:usingBlock:
  void requestMediaDataWhenReadyOnQueue_usingBlock_(
      objc.NSObject queue, objc.ObjCBlock<ffi.Void Function()> block) {
    _objc_msgSend_1059(
        this.pointer,
        _sel_requestMediaDataWhenReadyOnQueue_usingBlock_,
        queue.pointer,
        block.pointer);
  }

  /// appendSampleBuffer:
  bool appendSampleBuffer_(ffi.Pointer<opaqueCMSampleBuffer> sampleBuffer) {
    return _objc_msgSend_1060(
        this.pointer, _sel_appendSampleBuffer_, sampleBuffer);
  }

  /// markAsFinished
  void markAsFinished() {
    _objc_msgSend_7(this.pointer, _sel_markAsFinished);
  }

  /// languageCode
  objc.NSString? get languageCode {
    final _ret = _objc_msgSend_20(this.pointer, _sel_languageCode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLanguageCode:
  set languageCode(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setLanguageCode_, value?.pointer ?? ffi.nullptr);
  }

  /// extendedLanguageTag
  objc.NSString? get extendedLanguageTag {
    final _ret = _objc_msgSend_20(this.pointer, _sel_extendedLanguageTag);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setExtendedLanguageTag:
  set extendedLanguageTag(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setExtendedLanguageTag_,
        value?.pointer ?? ffi.nullptr);
  }

  /// naturalSize
  void getNaturalSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_naturalSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_naturalSize);
  }

  /// setNaturalSize:
  set naturalSize(CGSize value) {
    return _objc_msgSend_819(this.pointer, _sel_setNaturalSize_, value);
  }

  /// transform
  void getTransform(ffi.Pointer<CGAffineTransform> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_713Stret(stret, this.pointer, _sel_transform)
        : stret.ref = _objc_msgSend_713(this.pointer, _sel_transform);
  }

  /// setTransform:
  set transform(CGAffineTransform value) {
    return _objc_msgSend_1061(this.pointer, _sel_setTransform_, value);
  }

  /// preferredVolume
  double get preferredVolume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_preferredVolume)
        : _objc_msgSend_361(this.pointer, _sel_preferredVolume);
  }

  /// setPreferredVolume:
  set preferredVolume(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setPreferredVolume_, value);
  }

  /// marksOutputTrackAsEnabled
  bool get marksOutputTrackAsEnabled {
    return _objc_msgSend_13(this.pointer, _sel_marksOutputTrackAsEnabled);
  }

  /// setMarksOutputTrackAsEnabled:
  set marksOutputTrackAsEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setMarksOutputTrackAsEnabled_, value);
  }

  /// mediaTimeScale
  int get mediaTimeScale {
    return _objc_msgSend_718(this.pointer, _sel_mediaTimeScale);
  }

  /// setMediaTimeScale:
  set mediaTimeScale(int value) {
    return _objc_msgSend_1027(this.pointer, _sel_setMediaTimeScale_, value);
  }

  /// preferredMediaChunkDuration
  void getPreferredMediaChunkDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_preferredMediaChunkDuration)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_preferredMediaChunkDuration);
  }

  /// setPreferredMediaChunkDuration:
  set preferredMediaChunkDuration(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setPreferredMediaChunkDuration_, value);
  }

  /// preferredMediaChunkAlignment
  int get preferredMediaChunkAlignment {
    return _objc_msgSend_125(this.pointer, _sel_preferredMediaChunkAlignment);
  }

  /// setPreferredMediaChunkAlignment:
  set preferredMediaChunkAlignment(int value) {
    return _objc_msgSend_144(
        this.pointer, _sel_setPreferredMediaChunkAlignment_, value);
  }

  /// sampleReferenceBaseURL
  objc.NSURL? get sampleReferenceBaseURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_sampleReferenceBaseURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSampleReferenceBaseURL:
  set sampleReferenceBaseURL(objc.NSURL? value) {
    return _objc_msgSend_25(this.pointer, _sel_setSampleReferenceBaseURL_,
        value?.pointer ?? ffi.nullptr);
  }

  /// mediaDataLocation
  objc.NSString get mediaDataLocation {
    final _ret = _objc_msgSend_11(this.pointer, _sel_mediaDataLocation);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMediaDataLocation:
  set mediaDataLocation(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setMediaDataLocation_, value.pointer);
  }

  /// canAddTrackAssociationWithTrackOfInput:type:
  bool canAddTrackAssociationWithTrackOfInput_type_(
      AVAssetWriterInput input, objc.NSString trackAssociationType) {
    return _objc_msgSend_1062(
        this.pointer,
        _sel_canAddTrackAssociationWithTrackOfInput_type_,
        input.pointer,
        trackAssociationType.pointer);
  }

  /// addTrackAssociationWithTrackOfInput:type:
  void addTrackAssociationWithTrackOfInput_type_(
      AVAssetWriterInput input, objc.NSString trackAssociationType) {
    _objc_msgSend_1063(
        this.pointer,
        _sel_addTrackAssociationWithTrackOfInput_type_,
        input.pointer,
        trackAssociationType.pointer);
  }

  /// performsMultiPassEncodingIfSupported
  bool get performsMultiPassEncodingIfSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_performsMultiPassEncodingIfSupported);
  }

  /// setPerformsMultiPassEncodingIfSupported:
  set performsMultiPassEncodingIfSupported(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setPerformsMultiPassEncodingIfSupported_, value);
  }

  /// canPerformMultiplePasses
  bool get canPerformMultiplePasses {
    return _objc_msgSend_13(this.pointer, _sel_canPerformMultiplePasses);
  }

  /// currentPassDescription
  AVAssetWriterInputPassDescription? get currentPassDescription {
    final _ret = _objc_msgSend_1064(this.pointer, _sel_currentPassDescription);
    return _ret.address == 0
        ? null
        : AVAssetWriterInputPassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// respondToEachPassDescriptionOnQueue:usingBlock:
  void respondToEachPassDescriptionOnQueue_usingBlock_(
      objc.NSObject queue, objc.ObjCBlock<ffi.Void Function()> block) {
    _objc_msgSend_1059(
        this.pointer,
        _sel_respondToEachPassDescriptionOnQueue_usingBlock_,
        queue.pointer,
        block.pointer);
  }

  /// markCurrentPassAsFinished
  void markCurrentPassAsFinished() {
    _objc_msgSend_7(this.pointer, _sel_markCurrentPassAsFinished);
  }

  /// allocWithZone:
  static AVAssetWriterInput allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAssetWriterInput, _sel_allocWithZone_, zone);
    return AVAssetWriterInput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetWriterInput alloc() {
    final _ret = _objc_msgSend_19(_class_AVAssetWriterInput, _sel_alloc);
    return AVAssetWriterInput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetWriterInput,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetWriterInput,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetWriterInput, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAssetWriterInput, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetWriterInput,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetWriterInput,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetWriterInput,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetWriterInput, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetWriterInput, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetWriterInput = objc.getClass("AVAssetWriterInput");
late final _sel_assetWriterInputWithMediaType_outputSettings_ =
    objc.registerName("assetWriterInputWithMediaType:outputSettings:");
late final _sel_assetWriterInputWithMediaType_outputSettings_sourceFormatHint_ =
    objc.registerName(
        "assetWriterInputWithMediaType:outputSettings:sourceFormatHint:");
final _objc_msgSend_1058 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<opaqueCMFormatDescription>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<opaqueCMFormatDescription>)>();
late final _sel_initWithMediaType_outputSettings_ =
    objc.registerName("initWithMediaType:outputSettings:");
late final _sel_initWithMediaType_outputSettings_sourceFormatHint_ =
    objc.registerName("initWithMediaType:outputSettings:sourceFormatHint:");
late final _sel_sourceFormatHint = objc.registerName("sourceFormatHint");
late final _sel_isReadyForMoreMediaData =
    objc.registerName("isReadyForMoreMediaData");
late final _sel_expectsMediaDataInRealTime =
    objc.registerName("expectsMediaDataInRealTime");
late final _sel_setExpectsMediaDataInRealTime_ =
    objc.registerName("setExpectsMediaDataInRealTime:");
late final _sel_requestMediaDataWhenReadyOnQueue_usingBlock_ =
    objc.registerName("requestMediaDataWhenReadyOnQueue:usingBlock:");
final _objc_msgSend_1059 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_appendSampleBuffer_ = objc.registerName("appendSampleBuffer:");
final _objc_msgSend_1060 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<opaqueCMSampleBuffer>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<opaqueCMSampleBuffer>)>();
late final _sel_markAsFinished = objc.registerName("markAsFinished");
late final _sel_setExtendedLanguageTag_ =
    objc.registerName("setExtendedLanguageTag:");
late final _sel_setNaturalSize_ = objc.registerName("setNaturalSize:");
final _objc_msgSend_1061 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGAffineTransform)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGAffineTransform)>();
late final _sel_setPreferredVolume_ = objc.registerName("setPreferredVolume:");
late final _sel_marksOutputTrackAsEnabled =
    objc.registerName("marksOutputTrackAsEnabled");
late final _sel_setMarksOutputTrackAsEnabled_ =
    objc.registerName("setMarksOutputTrackAsEnabled:");
late final _sel_mediaTimeScale = objc.registerName("mediaTimeScale");
late final _sel_setMediaTimeScale_ = objc.registerName("setMediaTimeScale:");
late final _sel_preferredMediaChunkDuration =
    objc.registerName("preferredMediaChunkDuration");
late final _sel_setPreferredMediaChunkDuration_ =
    objc.registerName("setPreferredMediaChunkDuration:");
late final _sel_preferredMediaChunkAlignment =
    objc.registerName("preferredMediaChunkAlignment");
late final _sel_setPreferredMediaChunkAlignment_ =
    objc.registerName("setPreferredMediaChunkAlignment:");
late final _sel_sampleReferenceBaseURL =
    objc.registerName("sampleReferenceBaseURL");
late final _sel_setSampleReferenceBaseURL_ =
    objc.registerName("setSampleReferenceBaseURL:");
late final _sel_mediaDataLocation = objc.registerName("mediaDataLocation");
late final _sel_setMediaDataLocation_ =
    objc.registerName("setMediaDataLocation:");
late final _sel_canAddTrackAssociationWithTrackOfInput_type_ =
    objc.registerName("canAddTrackAssociationWithTrackOfInput:type:");
final _objc_msgSend_1062 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addTrackAssociationWithTrackOfInput_type_ =
    objc.registerName("addTrackAssociationWithTrackOfInput:type:");
final _objc_msgSend_1063 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_performsMultiPassEncodingIfSupported =
    objc.registerName("performsMultiPassEncodingIfSupported");
late final _sel_setPerformsMultiPassEncodingIfSupported_ =
    objc.registerName("setPerformsMultiPassEncodingIfSupported:");
late final _sel_canPerformMultiplePasses =
    objc.registerName("canPerformMultiplePasses");

/// AVAssetWriterInputPassDescription
class AVAssetWriterInputPassDescription extends objc.NSObject {
  AVAssetWriterInputPassDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetWriterInputPassDescription] that points to the same underlying object as [other].
  AVAssetWriterInputPassDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetWriterInputPassDescription] that wraps the given raw object pointer.
  AVAssetWriterInputPassDescription.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetWriterInputPassDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVAssetWriterInputPassDescription);
  }

  /// init
  AVAssetWriterInputPassDescription init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetWriterInputPassDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetWriterInputPassDescription new1() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetWriterInputPassDescription, _sel_new);
    return AVAssetWriterInputPassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// sourceTimeRanges
  objc.NSArray get sourceTimeRanges {
    final _ret = _objc_msgSend_33(this.pointer, _sel_sourceTimeRanges);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVAssetWriterInputPassDescription allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAssetWriterInputPassDescription, _sel_allocWithZone_, zone);
    return AVAssetWriterInputPassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetWriterInputPassDescription alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVAssetWriterInputPassDescription, _sel_alloc);
    return AVAssetWriterInputPassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetWriterInputPassDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetWriterInputPassDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVAssetWriterInputPassDescription,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAssetWriterInputPassDescription, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetWriterInputPassDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetWriterInputPassDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetWriterInputPassDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVAssetWriterInputPassDescription,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetWriterInputPassDescription, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetWriterInputPassDescription =
    objc.getClass("AVAssetWriterInputPassDescription");
late final _sel_sourceTimeRanges = objc.registerName("sourceTimeRanges");
late final _sel_currentPassDescription =
    objc.registerName("currentPassDescription");
final _objc_msgSend_1064 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_respondToEachPassDescriptionOnQueue_usingBlock_ =
    objc.registerName("respondToEachPassDescriptionOnQueue:usingBlock:");
late final _sel_markCurrentPassAsFinished =
    objc.registerName("markCurrentPassAsFinished");
late final _sel_canAddInput_ = objc.registerName("canAddInput:");
final _objc_msgSend_1065 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addInput_ = objc.registerName("addInput:");
final _objc_msgSend_1066 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_startWriting = objc.registerName("startWriting");
late final _sel_startSessionAtSourceTime_ =
    objc.registerName("startSessionAtSourceTime:");
final _objc_msgSend_1067 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTime)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTime)>();
late final _sel_endSessionAtSourceTime_ =
    objc.registerName("endSessionAtSourceTime:");
late final _sel_cancelWriting = objc.registerName("cancelWriting");
late final _sel_finishWriting = objc.registerName("finishWriting");
late final _sel_finishWritingWithCompletionHandler_ =
    objc.registerName("finishWritingWithCompletionHandler:");
late final _sel_movieFragmentInterval =
    objc.registerName("movieFragmentInterval");
late final _sel_setMovieFragmentInterval_ =
    objc.registerName("setMovieFragmentInterval:");
late final _sel_initialMovieFragmentInterval =
    objc.registerName("initialMovieFragmentInterval");
late final _sel_setInitialMovieFragmentInterval_ =
    objc.registerName("setInitialMovieFragmentInterval:");
late final _sel_initialMovieFragmentSequenceNumber =
    objc.registerName("initialMovieFragmentSequenceNumber");
late final _sel_setInitialMovieFragmentSequenceNumber_ =
    objc.registerName("setInitialMovieFragmentSequenceNumber:");
late final _sel_producesCombinableFragments =
    objc.registerName("producesCombinableFragments");
late final _sel_setProducesCombinableFragments_ =
    objc.registerName("setProducesCombinableFragments:");
late final _sel_setOverallDurationHint_ =
    objc.registerName("setOverallDurationHint:");
late final _sel_movieTimeScale = objc.registerName("movieTimeScale");
late final _sel_setMovieTimeScale_ = objc.registerName("setMovieTimeScale:");

/// AVAssetWriterInputGroup
class AVAssetWriterInputGroup extends AVMediaSelectionGroup {
  AVAssetWriterInputGroup._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAssetWriterInputGroup] that points to the same underlying object as [other].
  AVAssetWriterInputGroup.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAssetWriterInputGroup] that wraps the given raw object pointer.
  AVAssetWriterInputGroup.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAssetWriterInputGroup].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAssetWriterInputGroup);
  }

  /// init
  AVAssetWriterInputGroup init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAssetWriterInputGroup.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAssetWriterInputGroup new1() {
    final _ret = _objc_msgSend_19(_class_AVAssetWriterInputGroup, _sel_new);
    return AVAssetWriterInputGroup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// assetWriterInputGroupWithInputs:defaultInput:
  static AVAssetWriterInputGroup assetWriterInputGroupWithInputs_defaultInput_(
      objc.NSArray inputs, AVAssetWriterInput? defaultInput) {
    final _ret = _objc_msgSend_1068(
        _class_AVAssetWriterInputGroup,
        _sel_assetWriterInputGroupWithInputs_defaultInput_,
        inputs.pointer,
        defaultInput?.pointer ?? ffi.nullptr);
    return AVAssetWriterInputGroup.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithInputs:defaultInput:
  AVAssetWriterInputGroup initWithInputs_defaultInput_(
      objc.NSArray inputs, AVAssetWriterInput? defaultInput) {
    final _ret = _objc_msgSend_1068(
        this.pointer,
        _sel_initWithInputs_defaultInput_,
        inputs.pointer,
        defaultInput?.pointer ?? ffi.nullptr);
    return AVAssetWriterInputGroup.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// inputs
  objc.NSArray get inputs {
    final _ret = _objc_msgSend_33(this.pointer, _sel_inputs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultInput
  AVAssetWriterInput? get defaultInput {
    final _ret = _objc_msgSend_1069(this.pointer, _sel_defaultInput);
    return _ret.address == 0
        ? null
        : AVAssetWriterInput.castFromPointer(_ret, retain: true, release: true);
  }

  /// playableMediaSelectionOptionsFromArray:
  static objc.NSArray playableMediaSelectionOptionsFromArray_(
      objc.NSArray mediaSelectionOptions) {
    final _ret = _objc_msgSend_86(
        _class_AVAssetWriterInputGroup,
        _sel_playableMediaSelectionOptionsFromArray_,
        mediaSelectionOptions.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionOptionsFromArray:filteredAndSortedAccordingToPreferredLanguages:
  static objc.NSArray
      mediaSelectionOptionsFromArray_filteredAndSortedAccordingToPreferredLanguages_(
          objc.NSArray mediaSelectionOptions, objc.NSArray preferredLanguages) {
    final _ret = _objc_msgSend_742(
        _class_AVAssetWriterInputGroup,
        _sel_mediaSelectionOptionsFromArray_filteredAndSortedAccordingToPreferredLanguages_,
        mediaSelectionOptions.pointer,
        preferredLanguages.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionOptionsFromArray:withLocale:
  static objc.NSArray mediaSelectionOptionsFromArray_withLocale_(
      objc.NSArray mediaSelectionOptions, objc.NSLocale locale) {
    final _ret = _objc_msgSend_749(
        _class_AVAssetWriterInputGroup,
        _sel_mediaSelectionOptionsFromArray_withLocale_,
        mediaSelectionOptions.pointer,
        locale.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionOptionsFromArray:withMediaCharacteristics:
  static objc.NSArray mediaSelectionOptionsFromArray_withMediaCharacteristics_(
      objc.NSArray mediaSelectionOptions, objc.NSArray mediaCharacteristics) {
    final _ret = _objc_msgSend_742(
        _class_AVAssetWriterInputGroup,
        _sel_mediaSelectionOptionsFromArray_withMediaCharacteristics_,
        mediaSelectionOptions.pointer,
        mediaCharacteristics.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionOptionsFromArray:withoutMediaCharacteristics:
  static objc.NSArray
      mediaSelectionOptionsFromArray_withoutMediaCharacteristics_(
          objc.NSArray mediaSelectionOptions,
          objc.NSArray mediaCharacteristics) {
    final _ret = _objc_msgSend_742(
        _class_AVAssetWriterInputGroup,
        _sel_mediaSelectionOptionsFromArray_withoutMediaCharacteristics_,
        mediaSelectionOptions.pointer,
        mediaCharacteristics.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVAssetWriterInputGroup allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAssetWriterInputGroup, _sel_allocWithZone_, zone);
    return AVAssetWriterInputGroup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAssetWriterInputGroup alloc() {
    final _ret = _objc_msgSend_19(_class_AVAssetWriterInputGroup, _sel_alloc);
    return AVAssetWriterInputGroup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAssetWriterInputGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAssetWriterInputGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAssetWriterInputGroup, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAssetWriterInputGroup, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAssetWriterInputGroup,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAssetWriterInputGroup,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAssetWriterInputGroup,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAssetWriterInputGroup, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAssetWriterInputGroup, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAssetWriterInputGroup =
    objc.getClass("AVAssetWriterInputGroup");
late final _sel_assetWriterInputGroupWithInputs_defaultInput_ =
    objc.registerName("assetWriterInputGroupWithInputs:defaultInput:");
final _objc_msgSend_1068 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithInputs_defaultInput_ =
    objc.registerName("initWithInputs:defaultInput:");
late final _sel_defaultInput = objc.registerName("defaultInput");
final _objc_msgSend_1069 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_canAddInputGroup_ = objc.registerName("canAddInputGroup:");
final _objc_msgSend_1070 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addInputGroup_ = objc.registerName("addInputGroup:");
final _objc_msgSend_1071 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_inputGroups = objc.registerName("inputGroups");
late final _sel_preferredOutputSegmentInterval =
    objc.registerName("preferredOutputSegmentInterval");
late final _sel_setPreferredOutputSegmentInterval_ =
    objc.registerName("setPreferredOutputSegmentInterval:");
late final _sel_initialSegmentStartTime =
    objc.registerName("initialSegmentStartTime");
late final _sel_setInitialSegmentStartTime_ =
    objc.registerName("setInitialSegmentStartTime:");
late final _sel_outputFileTypeProfile =
    objc.registerName("outputFileTypeProfile");
late final _sel_setOutputFileTypeProfile_ =
    objc.registerName("setOutputFileTypeProfile:");
late final _sel_flushSegment = objc.registerName("flushSegment");

/// AUAudioUnit
class AUAudioUnit extends objc.NSObject {
  AUAudioUnit._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AUAudioUnit] that points to the same underlying object as [other].
  AUAudioUnit.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AUAudioUnit] that wraps the given raw object pointer.
  AUAudioUnit.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AUAudioUnit].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AUAudioUnit);
  }

  /// init
  AUAudioUnit init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AUAudioUnit.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithComponentDescription:options:error:
  AUAudioUnit? initWithComponentDescription_options_error_(
      AudioComponentDescription componentDescription,
      AudioComponentInstantiationOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1072(
        this.pointer,
        _sel_initWithComponentDescription_options_error_,
        componentDescription,
        options.value,
        outError);
    return _ret.address == 0
        ? null
        : AUAudioUnit.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithComponentDescription:error:
  AUAudioUnit? initWithComponentDescription_error_(
      AudioComponentDescription componentDescription,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1073(
        this.pointer,
        _sel_initWithComponentDescription_error_,
        componentDescription,
        outError);
    return _ret.address == 0
        ? null
        : AUAudioUnit.castFromPointer(_ret, retain: true, release: true);
  }

  /// instantiateWithComponentDescription:options:completionHandler:
  static void instantiateWithComponentDescription_options_completionHandler_(
      AudioComponentDescription componentDescription,
      AudioComponentInstantiationOptions options,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_1074(
        _class_AUAudioUnit,
        _sel_instantiateWithComponentDescription_options_completionHandler_,
        componentDescription,
        options.value,
        completionHandler.pointer);
  }

  /// componentDescription
  void getComponentDescription(ffi.Pointer<AudioComponentDescription> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1075Stret(
            stret, this.pointer, _sel_componentDescription)
        : stret.ref =
            _objc_msgSend_1075(this.pointer, _sel_componentDescription);
  }

  /// component
  ffi.Pointer<OpaqueAudioComponent> get component {
    return _objc_msgSend_1076(this.pointer, _sel_component);
  }

  /// componentName
  objc.NSString? get componentName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_componentName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// audioUnitName
  objc.NSString? get audioUnitName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_audioUnitName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// manufacturerName
  objc.NSString? get manufacturerName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_manufacturerName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// audioUnitShortName
  objc.NSString? get audioUnitShortName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_audioUnitShortName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// componentVersion
  int get componentVersion {
    return _objc_msgSend_988(this.pointer, _sel_componentVersion);
  }

  /// allocateRenderResourcesAndReturnError:
  bool allocateRenderResourcesAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_39(
        this.pointer, _sel_allocateRenderResourcesAndReturnError_, outError);
  }

  /// deallocateRenderResources
  void deallocateRenderResources() {
    _objc_msgSend_7(this.pointer, _sel_deallocateRenderResources);
  }

  /// renderResourcesAllocated
  bool get renderResourcesAllocated {
    return _objc_msgSend_13(this.pointer, _sel_renderResourcesAllocated);
  }

  /// reset
  void reset() {
    _objc_msgSend_7(this.pointer, _sel_reset);
  }

  /// inputBusses
  AUAudioUnitBusArray get inputBusses {
    final _ret = _objc_msgSend_1102(this.pointer, _sel_inputBusses);
    return AUAudioUnitBusArray.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// outputBusses
  AUAudioUnitBusArray get outputBusses {
    final _ret = _objc_msgSend_1102(this.pointer, _sel_outputBusses);
    return AUAudioUnitBusArray.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// renderBlock
  objc.ObjCBlock<
      ffi.Int Function(
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<AudioTimeStamp>,
          ffi.Uint32,
          ffi.Long,
          ffi.Pointer<AudioBufferList>,
          ffi.Pointer<objc.ObjCBlockImpl>)> get renderBlock {
    final _ret = _objc_msgSend_1103(this.pointer, _sel_renderBlock);
    return ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList
        .castFromPointer(_ret, retain: true, release: true);
  }

  /// scheduleParameterBlock
  objc.ObjCBlock<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>
      get scheduleParameterBlock {
    final _ret = _objc_msgSend_1104(this.pointer, _sel_scheduleParameterBlock);
    return ObjCBlock_ffiVoid_Int64_Uint32_Uint64_ffiFloat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// tokenByAddingRenderObserver:
  int tokenByAddingRenderObserver_(
      objc.ObjCBlock<
              ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>,
                  ffi.Uint32, ffi.Long)>
          observer) {
    return _objc_msgSend_1105(
        this.pointer, _sel_tokenByAddingRenderObserver_, observer.pointer);
  }

  /// removeRenderObserver:
  void removeRenderObserver_(int token) {
    _objc_msgSend_145(this.pointer, _sel_removeRenderObserver_, token);
  }

  /// maximumFramesToRender
  int get maximumFramesToRender {
    return _objc_msgSend_988(this.pointer, _sel_maximumFramesToRender);
  }

  /// setMaximumFramesToRender:
  set maximumFramesToRender(int value) {
    return _objc_msgSend_1097(
        this.pointer, _sel_setMaximumFramesToRender_, value);
  }

  /// parameterTree
  AUParameterTree? get parameterTree {
    final _ret = _objc_msgSend_1135(this.pointer, _sel_parameterTree);
    return _ret.address == 0
        ? null
        : AUParameterTree.castFromPointer(_ret, retain: true, release: true);
  }

  /// setParameterTree:
  set parameterTree(AUParameterTree? value) {
    return _objc_msgSend_1136(
        this.pointer, _sel_setParameterTree_, value?.pointer ?? ffi.nullptr);
  }

  /// parametersForOverviewWithCount:
  objc.NSArray parametersForOverviewWithCount_(int count) {
    final _ret = _objc_msgSend_1137(
        this.pointer, _sel_parametersForOverviewWithCount_, count);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allParameterValues
  bool get allParameterValues {
    return _objc_msgSend_13(this.pointer, _sel_allParameterValues);
  }

  /// isMusicDeviceOrEffect
  bool get musicDeviceOrEffect {
    return _objc_msgSend_13(this.pointer, _sel_isMusicDeviceOrEffect);
  }

  /// virtualMIDICableCount
  int get virtualMIDICableCount {
    return _objc_msgSend_125(this.pointer, _sel_virtualMIDICableCount);
  }

  /// scheduleMIDIEventBlock
  objc.ObjCBlock<
          ffi.Void Function(
              ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>?
      get scheduleMIDIEventBlock {
    final _ret = _objc_msgSend_1138(this.pointer, _sel_scheduleMIDIEventBlock);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_Int64_Uint8_ffiLong_Uint8.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// scheduleMIDIEventListBlock
  objc.ObjCBlock<
          ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>?
      get scheduleMIDIEventListBlock {
    final _ret =
        _objc_msgSend_1139(this.pointer, _sel_scheduleMIDIEventListBlock);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiInt_Int64_Uint8_MIDIEventList.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// MIDIOutputNames
  objc.NSArray get MIDIOutputNames {
    final _ret = _objc_msgSend_33(this.pointer, _sel_MIDIOutputNames);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// providesUserInterface
  bool get providesUserInterface {
    return _objc_msgSend_13(this.pointer, _sel_providesUserInterface);
  }

  /// MIDIOutputEventBlock
  objc.ObjCBlock<
          ffi.Int Function(
              ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>?
      get MIDIOutputEventBlock {
    final _ret = _objc_msgSend_1140(this.pointer, _sel_MIDIOutputEventBlock);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiInt_Int64_Uint8_ffiLong_Uint8.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setMIDIOutputEventBlock:
  set MIDIOutputEventBlock(
      objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>?
          value) {
    return _objc_msgSend_1141(this.pointer, _sel_setMIDIOutputEventBlock_,
        value?.pointer ?? ffi.nullptr);
  }

  /// MIDIOutputEventListBlock
  objc.ObjCBlock<
          ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>?
      get MIDIOutputEventListBlock {
    final _ret =
        _objc_msgSend_1139(this.pointer, _sel_MIDIOutputEventListBlock);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiInt_Int64_Uint8_MIDIEventList.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setMIDIOutputEventListBlock:
  set MIDIOutputEventListBlock(
      objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>?
          value) {
    return _objc_msgSend_1142(this.pointer, _sel_setMIDIOutputEventListBlock_,
        value?.pointer ?? ffi.nullptr);
  }

  /// AudioUnitMIDIProtocol
  MIDIProtocolID get AudioUnitMIDIProtocol {
    final _ret = _objc_msgSend_1143(this.pointer, _sel_AudioUnitMIDIProtocol);
    return MIDIProtocolID.fromValue(_ret);
  }

  /// hostMIDIProtocol
  MIDIProtocolID get hostMIDIProtocol {
    final _ret = _objc_msgSend_1143(this.pointer, _sel_hostMIDIProtocol);
    return MIDIProtocolID.fromValue(_ret);
  }

  /// setHostMIDIProtocol:
  set hostMIDIProtocol(MIDIProtocolID value) {
    return _objc_msgSend_1144(
        this.pointer, _sel_setHostMIDIProtocol_, value.value);
  }

  /// fullState
  objc.NSDictionary? get fullState {
    final _ret = _objc_msgSend_84(this.pointer, _sel_fullState);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFullState:
  set fullState(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer, _sel_setFullState_, value?.pointer ?? ffi.nullptr);
  }

  /// fullStateForDocument
  objc.NSDictionary? get fullStateForDocument {
    final _ret = _objc_msgSend_84(this.pointer, _sel_fullStateForDocument);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFullStateForDocument:
  set fullStateForDocument(objc.NSDictionary? value) {
    return _objc_msgSend_189(this.pointer, _sel_setFullStateForDocument_,
        value?.pointer ?? ffi.nullptr);
  }

  /// factoryPresets
  objc.NSArray? get factoryPresets {
    final _ret = _objc_msgSend_88(this.pointer, _sel_factoryPresets);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// userPresets
  objc.NSArray get userPresets {
    final _ret = _objc_msgSend_33(this.pointer, _sel_userPresets);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// saveUserPreset:error:
  bool saveUserPreset_error_(AUAudioUnitPreset userPreset,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1145(
        this.pointer, _sel_saveUserPreset_error_, userPreset.pointer, outError);
  }

  /// deleteUserPreset:error:
  bool deleteUserPreset_error_(AUAudioUnitPreset userPreset,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1145(this.pointer, _sel_deleteUserPreset_error_,
        userPreset.pointer, outError);
  }

  /// presetStateFor:error:
  objc.NSDictionary? presetStateFor_error_(AUAudioUnitPreset userPreset,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1146(
        this.pointer, _sel_presetStateFor_error_, userPreset.pointer, outError);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportsUserPresets
  bool get supportsUserPresets {
    return _objc_msgSend_13(this.pointer, _sel_supportsUserPresets);
  }

  /// isLoadedInProcess
  bool get isLoadedInProcess {
    return _objc_msgSend_13(this.pointer, _sel_isLoadedInProcess);
  }

  /// currentPreset
  AUAudioUnitPreset? get currentPreset {
    final _ret = _objc_msgSend_1147(this.pointer, _sel_currentPreset);
    return _ret.address == 0
        ? null
        : AUAudioUnitPreset.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCurrentPreset:
  set currentPreset(AUAudioUnitPreset? value) {
    return _objc_msgSend_1148(
        this.pointer, _sel_setCurrentPreset_, value?.pointer ?? ffi.nullptr);
  }

  /// latency
  double get latency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_latency)
        : _objc_msgSend_18(this.pointer, _sel_latency);
  }

  /// tailTime
  double get tailTime {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_tailTime)
        : _objc_msgSend_18(this.pointer, _sel_tailTime);
  }

  /// renderQuality
  int get renderQuality {
    return _objc_msgSend_125(this.pointer, _sel_renderQuality);
  }

  /// setRenderQuality:
  set renderQuality(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setRenderQuality_, value);
  }

  /// shouldBypassEffect
  bool get shouldBypassEffect {
    return _objc_msgSend_13(this.pointer, _sel_shouldBypassEffect);
  }

  /// setShouldBypassEffect:
  set shouldBypassEffect(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setShouldBypassEffect_, value);
  }

  /// canProcessInPlace
  bool get canProcessInPlace {
    return _objc_msgSend_13(this.pointer, _sel_canProcessInPlace);
  }

  /// isRenderingOffline
  bool get renderingOffline {
    return _objc_msgSend_13(this.pointer, _sel_isRenderingOffline);
  }

  /// setRenderingOffline:
  set renderingOffline(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setRenderingOffline_, value);
  }

  /// channelCapabilities
  objc.NSArray? get channelCapabilities {
    final _ret = _objc_msgSend_88(this.pointer, _sel_channelCapabilities);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// musicalContextBlock
  objc.ObjCBlock<
      ffi.Bool Function(
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Long>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Long>,
          ffi.Pointer<ffi.Double>)>? get musicalContextBlock {
    final _ret = _objc_msgSend_1149(this.pointer, _sel_musicalContextBlock);
    return _ret.address == 0
        ? null
        : ObjCBlock_bool_ffiDouble_ffiDouble_ffiLong_ffiDouble_ffiLong_ffiDouble
            .castFromPointer(_ret, retain: true, release: true);
  }

  /// setMusicalContextBlock:
  set musicalContextBlock(
      objc.ObjCBlock<
              ffi.Bool Function(
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Long>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Long>,
                  ffi.Pointer<ffi.Double>)>?
          value) {
    return _objc_msgSend_1150(this.pointer, _sel_setMusicalContextBlock_,
        value?.pointer ?? ffi.nullptr);
  }

  /// transportStateBlock
  objc.ObjCBlock<
      ffi.Bool Function(
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>? get transportStateBlock {
    final _ret = _objc_msgSend_1151(this.pointer, _sel_transportStateBlock);
    return _ret.address == 0
        ? null
        : ObjCBlock_bool_AUHostTransportStateFlags_ffiDouble_ffiDouble_ffiDouble
            .castFromPointer(_ret, retain: true, release: true);
  }

  /// setTransportStateBlock:
  set transportStateBlock(
      objc.ObjCBlock<
              ffi.Bool Function(
                  ffi.Pointer<ffi.UnsignedLong>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>)>?
          value) {
    return _objc_msgSend_1152(this.pointer, _sel_setTransportStateBlock_,
        value?.pointer ?? ffi.nullptr);
  }

  /// contextName
  objc.NSString? get contextName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_contextName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setContextName:
  set contextName(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setContextName_, value?.pointer ?? ffi.nullptr);
  }

  /// supportsMPE
  bool get supportsMPE {
    return _objc_msgSend_13(this.pointer, _sel_supportsMPE);
  }

  /// channelMap
  objc.NSArray? get channelMap {
    final _ret = _objc_msgSend_88(this.pointer, _sel_channelMap);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setChannelMap:
  set channelMap(objc.NSArray? value) {
    return _objc_msgSend_549(
        this.pointer, _sel_setChannelMap_, value?.pointer ?? ffi.nullptr);
  }

  /// profileStateForCable:channel:
  MIDICIProfileState profileStateForCable_channel_(int cable, int channel) {
    final _ret = _objc_msgSend_1153(
        this.pointer, _sel_profileStateForCable_channel_, cable, channel);
    return MIDICIProfileState.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// enableProfile:cable:onChannel:error:
  bool enableProfile_cable_onChannel_error_(MIDICIProfile profile, int cable,
      int channel, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1154(
        this.pointer,
        _sel_enableProfile_cable_onChannel_error_,
        profile.pointer,
        cable,
        channel,
        outError);
  }

  /// disableProfile:cable:onChannel:error:
  bool disableProfile_cable_onChannel_error_(MIDICIProfile profile, int cable,
      int channel, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1154(
        this.pointer,
        _sel_disableProfile_cable_onChannel_error_,
        profile.pointer,
        cable,
        channel,
        outError);
  }

  /// profileChangedBlock
  objc.ObjCBlock<
          ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)>?
      get profileChangedBlock {
    final _ret = _objc_msgSend_1155(this.pointer, _sel_profileChangedBlock);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_Uint8_Uint8_MIDICIProfile_bool.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setProfileChangedBlock:
  set profileChangedBlock(
      objc.ObjCBlock<
              ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)>?
          value) {
    return _objc_msgSend_1156(this.pointer, _sel_setProfileChangedBlock_,
        value?.pointer ?? ffi.nullptr);
  }

  /// messageChannelFor:
  objc.ObjCObjectBase messageChannelFor_(objc.NSString channelName) {
    final _ret = _objc_msgSend_63(
        this.pointer, _sel_messageChannelFor_, channelName.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// canPerformInput
  bool get canPerformInput {
    return _objc_msgSend_13(this.pointer, _sel_canPerformInput);
  }

  /// canPerformOutput
  bool get canPerformOutput {
    return _objc_msgSend_13(this.pointer, _sel_canPerformOutput);
  }

  /// isInputEnabled
  bool get inputEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isInputEnabled);
  }

  /// setInputEnabled:
  set inputEnabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setInputEnabled_, value);
  }

  /// isOutputEnabled
  bool get outputEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isOutputEnabled);
  }

  /// setOutputEnabled:
  set outputEnabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setOutputEnabled_, value);
  }

  /// outputProvider
  objc.ObjCBlock<
      ffi.Int Function(
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<AudioTimeStamp>,
          ffi.Uint32,
          ffi.Long,
          ffi.Pointer<AudioBufferList>)>? get outputProvider {
    final _ret = _objc_msgSend_1157(this.pointer, _sel_outputProvider);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList
            .castFromPointer(_ret, retain: true, release: true);
  }

  /// setOutputProvider:
  set outputProvider(
      objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<AudioTimeStamp>,
                  ffi.Uint32,
                  ffi.Long,
                  ffi.Pointer<AudioBufferList>)>?
          value) {
    return _objc_msgSend_1158(
        this.pointer, _sel_setOutputProvider_, value?.pointer ?? ffi.nullptr);
  }

  /// inputHandler
  objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<AudioTimeStamp>,
          ffi.Uint32,
          ffi.Long)>? get inputHandler {
    final _ret = _objc_msgSend_1159(this.pointer, _sel_inputHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong1
            .castFromPointer(_ret, retain: true, release: true);
  }

  /// setInputHandler:
  set inputHandler(
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>?
          value) {
    return _objc_msgSend_1160(
        this.pointer, _sel_setInputHandler_, value?.pointer ?? ffi.nullptr);
  }

  /// deviceID
  int get deviceID {
    return _objc_msgSend_647(this.pointer, _sel_deviceID);
  }

  /// setDeviceID:error:
  bool setDeviceID_error_(
      int deviceID, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1161(
        this.pointer, _sel_setDeviceID_error_, deviceID, outError);
  }

  /// deviceInputLatency
  double get deviceInputLatency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_deviceInputLatency)
        : _objc_msgSend_18(this.pointer, _sel_deviceInputLatency);
  }

  /// deviceOutputLatency
  double get deviceOutputLatency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_deviceOutputLatency)
        : _objc_msgSend_18(this.pointer, _sel_deviceOutputLatency);
  }

  /// isRunning
  bool get running {
    return _objc_msgSend_13(this.pointer, _sel_isRunning);
  }

  /// startHardwareAndReturnError:
  bool startHardwareAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_39(
        this.pointer, _sel_startHardwareAndReturnError_, outError);
  }

  /// stopHardware
  void stopHardware() {
    _objc_msgSend_7(this.pointer, _sel_stopHardware);
  }

  /// osWorkgroup
  OS_os_workgroup get osWorkgroup {
    final _ret = _objc_msgSend_1162(this.pointer, _sel_osWorkgroup);
    return OS_os_workgroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// registerSubclass:asComponentDescription:name:version:
  static void registerSubclass_asComponentDescription_name_version_(
      objc.ObjCObjectBase cls,
      AudioComponentDescription componentDescription,
      objc.NSString name,
      int version) {
    _objc_msgSend_1163(
        _class_AUAudioUnit,
        _sel_registerSubclass_asComponentDescription_name_version_,
        cls.pointer,
        componentDescription,
        name.pointer,
        version);
  }

  /// internalRenderBlock
  objc.ObjCBlock<
      ffi.Int Function(
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<AudioTimeStamp>,
          ffi.Uint32,
          ffi.Long,
          ffi.Pointer<AudioBufferList>,
          ffi.Pointer<AURenderEvent>,
          ffi.Pointer<objc.ObjCBlockImpl>)> get internalRenderBlock {
    final _ret = _objc_msgSend_1164(this.pointer, _sel_internalRenderBlock);
    return ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_AURenderEvent_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList
        .castFromPointer(_ret, retain: true, release: true);
  }

  /// renderContextObserver
  objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>
      get renderContextObserver {
    final _ret = _objc_msgSend_1165(this.pointer, _sel_renderContextObserver);
    return ObjCBlock_ffiVoid_AudioUnitRenderContext.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// MIDIOutputBufferSizeHint
  int get MIDIOutputBufferSizeHint {
    return _objc_msgSend_125(this.pointer, _sel_MIDIOutputBufferSizeHint);
  }

  /// setMIDIOutputBufferSizeHint:
  set MIDIOutputBufferSizeHint(int value) {
    return _objc_msgSend_144(
        this.pointer, _sel_setMIDIOutputBufferSizeHint_, value);
  }

  /// shouldChangeToFormat:forBus:
  bool shouldChangeToFormat_forBus_(AVAudioFormat format, AUAudioUnitBus bus) {
    return _objc_msgSend_1166(this.pointer, _sel_shouldChangeToFormat_forBus_,
        format.pointer, bus.pointer);
  }

  /// setRenderResourcesAllocated:
  void setRenderResourcesAllocated_(bool flag) {
    _objc_msgSend_351(this.pointer, _sel_setRenderResourcesAllocated_, flag);
  }

  /// new
  static AUAudioUnit new1() {
    final _ret = _objc_msgSend_19(_class_AUAudioUnit, _sel_new);
    return AUAudioUnit.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AUAudioUnit allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AUAudioUnit, _sel_allocWithZone_, zone);
    return AUAudioUnit.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AUAudioUnit alloc() {
    final _ret = _objc_msgSend_19(_class_AUAudioUnit, _sel_alloc);
    return AUAudioUnit.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AUAudioUnit,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AUAudioUnit,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AUAudioUnit, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AUAudioUnit, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AUAudioUnit,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AUAudioUnit,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AUAudioUnit,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AUAudioUnit, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AUAudioUnit, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AUAudioUnit = objc.getClass("AUAudioUnit");

final class AudioComponentDescription extends ffi.Struct {
  @ffi.UnsignedInt()
  external int componentType;

  @ffi.UnsignedInt()
  external int componentSubType;

  @ffi.UnsignedInt()
  external int componentManufacturer;

  @ffi.UnsignedInt()
  external int componentFlags;

  @ffi.UnsignedInt()
  external int componentFlagsMask;
}

enum AudioComponentInstantiationOptions {
  kAudioComponentInstantiation_LoadOutOfProcess(1),
  kAudioComponentInstantiation_LoadInProcess(2),
  kAudioComponentInstantiation_LoadedRemotely(-2147483648);

  final int value;
  const AudioComponentInstantiationOptions(this.value);

  static AudioComponentInstantiationOptions fromValue(int value) =>
      switch (value) {
        1 => kAudioComponentInstantiation_LoadOutOfProcess,
        2 => kAudioComponentInstantiation_LoadInProcess,
        -2147483648 => kAudioComponentInstantiation_LoadedRemotely,
        _ => throw ArgumentError(
            "Unknown value for AudioComponentInstantiationOptions: $value"),
      };
}

late final _sel_initWithComponentDescription_options_error_ =
    objc.registerName("initWithComponentDescription:options:error:");
final _objc_msgSend_1072 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AudioComponentDescription,
                ffi.Int,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AudioComponentDescription,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithComponentDescription_error_ =
    objc.registerName("initWithComponentDescription:error:");
final _objc_msgSend_1073 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AudioComponentDescription,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AudioComponentDescription,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
void _ObjCBlock_ffiVoid_AUAudioUnit_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AUAudioUnit_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AUAudioUnit_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AUAudioUnit_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AUAudioUnit?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_AUAudioUnit_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  arg0.address == 0 ? null : AUAudioUnit.castFromPointer(arg0, retain: true, release: true),
                  arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(AUAudioUnit?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AUAudioUnit_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0.address == 0
                ? null
                : AUAudioUnit.castFromPointer(arg0,
                    retain: false, release: true),
            arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AUAudioUnit_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AUAudioUnit_NSError_CallExtension on objc.ObjCBlock<
    ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(AUAudioUnit? arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_instantiateWithComponentDescription_options_completionHandler_ =
    objc.registerName(
        "instantiateWithComponentDescription:options:completionHandler:");
final _objc_msgSend_1074 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AudioComponentDescription,
                ffi.Int,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AudioComponentDescription,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_componentDescription =
    objc.registerName("componentDescription");
final _objc_msgSend_1075 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AudioComponentDescription Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AudioComponentDescription Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1075Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AudioComponentDescription>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AudioComponentDescription>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

final class OpaqueAudioComponent extends ffi.Opaque {}

late final _sel_component = objc.registerName("component");
final _objc_msgSend_1076 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<OpaqueAudioComponent> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<OpaqueAudioComponent> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_componentName = objc.registerName("componentName");
late final _sel_audioUnitName = objc.registerName("audioUnitName");
late final _sel_manufacturerName = objc.registerName("manufacturerName");
late final _sel_audioUnitShortName = objc.registerName("audioUnitShortName");
late final _sel_componentVersion = objc.registerName("componentVersion");
late final _sel_allocateRenderResourcesAndReturnError_ =
    objc.registerName("allocateRenderResourcesAndReturnError:");
late final _sel_deallocateRenderResources =
    objc.registerName("deallocateRenderResources");
late final _sel_renderResourcesAllocated =
    objc.registerName("renderResourcesAllocated");
late final _sel_reset = objc.registerName("reset");

/// AUAudioUnitBusArray
class AUAudioUnitBusArray extends objc.NSObject {
  AUAudioUnitBusArray._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AUAudioUnitBusArray] that points to the same underlying object as [other].
  AUAudioUnitBusArray.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AUAudioUnitBusArray] that wraps the given raw object pointer.
  AUAudioUnitBusArray.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AUAudioUnitBusArray].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AUAudioUnitBusArray);
  }

  /// init
  AUAudioUnitBusArray init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AUAudioUnitBusArray.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithAudioUnit:busType:busses:
  AUAudioUnitBusArray initWithAudioUnit_busType_busses_(
      AUAudioUnit owner, AUAudioUnitBusType busType, objc.NSArray busArray) {
    final _ret = _objc_msgSend_1077(
        this.pointer,
        _sel_initWithAudioUnit_busType_busses_,
        owner.pointer,
        busType.value,
        busArray.pointer);
    return AUAudioUnitBusArray.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithAudioUnit:busType:
  AUAudioUnitBusArray initWithAudioUnit_busType_(
      AUAudioUnit owner, AUAudioUnitBusType busType) {
    final _ret = _objc_msgSend_1078(this.pointer,
        _sel_initWithAudioUnit_busType_, owner.pointer, busType.value);
    return AUAudioUnitBusArray.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// count
  int get count {
    return _objc_msgSend_57(this.pointer, _sel_count);
  }

  /// objectAtIndexedSubscript:
  AUAudioUnitBus objectAtIndexedSubscript_(int index) {
    final _ret =
        _objc_msgSend_1098(this.pointer, _sel_objectAtIndexedSubscript_, index);
    return AUAudioUnitBus.castFromPointer(_ret, retain: true, release: true);
  }

  /// isCountChangeable
  bool get countChangeable {
    return _objc_msgSend_13(this.pointer, _sel_isCountChangeable);
  }

  /// setBusCount:error:
  bool setBusCount_error_(
      int count, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1099(
        this.pointer, _sel_setBusCount_error_, count, outError);
  }

  /// addObserverToAllBusses:forKeyPath:options:context:
  void addObserverToAllBusses_forKeyPath_options_context_(
      objc.NSObject observer,
      objc.NSString keyPath,
      objc.NSKeyValueObservingOptions options,
      ffi.Pointer<ffi.Void> context) {
    _objc_msgSend_1100(
        this.pointer,
        _sel_addObserverToAllBusses_forKeyPath_options_context_,
        observer.pointer,
        keyPath.pointer,
        options.value,
        context);
  }

  /// removeObserverFromAllBusses:forKeyPath:context:
  void removeObserverFromAllBusses_forKeyPath_context_(objc.NSObject observer,
      objc.NSString keyPath, ffi.Pointer<ffi.Void> context) {
    _objc_msgSend_1101(
        this.pointer,
        _sel_removeObserverFromAllBusses_forKeyPath_context_,
        observer.pointer,
        keyPath.pointer,
        context);
  }

  /// ownerAudioUnit
  AUAudioUnit get ownerAudioUnit {
    final _ret = _objc_msgSend_1095(this.pointer, _sel_ownerAudioUnit);
    return AUAudioUnit.castFromPointer(_ret, retain: true, release: true);
  }

  /// busType
  AUAudioUnitBusType get busType {
    final _ret = _objc_msgSend_1094(this.pointer, _sel_busType);
    return AUAudioUnitBusType.fromValue(_ret);
  }

  /// replaceBusses:
  void replaceBusses_(objc.NSArray busArray) {
    _objc_msgSend_254(this.pointer, _sel_replaceBusses_, busArray.pointer);
  }

  /// new
  static AUAudioUnitBusArray new1() {
    final _ret = _objc_msgSend_19(_class_AUAudioUnitBusArray, _sel_new);
    return AUAudioUnitBusArray.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AUAudioUnitBusArray allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AUAudioUnitBusArray, _sel_allocWithZone_, zone);
    return AUAudioUnitBusArray.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AUAudioUnitBusArray alloc() {
    final _ret = _objc_msgSend_19(_class_AUAudioUnitBusArray, _sel_alloc);
    return AUAudioUnitBusArray.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AUAudioUnitBusArray,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AUAudioUnitBusArray,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AUAudioUnitBusArray, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AUAudioUnitBusArray, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AUAudioUnitBusArray,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AUAudioUnitBusArray,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AUAudioUnitBusArray,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AUAudioUnitBusArray, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AUAudioUnitBusArray, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AUAudioUnitBusArray = objc.getClass("AUAudioUnitBusArray");

enum AUAudioUnitBusType {
  AUAudioUnitBusTypeInput(1),
  AUAudioUnitBusTypeOutput(2);

  final int value;
  const AUAudioUnitBusType(this.value);

  static AUAudioUnitBusType fromValue(int value) => switch (value) {
        1 => AUAudioUnitBusTypeInput,
        2 => AUAudioUnitBusTypeOutput,
        _ =>
          throw ArgumentError("Unknown value for AUAudioUnitBusType: $value"),
      };
}

late final _sel_initWithAudioUnit_busType_busses_ =
    objc.registerName("initWithAudioUnit:busType:busses:");
final _objc_msgSend_1077 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithAudioUnit_busType_ =
    objc.registerName("initWithAudioUnit:busType:");
final _objc_msgSend_1078 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

/// AUAudioUnitBus
class AUAudioUnitBus extends objc.NSObject {
  AUAudioUnitBus._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AUAudioUnitBus] that points to the same underlying object as [other].
  AUAudioUnitBus.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AUAudioUnitBus] that wraps the given raw object pointer.
  AUAudioUnitBus.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AUAudioUnitBus].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AUAudioUnitBus);
  }

  /// format
  AVAudioFormat get format {
    final _ret = _objc_msgSend_1092(this.pointer, _sel_format);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFormat:error:
  bool setFormat_error_(AVAudioFormat format,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1093(
        this.pointer, _sel_setFormat_error_, format.pointer, outError);
  }

  /// shouldAllocateBuffer
  bool get shouldAllocateBuffer {
    return _objc_msgSend_13(this.pointer, _sel_shouldAllocateBuffer);
  }

  /// setShouldAllocateBuffer:
  set shouldAllocateBuffer(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setShouldAllocateBuffer_, value);
  }

  /// isEnabled
  bool get enabled {
    return _objc_msgSend_13(this.pointer, _sel_isEnabled);
  }

  /// setEnabled:
  set enabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setEnabled_, value);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_20(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  /// index
  int get index {
    return _objc_msgSend_57(this.pointer, _sel_index);
  }

  /// busType
  AUAudioUnitBusType get busType {
    final _ret = _objc_msgSend_1094(this.pointer, _sel_busType);
    return AUAudioUnitBusType.fromValue(_ret);
  }

  /// ownerAudioUnit
  AUAudioUnit get ownerAudioUnit {
    final _ret = _objc_msgSend_1095(this.pointer, _sel_ownerAudioUnit);
    return AUAudioUnit.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportedChannelLayoutTags
  objc.NSArray? get supportedChannelLayoutTags {
    final _ret =
        _objc_msgSend_88(this.pointer, _sel_supportedChannelLayoutTags);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// contextPresentationLatency
  double get contextPresentationLatency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_contextPresentationLatency)
        : _objc_msgSend_18(this.pointer, _sel_contextPresentationLatency);
  }

  /// setContextPresentationLatency:
  set contextPresentationLatency(double value) {
    return _objc_msgSend_226(
        this.pointer, _sel_setContextPresentationLatency_, value);
  }

  /// initWithFormat:error:
  AUAudioUnitBus? initWithFormat_error_(AVAudioFormat format,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1096(
        this.pointer, _sel_initWithFormat_error_, format.pointer, outError);
    return _ret.address == 0
        ? null
        : AUAudioUnitBus.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportedChannelCounts
  objc.NSArray? get supportedChannelCounts {
    final _ret = _objc_msgSend_88(this.pointer, _sel_supportedChannelCounts);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSupportedChannelCounts:
  set supportedChannelCounts(objc.NSArray? value) {
    return _objc_msgSend_549(this.pointer, _sel_setSupportedChannelCounts_,
        value?.pointer ?? ffi.nullptr);
  }

  /// maximumChannelCount
  int get maximumChannelCount {
    return _objc_msgSend_988(this.pointer, _sel_maximumChannelCount);
  }

  /// setMaximumChannelCount:
  set maximumChannelCount(int value) {
    return _objc_msgSend_1097(
        this.pointer, _sel_setMaximumChannelCount_, value);
  }

  /// init
  AUAudioUnitBus init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AUAudioUnitBus.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AUAudioUnitBus new1() {
    final _ret = _objc_msgSend_19(_class_AUAudioUnitBus, _sel_new);
    return AUAudioUnitBus.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AUAudioUnitBus allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AUAudioUnitBus, _sel_allocWithZone_, zone);
    return AUAudioUnitBus.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AUAudioUnitBus alloc() {
    final _ret = _objc_msgSend_19(_class_AUAudioUnitBus, _sel_alloc);
    return AUAudioUnitBus.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AUAudioUnitBus,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AUAudioUnitBus,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AUAudioUnitBus, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AUAudioUnitBus, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AUAudioUnitBus,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AUAudioUnitBus,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AUAudioUnitBus,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AUAudioUnitBus, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AUAudioUnitBus, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AUAudioUnitBus = objc.getClass("AUAudioUnitBus");

/// AVAudioFormat
class AVAudioFormat extends objc.NSObject {
  AVAudioFormat._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioFormat] that points to the same underlying object as [other].
  AVAudioFormat.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioFormat] that wraps the given raw object pointer.
  AVAudioFormat.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioFormat].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioFormat);
  }

  /// initWithStreamDescription:
  AVAudioFormat? initWithStreamDescription_(
      ffi.Pointer<AudioStreamBasicDescription> asbd) {
    final _ret =
        _objc_msgSend_1079(this.pointer, _sel_initWithStreamDescription_, asbd);
    return _ret.address == 0
        ? null
        : AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithStreamDescription:channelLayout:
  AVAudioFormat? initWithStreamDescription_channelLayout_(
      ffi.Pointer<AudioStreamBasicDescription> asbd,
      AVAudioChannelLayout? layout) {
    final _ret = _objc_msgSend_1083(
        this.pointer,
        _sel_initWithStreamDescription_channelLayout_,
        asbd,
        layout?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// initStandardFormatWithSampleRate:channels:
  AVAudioFormat? initStandardFormatWithSampleRate_channels_(
      double sampleRate, int channels) {
    final _ret = _objc_msgSend_1084(this.pointer,
        _sel_initStandardFormatWithSampleRate_channels_, sampleRate, channels);
    return _ret.address == 0
        ? null
        : AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// initStandardFormatWithSampleRate:channelLayout:
  AVAudioFormat initStandardFormatWithSampleRate_channelLayout_(
      double sampleRate, AVAudioChannelLayout layout) {
    final _ret = _objc_msgSend_1085(
        this.pointer,
        _sel_initStandardFormatWithSampleRate_channelLayout_,
        sampleRate,
        layout.pointer);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCommonFormat:sampleRate:channels:interleaved:
  AVAudioFormat? initWithCommonFormat_sampleRate_channels_interleaved_(
      AVAudioCommonFormat format,
      double sampleRate,
      int channels,
      bool interleaved) {
    final _ret = _objc_msgSend_1086(
        this.pointer,
        _sel_initWithCommonFormat_sampleRate_channels_interleaved_,
        format.value,
        sampleRate,
        channels,
        interleaved);
    return _ret.address == 0
        ? null
        : AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCommonFormat:sampleRate:interleaved:channelLayout:
  AVAudioFormat initWithCommonFormat_sampleRate_interleaved_channelLayout_(
      AVAudioCommonFormat format,
      double sampleRate,
      bool interleaved,
      AVAudioChannelLayout layout) {
    final _ret = _objc_msgSend_1087(
        this.pointer,
        _sel_initWithCommonFormat_sampleRate_interleaved_channelLayout_,
        format.value,
        sampleRate,
        interleaved,
        layout.pointer);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithSettings:
  AVAudioFormat? initWithSettings_(objc.NSDictionary settings) {
    final _ret = _objc_msgSend_323(
        this.pointer, _sel_initWithSettings_, settings.pointer);
    return _ret.address == 0
        ? null
        : AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCMAudioFormatDescription:
  AVAudioFormat initWithCMAudioFormatDescription_(
      ffi.Pointer<opaqueCMFormatDescription> formatDescription) {
    final _ret = _objc_msgSend_1088(this.pointer,
        _sel_initWithCMAudioFormatDescription_, formatDescription);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// isEqual:
  bool isEqual_(objc.ObjCObjectBase object) {
    return _objc_msgSend_0(this.pointer, _sel_isEqual_, object.pointer);
  }

  /// isStandard
  bool get standard {
    return _objc_msgSend_13(this.pointer, _sel_isStandard);
  }

  /// commonFormat
  AVAudioCommonFormat get commonFormat {
    final _ret = _objc_msgSend_1089(this.pointer, _sel_commonFormat);
    return AVAudioCommonFormat.fromValue(_ret);
  }

  /// channelCount
  int get channelCount {
    return _objc_msgSend_988(this.pointer, _sel_channelCount);
  }

  /// sampleRate
  double get sampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_sampleRate)
        : _objc_msgSend_18(this.pointer, _sel_sampleRate);
  }

  /// isInterleaved
  bool get interleaved {
    return _objc_msgSend_13(this.pointer, _sel_isInterleaved);
  }

  /// streamDescription
  ffi.Pointer<AudioStreamBasicDescription> get streamDescription {
    return _objc_msgSend_1090(this.pointer, _sel_streamDescription);
  }

  /// channelLayout
  AVAudioChannelLayout? get channelLayout {
    final _ret = _objc_msgSend_1091(this.pointer, _sel_channelLayout);
    return _ret.address == 0
        ? null
        : AVAudioChannelLayout.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// magicCookie
  objc.NSData? get magicCookie {
    final _ret = _objc_msgSend_337(this.pointer, _sel_magicCookie);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMagicCookie:
  set magicCookie(objc.NSData? value) {
    return _objc_msgSend_514(
        this.pointer, _sel_setMagicCookie_, value?.pointer ?? ffi.nullptr);
  }

  /// settings
  objc.NSDictionary get settings {
    final _ret = _objc_msgSend_123(this.pointer, _sel_settings);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// formatDescription
  ffi.Pointer<opaqueCMFormatDescription> get formatDescription {
    return _objc_msgSend_730(this.pointer, _sel_formatDescription);
  }

  /// init
  AVAudioFormat init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAudioFormat new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioFormat, _sel_new);
    return AVAudioFormat.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioFormat allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioFormat, _sel_allocWithZone_, zone);
    return AVAudioFormat.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioFormat alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioFormat, _sel_alloc);
    return AVAudioFormat.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioFormat,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioFormat,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioFormat, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioFormat, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioFormat,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioFormat,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioFormat,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioFormat, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioFormat, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioFormat = objc.getClass("AVAudioFormat");

final class AudioStreamBasicDescription extends ffi.Struct {
  @ffi.Double()
  external double mSampleRate;

  @ffi.UnsignedInt()
  external int mFormatID;

  @ffi.UnsignedInt()
  external int mFormatFlags;

  @ffi.UnsignedInt()
  external int mBytesPerPacket;

  @ffi.UnsignedInt()
  external int mFramesPerPacket;

  @ffi.UnsignedInt()
  external int mBytesPerFrame;

  @ffi.UnsignedInt()
  external int mChannelsPerFrame;

  @ffi.UnsignedInt()
  external int mBitsPerChannel;

  @ffi.UnsignedInt()
  external int mReserved;
}

late final _sel_initWithStreamDescription_ =
    objc.registerName("initWithStreamDescription:");
final _objc_msgSend_1079 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<AudioStreamBasicDescription>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<AudioStreamBasicDescription>)>();

/// AVAudioChannelLayout
class AVAudioChannelLayout extends objc.NSObject {
  AVAudioChannelLayout._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioChannelLayout] that points to the same underlying object as [other].
  AVAudioChannelLayout.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioChannelLayout] that wraps the given raw object pointer.
  AVAudioChannelLayout.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioChannelLayout].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioChannelLayout);
  }

  /// init
  AVAudioChannelLayout init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithLayoutTag:
  AVAudioChannelLayout? initWithLayoutTag_(int layoutTag) {
    final _ret =
        _objc_msgSend_1080(this.pointer, _sel_initWithLayoutTag_, layoutTag);
    return _ret.address == 0
        ? null
        : AVAudioChannelLayout.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// initWithLayout:
  AVAudioChannelLayout initWithLayout_(ffi.Pointer<AudioChannelLayout> layout) {
    final _ret = _objc_msgSend_1081(this.pointer, _sel_initWithLayout_, layout);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// isEqual:
  bool isEqual_(objc.ObjCObjectBase object) {
    return _objc_msgSend_0(this.pointer, _sel_isEqual_, object.pointer);
  }

  /// layoutWithLayoutTag:
  static AVAudioChannelLayout layoutWithLayoutTag_(int layoutTag) {
    final _ret = _objc_msgSend_914(
        _class_AVAudioChannelLayout, _sel_layoutWithLayoutTag_, layoutTag);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// layoutWithLayout:
  static AVAudioChannelLayout layoutWithLayout_(
      ffi.Pointer<AudioChannelLayout> layout) {
    final _ret = _objc_msgSend_1081(
        _class_AVAudioChannelLayout, _sel_layoutWithLayout_, layout);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// layoutTag
  int get layoutTag {
    return _objc_msgSend_647(this.pointer, _sel_layoutTag);
  }

  /// layout
  ffi.Pointer<AudioChannelLayout> get layout {
    return _objc_msgSend_1082(this.pointer, _sel_layout);
  }

  /// channelCount
  int get channelCount {
    return _objc_msgSend_988(this.pointer, _sel_channelCount);
  }

  /// new
  static AVAudioChannelLayout new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioChannelLayout, _sel_new);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioChannelLayout allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAudioChannelLayout, _sel_allocWithZone_, zone);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAudioChannelLayout alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioChannelLayout, _sel_alloc);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioChannelLayout,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioChannelLayout,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioChannelLayout, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAudioChannelLayout, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioChannelLayout,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioChannelLayout,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioChannelLayout,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioChannelLayout, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAudioChannelLayout, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioChannelLayout = objc.getClass("AVAudioChannelLayout");
late final _sel_initWithLayoutTag_ = objc.registerName("initWithLayoutTag:");
final _objc_msgSend_1080 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

final class AudioChannelLayout extends ffi.Struct {
  @ffi.UnsignedInt()
  external int mChannelLayoutTag;

  @ffi.UnsignedInt()
  external int mChannelBitmap;

  @ffi.UnsignedInt()
  external int mNumberChannelDescriptions;

  @ffi.Array.multi([1])
  external ffi.Array<AudioChannelDescription> mChannelDescriptions;
}

enum AudioChannelBitmap {
  kAudioChannelBit_Left(1),
  kAudioChannelBit_Right(2),
  kAudioChannelBit_Center(4),
  kAudioChannelBit_LFEScreen(8),
  kAudioChannelBit_LeftSurround(16),
  kAudioChannelBit_RightSurround(32),
  kAudioChannelBit_LeftCenter(64),
  kAudioChannelBit_RightCenter(128),
  kAudioChannelBit_CenterSurround(256),
  kAudioChannelBit_LeftSurroundDirect(512),
  kAudioChannelBit_RightSurroundDirect(1024),
  kAudioChannelBit_TopCenterSurround(2048),
  kAudioChannelBit_VerticalHeightLeft(4096),
  kAudioChannelBit_VerticalHeightCenter(8192),
  kAudioChannelBit_VerticalHeightRight(16384),
  kAudioChannelBit_TopBackLeft(32768),
  kAudioChannelBit_TopBackCenter(65536),
  kAudioChannelBit_TopBackRight(131072),
  kAudioChannelBit_LeftTopMiddle(2097152),
  kAudioChannelBit_RightTopMiddle(8388608),
  kAudioChannelBit_LeftTopRear(16777216),
  kAudioChannelBit_CenterTopRear(33554432),
  kAudioChannelBit_RightTopRear(67108864);

  static const kAudioChannelBit_LeftTopFront =
      kAudioChannelBit_VerticalHeightLeft;
  static const kAudioChannelBit_CenterTopFront =
      kAudioChannelBit_VerticalHeightCenter;
  static const kAudioChannelBit_RightTopFront =
      kAudioChannelBit_VerticalHeightRight;
  static const kAudioChannelBit_CenterTopMiddle =
      kAudioChannelBit_TopCenterSurround;

  final int value;
  const AudioChannelBitmap(this.value);

  static AudioChannelBitmap fromValue(int value) => switch (value) {
        1 => kAudioChannelBit_Left,
        2 => kAudioChannelBit_Right,
        4 => kAudioChannelBit_Center,
        8 => kAudioChannelBit_LFEScreen,
        16 => kAudioChannelBit_LeftSurround,
        32 => kAudioChannelBit_RightSurround,
        64 => kAudioChannelBit_LeftCenter,
        128 => kAudioChannelBit_RightCenter,
        256 => kAudioChannelBit_CenterSurround,
        512 => kAudioChannelBit_LeftSurroundDirect,
        1024 => kAudioChannelBit_RightSurroundDirect,
        2048 => kAudioChannelBit_TopCenterSurround,
        4096 => kAudioChannelBit_VerticalHeightLeft,
        8192 => kAudioChannelBit_VerticalHeightCenter,
        16384 => kAudioChannelBit_VerticalHeightRight,
        32768 => kAudioChannelBit_TopBackLeft,
        65536 => kAudioChannelBit_TopBackCenter,
        131072 => kAudioChannelBit_TopBackRight,
        2097152 => kAudioChannelBit_LeftTopMiddle,
        8388608 => kAudioChannelBit_RightTopMiddle,
        16777216 => kAudioChannelBit_LeftTopRear,
        33554432 => kAudioChannelBit_CenterTopRear,
        67108864 => kAudioChannelBit_RightTopRear,
        _ =>
          throw ArgumentError("Unknown value for AudioChannelBitmap: $value"),
      };

  @override
  String toString() {
    if (this == kAudioChannelBit_TopCenterSurround)
      return "AudioChannelBitmap.kAudioChannelBit_TopCenterSurround, AudioChannelBitmap.kAudioChannelBit_CenterTopMiddle";
    if (this == kAudioChannelBit_VerticalHeightLeft)
      return "AudioChannelBitmap.kAudioChannelBit_VerticalHeightLeft, AudioChannelBitmap.kAudioChannelBit_LeftTopFront";
    if (this == kAudioChannelBit_VerticalHeightCenter)
      return "AudioChannelBitmap.kAudioChannelBit_VerticalHeightCenter, AudioChannelBitmap.kAudioChannelBit_CenterTopFront";
    if (this == kAudioChannelBit_VerticalHeightRight)
      return "AudioChannelBitmap.kAudioChannelBit_VerticalHeightRight, AudioChannelBitmap.kAudioChannelBit_RightTopFront";
    return super.toString();
  }
}

final class AudioChannelDescription extends ffi.Struct {
  @ffi.UnsignedInt()
  external int mChannelLabel;

  @ffi.UnsignedInt()
  external int mChannelFlags;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> mCoordinates;
}

enum AudioChannelFlags {
  kAudioChannelFlags_AllOff(0),
  kAudioChannelFlags_RectangularCoordinates(1),
  kAudioChannelFlags_SphericalCoordinates(2),
  kAudioChannelFlags_Meters(4);

  final int value;
  const AudioChannelFlags(this.value);

  static AudioChannelFlags fromValue(int value) => switch (value) {
        0 => kAudioChannelFlags_AllOff,
        1 => kAudioChannelFlags_RectangularCoordinates,
        2 => kAudioChannelFlags_SphericalCoordinates,
        4 => kAudioChannelFlags_Meters,
        _ => throw ArgumentError("Unknown value for AudioChannelFlags: $value"),
      };
}

late final _sel_initWithLayout_ = objc.registerName("initWithLayout:");
final _objc_msgSend_1081 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<AudioChannelLayout>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<AudioChannelLayout>)>();
late final _sel_isEqual_ = objc.registerName("isEqual:");
late final _sel_layoutWithLayoutTag_ =
    objc.registerName("layoutWithLayoutTag:");
late final _sel_layoutWithLayout_ = objc.registerName("layoutWithLayout:");
late final _sel_layoutTag = objc.registerName("layoutTag");
late final _sel_layout = objc.registerName("layout");
final _objc_msgSend_1082 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<AudioChannelLayout> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<AudioChannelLayout> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_channelCount = objc.registerName("channelCount");
late final _sel_initWithStreamDescription_channelLayout_ =
    objc.registerName("initWithStreamDescription:channelLayout:");
final _objc_msgSend_1083 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<AudioStreamBasicDescription>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<AudioStreamBasicDescription>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initStandardFormatWithSampleRate_channels_ =
    objc.registerName("initStandardFormatWithSampleRate:channels:");
final _objc_msgSend_1084 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double, ffi.Uint32)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, int)>();
late final _sel_initStandardFormatWithSampleRate_channelLayout_ =
    objc.registerName("initStandardFormatWithSampleRate:channelLayout:");
final _objc_msgSend_1085 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();

enum AVAudioCommonFormat {
  AVAudioOtherFormat(0),
  AVAudioPCMFormatFloat32(1),
  AVAudioPCMFormatFloat64(2),
  AVAudioPCMFormatInt16(3),
  AVAudioPCMFormatInt32(4);

  final int value;
  const AVAudioCommonFormat(this.value);

  static AVAudioCommonFormat fromValue(int value) => switch (value) {
        0 => AVAudioOtherFormat,
        1 => AVAudioPCMFormatFloat32,
        2 => AVAudioPCMFormatFloat64,
        3 => AVAudioPCMFormatInt16,
        4 => AVAudioPCMFormatInt32,
        _ =>
          throw ArgumentError("Unknown value for AVAudioCommonFormat: $value"),
      };
}

late final _sel_initWithCommonFormat_sampleRate_channels_interleaved_ =
    objc.registerName("initWithCommonFormat:sampleRate:channels:interleaved:");
final _objc_msgSend_1086 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Double,
                ffi.Uint32,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, double, int, bool)>();
late final _sel_initWithCommonFormat_sampleRate_interleaved_channelLayout_ =
    objc.registerName(
        "initWithCommonFormat:sampleRate:interleaved:channelLayout:");
final _objc_msgSend_1087 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Double,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            double,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithSettings_ = objc.registerName("initWithSettings:");
late final _sel_initWithCMAudioFormatDescription_ =
    objc.registerName("initWithCMAudioFormatDescription:");
final _objc_msgSend_1088 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<opaqueCMFormatDescription>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<opaqueCMFormatDescription>)>();
late final _sel_isStandard = objc.registerName("isStandard");
late final _sel_commonFormat = objc.registerName("commonFormat");
final _objc_msgSend_1089 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sampleRate = objc.registerName("sampleRate");
late final _sel_isInterleaved = objc.registerName("isInterleaved");
late final _sel_streamDescription = objc.registerName("streamDescription");
final _objc_msgSend_1090 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<AudioStreamBasicDescription> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<AudioStreamBasicDescription> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_channelLayout = objc.registerName("channelLayout");
final _objc_msgSend_1091 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_magicCookie = objc.registerName("magicCookie");
late final _sel_setMagicCookie_ = objc.registerName("setMagicCookie:");
late final _sel_settings = objc.registerName("settings");
late final _sel_formatDescription = objc.registerName("formatDescription");
final _objc_msgSend_1092 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFormat_error_ = objc.registerName("setFormat:error:");
final _objc_msgSend_1093 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_shouldAllocateBuffer =
    objc.registerName("shouldAllocateBuffer");
late final _sel_setShouldAllocateBuffer_ =
    objc.registerName("setShouldAllocateBuffer:");
late final _sel_busType = objc.registerName("busType");
final _objc_msgSend_1094 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_ownerAudioUnit = objc.registerName("ownerAudioUnit");
final _objc_msgSend_1095 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_supportedChannelLayoutTags =
    objc.registerName("supportedChannelLayoutTags");
late final _sel_contextPresentationLatency =
    objc.registerName("contextPresentationLatency");
late final _sel_setContextPresentationLatency_ =
    objc.registerName("setContextPresentationLatency:");
late final _sel_initWithFormat_error_ =
    objc.registerName("initWithFormat:error:");
final _objc_msgSend_1096 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_supportedChannelCounts =
    objc.registerName("supportedChannelCounts");
late final _sel_setSupportedChannelCounts_ =
    objc.registerName("setSupportedChannelCounts:");
late final _sel_maximumChannelCount = objc.registerName("maximumChannelCount");
late final _sel_setMaximumChannelCount_ =
    objc.registerName("setMaximumChannelCount:");
final _objc_msgSend_1097 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_objectAtIndexedSubscript_ =
    objc.registerName("objectAtIndexedSubscript:");
final _objc_msgSend_1098 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isCountChangeable = objc.registerName("isCountChangeable");
late final _sel_setBusCount_error_ = objc.registerName("setBusCount:error:");
final _objc_msgSend_1099 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_addObserverToAllBusses_forKeyPath_options_context_ =
    objc.registerName("addObserverToAllBusses:forKeyPath:options:context:");
final _objc_msgSend_1100 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Void>)>();
late final _sel_removeObserverFromAllBusses_forKeyPath_context_ =
    objc.registerName("removeObserverFromAllBusses:forKeyPath:context:");
final _objc_msgSend_1101 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Void>)>();
late final _sel_replaceBusses_ = objc.registerName("replaceBusses:");
late final _sel_inputBusses = objc.registerName("inputBusses");
final _objc_msgSend_1102 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_outputBusses = objc.registerName("outputBusses");
int _ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.UnsignedInt> arg0,
        ffi.Pointer<AudioTimeStamp> arg1,
        int arg2,
        int arg3,
        ffi.Pointer<AudioBufferList> arg4,
        ffi.Pointer<objc.ObjCBlockImpl> arg5) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<ffi.UnsignedInt> arg0,
                        ffi.Pointer<AudioTimeStamp> arg1,
                        ffi.Uint32 arg2,
                        ffi.Long arg3,
                        ffi.Pointer<AudioBufferList> arg4,
                        ffi.Pointer<objc.ObjCBlockImpl> arg5)>>()
            .asFunction<
                int Function(
                    ffi.Pointer<ffi.UnsignedInt>,
                    ffi.Pointer<AudioTimeStamp>,
                    int,
                    int,
                    ffi.Pointer<AudioBufferList>,
                    ffi.Pointer<objc.ObjCBlockImpl>)>()(
        arg0, arg1, arg2, arg3, arg4, arg5);
int _ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.UnsignedInt> arg0,
        ffi.Pointer<AudioTimeStamp> arg1,
        int arg2,
        int arg3,
        ffi.Pointer<AudioBufferList> arg4,
        ffi.Pointer<objc.ObjCBlockImpl> arg5) =>
    (objc.getBlockClosure(block) as int Function(
        ffi.Pointer<ffi.UnsignedInt>,
        ffi.Pointer<AudioTimeStamp>,
        int,
        int,
        ffi.Pointer<AudioBufferList>,
        ffi.Pointer<objc.ObjCBlockImpl>))(arg0, arg1, arg2, arg3, arg4, arg5);

/// Construction methods for `objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<objc.ObjCBlockImpl>)>`.
abstract final class ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<AudioTimeStamp>,
              ffi.Uint32,
              ffi.Long,
              ffi.Pointer<AudioBufferList>,
              ffi.Pointer<objc.ObjCBlockImpl>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<AudioTimeStamp>,
                  ffi.Uint32,
                  ffi.Long,
                  ffi.Pointer<AudioBufferList>,
                  ffi.Pointer<objc.ObjCBlockImpl>)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
      ffi.Int Function(
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<AudioTimeStamp>,
          ffi.Uint32,
          ffi.Long,
          ffi.Pointer<AudioBufferList>,
          ffi.Pointer<objc.ObjCBlockImpl>)> fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt> arg0, ffi.Pointer<AudioTimeStamp> arg1, ffi.Uint32 arg2, ffi.Long arg3, ffi.Pointer<AudioBufferList> arg4, ffi.Pointer<objc.ObjCBlockImpl> arg5)>> ptr) =>
      objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<AudioTimeStamp>,
                  ffi.Uint32,
                  ffi.Long,
                  ffi.Pointer<AudioBufferList>,
                  ffi.Pointer<objc.ObjCBlockImpl>)>(
          objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<objc.ObjCBlockImpl>)>(_ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList_fnPtrTrampoline, 0).cast(), ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<objc.ObjCBlockImpl>)>
      fromFunction(int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, int, int, ffi.Pointer<AudioBufferList>, objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>)>?) fn) =>
          objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<objc.ObjCBlockImpl>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<objc.ObjCBlockImpl>)>(_ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList_closureTrampoline, 0)
                          .cast(),
                  (ffi.Pointer<ffi.UnsignedInt> arg0,
                          ffi.Pointer<AudioTimeStamp> arg1,
                          int arg2,
                          int arg3,
                          ffi.Pointer<AudioBufferList> arg4,
                          ffi.Pointer<objc.ObjCBlockImpl> arg5) =>
                      fn(arg0, arg1, arg2, arg3, arg4, arg5.address == 0 ? null : ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList.castFromPointer(arg5, retain: true, release: true))),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<objc.ObjCBlockImpl>)>`.
extension ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList_CallExtension
    on objc.ObjCBlock<
        ffi.Int Function(
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<AudioTimeStamp>,
            ffi.Uint32,
            ffi.Long,
            ffi.Pointer<AudioBufferList>,
            ffi.Pointer<objc.ObjCBlockImpl>)> {
  int call(
          ffi.Pointer<ffi.UnsignedInt> arg0,
          ffi.Pointer<AudioTimeStamp> arg1,
          int arg2,
          int arg3,
          ffi.Pointer<AudioBufferList> arg4,
          objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>)>?
              arg5) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<ffi.UnsignedInt> arg0,
                          ffi.Pointer<AudioTimeStamp> arg1,
                          ffi.Uint32 arg2,
                          ffi.Long arg3,
                          ffi.Pointer<AudioBufferList> arg4,
                          ffi.Pointer<objc.ObjCBlockImpl> arg5)>>()
              .asFunction<
                  int Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<ffi.UnsignedInt>,
                      ffi.Pointer<AudioTimeStamp>,
                      int,
                      int,
                      ffi.Pointer<AudioBufferList>,
                      ffi.Pointer<objc.ObjCBlockImpl>)>()(
          pointer, arg0, arg1, arg2, arg3, arg4, arg5?.pointer ?? ffi.nullptr);
}

enum AudioUnitRenderActionFlags {
  kAudioUnitRenderAction_PreRender(4),
  kAudioUnitRenderAction_PostRender(8),
  kAudioUnitRenderAction_OutputIsSilence(16),
  kAudioOfflineUnitRenderAction_Preflight(32),
  kAudioOfflineUnitRenderAction_Render(64),
  kAudioOfflineUnitRenderAction_Complete(128),
  kAudioUnitRenderAction_PostRenderError(256),
  kAudioUnitRenderAction_DoNotCheckRenderArgs(512);

  final int value;
  const AudioUnitRenderActionFlags(this.value);

  static AudioUnitRenderActionFlags fromValue(int value) => switch (value) {
        4 => kAudioUnitRenderAction_PreRender,
        8 => kAudioUnitRenderAction_PostRender,
        16 => kAudioUnitRenderAction_OutputIsSilence,
        32 => kAudioOfflineUnitRenderAction_Preflight,
        64 => kAudioOfflineUnitRenderAction_Render,
        128 => kAudioOfflineUnitRenderAction_Complete,
        256 => kAudioUnitRenderAction_PostRenderError,
        512 => kAudioUnitRenderAction_DoNotCheckRenderArgs,
        _ => throw ArgumentError(
            "Unknown value for AudioUnitRenderActionFlags: $value"),
      };
}

final class AudioTimeStamp extends ffi.Struct {
  @ffi.Double()
  external double mSampleTime;

  @ffi.UnsignedLongLong()
  external int mHostTime;

  @ffi.Double()
  external double mRateScalar;

  @ffi.UnsignedLongLong()
  external int mWordClockTime;

  external SMPTETime mSMPTETime;

  @ffi.UnsignedInt()
  external int mFlags;

  @ffi.UnsignedInt()
  external int mReserved;
}

final class SMPTETime extends ffi.Struct {
  @ffi.Short()
  external int mSubframes;

  @ffi.Short()
  external int mSubframeDivisor;

  @ffi.UnsignedInt()
  external int mCounter;

  @ffi.UnsignedInt()
  external int mType;

  @ffi.UnsignedInt()
  external int mFlags;

  @ffi.Short()
  external int mHours;

  @ffi.Short()
  external int mMinutes;

  @ffi.Short()
  external int mSeconds;

  @ffi.Short()
  external int mFrames;
}

enum SMPTETimeType {
  kSMPTETimeType24(0),
  kSMPTETimeType25(1),
  kSMPTETimeType30Drop(2),
  kSMPTETimeType30(3),
  kSMPTETimeType2997(4),
  kSMPTETimeType2997Drop(5),
  kSMPTETimeType60(6),
  kSMPTETimeType5994(7),
  kSMPTETimeType60Drop(8),
  kSMPTETimeType5994Drop(9),
  kSMPTETimeType50(10),
  kSMPTETimeType2398(11);

  final int value;
  const SMPTETimeType(this.value);

  static SMPTETimeType fromValue(int value) => switch (value) {
        0 => kSMPTETimeType24,
        1 => kSMPTETimeType25,
        2 => kSMPTETimeType30Drop,
        3 => kSMPTETimeType30,
        4 => kSMPTETimeType2997,
        5 => kSMPTETimeType2997Drop,
        6 => kSMPTETimeType60,
        7 => kSMPTETimeType5994,
        8 => kSMPTETimeType60Drop,
        9 => kSMPTETimeType5994Drop,
        10 => kSMPTETimeType50,
        11 => kSMPTETimeType2398,
        _ => throw ArgumentError("Unknown value for SMPTETimeType: $value"),
      };
}

enum SMPTETimeFlags {
  kSMPTETimeUnknown(0),
  kSMPTETimeValid(1),
  kSMPTETimeRunning(2);

  final int value;
  const SMPTETimeFlags(this.value);

  static SMPTETimeFlags fromValue(int value) => switch (value) {
        0 => kSMPTETimeUnknown,
        1 => kSMPTETimeValid,
        2 => kSMPTETimeRunning,
        _ => throw ArgumentError("Unknown value for SMPTETimeFlags: $value"),
      };
}

enum AudioTimeStampFlags {
  kAudioTimeStampNothingValid(0),
  kAudioTimeStampSampleTimeValid(1),
  kAudioTimeStampHostTimeValid(2),
  kAudioTimeStampRateScalarValid(4),
  kAudioTimeStampWordClockTimeValid(8),
  kAudioTimeStampSMPTETimeValid(16),
  kAudioTimeStampSampleHostTimeValid(3);

  final int value;
  const AudioTimeStampFlags(this.value);

  static AudioTimeStampFlags fromValue(int value) => switch (value) {
        0 => kAudioTimeStampNothingValid,
        1 => kAudioTimeStampSampleTimeValid,
        2 => kAudioTimeStampHostTimeValid,
        4 => kAudioTimeStampRateScalarValid,
        8 => kAudioTimeStampWordClockTimeValid,
        16 => kAudioTimeStampSMPTETimeValid,
        3 => kAudioTimeStampSampleHostTimeValid,
        _ =>
          throw ArgumentError("Unknown value for AudioTimeStampFlags: $value"),
      };
}

final class AudioBufferList extends ffi.Struct {
  @ffi.UnsignedInt()
  external int mNumberBuffers;

  @ffi.Array.multi([1])
  external ffi.Array<AudioBuffer> mBuffers;
}

final class AudioBuffer extends ffi.Struct {
  @ffi.UnsignedInt()
  external int mNumberChannels;

  @ffi.UnsignedInt()
  external int mDataByteSize;

  external ffi.Pointer<ffi.Void> mData;
}

int _ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.UnsignedInt> arg0,
        ffi.Pointer<AudioTimeStamp> arg1,
        int arg2,
        int arg3,
        ffi.Pointer<AudioBufferList> arg4) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.UnsignedInt> arg0,
                    ffi.Pointer<AudioTimeStamp> arg1,
                    ffi.Uint32 arg2,
                    ffi.Long arg3,
                    ffi.Pointer<AudioBufferList> arg4)>>()
        .asFunction<
            int Function(
                ffi.Pointer<ffi.UnsignedInt>,
                ffi.Pointer<AudioTimeStamp>,
                int,
                int,
                ffi.Pointer<AudioBufferList>)>()(arg0, arg1, arg2, arg3, arg4);
int _ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.UnsignedInt> arg0,
        ffi.Pointer<AudioTimeStamp> arg1,
        int arg2,
        int arg3,
        ffi.Pointer<AudioBufferList> arg4) =>
    (objc.getBlockClosure(block) as int Function(
        ffi.Pointer<ffi.UnsignedInt>,
        ffi.Pointer<AudioTimeStamp>,
        int,
        int,
        ffi.Pointer<AudioBufferList>))(arg0, arg1, arg2, arg3, arg4);

/// Construction methods for `objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>)>`.
abstract final class ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<AudioTimeStamp>,
              ffi.Uint32,
              ffi.Long,
              ffi.Pointer<AudioBufferList>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<AudioTimeStamp>,
                  ffi.Uint32,
                  ffi.Long,
                  ffi.Pointer<AudioBufferList>)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<AudioTimeStamp>,
              ffi.Uint32,
              ffi.Long,
              ffi.Pointer<AudioBufferList>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt> arg0, ffi.Pointer<AudioTimeStamp> arg1, ffi.Uint32 arg2, ffi.Long arg3, ffi.Pointer<AudioBufferList> arg4)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Int Function(
                      ffi.Pointer<ffi.UnsignedInt>,
                      ffi.Pointer<AudioTimeStamp>,
                      ffi.Uint32,
                      ffi.Long,
                      ffi.Pointer<AudioBufferList>)>(
              objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>)>(_ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_fnPtrTrampoline, 0).cast(), ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>)>
      fromFunction(int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, int, int, ffi.Pointer<AudioBufferList>) fn) =>
          objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>)>(_ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_closureTrampoline, 0)
                          .cast(),
                  (ffi.Pointer<ffi.UnsignedInt> arg0,
                          ffi.Pointer<AudioTimeStamp> arg1,
                          int arg2,
                          int arg3,
                          ffi.Pointer<AudioBufferList> arg4) =>
                      fn(arg0, arg1, arg2, arg3, arg4)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>)>`.
extension ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_CallExtension
    on objc.ObjCBlock<
        ffi.Int Function(
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<AudioTimeStamp>,
            ffi.Uint32,
            ffi.Long,
            ffi.Pointer<AudioBufferList>)> {
  int call(ffi.Pointer<ffi.UnsignedInt> arg0, ffi.Pointer<AudioTimeStamp> arg1,
          int arg2, int arg3, ffi.Pointer<AudioBufferList> arg4) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<ffi.UnsignedInt> arg0,
                          ffi.Pointer<AudioTimeStamp> arg1,
                          ffi.Uint32 arg2,
                          ffi.Long arg3,
                          ffi.Pointer<AudioBufferList> arg4)>>()
              .asFunction<
                  int Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<ffi.UnsignedInt>,
                      ffi.Pointer<AudioTimeStamp>,
                      int,
                      int,
                      ffi.Pointer<AudioBufferList>)>()(
          pointer, arg0, arg1, arg2, arg3, arg4);
}

late final _sel_renderBlock = objc.registerName("renderBlock");
final _objc_msgSend_1103 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
void _ObjCBlock_ffiVoid_Int64_Uint32_Uint64_ffiFloat_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        int arg1,
        int arg2,
        double arg3) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Int64 arg0, ffi.Uint32 arg1,
                        ffi.Uint64 arg2, ffi.Float arg3)>>()
            .asFunction<void Function(int, int, int, double)>()(
        arg0, arg1, arg2, arg3);
void _ObjCBlock_ffiVoid_Int64_Uint32_Uint64_ffiFloat_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        int arg1,
        int arg2,
        double arg3) =>
    (objc.getBlockClosure(block) as void Function(int, int, int, double))(
        arg0, arg1, arg2, arg3);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>`.
abstract final class ObjCBlock_ffiVoid_Int64_Uint32_Uint64_ffiFloat {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64,
                  ffi.Float)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int64 arg0, ffi.Uint32 arg1, ffi.Uint64 arg2, ffi.Float arg3)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>(
                              _ObjCBlock_ffiVoid_Int64_Uint32_Uint64_ffiFloat_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)> fromFunction(
          void Function(int, int, int, double) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>(
                          _ObjCBlock_ffiVoid_Int64_Uint32_Uint64_ffiFloat_closureTrampoline)
                      .cast(),
              (int arg0, int arg1, int arg2, double arg3) =>
                  fn(arg0, arg1, arg2, arg3)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>
      listener(void Function(int, int, int, double) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>.listener(
                _ObjCBlock_ffiVoid_Int64_Uint32_Uint64_ffiFloat_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0, int arg1, int arg2, double arg3) =>
            fn(arg0, arg1, arg2, arg3));
    return objc.ObjCBlock<
        ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64,
            ffi.Float)>(raw, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Uint32,
          ffi.Uint64, ffi.Float)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)>`.
extension ObjCBlock_ffiVoid_Int64_Uint32_Uint64_ffiFloat_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint64, ffi.Float)> {
  void call(int arg0, int arg1, int arg2, double arg3) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Int64 arg0,
                  ffi.Uint32 arg1,
                  ffi.Uint64 arg2,
                  ffi.Float arg3)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>, int, int, int,
              double)>()(pointer, arg0, arg1, arg2, arg3);
}

late final _sel_scheduleParameterBlock =
    objc.registerName("scheduleParameterBlock");
final _objc_msgSend_1104 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
void
    _ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            int arg0,
            ffi.Pointer<AudioTimeStamp> arg1,
            int arg2,
            int arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.UnsignedInt arg0,
                        ffi.Pointer<AudioTimeStamp> arg1,
                        ffi.Uint32 arg2,
                        ffi.Long arg3)>>()
            .asFunction<
                void Function(int, ffi.Pointer<AudioTimeStamp>, int,
                    int)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            int arg0,
            ffi.Pointer<AudioTimeStamp> arg1,
            int arg2,
            int arg3) =>
        (objc.getBlockClosure(block) as void Function(int,
            ffi.Pointer<AudioTimeStamp>, int, int))(arg0, arg1, arg2, arg3);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>`.
abstract final class ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>,
              ffi.Uint32, ffi.Long)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Void Function(
                  ffi.UnsignedInt,
                  ffi.Pointer<AudioTimeStamp>,
                  ffi.Uint32,
                  ffi.Long)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt arg0, ffi.Pointer<AudioTimeStamp> arg1, ffi.Uint32 arg2, ffi.Long arg3)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>(
                              _ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>
      fromFunction(void Function(AudioUnitRenderActionFlags, ffi.Pointer<AudioTimeStamp>, int, int) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>(
                          _ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_closureTrampoline)
                      .cast(),
                  (int arg0, ffi.Pointer<AudioTimeStamp> arg1, int arg2, int arg3) =>
                      fn(AudioUnitRenderActionFlags.fromValue(arg0), arg1, arg2, arg3)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>,
          ffi.Uint32, ffi.Long)> listener(
      void Function(
              AudioUnitRenderActionFlags, ffi.Pointer<AudioTimeStamp>, int, int)
          fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.UnsignedInt,
                        ffi.Pointer<AudioTimeStamp>,
                        ffi.Uint32,
                        ffi.Long)>.listener(
                _ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0, ffi.Pointer<AudioTimeStamp> arg1, int arg2, int arg3) =>
            fn(AudioUnitRenderActionFlags.fromValue(arg0), arg1, arg2, arg3));
    return objc.ObjCBlock<
        ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>,
            ffi.Uint32, ffi.Long)>(raw, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.UnsignedInt,
          ffi.Pointer<AudioTimeStamp>,
          ffi.Uint32,
          ffi.Long)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>`.
extension ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<AudioTimeStamp>,
            ffi.Uint32, ffi.Long)> {
  void call(AudioUnitRenderActionFlags arg0, ffi.Pointer<AudioTimeStamp> arg1,
          int arg2, int arg3) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.UnsignedInt arg0,
                      ffi.Pointer<AudioTimeStamp> arg1,
                      ffi.Uint32 arg2,
                      ffi.Long arg3)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  int,
                  ffi.Pointer<AudioTimeStamp>,
                  int,
                  int)>()(pointer, arg0.value, arg1, arg2, arg3);
}

late final _sel_tokenByAddingRenderObserver_ =
    objc.registerName("tokenByAddingRenderObserver:");
final _objc_msgSend_1105 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_removeRenderObserver_ =
    objc.registerName("removeRenderObserver:");
late final _sel_maximumFramesToRender =
    objc.registerName("maximumFramesToRender");
late final _sel_setMaximumFramesToRender_ =
    objc.registerName("setMaximumFramesToRender:");

/// AUParameterTree
class AUParameterTree extends AUParameterGroup {
  AUParameterTree._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AUParameterTree] that points to the same underlying object as [other].
  AUParameterTree.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AUParameterTree] that wraps the given raw object pointer.
  AUParameterTree.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AUParameterTree].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AUParameterTree);
  }

  /// parameterWithAddress:
  AUParameter? parameterWithAddress_(int address) {
    final _ret =
        _objc_msgSend_1128(this.pointer, _sel_parameterWithAddress_, address);
    return _ret.address == 0
        ? null
        : AUParameter.castFromPointer(_ret, retain: true, release: true);
  }

  /// parameterWithID:scope:element:
  AUParameter? parameterWithID_scope_element_(
      int paramID, int scope, int element) {
    final _ret = _objc_msgSend_1129(this.pointer,
        _sel_parameterWithID_scope_element_, paramID, scope, element);
    return _ret.address == 0
        ? null
        : AUParameter.castFromPointer(_ret, retain: true, release: true);
  }

  /// createParameterWithIdentifier:name:address:min:max:unit:unitName:flags:valueStrings:dependentParameters:
  static AUParameter
      createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_(
          objc.NSString identifier,
          objc.NSString name,
          int address,
          double min,
          double max,
          AudioUnitParameterUnit unit,
          objc.NSString? unitName,
          AudioUnitParameterOptions flags,
          objc.NSArray? valueStrings,
          objc.NSArray? dependentParameters) {
    final _ret = _objc_msgSend_1130(
        _class_AUParameterTree,
        _sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_,
        identifier.pointer,
        name.pointer,
        address,
        min,
        max,
        unit.value,
        unitName?.pointer ?? ffi.nullptr,
        flags.value,
        valueStrings?.pointer ?? ffi.nullptr,
        dependentParameters?.pointer ?? ffi.nullptr);
    return AUParameter.castFromPointer(_ret, retain: true, release: true);
  }

  /// createGroupWithIdentifier:name:children:
  static AUParameterGroup createGroupWithIdentifier_name_children_(
      objc.NSString identifier, objc.NSString name, objc.NSArray children) {
    final _ret = _objc_msgSend_1131(
        _class_AUParameterTree,
        _sel_createGroupWithIdentifier_name_children_,
        identifier.pointer,
        name.pointer,
        children.pointer);
    return AUParameterGroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// createGroupTemplate:
  static AUParameterGroup createGroupTemplate_(objc.NSArray children) {
    final _ret = _objc_msgSend_1132(
        _class_AUParameterTree, _sel_createGroupTemplate_, children.pointer);
    return AUParameterGroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// createGroupFromTemplate:identifier:name:addressOffset:
  static AUParameterGroup
      createGroupFromTemplate_identifier_name_addressOffset_(
          AUParameterGroup templateGroup,
          objc.NSString identifier,
          objc.NSString name,
          int addressOffset) {
    final _ret = _objc_msgSend_1133(
        _class_AUParameterTree,
        _sel_createGroupFromTemplate_identifier_name_addressOffset_,
        templateGroup.pointer,
        identifier.pointer,
        name.pointer,
        addressOffset);
    return AUParameterGroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// createTreeWithChildren:
  static AUParameterTree createTreeWithChildren_(objc.NSArray children) {
    final _ret = _objc_msgSend_1134(
        _class_AUParameterTree, _sel_createTreeWithChildren_, children.pointer);
    return AUParameterTree.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AUParameterTree init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AUParameterTree.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AUParameterTree new1() {
    final _ret = _objc_msgSend_19(_class_AUParameterTree, _sel_new);
    return AUParameterTree.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AUParameterTree allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AUParameterTree, _sel_allocWithZone_, zone);
    return AUParameterTree.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AUParameterTree alloc() {
    final _ret = _objc_msgSend_19(_class_AUParameterTree, _sel_alloc);
    return AUParameterTree.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AUParameterTree,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AUParameterTree,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AUParameterTree, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AUParameterTree, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AUParameterTree,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AUParameterTree,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AUParameterTree,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AUParameterTree, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AUParameterTree, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AUParameterTree = objc.getClass("AUParameterTree");

/// AUParameter
class AUParameter extends AUParameterNode {
  AUParameter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AUParameter] that points to the same underlying object as [other].
  AUParameter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AUParameter] that wraps the given raw object pointer.
  AUParameter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AUParameter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AUParameter);
  }

  /// minValue
  double get minValue {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_minValue)
        : _objc_msgSend_361(this.pointer, _sel_minValue);
  }

  /// maxValue
  double get maxValue {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_maxValue)
        : _objc_msgSend_361(this.pointer, _sel_maxValue);
  }

  /// unit
  AudioUnitParameterUnit get unit {
    final _ret = _objc_msgSend_1106(this.pointer, _sel_unit);
    return AudioUnitParameterUnit.fromValue(_ret);
  }

  /// unitName
  objc.NSString? get unitName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_unitName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// flags
  AudioUnitParameterOptions get flags {
    final _ret = _objc_msgSend_1107(this.pointer, _sel_flags);
    return AudioUnitParameterOptions.fromValue(_ret);
  }

  /// address
  int get address {
    return _objc_msgSend_1108(this.pointer, _sel_address);
  }

  /// valueStrings
  objc.NSArray? get valueStrings {
    final _ret = _objc_msgSend_88(this.pointer, _sel_valueStrings);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// dependentParameters
  objc.NSArray? get dependentParameters {
    final _ret = _objc_msgSend_88(this.pointer, _sel_dependentParameters);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// value
  double get value {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_value)
        : _objc_msgSend_361(this.pointer, _sel_value);
  }

  /// setValue:
  set value(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setValue_, value);
  }

  /// setValue:originator:
  void setValue_originator_(double value, ffi.Pointer<ffi.Void> originator) {
    _objc_msgSend_1109(
        this.pointer, _sel_setValue_originator_, value, originator);
  }

  /// setValue:originator:atHostTime:
  void setValue_originator_atHostTime_(
      double value, ffi.Pointer<ffi.Void> originator, int hostTime) {
    _objc_msgSend_1110(this.pointer, _sel_setValue_originator_atHostTime_,
        value, originator, hostTime);
  }

  /// setValue:originator:atHostTime:eventType:
  void setValue_originator_atHostTime_eventType_(
      double value,
      ffi.Pointer<ffi.Void> originator,
      int hostTime,
      AUParameterAutomationEventType eventType) {
    _objc_msgSend_1111(
        this.pointer,
        _sel_setValue_originator_atHostTime_eventType_,
        value,
        originator,
        hostTime,
        eventType.value);
  }

  /// stringFromValue:
  objc.NSString stringFromValue_(ffi.Pointer<ffi.Float> value) {
    final _ret = _objc_msgSend_1112(this.pointer, _sel_stringFromValue_, value);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// valueFromString:
  double valueFromString_(objc.NSString string) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1113Fpret(
            this.pointer, _sel_valueFromString_, string.pointer)
        : _objc_msgSend_1113(
            this.pointer, _sel_valueFromString_, string.pointer);
  }

  /// init
  AUParameter init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AUParameter.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AUParameter new1() {
    final _ret = _objc_msgSend_19(_class_AUParameter, _sel_new);
    return AUParameter.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AUParameter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AUParameter, _sel_allocWithZone_, zone);
    return AUParameter.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AUParameter alloc() {
    final _ret = _objc_msgSend_19(_class_AUParameter, _sel_alloc);
    return AUParameter.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AUParameter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AUParameter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AUParameter, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AUParameter, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AUParameter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AUParameter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AUParameter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AUParameter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AUParameter, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AUParameter = objc.getClass("AUParameter");
late final _sel_minValue = objc.registerName("minValue");
late final _sel_maxValue = objc.registerName("maxValue");

enum AudioUnitParameterUnit {
  kAudioUnitParameterUnit_Generic(0),
  kAudioUnitParameterUnit_Indexed(1),
  kAudioUnitParameterUnit_Boolean(2),
  kAudioUnitParameterUnit_Percent(3),
  kAudioUnitParameterUnit_Seconds(4),
  kAudioUnitParameterUnit_SampleFrames(5),
  kAudioUnitParameterUnit_Phase(6),
  kAudioUnitParameterUnit_Rate(7),
  kAudioUnitParameterUnit_Hertz(8),
  kAudioUnitParameterUnit_Cents(9),
  kAudioUnitParameterUnit_RelativeSemiTones(10),
  kAudioUnitParameterUnit_MIDINoteNumber(11),
  kAudioUnitParameterUnit_MIDIController(12),
  kAudioUnitParameterUnit_Decibels(13),
  kAudioUnitParameterUnit_LinearGain(14),
  kAudioUnitParameterUnit_Degrees(15),
  kAudioUnitParameterUnit_EqualPowerCrossfade(16),
  kAudioUnitParameterUnit_MixerFaderCurve1(17),
  kAudioUnitParameterUnit_Pan(18),
  kAudioUnitParameterUnit_Meters(19),
  kAudioUnitParameterUnit_AbsoluteCents(20),
  kAudioUnitParameterUnit_Octaves(21),
  kAudioUnitParameterUnit_BPM(22),
  kAudioUnitParameterUnit_Beats(23),
  kAudioUnitParameterUnit_Milliseconds(24),
  kAudioUnitParameterUnit_Ratio(25),
  kAudioUnitParameterUnit_CustomUnit(26),
  kAudioUnitParameterUnit_MIDI2Controller(27);

  final int value;
  const AudioUnitParameterUnit(this.value);

  static AudioUnitParameterUnit fromValue(int value) => switch (value) {
        0 => kAudioUnitParameterUnit_Generic,
        1 => kAudioUnitParameterUnit_Indexed,
        2 => kAudioUnitParameterUnit_Boolean,
        3 => kAudioUnitParameterUnit_Percent,
        4 => kAudioUnitParameterUnit_Seconds,
        5 => kAudioUnitParameterUnit_SampleFrames,
        6 => kAudioUnitParameterUnit_Phase,
        7 => kAudioUnitParameterUnit_Rate,
        8 => kAudioUnitParameterUnit_Hertz,
        9 => kAudioUnitParameterUnit_Cents,
        10 => kAudioUnitParameterUnit_RelativeSemiTones,
        11 => kAudioUnitParameterUnit_MIDINoteNumber,
        12 => kAudioUnitParameterUnit_MIDIController,
        13 => kAudioUnitParameterUnit_Decibels,
        14 => kAudioUnitParameterUnit_LinearGain,
        15 => kAudioUnitParameterUnit_Degrees,
        16 => kAudioUnitParameterUnit_EqualPowerCrossfade,
        17 => kAudioUnitParameterUnit_MixerFaderCurve1,
        18 => kAudioUnitParameterUnit_Pan,
        19 => kAudioUnitParameterUnit_Meters,
        20 => kAudioUnitParameterUnit_AbsoluteCents,
        21 => kAudioUnitParameterUnit_Octaves,
        22 => kAudioUnitParameterUnit_BPM,
        23 => kAudioUnitParameterUnit_Beats,
        24 => kAudioUnitParameterUnit_Milliseconds,
        25 => kAudioUnitParameterUnit_Ratio,
        26 => kAudioUnitParameterUnit_CustomUnit,
        27 => kAudioUnitParameterUnit_MIDI2Controller,
        _ => throw ArgumentError(
            "Unknown value for AudioUnitParameterUnit: $value"),
      };
}

late final _sel_unit = objc.registerName("unit");
final _objc_msgSend_1106 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_unitName = objc.registerName("unitName");

enum AudioUnitParameterOptions {
  kAudioUnitParameterFlag_CFNameRelease(16),
  kAudioUnitParameterFlag_OmitFromPresets(8192),
  kAudioUnitParameterFlag_PlotHistory(16384),
  kAudioUnitParameterFlag_MeterReadOnly(32768),
  kAudioUnitParameterFlag_DisplayMask(4653056),
  kAudioUnitParameterFlag_DisplaySquareRoot(65536),
  kAudioUnitParameterFlag_DisplaySquared(131072),
  kAudioUnitParameterFlag_DisplayCubed(196608),
  kAudioUnitParameterFlag_DisplayCubeRoot(262144),
  kAudioUnitParameterFlag_DisplayExponential(327680),
  kAudioUnitParameterFlag_HasClump(1048576),
  kAudioUnitParameterFlag_ValuesHaveStrings(2097152),
  kAudioUnitParameterFlag_DisplayLogarithmic(4194304),
  kAudioUnitParameterFlag_IsHighResolution(8388608),
  kAudioUnitParameterFlag_NonRealTime(16777216),
  kAudioUnitParameterFlag_CanRamp(33554432),
  kAudioUnitParameterFlag_ExpertMode(67108864),
  kAudioUnitParameterFlag_HasCFNameString(134217728),
  kAudioUnitParameterFlag_IsGlobalMeta(268435456),
  kAudioUnitParameterFlag_IsElementMeta(536870912),
  kAudioUnitParameterFlag_IsReadable(1073741824),
  kAudioUnitParameterFlag_IsWritable(-2147483648);

  final int value;
  const AudioUnitParameterOptions(this.value);

  static AudioUnitParameterOptions fromValue(int value) => switch (value) {
        16 => kAudioUnitParameterFlag_CFNameRelease,
        8192 => kAudioUnitParameterFlag_OmitFromPresets,
        16384 => kAudioUnitParameterFlag_PlotHistory,
        32768 => kAudioUnitParameterFlag_MeterReadOnly,
        4653056 => kAudioUnitParameterFlag_DisplayMask,
        65536 => kAudioUnitParameterFlag_DisplaySquareRoot,
        131072 => kAudioUnitParameterFlag_DisplaySquared,
        196608 => kAudioUnitParameterFlag_DisplayCubed,
        262144 => kAudioUnitParameterFlag_DisplayCubeRoot,
        327680 => kAudioUnitParameterFlag_DisplayExponential,
        1048576 => kAudioUnitParameterFlag_HasClump,
        2097152 => kAudioUnitParameterFlag_ValuesHaveStrings,
        4194304 => kAudioUnitParameterFlag_DisplayLogarithmic,
        8388608 => kAudioUnitParameterFlag_IsHighResolution,
        16777216 => kAudioUnitParameterFlag_NonRealTime,
        33554432 => kAudioUnitParameterFlag_CanRamp,
        67108864 => kAudioUnitParameterFlag_ExpertMode,
        134217728 => kAudioUnitParameterFlag_HasCFNameString,
        268435456 => kAudioUnitParameterFlag_IsGlobalMeta,
        536870912 => kAudioUnitParameterFlag_IsElementMeta,
        1073741824 => kAudioUnitParameterFlag_IsReadable,
        -2147483648 => kAudioUnitParameterFlag_IsWritable,
        _ => throw ArgumentError(
            "Unknown value for AudioUnitParameterOptions: $value"),
      };
}

late final _sel_flags = objc.registerName("flags");
final _objc_msgSend_1107 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1108 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Uint64 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_valueStrings = objc.registerName("valueStrings");
late final _sel_dependentParameters = objc.registerName("dependentParameters");
late final _sel_setValue_ = objc.registerName("setValue:");
late final _sel_setValue_originator_ =
    objc.registerName("setValue:originator:");
final _objc_msgSend_1109 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Float,
                ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, ffi.Pointer<ffi.Void>)>();
late final _sel_setValue_originator_atHostTime_ =
    objc.registerName("setValue:originator:atHostTime:");
final _objc_msgSend_1110 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Float,
                ffi.Pointer<ffi.Void>,
                ffi.Uint64)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<ffi.Void>,
            int)>();

enum AUParameterAutomationEventType {
  AUParameterAutomationEventTypeValue(0),
  AUParameterAutomationEventTypeTouch(1),
  AUParameterAutomationEventTypeRelease(2);

  final int value;
  const AUParameterAutomationEventType(this.value);

  static AUParameterAutomationEventType fromValue(int value) => switch (value) {
        0 => AUParameterAutomationEventTypeValue,
        1 => AUParameterAutomationEventTypeTouch,
        2 => AUParameterAutomationEventTypeRelease,
        _ => throw ArgumentError(
            "Unknown value for AUParameterAutomationEventType: $value"),
      };
}

late final _sel_setValue_originator_atHostTime_eventType_ =
    objc.registerName("setValue:originator:atHostTime:eventType:");
final _objc_msgSend_1111 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Float,
                ffi.Pointer<ffi.Void>,
                ffi.Uint64,
                ffi.Uint32)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<ffi.Void>,
            int,
            int)>();
late final _sel_stringFromValue_ = objc.registerName("stringFromValue:");
final _objc_msgSend_1112 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Float>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Float>)>();
late final _sel_valueFromString_ = objc.registerName("valueFromString:");
final _objc_msgSend_1113 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1113Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// AUParameterNode
class AUParameterNode extends objc.NSObject {
  AUParameterNode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AUParameterNode] that points to the same underlying object as [other].
  AUParameterNode.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AUParameterNode] that wraps the given raw object pointer.
  AUParameterNode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AUParameterNode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AUParameterNode);
  }

  /// identifier
  objc.NSString get identifier {
    final _ret = _objc_msgSend_11(this.pointer, _sel_identifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// keyPath
  objc.NSString get keyPath {
    final _ret = _objc_msgSend_11(this.pointer, _sel_keyPath);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// displayName
  objc.NSString get displayName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_displayName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// displayNameWithLength:
  objc.NSString displayNameWithLength_(int maximumLength) {
    final _ret = _objc_msgSend_1114(
        this.pointer, _sel_displayNameWithLength_, maximumLength);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// tokenByAddingParameterObserver:
  ffi.Pointer<ffi.Void> tokenByAddingParameterObserver_(
      objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)> observer) {
    return _objc_msgSend_1115(
        this.pointer, _sel_tokenByAddingParameterObserver_, observer.pointer);
  }

  /// tokenByAddingParameterRecordingObserver:
  ffi.Pointer<ffi.Void> tokenByAddingParameterRecordingObserver_(
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>
          observer) {
    return _objc_msgSend_1116(this.pointer,
        _sel_tokenByAddingParameterRecordingObserver_, observer.pointer);
  }

  /// tokenByAddingParameterAutomationObserver:
  ffi.Pointer<ffi.Void> tokenByAddingParameterAutomationObserver_(
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>
          observer) {
    return _objc_msgSend_1117(this.pointer,
        _sel_tokenByAddingParameterAutomationObserver_, observer.pointer);
  }

  /// removeParameterObserver:
  void removeParameterObserver_(ffi.Pointer<ffi.Void> token) {
    _objc_msgSend_424(this.pointer, _sel_removeParameterObserver_, token);
  }

  /// implementorValueObserver
  objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)>
      get implementorValueObserver {
    final _ret =
        _objc_msgSend_1118(this.pointer, _sel_implementorValueObserver);
    return ObjCBlock_ffiVoid_AUParameter_ffiFloat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setImplementorValueObserver:
  set implementorValueObserver(
      objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)> value) {
    return _objc_msgSend_1119(
        this.pointer, _sel_setImplementorValueObserver_, value.pointer);
  }

  /// implementorValueProvider
  objc.ObjCBlock<ffi.Float Function(AUParameter)> get implementorValueProvider {
    final _ret =
        _objc_msgSend_1120(this.pointer, _sel_implementorValueProvider);
    return ObjCBlock_ffiFloat_AUParameter.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setImplementorValueProvider:
  set implementorValueProvider(
      objc.ObjCBlock<ffi.Float Function(AUParameter)> value) {
    return _objc_msgSend_1121(
        this.pointer, _sel_setImplementorValueProvider_, value.pointer);
  }

  /// implementorStringFromValueCallback
  objc.ObjCBlock<objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)>
      get implementorStringFromValueCallback {
    final _ret = _objc_msgSend_1122(
        this.pointer, _sel_implementorStringFromValueCallback);
    return ObjCBlock_NSString_AUParameter_ffiFloat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setImplementorStringFromValueCallback:
  set implementorStringFromValueCallback(
      objc.ObjCBlock<
              objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)>
          value) {
    return _objc_msgSend_1123(this.pointer,
        _sel_setImplementorStringFromValueCallback_, value.pointer);
  }

  /// implementorValueFromStringCallback
  objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)>
      get implementorValueFromStringCallback {
    final _ret = _objc_msgSend_1124(
        this.pointer, _sel_implementorValueFromStringCallback);
    return ObjCBlock_ffiFloat_AUParameter_NSString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setImplementorValueFromStringCallback:
  set implementorValueFromStringCallback(
      objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)> value) {
    return _objc_msgSend_1125(this.pointer,
        _sel_setImplementorValueFromStringCallback_, value.pointer);
  }

  /// implementorDisplayNameWithLengthCallback
  objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)>
      get implementorDisplayNameWithLengthCallback {
    final _ret = _objc_msgSend_1126(
        this.pointer, _sel_implementorDisplayNameWithLengthCallback);
    return ObjCBlock_NSString_AUParameterNode_ffiLong.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setImplementorDisplayNameWithLengthCallback:
  set implementorDisplayNameWithLengthCallback(
      objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)> value) {
    return _objc_msgSend_1127(this.pointer,
        _sel_setImplementorDisplayNameWithLengthCallback_, value.pointer);
  }

  /// init
  AUParameterNode init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AUParameterNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AUParameterNode new1() {
    final _ret = _objc_msgSend_19(_class_AUParameterNode, _sel_new);
    return AUParameterNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AUParameterNode allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AUParameterNode, _sel_allocWithZone_, zone);
    return AUParameterNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AUParameterNode alloc() {
    final _ret = _objc_msgSend_19(_class_AUParameterNode, _sel_alloc);
    return AUParameterNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AUParameterNode,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AUParameterNode,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AUParameterNode, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AUParameterNode, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AUParameterNode,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AUParameterNode,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AUParameterNode,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AUParameterNode, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AUParameterNode, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AUParameterNode = objc.getClass("AUParameterNode");
late final _sel_keyPath = objc.registerName("keyPath");
late final _sel_displayNameWithLength_ =
    objc.registerName("displayNameWithLength:");
final _objc_msgSend_1114 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
void _ObjCBlock_ffiVoid_Uint64_ffiFloat_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0, double arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Uint64 arg0, ffi.Float arg1)>>()
        .asFunction<void Function(int, double)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_Uint64_ffiFloat_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0, double arg1) =>
    (objc.getBlockClosure(block) as void Function(int, double))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)>`.
abstract final class ObjCBlock_ffiVoid_Uint64_ffiFloat {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Uint64 arg0, ffi.Float arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Uint64,
                              ffi.Float)>(_ObjCBlock_ffiVoid_Uint64_ffiFloat_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)> fromFunction(
          void Function(int, double) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(
                              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Uint64, ffi.Float)>(
                      _ObjCBlock_ffiVoid_Uint64_ffiFloat_closureTrampoline)
                  .cast(),
              (int arg0, double arg1) => fn(arg0, arg1)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)> listener(
      void Function(int, double) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Uint64, ffi.Float)>.listener(
                _ObjCBlock_ffiVoid_Uint64_ffiFloat_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0, double arg1) => fn(arg0, arg1));
    return objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Uint64, ffi.Float)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)>`.
extension ObjCBlock_ffiVoid_Uint64_ffiFloat_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Uint64, ffi.Float)> {
  void call(int arg0, double arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Uint64 arg0, ffi.Float arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>, int, double)>()(
      pointer, arg0, arg1);
}

late final _sel_tokenByAddingParameterObserver_ =
    objc.registerName("tokenByAddingParameterObserver:");
final _objc_msgSend_1115 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Void> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
void _ObjCBlock_ffiVoid_ffiLong_AURecordedParameterEvent_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        ffi.Pointer<AURecordedParameterEvent> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Long arg0,
                    ffi.Pointer<AURecordedParameterEvent> arg1)>>()
        .asFunction<
            void Function(
                int, ffi.Pointer<AURecordedParameterEvent>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_ffiLong_AURecordedParameterEvent_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        ffi.Pointer<AURecordedParameterEvent> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        int, ffi.Pointer<AURecordedParameterEvent>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>`.
abstract final class ObjCBlock_ffiVoid_ffiLong_AURecordedParameterEvent {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc
      .ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Long arg0, ffi.Pointer<AURecordedParameterEvent> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>(
                              _ObjCBlock_ffiVoid_ffiLong_AURecordedParameterEvent_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AURecordedParameterEvent>)> fromFunction(
          void Function(int, ffi.Pointer<AURecordedParameterEvent>) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>(
                          _ObjCBlock_ffiVoid_ffiLong_AURecordedParameterEvent_closureTrampoline)
                      .cast(),
              (int arg0, ffi.Pointer<AURecordedParameterEvent> arg1) =>
                  fn(arg0, arg1)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>
      listener(void Function(int, ffi.Pointer<AURecordedParameterEvent>) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Long,
                        ffi.Pointer<AURecordedParameterEvent>)>.listener(
                _ObjCBlock_ffiVoid_ffiLong_AURecordedParameterEvent_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0, ffi.Pointer<AURecordedParameterEvent> arg1) =>
            fn(arg0, arg1));
    return objc.ObjCBlock<
            ffi.Void Function(ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>(
        raw,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Long,
          ffi.Pointer<AURecordedParameterEvent>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AURecordedParameterEvent>)>`.
extension ObjCBlock_ffiVoid_ffiLong_AURecordedParameterEvent_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Long, ffi.Pointer<AURecordedParameterEvent>)> {
  void call(int arg0, ffi.Pointer<AURecordedParameterEvent> arg1) => pointer
      .ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Long arg0, ffi.Pointer<AURecordedParameterEvent> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>, int,
              ffi.Pointer<AURecordedParameterEvent>)>()(pointer, arg0, arg1);
}

final class AURecordedParameterEvent extends ffi.Struct {
  @ffi.Uint64()
  external int hostTime;

  @ffi.Uint64()
  external int address;

  @ffi.Float()
  external double value;
}

late final _sel_tokenByAddingParameterRecordingObserver_ =
    objc.registerName("tokenByAddingParameterRecordingObserver:");
final _objc_msgSend_1116 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Void> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
void _ObjCBlock_ffiVoid_ffiLong_AUParameterAutomationEvent_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        ffi.Pointer<AUParameterAutomationEvent> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Long arg0,
                    ffi.Pointer<AUParameterAutomationEvent> arg1)>>()
        .asFunction<
            void Function(
                int, ffi.Pointer<AUParameterAutomationEvent>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_ffiLong_AUParameterAutomationEvent_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        ffi.Pointer<AUParameterAutomationEvent> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        int, ffi.Pointer<AUParameterAutomationEvent>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>`.
abstract final class ObjCBlock_ffiVoid_ffiLong_AUParameterAutomationEvent {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc
      .ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Long arg0, ffi.Pointer<AUParameterAutomationEvent> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>(
                              _ObjCBlock_ffiVoid_ffiLong_AUParameterAutomationEvent_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)> fromFunction(
          void Function(int, ffi.Pointer<AUParameterAutomationEvent>) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>(
                          _ObjCBlock_ffiVoid_ffiLong_AUParameterAutomationEvent_closureTrampoline)
                      .cast(),
              (int arg0, ffi.Pointer<AUParameterAutomationEvent> arg1) =>
                  fn(arg0, arg1)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>
      listener(void Function(int, ffi.Pointer<AUParameterAutomationEvent>) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Long,
                        ffi.Pointer<AUParameterAutomationEvent>)>.listener(
                _ObjCBlock_ffiVoid_ffiLong_AUParameterAutomationEvent_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0, ffi.Pointer<AUParameterAutomationEvent> arg1) =>
            fn(arg0, arg1));
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Long,
              ffi.Pointer<AUParameterAutomationEvent>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)>`.
extension ObjCBlock_ffiVoid_ffiLong_AUParameterAutomationEvent_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Long, ffi.Pointer<AUParameterAutomationEvent>)> {
  void call(int arg0, ffi.Pointer<AUParameterAutomationEvent> arg1) => pointer
      .ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Long arg0,
                  ffi.Pointer<AUParameterAutomationEvent> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>, int,
              ffi.Pointer<AUParameterAutomationEvent>)>()(pointer, arg0, arg1);
}

final class AUParameterAutomationEvent extends ffi.Struct {
  @ffi.Uint64()
  external int hostTime;

  @ffi.Uint64()
  external int address;

  @ffi.Float()
  external double value;

  @ffi.Uint32()
  external int eventType;

  @ffi.Uint64()
  external int reserved;
}

late final _sel_tokenByAddingParameterAutomationObserver_ =
    objc.registerName("tokenByAddingParameterAutomationObserver:");
final _objc_msgSend_1117 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Void> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_removeParameterObserver_ =
    objc.registerName("removeParameterObserver:");
void _ObjCBlock_ffiVoid_AUParameter_ffiFloat_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        double arg1) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCObject> arg0, ffi.Float arg1)>>()
            .asFunction<void Function(ffi.Pointer<objc.ObjCObject>, double)>()(
        arg0, arg1);
void _ObjCBlock_ffiVoid_AUParameter_ffiFloat_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        double arg1) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>, double))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)>`.
abstract final class ObjCBlock_ffiVoid_AUParameter_ffiFloat {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Float arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Float)>(
                              _ObjCBlock_ffiVoid_AUParameter_ffiFloat_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)> fromFunction(
          void Function(AUParameter, double) fn) =>
      objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Float)>(
                          _ObjCBlock_ffiVoid_AUParameter_ffiFloat_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, double arg1) => fn(
                  AUParameter.castFromPointer(arg0, retain: true, release: true), arg1)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)> listener(
      void Function(AUParameter, double) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>, ffi.Float)>.listener(
                _ObjCBlock_ffiVoid_AUParameter_ffiFloat_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, double arg1) => fn(
            AUParameter.castFromPointer(arg0, retain: false, release: true),
            arg1));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AUParameter_ffiFloat(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Float)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)>`.
extension ObjCBlock_ffiVoid_AUParameter_ffiFloat_CallExtension
    on objc.ObjCBlock<ffi.Void Function(AUParameter, ffi.Float)> {
  void call(AUParameter arg0, double arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0, ffi.Float arg1)>>()
      .asFunction<
          void Function(
              ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>,
              double)>()(pointer, arg0.pointer, arg1);
}

late final _sel_implementorValueObserver =
    objc.registerName("implementorValueObserver");
final _objc_msgSend_1118 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setImplementorValueObserver_ =
    objc.registerName("setImplementorValueObserver:");
final _objc_msgSend_1119 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
double _ObjCBlock_ffiFloat_AUParameter_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Float Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<double Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
double _ObjCBlock_ffiFloat_AUParameter_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as double Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Float Function(AUParameter)>`.
abstract final class ObjCBlock_ffiFloat_AUParameter {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Float Function(AUParameter)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Float Function(AUParameter)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Float Function(AUParameter)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Float Function(AUParameter)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Float Function(
                                  ffi.Pointer<objc.ObjCBlockImpl>,
                                  ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiFloat_AUParameter_fnPtrTrampoline, 0.0)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Float Function(AUParameter)> fromFunction(
          double Function(AUParameter) fn) =>
      objc.ObjCBlock<ffi.Float Function(AUParameter)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Float Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiFloat_AUParameter_closureTrampoline, 0.0)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(AUParameter.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Float Function(AUParameter)>`.
extension ObjCBlock_ffiFloat_AUParameter_CallExtension
    on objc.ObjCBlock<ffi.Float Function(AUParameter)> {
  double call(AUParameter arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          double Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_implementorValueProvider =
    objc.registerName("implementorValueProvider");
final _objc_msgSend_1120 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setImplementorValueProvider_ =
    objc.registerName("setImplementorValueProvider:");
final _objc_msgSend_1121 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSString_AUParameter_ffiFloat_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<ffi.Float> arg1) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<ffi.Float> arg1)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<ffi.Float>)>()(arg0, arg1);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSString_AUParameter_ffiFloat_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<ffi.Float> arg1) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Float>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)>`.
abstract final class ObjCBlock_NSString_AUParameter_ffiFloat {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)> fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<ffi.Float> arg1)>> ptr) =>
      objc.ObjCBlock<objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<objc.ObjCObject>,
                          ffi.Pointer<ffi.Float>)>(_ObjCBlock_NSString_AUParameter_ffiFloat_fnPtrTrampoline)
                  .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)> fromFunction(
          objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>) fn) =>
      objc.ObjCBlock<objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Float>)>(
                          _ObjCBlock_NSString_AUParameter_ffiFloat_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<ffi.Float> arg1) =>
                  fn(AUParameter.castFromPointer(arg0, retain: true, release: true), arg1).retainAndReturnPointer()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)>`.
extension ObjCBlock_NSString_AUParameter_ffiFloat_CallExtension on objc
    .ObjCBlock<objc.NSString Function(AUParameter, ffi.Pointer<ffi.Float>)> {
  objc.NSString call(AUParameter arg0, ffi.Pointer<ffi.Float> arg1) =>
      objc.NSString.castFromPointer(
          pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<ffi.Float> arg1)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<ffi.Float>)>()(pointer, arg0.pointer, arg1),
          retain: false,
          release: true);
}

late final _sel_implementorStringFromValueCallback =
    objc.registerName("implementorStringFromValueCallback");
final _objc_msgSend_1122 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setImplementorStringFromValueCallback_ =
    objc.registerName("setImplementorStringFromValueCallback:");
final _objc_msgSend_1123 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
double _ObjCBlock_ffiFloat_AUParameter_NSString_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Float Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
double _ObjCBlock_ffiFloat_AUParameter_NSString_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as double Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)>`.
abstract final class ObjCBlock_ffiFloat_AUParameter_NSString {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>>
              ptr) =>
      objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Float Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiFloat_AUParameter_NSString_fnPtrTrampoline, 0.0)
                  .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)> fromFunction(
          double Function(AUParameter, objc.NSString) fn) =>
      objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Float Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiFloat_AUParameter_NSString_closureTrampoline, 0.0)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  AUParameter.castFromPointer(arg0, retain: true, release: true),
                  objc.NSString.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)>`.
extension ObjCBlock_ffiFloat_AUParameter_NSString_CallExtension
    on objc.ObjCBlock<ffi.Float Function(AUParameter, objc.NSString)> {
  double call(AUParameter arg0, objc.NSString arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Float Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              double Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1.pointer);
}

late final _sel_implementorValueFromStringCallback =
    objc.registerName("implementorValueFromStringCallback");
final _objc_msgSend_1124 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setImplementorValueFromStringCallback_ =
    objc.registerName("setImplementorValueFromStringCallback:");
final _objc_msgSend_1125 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSString_AUParameterNode_ffiLong_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            int arg1) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCObject> arg0, ffi.Long arg1)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCObject>, int)>()(arg0, arg1);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSString_AUParameterNode_ffiLong_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            int arg1) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, int))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)>`.
abstract final class ObjCBlock_NSString_AUParameterNode_ffiLong {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Long arg1)>> ptr) =>
          objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Long)>(_ObjCBlock_NSString_AUParameterNode_ffiLong_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)> fromFunction(
          objc.NSString Function(AUParameterNode, int) fn) =>
      objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<objc.ObjCObject>,
                          ffi.Long)>(_ObjCBlock_NSString_AUParameterNode_ffiLong_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, int arg1) => fn(AUParameterNode.castFromPointer(arg0, retain: true, release: true), arg1).retainAndReturnPointer()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)>`.
extension ObjCBlock_NSString_AUParameterNode_ffiLong_CallExtension
    on objc.ObjCBlock<objc.NSString Function(AUParameterNode, ffi.Long)> {
  objc.NSString call(AUParameterNode arg0, int arg1) =>
      objc.NSString.castFromPointer(
          pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Long arg1)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      int)>()(pointer, arg0.pointer, arg1),
          retain: false,
          release: true);
}

late final _sel_implementorDisplayNameWithLengthCallback =
    objc.registerName("implementorDisplayNameWithLengthCallback");
final _objc_msgSend_1126 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setImplementorDisplayNameWithLengthCallback_ =
    objc.registerName("setImplementorDisplayNameWithLengthCallback:");
final _objc_msgSend_1127 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_parameterWithAddress_ =
    objc.registerName("parameterWithAddress:");
final _objc_msgSend_1128 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint64)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_parameterWithID_scope_element_ =
    objc.registerName("parameterWithID:scope:element:");
final _objc_msgSend_1129 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.UnsignedInt,
                ffi.UnsignedInt)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int, int)>();
late final _sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_ =
    objc.registerName(
        "createParameterWithIdentifier:name:address:min:max:unit:unitName:flags:valueStrings:dependentParameters:");
final _objc_msgSend_1130 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Uint64,
                ffi.Float,
                ffi.Float,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            double,
            double,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// AUParameterGroup
class AUParameterGroup extends AUParameterNode {
  AUParameterGroup._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AUParameterGroup] that points to the same underlying object as [other].
  AUParameterGroup.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AUParameterGroup] that wraps the given raw object pointer.
  AUParameterGroup.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AUParameterGroup].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AUParameterGroup);
  }

  /// children
  objc.NSArray get children {
    final _ret = _objc_msgSend_33(this.pointer, _sel_children);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allParameters
  objc.NSArray get allParameters {
    final _ret = _objc_msgSend_33(this.pointer, _sel_allParameters);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AUParameterGroup init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AUParameterGroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AUParameterGroup new1() {
    final _ret = _objc_msgSend_19(_class_AUParameterGroup, _sel_new);
    return AUParameterGroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AUParameterGroup allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AUParameterGroup, _sel_allocWithZone_, zone);
    return AUParameterGroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AUParameterGroup alloc() {
    final _ret = _objc_msgSend_19(_class_AUParameterGroup, _sel_alloc);
    return AUParameterGroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AUParameterGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AUParameterGroup,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AUParameterGroup, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AUParameterGroup, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AUParameterGroup,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AUParameterGroup,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AUParameterGroup,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AUParameterGroup, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AUParameterGroup, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AUParameterGroup = objc.getClass("AUParameterGroup");
late final _sel_allParameters = objc.registerName("allParameters");
late final _sel_createGroupWithIdentifier_name_children_ =
    objc.registerName("createGroupWithIdentifier:name:children:");
final _objc_msgSend_1131 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_createGroupTemplate_ =
    objc.registerName("createGroupTemplate:");
final _objc_msgSend_1132 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_createGroupFromTemplate_identifier_name_addressOffset_ =
    objc.registerName("createGroupFromTemplate:identifier:name:addressOffset:");
final _objc_msgSend_1133 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Uint64)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_createTreeWithChildren_ =
    objc.registerName("createTreeWithChildren:");
final _objc_msgSend_1134 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_parameterTree = objc.registerName("parameterTree");
final _objc_msgSend_1135 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setParameterTree_ = objc.registerName("setParameterTree:");
final _objc_msgSend_1136 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_parametersForOverviewWithCount_ =
    objc.registerName("parametersForOverviewWithCount:");
final _objc_msgSend_1137 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_allParameterValues = objc.registerName("allParameterValues");
late final _sel_isMusicDeviceOrEffect =
    objc.registerName("isMusicDeviceOrEffect");
late final _sel_virtualMIDICableCount =
    objc.registerName("virtualMIDICableCount");
void _ObjCBlock_ffiVoid_Int64_Uint8_ffiLong_Uint8_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        int arg1,
        int arg2,
        ffi.Pointer<ffi.Uint8> arg3) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Int64 arg0, ffi.Uint8 arg1,
                        ffi.Long arg2, ffi.Pointer<ffi.Uint8> arg3)>>()
            .asFunction<void Function(int, int, int, ffi.Pointer<ffi.Uint8>)>()(
        arg0, arg1, arg2, arg3);
void _ObjCBlock_ffiVoid_Int64_Uint8_ffiLong_Uint8_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        int arg1,
        int arg2,
        ffi.Pointer<ffi.Uint8> arg3) =>
    (objc.getBlockClosure(block) as void Function(
        int, int, int, ffi.Pointer<ffi.Uint8>))(arg0, arg1, arg2, arg3);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>`.
abstract final class ObjCBlock_ffiVoid_Int64_Uint8_ffiLong_Uint8 {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int64 arg0, ffi.Uint8 arg1, ffi.Long arg2, ffi.Pointer<ffi.Uint8> arg3)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>(
                              _ObjCBlock_ffiVoid_Int64_Uint8_ffiLong_Uint8_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)> fromFunction(
          void Function(int, int, int, ffi.Pointer<ffi.Uint8>) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>(
                      _ObjCBlock_ffiVoid_Int64_Uint8_ffiLong_Uint8_closureTrampoline)
                  .cast(),
              (int arg0, int arg1, int arg2, ffi.Pointer<ffi.Uint8> arg3) =>
                  fn(arg0, arg1, arg2, arg3)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)> listener(
      void Function(int, int, int, ffi.Pointer<ffi.Uint8>) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Int64,
                        ffi.Uint8,
                        ffi.Long,
                        ffi.Pointer<ffi.Uint8>)>.listener(
                _ObjCBlock_ffiVoid_Int64_Uint8_ffiLong_Uint8_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0, int arg1, int arg2, ffi.Pointer<ffi.Uint8> arg3) =>
            fn(arg0, arg1, arg2, arg3));
    return objc.ObjCBlock<
        ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Long,
            ffi.Pointer<ffi.Uint8>)>(raw, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Uint8,
          ffi.Long, ffi.Pointer<ffi.Uint8>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>`.
extension ObjCBlock_ffiVoid_Int64_Uint8_ffiLong_Uint8_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)> {
  void call(int arg0, int arg1, int arg2, ffi.Pointer<ffi.Uint8> arg3) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Int64 arg0,
                      ffi.Uint8 arg1,
                      ffi.Long arg2,
                      ffi.Pointer<ffi.Uint8> arg3)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>, int, int, int,
                  ffi.Pointer<ffi.Uint8>)>()(pointer, arg0, arg1, arg2, arg3);
}

late final _sel_scheduleMIDIEventBlock =
    objc.registerName("scheduleMIDIEventBlock");
final _objc_msgSend_1138 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
int _ObjCBlock_ffiInt_Int64_Uint8_MIDIEventList_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        int arg1,
        ffi.Pointer<MIDIEventList> arg2) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Int64 arg0, ffi.Uint8 arg1,
                        ffi.Pointer<MIDIEventList> arg2)>>()
            .asFunction<int Function(int, int, ffi.Pointer<MIDIEventList>)>()(
        arg0, arg1, arg2);
int _ObjCBlock_ffiInt_Int64_Uint8_MIDIEventList_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        int arg1,
        ffi.Pointer<MIDIEventList> arg2) =>
    (objc.getBlockClosure(block) as int Function(
        int, int, ffi.Pointer<MIDIEventList>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>`.
abstract final class ObjCBlock_ffiInt_Int64_Uint8_MIDIEventList {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Int Function(
                      ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc
      .ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int64 arg0, ffi.Uint8 arg1, ffi.Pointer<MIDIEventList> arg2)>> ptr) =>
          objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>(
                              _ObjCBlock_ffiInt_Int64_Uint8_MIDIEventList_fnPtrTrampoline, 0)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>
      fromFunction(int Function(int, int, ffi.Pointer<MIDIEventList>) fn) =>
          objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>(
                              _ObjCBlock_ffiInt_Int64_Uint8_MIDIEventList_closureTrampoline, 0)
                          .cast(),
                  (int arg0, int arg1, ffi.Pointer<MIDIEventList> arg2) =>
                      fn(arg0, arg1, arg2)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>`.
extension ObjCBlock_ffiInt_Int64_Uint8_MIDIEventList_CallExtension
    on objc.ObjCBlock<
        ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)> {
  int call(int arg0, int arg1, ffi.Pointer<MIDIEventList> arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Int64 arg0,
                      ffi.Uint8 arg1,
                      ffi.Pointer<MIDIEventList> arg2)>>()
          .asFunction<
              int Function(ffi.Pointer<objc.ObjCBlockImpl>, int, int,
                  ffi.Pointer<MIDIEventList>)>()(pointer, arg0, arg1, arg2);
}

final class MIDIEventList extends ffi.Struct {
  @ffi.UnsignedInt()
  external int protocol;

  @ffi.UnsignedInt()
  external int numPackets;

  @ffi.Array.multi([1])
  external ffi.Array<MIDIEventPacket> packet;
}

enum MIDIProtocolID {
  kMIDIProtocol_1_0(1),
  kMIDIProtocol_2_0(2);

  final int value;
  const MIDIProtocolID(this.value);

  static MIDIProtocolID fromValue(int value) => switch (value) {
        1 => kMIDIProtocol_1_0,
        2 => kMIDIProtocol_2_0,
        _ => throw ArgumentError("Unknown value for MIDIProtocolID: $value"),
      };
}

@ffi.Packed(4)
final class MIDIEventPacket extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int timeStamp;

  @ffi.UnsignedInt()
  external int wordCount;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.UnsignedInt> words;
}

late final _sel_scheduleMIDIEventListBlock =
    objc.registerName("scheduleMIDIEventListBlock");
final _objc_msgSend_1139 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_MIDIOutputNames = objc.registerName("MIDIOutputNames");
late final _sel_providesUserInterface =
    objc.registerName("providesUserInterface");
int _ObjCBlock_ffiInt_Int64_Uint8_ffiLong_Uint8_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        int arg1,
        int arg2,
        ffi.Pointer<ffi.Uint8> arg3) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Int64 arg0, ffi.Uint8 arg1,
                        ffi.Long arg2, ffi.Pointer<ffi.Uint8> arg3)>>()
            .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Uint8>)>()(
        arg0, arg1, arg2, arg3);
int _ObjCBlock_ffiInt_Int64_Uint8_ffiLong_Uint8_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        int arg1,
        int arg2,
        ffi.Pointer<ffi.Uint8> arg3) =>
    (objc.getBlockClosure(block) as int Function(
        int, int, int, ffi.Pointer<ffi.Uint8>))(arg0, arg1, arg2, arg3);

/// Construction methods for `objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>`.
abstract final class ObjCBlock_ffiInt_Int64_Uint8_ffiLong_Uint8 {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Int Function(
              ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Int Function(
                      ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int64 arg0, ffi.Uint8 arg1, ffi.Long arg2, ffi.Pointer<ffi.Uint8> arg3)>> ptr) =>
          objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>(
                              _ObjCBlock_ffiInt_Int64_Uint8_ffiLong_Uint8_fnPtrTrampoline, 0)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)> fromFunction(
          int Function(int, int, int, ffi.Pointer<ffi.Uint8>) fn) =>
      objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>(
                          _ObjCBlock_ffiInt_Int64_Uint8_ffiLong_Uint8_closureTrampoline, 0)
                      .cast(),
              (int arg0, int arg1, int arg2, ffi.Pointer<ffi.Uint8> arg3) =>
                  fn(arg0, arg1, arg2, arg3)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Int Function(ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>`.
extension ObjCBlock_ffiInt_Int64_Uint8_ffiLong_Uint8_CallExtension
    on objc.ObjCBlock<
        ffi.Int Function(
            ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)> {
  int call(int arg0, int arg1, int arg2, ffi.Pointer<ffi.Uint8> arg3) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Int64 arg0,
                      ffi.Uint8 arg1,
                      ffi.Long arg2,
                      ffi.Pointer<ffi.Uint8> arg3)>>()
          .asFunction<
              int Function(ffi.Pointer<objc.ObjCBlockImpl>, int, int, int,
                  ffi.Pointer<ffi.Uint8>)>()(pointer, arg0, arg1, arg2, arg3);
}

late final _sel_MIDIOutputEventBlock =
    objc.registerName("MIDIOutputEventBlock");
final _objc_msgSend_1140 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMIDIOutputEventBlock_ =
    objc.registerName("setMIDIOutputEventBlock:");
final _objc_msgSend_1141 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_MIDIOutputEventListBlock =
    objc.registerName("MIDIOutputEventListBlock");
late final _sel_setMIDIOutputEventListBlock_ =
    objc.registerName("setMIDIOutputEventListBlock:");
final _objc_msgSend_1142 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_AudioUnitMIDIProtocol =
    objc.registerName("AudioUnitMIDIProtocol");
final _objc_msgSend_1143 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_hostMIDIProtocol = objc.registerName("hostMIDIProtocol");
late final _sel_setHostMIDIProtocol_ =
    objc.registerName("setHostMIDIProtocol:");
final _objc_msgSend_1144 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_fullState = objc.registerName("fullState");
late final _sel_setFullState_ = objc.registerName("setFullState:");
late final _sel_fullStateForDocument =
    objc.registerName("fullStateForDocument");
late final _sel_setFullStateForDocument_ =
    objc.registerName("setFullStateForDocument:");
late final _sel_factoryPresets = objc.registerName("factoryPresets");
late final _sel_userPresets = objc.registerName("userPresets");

/// AUAudioUnitPreset
class AUAudioUnitPreset extends objc.NSObject {
  AUAudioUnitPreset._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AUAudioUnitPreset] that points to the same underlying object as [other].
  AUAudioUnitPreset.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AUAudioUnitPreset] that wraps the given raw object pointer.
  AUAudioUnitPreset.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AUAudioUnitPreset].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AUAudioUnitPreset);
  }

  /// number
  int get number {
    return _objc_msgSend_125(this.pointer, _sel_number);
  }

  /// setNumber:
  set number(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setNumber_, value);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_11(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setName_, value.pointer);
  }

  /// init
  AUAudioUnitPreset init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AUAudioUnitPreset.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AUAudioUnitPreset new1() {
    final _ret = _objc_msgSend_19(_class_AUAudioUnitPreset, _sel_new);
    return AUAudioUnitPreset.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AUAudioUnitPreset allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AUAudioUnitPreset, _sel_allocWithZone_, zone);
    return AUAudioUnitPreset.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AUAudioUnitPreset alloc() {
    final _ret = _objc_msgSend_19(_class_AUAudioUnitPreset, _sel_alloc);
    return AUAudioUnitPreset.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AUAudioUnitPreset,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AUAudioUnitPreset,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AUAudioUnitPreset, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AUAudioUnitPreset, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AUAudioUnitPreset,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AUAudioUnitPreset,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AUAudioUnitPreset,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AUAudioUnitPreset, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AUAudioUnitPreset, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AUAudioUnitPreset = objc.getClass("AUAudioUnitPreset");
late final _sel_saveUserPreset_error_ =
    objc.registerName("saveUserPreset:error:");
final _objc_msgSend_1145 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_deleteUserPreset_error_ =
    objc.registerName("deleteUserPreset:error:");
late final _sel_presetStateFor_error_ =
    objc.registerName("presetStateFor:error:");
final _objc_msgSend_1146 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_supportsUserPresets = objc.registerName("supportsUserPresets");
late final _sel_isLoadedInProcess = objc.registerName("isLoadedInProcess");
late final _sel_currentPreset = objc.registerName("currentPreset");
final _objc_msgSend_1147 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCurrentPreset_ = objc.registerName("setCurrentPreset:");
final _objc_msgSend_1148 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_latency = objc.registerName("latency");
late final _sel_tailTime = objc.registerName("tailTime");
late final _sel_renderQuality = objc.registerName("renderQuality");
late final _sel_setRenderQuality_ = objc.registerName("setRenderQuality:");
late final _sel_shouldBypassEffect = objc.registerName("shouldBypassEffect");
late final _sel_setShouldBypassEffect_ =
    objc.registerName("setShouldBypassEffect:");
late final _sel_canProcessInPlace = objc.registerName("canProcessInPlace");
late final _sel_isRenderingOffline = objc.registerName("isRenderingOffline");
late final _sel_setRenderingOffline_ =
    objc.registerName("setRenderingOffline:");
late final _sel_channelCapabilities = objc.registerName("channelCapabilities");
bool
    _ObjCBlock_bool_ffiDouble_ffiDouble_ffiLong_ffiDouble_ffiLong_ffiDouble_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Double> arg0,
            ffi.Pointer<ffi.Double> arg1,
            ffi.Pointer<ffi.Long> arg2,
            ffi.Pointer<ffi.Double> arg3,
            ffi.Pointer<ffi.Long> arg4,
            ffi.Pointer<ffi.Double> arg5) =>
        block.ref.target
                .cast<
                    ffi.NativeFunction<
                        ffi.Bool Function(
                            ffi.Pointer<ffi.Double> arg0,
                            ffi.Pointer<ffi.Double> arg1,
                            ffi.Pointer<ffi.Long> arg2,
                            ffi.Pointer<ffi.Double> arg3,
                            ffi.Pointer<ffi.Long> arg4,
                            ffi.Pointer<ffi.Double> arg5)>>()
                .asFunction<
                    bool Function(
                        ffi.Pointer<ffi.Double>,
                        ffi.Pointer<ffi.Double>,
                        ffi.Pointer<ffi.Long>,
                        ffi.Pointer<ffi.Double>,
                        ffi.Pointer<ffi.Long>,
                        ffi.Pointer<ffi.Double>)>()(
            arg0, arg1, arg2, arg3, arg4, arg5);
bool
    _ObjCBlock_bool_ffiDouble_ffiDouble_ffiLong_ffiDouble_ffiLong_ffiDouble_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Double> arg0,
            ffi.Pointer<ffi.Double> arg1,
            ffi.Pointer<ffi.Long> arg2,
            ffi.Pointer<ffi.Double> arg3,
            ffi.Pointer<ffi.Long> arg4,
            ffi.Pointer<ffi.Double> arg5) =>
        (objc.getBlockClosure(block) as bool Function(
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Double>))(arg0, arg1, arg2, arg3, arg4, arg5);

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>)>`.
abstract final class ObjCBlock_bool_ffiDouble_ffiDouble_ffiLong_ffiDouble_ffiLong_ffiDouble {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Bool Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Double>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Bool Function(
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Long>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Long>,
                  ffi.Pointer<ffi.Double>)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
      ffi.Bool Function(
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Long>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Long>,
          ffi.Pointer<ffi.Double>)> fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Double> arg0, ffi.Pointer<ffi.Double> arg1, ffi.Pointer<ffi.Long> arg2, ffi.Pointer<ffi.Double> arg3, ffi.Pointer<ffi.Long> arg4, ffi.Pointer<ffi.Double> arg5)>> ptr) =>
      objc.ObjCBlock<
              ffi.Bool Function(
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Long>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Long>,
                  ffi.Pointer<ffi.Double>)>(
          objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>)>(_ObjCBlock_bool_ffiDouble_ffiDouble_ffiLong_ffiDouble_ffiLong_ffiDouble_fnPtrTrampoline, false).cast(), ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>)>
      fromFunction(bool Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>) fn) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>)>(_ObjCBlock_bool_ffiDouble_ffiDouble_ffiLong_ffiDouble_ffiLong_ffiDouble_closureTrampoline, false)
                      .cast(),
                  (ffi.Pointer<ffi.Double> arg0,
                          ffi.Pointer<ffi.Double> arg1,
                          ffi.Pointer<ffi.Long> arg2,
                          ffi.Pointer<ffi.Double> arg3,
                          ffi.Pointer<ffi.Long> arg4,
                          ffi.Pointer<ffi.Double> arg5) =>
                      fn(arg0, arg1, arg2, arg3, arg4, arg5)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Double>)>`.
extension ObjCBlock_bool_ffiDouble_ffiDouble_ffiLong_ffiDouble_ffiLong_ffiDouble_CallExtension
    on objc.ObjCBlock<
        ffi.Bool Function(
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Double>)> {
  bool call(
          ffi.Pointer<ffi.Double> arg0,
          ffi.Pointer<ffi.Double> arg1,
          ffi.Pointer<ffi.Long> arg2,
          ffi.Pointer<ffi.Double> arg3,
          ffi.Pointer<ffi.Long> arg4,
          ffi.Pointer<ffi.Double> arg5) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Bool Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<ffi.Double> arg0,
                          ffi.Pointer<ffi.Double> arg1,
                          ffi.Pointer<ffi.Long> arg2,
                          ffi.Pointer<ffi.Double> arg3,
                          ffi.Pointer<ffi.Long> arg4,
                          ffi.Pointer<ffi.Double> arg5)>>()
              .asFunction<
                  bool Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<ffi.Double>,
                      ffi.Pointer<ffi.Double>,
                      ffi.Pointer<ffi.Long>,
                      ffi.Pointer<ffi.Double>,
                      ffi.Pointer<ffi.Long>,
                      ffi.Pointer<ffi.Double>)>()(
          pointer, arg0, arg1, arg2, arg3, arg4, arg5);
}

late final _sel_musicalContextBlock = objc.registerName("musicalContextBlock");
final _objc_msgSend_1149 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMusicalContextBlock_ =
    objc.registerName("setMusicalContextBlock:");
final _objc_msgSend_1150 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
bool
    _ObjCBlock_bool_AUHostTransportStateFlags_ffiDouble_ffiDouble_ffiDouble_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.UnsignedLong> arg0,
            ffi.Pointer<ffi.Double> arg1,
            ffi.Pointer<ffi.Double> arg2,
            ffi.Pointer<ffi.Double> arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Bool Function(
                        ffi.Pointer<ffi.UnsignedLong> arg0,
                        ffi.Pointer<ffi.Double> arg1,
                        ffi.Pointer<ffi.Double> arg2,
                        ffi.Pointer<ffi.Double> arg3)>>()
            .asFunction<
                bool Function(
                    ffi.Pointer<ffi.UnsignedLong>,
                    ffi.Pointer<ffi.Double>,
                    ffi.Pointer<ffi.Double>,
                    ffi.Pointer<ffi.Double>)>()(arg0, arg1, arg2, arg3);
bool
    _ObjCBlock_bool_AUHostTransportStateFlags_ffiDouble_ffiDouble_ffiDouble_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.UnsignedLong> arg0,
            ffi.Pointer<ffi.Double> arg1,
            ffi.Pointer<ffi.Double> arg2,
            ffi.Pointer<ffi.Double> arg3) =>
        (objc.getBlockClosure(block) as bool Function(
            ffi.Pointer<ffi.UnsignedLong>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>))(arg0, arg1, arg2, arg3);

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>`.
abstract final class ObjCBlock_bool_AUHostTransportStateFlags_ffiDouble_ffiDouble_ffiDouble {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Bool Function(
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Bool Function(
                  ffi.Pointer<ffi.UnsignedLong>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Bool Function(
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedLong> arg0, ffi.Pointer<ffi.Double> arg1, ffi.Pointer<ffi.Double> arg2, ffi.Pointer<ffi.Double> arg3)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Bool Function(
                      ffi.Pointer<ffi.UnsignedLong>,
                      ffi.Pointer<ffi.Double>,
                      ffi.Pointer<ffi.Double>,
                      ffi.Pointer<ffi.Double>)>(
              objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>(_ObjCBlock_bool_AUHostTransportStateFlags_ffiDouble_ffiDouble_ffiDouble_fnPtrTrampoline, false).cast(), ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>
      fromFunction(bool Function(ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>) fn) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>(_ObjCBlock_bool_AUHostTransportStateFlags_ffiDouble_ffiDouble_ffiDouble_closureTrampoline, false)
                          .cast(),
                  (ffi.Pointer<ffi.UnsignedLong> arg0,
                          ffi.Pointer<ffi.Double> arg1,
                          ffi.Pointer<ffi.Double> arg2,
                          ffi.Pointer<ffi.Double> arg3) =>
                      fn(arg0, arg1, arg2, arg3)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>`.
extension ObjCBlock_bool_AUHostTransportStateFlags_ffiDouble_ffiDouble_ffiDouble_CallExtension
    on objc.ObjCBlock<
        ffi.Bool Function(
            ffi.Pointer<ffi.UnsignedLong>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>)> {
  bool call(ffi.Pointer<ffi.UnsignedLong> arg0, ffi.Pointer<ffi.Double> arg1,
          ffi.Pointer<ffi.Double> arg2, ffi.Pointer<ffi.Double> arg3) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.UnsignedLong> arg0,
                      ffi.Pointer<ffi.Double> arg1,
                      ffi.Pointer<ffi.Double> arg2,
                      ffi.Pointer<ffi.Double> arg3)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.UnsignedLong>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>)>()(pointer, arg0, arg1, arg2, arg3);
}

enum AUHostTransportStateFlags {
  AUHostTransportStateChanged(1),
  AUHostTransportStateMoving(2),
  AUHostTransportStateRecording(4),
  AUHostTransportStateCycling(8);

  final int value;
  const AUHostTransportStateFlags(this.value);

  static AUHostTransportStateFlags fromValue(int value) => switch (value) {
        1 => AUHostTransportStateChanged,
        2 => AUHostTransportStateMoving,
        4 => AUHostTransportStateRecording,
        8 => AUHostTransportStateCycling,
        _ => throw ArgumentError(
            "Unknown value for AUHostTransportStateFlags: $value"),
      };
}

late final _sel_transportStateBlock = objc.registerName("transportStateBlock");
final _objc_msgSend_1151 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTransportStateBlock_ =
    objc.registerName("setTransportStateBlock:");
final _objc_msgSend_1152 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_contextName = objc.registerName("contextName");
late final _sel_setContextName_ = objc.registerName("setContextName:");
late final _sel_supportsMPE = objc.registerName("supportsMPE");
late final _sel_channelMap = objc.registerName("channelMap");
late final _sel_setChannelMap_ = objc.registerName("setChannelMap:");

/// MIDICIProfileState
class MIDICIProfileState extends objc.ObjCObjectBase {
  MIDICIProfileState._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [MIDICIProfileState] that points to the same underlying object as [other].
  MIDICIProfileState.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [MIDICIProfileState] that wraps the given raw object pointer.
  MIDICIProfileState.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MIDICIProfileState].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_MIDICIProfileState);
  }
}

late final _class_MIDICIProfileState = objc.getClass("MIDICIProfileState");
late final _sel_profileStateForCable_channel_ =
    objc.registerName("profileStateForCable:channel:");
final _objc_msgSend_1153 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint8, ffi.Uint8)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();

/// MIDICIProfile
class MIDICIProfile extends objc.ObjCObjectBase {
  MIDICIProfile._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [MIDICIProfile] that points to the same underlying object as [other].
  MIDICIProfile.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [MIDICIProfile] that wraps the given raw object pointer.
  MIDICIProfile.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MIDICIProfile].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_MIDICIProfile);
  }
}

late final _class_MIDICIProfile = objc.getClass("MIDICIProfile");
late final _sel_enableProfile_cable_onChannel_error_ =
    objc.registerName("enableProfile:cable:onChannel:error:");
final _objc_msgSend_1154 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Uint8,
                ffi.Uint8,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_disableProfile_cable_onChannel_error_ =
    objc.registerName("disableProfile:cable:onChannel:error:");
void _ObjCBlock_ffiVoid_Uint8_Uint8_MIDICIProfile_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        int arg1,
        ffi.Pointer<objc.ObjCObject> arg2,
        bool arg3) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Uint8 arg0, ffi.Uint8 arg1,
                        ffi.Pointer<objc.ObjCObject> arg2, ffi.Bool arg3)>>()
            .asFunction<
                void Function(int, int, ffi.Pointer<objc.ObjCObject>, bool)>()(
        arg0, arg1, arg2, arg3);
void _ObjCBlock_ffiVoid_Uint8_Uint8_MIDICIProfile_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        int arg1,
        ffi.Pointer<objc.ObjCObject> arg2,
        bool arg3) =>
    (objc.getBlockClosure(block) as void Function(
        int, int, ffi.Pointer<objc.ObjCObject>, bool))(arg0, arg1, arg2, arg3);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)>`.
abstract final class ObjCBlock_ffiVoid_Uint8_Uint8_MIDICIProfile_bool {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile,
                  ffi.Bool)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Uint8 arg0, ffi.Uint8 arg1, ffi.Pointer<objc.ObjCObject> arg2, ffi.Bool arg3)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Uint8, ffi.Uint8, ffi.Pointer<objc.ObjCObject>, ffi.Bool)>(
                              _ObjCBlock_ffiVoid_Uint8_Uint8_MIDICIProfile_bool_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)> fromFunction(
          void Function(int, int, MIDICIProfile, bool) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Uint8, ffi.Uint8, ffi.Pointer<objc.ObjCObject>, ffi.Bool)>(
                          _ObjCBlock_ffiVoid_Uint8_Uint8_MIDICIProfile_bool_closureTrampoline)
                      .cast(),
              (int arg0, int arg1, ffi.Pointer<objc.ObjCObject> arg2, bool arg3) =>
                  fn(arg0, arg1, MIDICIProfile.castFromPointer(arg2, retain: true, release: true), arg3)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)>
      listener(void Function(int, int, MIDICIProfile, bool) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Uint8,
                        ffi.Uint8,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Bool)>.listener(
                _ObjCBlock_ffiVoid_Uint8_Uint8_MIDICIProfile_bool_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0, int arg1, ffi.Pointer<objc.ObjCObject> arg2, bool arg3) =>
            fn(
                arg0,
                arg1,
                MIDICIProfile.castFromPointer(arg2,
                    retain: false, release: true),
                arg3));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_Uint8_Uint8_MIDICIProfile_bool(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
        ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile,
            ffi.Bool)>(wrapper, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Uint8, ffi.Uint8,
          ffi.Pointer<objc.ObjCObject>, ffi.Bool)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)>`.
extension ObjCBlock_ffiVoid_Uint8_Uint8_MIDICIProfile_bool_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Uint8, ffi.Uint8, MIDICIProfile, ffi.Bool)> {
  void call(int arg0, int arg1, MIDICIProfile arg2, bool arg3) => pointer
      .ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Uint8 arg0,
                  ffi.Uint8 arg1,
                  ffi.Pointer<objc.ObjCObject> arg2,
                  ffi.Bool arg3)>>()
      .asFunction<
          void Function(
              ffi.Pointer<objc.ObjCBlockImpl>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
              bool)>()(pointer, arg0, arg1, arg2.pointer, arg3);
}

late final _sel_profileChangedBlock = objc.registerName("profileChangedBlock");
final _objc_msgSend_1155 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setProfileChangedBlock_ =
    objc.registerName("setProfileChangedBlock:");
final _objc_msgSend_1156 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_messageChannelFor_ = objc.registerName("messageChannelFor:");
late final _sel_canPerformInput = objc.registerName("canPerformInput");
late final _sel_canPerformOutput = objc.registerName("canPerformOutput");
late final _sel_isInputEnabled = objc.registerName("isInputEnabled");
late final _sel_setInputEnabled_ = objc.registerName("setInputEnabled:");
late final _sel_isOutputEnabled = objc.registerName("isOutputEnabled");
late final _sel_setOutputEnabled_ = objc.registerName("setOutputEnabled:");
late final _sel_outputProvider = objc.registerName("outputProvider");
final _objc_msgSend_1157 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setOutputProvider_ = objc.registerName("setOutputProvider:");
final _objc_msgSend_1158 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
void
    _ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong1_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.UnsignedInt> arg0,
            ffi.Pointer<AudioTimeStamp> arg1,
            int arg2,
            int arg3) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.UnsignedInt> arg0,
                        ffi.Pointer<AudioTimeStamp> arg1,
                        ffi.Uint32 arg2,
                        ffi.Long arg3)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<ffi.UnsignedInt>,
                    ffi.Pointer<AudioTimeStamp>,
                    int,
                    int)>()(arg0, arg1, arg2, arg3);
void
    _ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong1_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.UnsignedInt> arg0,
            ffi.Pointer<AudioTimeStamp> arg1,
            int arg2,
            int arg3) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<AudioTimeStamp>,
            int,
            int))(arg0, arg1, arg2, arg3);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>`.
abstract final class ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong1 {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<AudioTimeStamp>,
                  ffi.Uint32,
                  ffi.Long)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt> arg0, ffi.Pointer<AudioTimeStamp> arg1, ffi.Uint32 arg2, ffi.Long arg3)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>(
                              _ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong1_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>
      fromFunction(void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, int, int) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>(
                          _ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong1_closureTrampoline)
                      .cast(),
                  (ffi.Pointer<ffi.UnsignedInt> arg0, ffi.Pointer<AudioTimeStamp> arg1, int arg2, int arg3) =>
                      fn(arg0, arg1, arg2, arg3)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)> listener(
      void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>,
              int, int)
          fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<ffi.UnsignedInt>,
                        ffi.Pointer<AudioTimeStamp>,
                        ffi.Uint32,
                        ffi.Long)>.listener(
                _ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong1_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<ffi.UnsignedInt> arg0, ffi.Pointer<AudioTimeStamp> arg1,
                int arg2, int arg3) =>
            fn(arg0, arg1, arg2, arg3));
    return objc.ObjCBlock<
        ffi.Void Function(
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<AudioTimeStamp>,
            ffi.Uint32,
            ffi.Long)>(raw, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<AudioTimeStamp>,
          ffi.Uint32,
          ffi.Long)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)>`.
extension ObjCBlock_ffiVoid_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong1_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long)> {
  void call(ffi.Pointer<ffi.UnsignedInt> arg0, ffi.Pointer<AudioTimeStamp> arg1,
          int arg2, int arg3) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.UnsignedInt> arg0,
                      ffi.Pointer<AudioTimeStamp> arg1,
                      ffi.Uint32 arg2,
                      ffi.Long arg3)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<AudioTimeStamp>,
                  int,
                  int)>()(pointer, arg0, arg1, arg2, arg3);
}

late final _sel_inputHandler = objc.registerName("inputHandler");
final _objc_msgSend_1159 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setInputHandler_ = objc.registerName("setInputHandler:");
final _objc_msgSend_1160 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_deviceID = objc.registerName("deviceID");
late final _sel_setDeviceID_error_ = objc.registerName("setDeviceID:error:");
final _objc_msgSend_1161 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_deviceInputLatency = objc.registerName("deviceInputLatency");
late final _sel_deviceOutputLatency = objc.registerName("deviceOutputLatency");
late final _sel_startHardwareAndReturnError_ =
    objc.registerName("startHardwareAndReturnError:");
late final _sel_stopHardware = objc.registerName("stopHardware");

/// OS_os_workgroup
class OS_os_workgroup extends OS_object {
  OS_os_workgroup._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [OS_os_workgroup] that points to the same underlying object as [other].
  OS_os_workgroup.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [OS_os_workgroup] that wraps the given raw object pointer.
  OS_os_workgroup.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_os_workgroup].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_OS_os_workgroup);
  }

  /// init
  OS_os_workgroup init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return OS_os_workgroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static OS_os_workgroup new1() {
    final _ret = _objc_msgSend_19(_class_OS_os_workgroup, _sel_new);
    return OS_os_workgroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static OS_os_workgroup allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_OS_os_workgroup, _sel_allocWithZone_, zone);
    return OS_os_workgroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static OS_os_workgroup alloc() {
    final _ret = _objc_msgSend_19(_class_OS_os_workgroup, _sel_alloc);
    return OS_os_workgroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_OS_os_workgroup,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_OS_os_workgroup,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_OS_os_workgroup, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_OS_os_workgroup, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_OS_os_workgroup,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_OS_os_workgroup,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_OS_os_workgroup,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_OS_os_workgroup, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_OS_os_workgroup, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_OS_os_workgroup = objc.getClass("OS_os_workgroup");

/// OS_object
class OS_object extends objc.NSObject {
  OS_object._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [OS_object] that points to the same underlying object as [other].
  OS_object.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [OS_object] that wraps the given raw object pointer.
  OS_object.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_object].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_OS_object);
  }

  /// init
  OS_object init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return OS_object.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static OS_object new1() {
    final _ret = _objc_msgSend_19(_class_OS_object, _sel_new);
    return OS_object.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static OS_object allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_OS_object, _sel_allocWithZone_, zone);
    return OS_object.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static OS_object alloc() {
    final _ret = _objc_msgSend_19(_class_OS_object, _sel_alloc);
    return OS_object.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_OS_object,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_OS_object,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_OS_object, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_OS_object, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_OS_object,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_OS_object,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_OS_object,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_OS_object, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_OS_object, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_OS_object = objc.getClass("OS_object");
late final _sel_osWorkgroup = objc.registerName("osWorkgroup");
final _objc_msgSend_1162 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_registerSubclass_asComponentDescription_name_version_ =
    objc.registerName("registerSubclass:asComponentDescription:name:version:");
final _objc_msgSend_1163 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                AudioComponentDescription,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedInt)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            AudioComponentDescription,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
int _ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_AURenderEvent_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.UnsignedInt> arg0,
        ffi.Pointer<AudioTimeStamp> arg1,
        int arg2,
        int arg3,
        ffi.Pointer<AudioBufferList> arg4,
        ffi.Pointer<AURenderEvent> arg5,
        ffi.Pointer<objc.ObjCBlockImpl> arg6) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<ffi.UnsignedInt> arg0,
                        ffi.Pointer<AudioTimeStamp> arg1,
                        ffi.Uint32 arg2,
                        ffi.Long arg3,
                        ffi.Pointer<AudioBufferList> arg4,
                        ffi.Pointer<AURenderEvent> arg5,
                        ffi.Pointer<objc.ObjCBlockImpl> arg6)>>()
            .asFunction<
                int Function(
                    ffi.Pointer<ffi.UnsignedInt>,
                    ffi.Pointer<AudioTimeStamp>,
                    int,
                    int,
                    ffi.Pointer<AudioBufferList>,
                    ffi.Pointer<AURenderEvent>,
                    ffi.Pointer<objc.ObjCBlockImpl>)>()(
        arg0, arg1, arg2, arg3, arg4, arg5, arg6);
int _ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_AURenderEvent_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.UnsignedInt> arg0,
        ffi.Pointer<AudioTimeStamp> arg1,
        int arg2,
        int arg3,
        ffi.Pointer<AudioBufferList> arg4,
        ffi.Pointer<AURenderEvent> arg5,
        ffi.Pointer<objc.ObjCBlockImpl> arg6) =>
    (objc.getBlockClosure(block) as int Function(
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<AudioTimeStamp>,
            int,
            int,
            ffi.Pointer<AudioBufferList>,
            ffi.Pointer<AURenderEvent>,
            ffi.Pointer<objc.ObjCBlockImpl>))(
        arg0, arg1, arg2, arg3, arg4, arg5, arg6);

/// Construction methods for `objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<AURenderEvent>, ffi.Pointer<objc.ObjCBlockImpl>)>`.
abstract final class ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_AURenderEvent_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<AudioTimeStamp>,
              ffi.Uint32,
              ffi.Long,
              ffi.Pointer<AudioBufferList>,
              ffi.Pointer<AURenderEvent>,
              ffi.Pointer<objc.ObjCBlockImpl>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<AudioTimeStamp>,
                  ffi.Uint32,
                  ffi.Long,
                  ffi.Pointer<AudioBufferList>,
                  ffi.Pointer<AURenderEvent>,
                  ffi.Pointer<objc.ObjCBlockImpl>)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
      ffi.Int Function(
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<AudioTimeStamp>,
          ffi.Uint32,
          ffi.Long,
          ffi.Pointer<AudioBufferList>,
          ffi.Pointer<AURenderEvent>,
          ffi.Pointer<objc.ObjCBlockImpl>)> fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt> arg0, ffi.Pointer<AudioTimeStamp> arg1, ffi.Uint32 arg2, ffi.Long arg3, ffi.Pointer<AudioBufferList> arg4, ffi.Pointer<AURenderEvent> arg5, ffi.Pointer<objc.ObjCBlockImpl> arg6)>> ptr) =>
      objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<AudioTimeStamp>,
                  ffi.Uint32,
                  ffi.Long,
                  ffi.Pointer<AudioBufferList>,
                  ffi.Pointer<AURenderEvent>,
                  ffi.Pointer<objc.ObjCBlockImpl>)>(
          objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<AURenderEvent>, ffi.Pointer<objc.ObjCBlockImpl>)>(_ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_AURenderEvent_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList_fnPtrTrampoline, 0).cast(), ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<AURenderEvent>, ffi.Pointer<objc.ObjCBlockImpl>)>
      fromFunction(int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, int, int, ffi.Pointer<AudioBufferList>, ffi.Pointer<AURenderEvent>, objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>)>?) fn) =>
          objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<AURenderEvent>, ffi.Pointer<objc.ObjCBlockImpl>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<AURenderEvent>, ffi.Pointer<objc.ObjCBlockImpl>)>(_ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_AURenderEvent_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList_closureTrampoline, 0)
                          .cast(),
                  (ffi.Pointer<ffi.UnsignedInt> arg0,
                          ffi.Pointer<AudioTimeStamp> arg1,
                          int arg2,
                          int arg3,
                          ffi.Pointer<AudioBufferList> arg4,
                          ffi.Pointer<AURenderEvent> arg5,
                          ffi.Pointer<objc.ObjCBlockImpl> arg6) =>
                      fn(arg0, arg1, arg2, arg3, arg4, arg5, arg6.address == 0 ? null : ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList.castFromPointer(arg6, retain: true, release: true))),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>, ffi.Pointer<AURenderEvent>, ffi.Pointer<objc.ObjCBlockImpl>)>`.
extension ObjCBlock_ffiInt_AudioUnitRenderActionFlags_AudioTimeStamp_Uint32_ffiLong_AudioBufferList_AURenderEvent_ffiIntAudioUnitRenderActionFlagsAudioTimeStampUint32ffiLongAudioBufferList_CallExtension
    on objc.ObjCBlock<
        ffi.Int Function(
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<AudioTimeStamp>,
            ffi.Uint32,
            ffi.Long,
            ffi.Pointer<AudioBufferList>,
            ffi.Pointer<AURenderEvent>,
            ffi.Pointer<objc.ObjCBlockImpl>)> {
  int call(
          ffi.Pointer<ffi.UnsignedInt> arg0,
          ffi.Pointer<AudioTimeStamp> arg1,
          int arg2,
          int arg3,
          ffi.Pointer<AudioBufferList> arg4,
          ffi.Pointer<AURenderEvent> arg5,
          objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<AudioTimeStamp>, ffi.Uint32, ffi.Long, ffi.Pointer<AudioBufferList>)>?
              arg6) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<ffi.UnsignedInt> arg0,
                          ffi.Pointer<AudioTimeStamp> arg1,
                          ffi.Uint32 arg2,
                          ffi.Long arg3,
                          ffi.Pointer<AudioBufferList> arg4,
                          ffi.Pointer<AURenderEvent> arg5,
                          ffi.Pointer<objc.ObjCBlockImpl> arg6)>>()
              .asFunction<
                  int Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<ffi.UnsignedInt>,
                      ffi.Pointer<AudioTimeStamp>,
                      int,
                      int,
                      ffi.Pointer<AudioBufferList>,
                      ffi.Pointer<AURenderEvent>,
                      ffi.Pointer<objc.ObjCBlockImpl>)>()(
          pointer, arg0, arg1, arg2, arg3, arg4, arg5, arg6?.pointer ?? ffi.nullptr);
}

final class AURenderEvent extends ffi.Union {
  external AURenderEventHeader head;

  external AUParameterEvent parameter;

  external AUMIDIEvent MIDI;

  external AUMIDIEventList MIDIEventsList;
}

@ffi.Packed(4)
final class AURenderEventHeader extends ffi.Struct {
  external ffi.Pointer<AURenderEvent> next;

  @ffi.Int64()
  external int eventSampleTime;

  @ffi.Uint8()
  external int eventType;

  @ffi.Uint8()
  external int reserved;
}

enum AURenderEventType {
  AURenderEventParameter(1),
  AURenderEventParameterRamp(2),
  AURenderEventMIDI(8),
  AURenderEventMIDISysEx(9),
  AURenderEventMIDIEventList(10);

  final int value;
  const AURenderEventType(this.value);

  static AURenderEventType fromValue(int value) => switch (value) {
        1 => AURenderEventParameter,
        2 => AURenderEventParameterRamp,
        8 => AURenderEventMIDI,
        9 => AURenderEventMIDISysEx,
        10 => AURenderEventMIDIEventList,
        _ => throw ArgumentError("Unknown value for AURenderEventType: $value"),
      };
}

@ffi.Packed(4)
final class AUParameterEvent extends ffi.Struct {
  external ffi.Pointer<AURenderEvent> next;

  @ffi.Int64()
  external int eventSampleTime;

  @ffi.Uint8()
  external int eventType;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> reserved;

  @ffi.Uint32()
  external int rampDurationSampleFrames;

  @ffi.Uint64()
  external int parameterAddress;

  @ffi.Float()
  external double value;
}

@ffi.Packed(4)
final class AUMIDIEvent extends ffi.Struct {
  external ffi.Pointer<AURenderEvent> next;

  @ffi.Int64()
  external int eventSampleTime;

  @ffi.Uint8()
  external int eventType;

  @ffi.Uint8()
  external int reserved;

  @ffi.Uint16()
  external int length;

  @ffi.Uint8()
  external int cable;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> data;
}

@ffi.Packed(4)
final class AUMIDIEventList extends ffi.Struct {
  external ffi.Pointer<AURenderEvent> next;

  @ffi.Int64()
  external int eventSampleTime;

  @ffi.Uint8()
  external int eventType;

  @ffi.Uint8()
  external int reserved;

  @ffi.Uint8()
  external int cable;

  external MIDIEventList eventList;
}

late final _sel_internalRenderBlock = objc.registerName("internalRenderBlock");
final _objc_msgSend_1164 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
void _ObjCBlock_ffiVoid_AudioUnitRenderContext_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<AudioUnitRenderContext> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<AudioUnitRenderContext> arg0)>>()
        .asFunction<void Function(ffi.Pointer<AudioUnitRenderContext>)>()(arg0);
void _ObjCBlock_ffiVoid_AudioUnitRenderContext_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<AudioUnitRenderContext> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<AudioUnitRenderContext>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>`.
abstract final class ObjCBlock_ffiVoid_AudioUnitRenderContext {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<AudioUnitRenderContext>)>(_ObjCBlock_ffiVoid_AudioUnitRenderContext_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>
      fromFunction(void Function(ffi.Pointer<AudioUnitRenderContext>) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<AudioUnitRenderContext>)>(_ObjCBlock_ffiVoid_AudioUnitRenderContext_closureTrampoline)
                      .cast(),
                  (ffi.Pointer<AudioUnitRenderContext> arg0) => fn(arg0)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>
      listener(void Function(ffi.Pointer<AudioUnitRenderContext>) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<AudioUnitRenderContext>)>.listener(
                _ObjCBlock_ffiVoid_AudioUnitRenderContext_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<AudioUnitRenderContext> arg0) => fn(arg0));
    return objc.ObjCBlock<
            ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<AudioUnitRenderContext>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)>`.
extension ObjCBlock_ffiVoid_AudioUnitRenderContext_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioUnitRenderContext>)> {
  void call(ffi.Pointer<AudioUnitRenderContext> arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<AudioUnitRenderContext> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<AudioUnitRenderContext>)>()(pointer, arg0);
}

final class AudioUnitRenderContext extends ffi.Struct {
  external ffi.Pointer<objc.ObjCObject> workgroup;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Uint32> reserved;
}

late final _sel_renderContextObserver =
    objc.registerName("renderContextObserver");
final _objc_msgSend_1165 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_MIDIOutputBufferSizeHint =
    objc.registerName("MIDIOutputBufferSizeHint");
late final _sel_setMIDIOutputBufferSizeHint_ =
    objc.registerName("setMIDIOutputBufferSizeHint:");
late final _sel_shouldChangeToFormat_forBus_ =
    objc.registerName("shouldChangeToFormat:forBus:");
final _objc_msgSend_1166 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setRenderResourcesAllocated_ =
    objc.registerName("setRenderResourcesAllocated:");

/// AVCaption
class AVCaption extends objc.NSObject {
  AVCaption._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaption] that points to the same underlying object as [other].
  AVCaption.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaption] that wraps the given raw object pointer.
  AVCaption.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaption].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_AVCaption);
  }

  /// init
  AVCaption init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaption.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVCaption new1() {
    final _ret = _objc_msgSend_19(_class_AVCaption, _sel_new);
    return AVCaption.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithText:timeRange:
  AVCaption initWithText_timeRange_(objc.NSString text, CMTimeRange timeRange) {
    final _ret = _objc_msgSend_1167(
        this.pointer, _sel_initWithText_timeRange_, text.pointer, timeRange);
    return AVCaption.castFromPointer(_ret, retain: true, release: true);
  }

  /// text
  objc.NSString get text {
    final _ret = _objc_msgSend_11(this.pointer, _sel_text);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeRange
  void getTimeRange(ffi.Pointer<CMTimeRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_719Stret(stret, this.pointer, _sel_timeRange)
        : stret.ref = _objc_msgSend_719(this.pointer, _sel_timeRange);
  }

  /// textColorAtIndex:range:
  ffi.Pointer<CGColor> textColorAtIndex_range_(
      int index, ffi.Pointer<_NSRange> outRange) {
    return _objc_msgSend_1168(
        this.pointer, _sel_textColorAtIndex_range_, index, outRange);
  }

  /// backgroundColorAtIndex:range:
  ffi.Pointer<CGColor> backgroundColorAtIndex_range_(
      int index, ffi.Pointer<_NSRange> outRange) {
    return _objc_msgSend_1168(
        this.pointer, _sel_backgroundColorAtIndex_range_, index, outRange);
  }

  /// fontWeightAtIndex:range:
  AVCaptionFontWeight fontWeightAtIndex_range_(
      int index, ffi.Pointer<_NSRange> outRange) {
    final _ret = _objc_msgSend_1169(
        this.pointer, _sel_fontWeightAtIndex_range_, index, outRange);
    return AVCaptionFontWeight.fromValue(_ret);
  }

  /// fontStyleAtIndex:range:
  AVCaptionFontStyle fontStyleAtIndex_range_(
      int index, ffi.Pointer<_NSRange> outRange) {
    final _ret = _objc_msgSend_1170(
        this.pointer, _sel_fontStyleAtIndex_range_, index, outRange);
    return AVCaptionFontStyle.fromValue(_ret);
  }

  /// decorationAtIndex:range:
  AVCaptionDecoration decorationAtIndex_range_(
      int index, ffi.Pointer<_NSRange> outRange) {
    final _ret = _objc_msgSend_1171(
        this.pointer, _sel_decorationAtIndex_range_, index, outRange);
    return AVCaptionDecoration.fromValue(_ret);
  }

  /// textCombineAtIndex:range:
  AVCaptionTextCombine textCombineAtIndex_range_(
      int index, ffi.Pointer<_NSRange> outRange) {
    final _ret = _objc_msgSend_1172(
        this.pointer, _sel_textCombineAtIndex_range_, index, outRange);
    return AVCaptionTextCombine.fromValue(_ret);
  }

  /// rubyAtIndex:range:
  AVCaptionRuby? rubyAtIndex_range_(int index, ffi.Pointer<_NSRange> outRange) {
    final _ret = _objc_msgSend_1176(
        this.pointer, _sel_rubyAtIndex_range_, index, outRange);
    return _ret.address == 0
        ? null
        : AVCaptionRuby.castFromPointer(_ret, retain: true, release: true);
  }

  /// region
  AVCaptionRegion? get region {
    final _ret = _objc_msgSend_1184(this.pointer, _sel_region);
    return _ret.address == 0
        ? null
        : AVCaptionRegion.castFromPointer(_ret, retain: true, release: true);
  }

  /// textAlignment
  AVCaptionTextAlignment get textAlignment {
    final _ret = _objc_msgSend_1185(this.pointer, _sel_textAlignment);
    return AVCaptionTextAlignment.fromValue(_ret);
  }

  /// animation
  AVCaptionAnimation get animation {
    final _ret = _objc_msgSend_1186(this.pointer, _sel_animation);
    return AVCaptionAnimation.fromValue(_ret);
  }

  /// allocWithZone:
  static AVCaption allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_AVCaption, _sel_allocWithZone_, zone);
    return AVCaption.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVCaption alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaption, _sel_alloc);
    return AVCaption.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaption,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaption,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaption, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCaption, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaption,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaption,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaption,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_AVCaption, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVCaption, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaption = objc.getClass("AVCaption");
late final _sel_initWithText_timeRange_ =
    objc.registerName("initWithText:timeRange:");
final _objc_msgSend_1167 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CMTimeRange)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CMTimeRange)>();
late final _sel_text = objc.registerName("text");
late final _sel_textColorAtIndex_range_ =
    objc.registerName("textColorAtIndex:range:");
final _objc_msgSend_1168 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGColor> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        ffi.Pointer<CGColor> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<_NSRange>)>();
late final _sel_backgroundColorAtIndex_range_ =
    objc.registerName("backgroundColorAtIndex:range:");

enum AVCaptionFontWeight {
  AVCaptionFontWeightUnknown(0),
  AVCaptionFontWeightNormal(1),
  AVCaptionFontWeightBold(2);

  final int value;
  const AVCaptionFontWeight(this.value);

  static AVCaptionFontWeight fromValue(int value) => switch (value) {
        0 => AVCaptionFontWeightUnknown,
        1 => AVCaptionFontWeightNormal,
        2 => AVCaptionFontWeightBold,
        _ =>
          throw ArgumentError("Unknown value for AVCaptionFontWeight: $value"),
      };
}

late final _sel_fontWeightAtIndex_range_ =
    objc.registerName("fontWeightAtIndex:range:");
final _objc_msgSend_1169 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<_NSRange>)>();

enum AVCaptionFontStyle {
  AVCaptionFontStyleUnknown(0),
  AVCaptionFontStyleNormal(1),
  AVCaptionFontStyleItalic(2);

  final int value;
  const AVCaptionFontStyle(this.value);

  static AVCaptionFontStyle fromValue(int value) => switch (value) {
        0 => AVCaptionFontStyleUnknown,
        1 => AVCaptionFontStyleNormal,
        2 => AVCaptionFontStyleItalic,
        _ =>
          throw ArgumentError("Unknown value for AVCaptionFontStyle: $value"),
      };
}

late final _sel_fontStyleAtIndex_range_ =
    objc.registerName("fontStyleAtIndex:range:");
final _objc_msgSend_1170 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<_NSRange>)>();

enum AVCaptionDecoration {
  AVCaptionDecorationNone(0),
  AVCaptionDecorationUnderline(1),
  AVCaptionDecorationLineThrough(2),
  AVCaptionDecorationOverline(4);

  final int value;
  const AVCaptionDecoration(this.value);

  static AVCaptionDecoration fromValue(int value) => switch (value) {
        0 => AVCaptionDecorationNone,
        1 => AVCaptionDecorationUnderline,
        2 => AVCaptionDecorationLineThrough,
        4 => AVCaptionDecorationOverline,
        _ =>
          throw ArgumentError("Unknown value for AVCaptionDecoration: $value"),
      };
}

late final _sel_decorationAtIndex_range_ =
    objc.registerName("decorationAtIndex:range:");
final _objc_msgSend_1171 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<_NSRange>)>();

enum AVCaptionTextCombine {
  AVCaptionTextCombineAll(-1),
  AVCaptionTextCombineNone(0),
  AVCaptionTextCombineOneDigit(1),
  AVCaptionTextCombineTwoDigits(2),
  AVCaptionTextCombineThreeDigits(3),
  AVCaptionTextCombineFourDigits(4);

  final int value;
  const AVCaptionTextCombine(this.value);

  static AVCaptionTextCombine fromValue(int value) => switch (value) {
        -1 => AVCaptionTextCombineAll,
        0 => AVCaptionTextCombineNone,
        1 => AVCaptionTextCombineOneDigit,
        2 => AVCaptionTextCombineTwoDigits,
        3 => AVCaptionTextCombineThreeDigits,
        4 => AVCaptionTextCombineFourDigits,
        _ =>
          throw ArgumentError("Unknown value for AVCaptionTextCombine: $value"),
      };
}

late final _sel_textCombineAtIndex_range_ =
    objc.registerName("textCombineAtIndex:range:");
final _objc_msgSend_1172 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<_NSRange>)>();

/// AVCaptionRuby
class AVCaptionRuby extends objc.NSObject {
  AVCaptionRuby._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptionRuby] that points to the same underlying object as [other].
  AVCaptionRuby.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptionRuby] that wraps the given raw object pointer.
  AVCaptionRuby.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptionRuby].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptionRuby);
  }

  /// init
  AVCaptionRuby init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptionRuby.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVCaptionRuby new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptionRuby, _sel_new);
    return AVCaptionRuby.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithText:
  AVCaptionRuby initWithText_(objc.NSString text) {
    final _ret =
        _objc_msgSend_63(this.pointer, _sel_initWithText_, text.pointer);
    return AVCaptionRuby.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithText:position:alignment:
  AVCaptionRuby initWithText_position_alignment_(objc.NSString text,
      AVCaptionRubyPosition position, AVCaptionRubyAlignment alignment) {
    final _ret = _objc_msgSend_1173(
        this.pointer,
        _sel_initWithText_position_alignment_,
        text.pointer,
        position.value,
        alignment.value);
    return AVCaptionRuby.castFromPointer(_ret, retain: true, release: true);
  }

  /// text
  objc.NSString get text {
    final _ret = _objc_msgSend_11(this.pointer, _sel_text);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// position
  AVCaptionRubyPosition get position {
    final _ret = _objc_msgSend_1174(this.pointer, _sel_position);
    return AVCaptionRubyPosition.fromValue(_ret);
  }

  /// alignment
  AVCaptionRubyAlignment get alignment {
    final _ret = _objc_msgSend_1175(this.pointer, _sel_alignment);
    return AVCaptionRubyAlignment.fromValue(_ret);
  }

  /// allocWithZone:
  static AVCaptionRuby allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCaptionRuby, _sel_allocWithZone_, zone);
    return AVCaptionRuby.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVCaptionRuby alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptionRuby, _sel_alloc);
    return AVCaptionRuby.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptionRuby,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptionRuby,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptionRuby, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCaptionRuby, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptionRuby,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptionRuby,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptionRuby,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptionRuby, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptionRuby, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptionRuby = objc.getClass("AVCaptionRuby");
late final _sel_initWithText_ = objc.registerName("initWithText:");

enum AVCaptionRubyPosition {
  AVCaptionRubyPositionBefore(0),
  AVCaptionRubyPositionAfter(1);

  final int value;
  const AVCaptionRubyPosition(this.value);

  static AVCaptionRubyPosition fromValue(int value) => switch (value) {
        0 => AVCaptionRubyPositionBefore,
        1 => AVCaptionRubyPositionAfter,
        _ => throw ArgumentError(
            "Unknown value for AVCaptionRubyPosition: $value"),
      };
}

enum AVCaptionRubyAlignment {
  AVCaptionRubyAlignmentStart(0),
  AVCaptionRubyAlignmentCenter(1),
  AVCaptionRubyAlignmentDistributeSpaceBetween(2),
  AVCaptionRubyAlignmentDistributeSpaceAround(3);

  final int value;
  const AVCaptionRubyAlignment(this.value);

  static AVCaptionRubyAlignment fromValue(int value) => switch (value) {
        0 => AVCaptionRubyAlignmentStart,
        1 => AVCaptionRubyAlignmentCenter,
        2 => AVCaptionRubyAlignmentDistributeSpaceBetween,
        3 => AVCaptionRubyAlignmentDistributeSpaceAround,
        _ => throw ArgumentError(
            "Unknown value for AVCaptionRubyAlignment: $value"),
      };
}

late final _sel_initWithText_position_alignment_ =
    objc.registerName("initWithText:position:alignment:");
final _objc_msgSend_1173 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int)>();
final _objc_msgSend_1174 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_alignment = objc.registerName("alignment");
final _objc_msgSend_1175 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_rubyAtIndex_range_ = objc.registerName("rubyAtIndex:range:");
final _objc_msgSend_1176 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<_NSRange>)>();

/// AVCaptionRegion
class AVCaptionRegion extends objc.NSObject {
  AVCaptionRegion._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptionRegion] that points to the same underlying object as [other].
  AVCaptionRegion.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptionRegion] that wraps the given raw object pointer.
  AVCaptionRegion.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptionRegion].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptionRegion);
  }

  /// appleITTTopRegion
  static AVCaptionRegion getAppleITTTopRegion() {
    final _ret =
        _objc_msgSend_1177(_class_AVCaptionRegion, _sel_appleITTTopRegion);
    return AVCaptionRegion.castFromPointer(_ret, retain: true, release: true);
  }

  /// appleITTBottomRegion
  static AVCaptionRegion getAppleITTBottomRegion() {
    final _ret =
        _objc_msgSend_1177(_class_AVCaptionRegion, _sel_appleITTBottomRegion);
    return AVCaptionRegion.castFromPointer(_ret, retain: true, release: true);
  }

  /// appleITTLeftRegion
  static AVCaptionRegion getAppleITTLeftRegion() {
    final _ret =
        _objc_msgSend_1177(_class_AVCaptionRegion, _sel_appleITTLeftRegion);
    return AVCaptionRegion.castFromPointer(_ret, retain: true, release: true);
  }

  /// appleITTRightRegion
  static AVCaptionRegion getAppleITTRightRegion() {
    final _ret =
        _objc_msgSend_1177(_class_AVCaptionRegion, _sel_appleITTRightRegion);
    return AVCaptionRegion.castFromPointer(_ret, retain: true, release: true);
  }

  /// subRipTextBottomRegion
  static AVCaptionRegion getSubRipTextBottomRegion() {
    final _ret =
        _objc_msgSend_1177(_class_AVCaptionRegion, _sel_subRipTextBottomRegion);
    return AVCaptionRegion.castFromPointer(_ret, retain: true, release: true);
  }

  /// identifier
  objc.NSString? get identifier {
    final _ret = _objc_msgSend_20(this.pointer, _sel_identifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// origin
  void getOrigin(ffi.Pointer<AVCaptionPoint> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1178Stret(stret, this.pointer, _sel_origin)
        : stret.ref = _objc_msgSend_1178(this.pointer, _sel_origin);
  }

  /// size
  void getSize(ffi.Pointer<AVCaptionSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1179Stret(stret, this.pointer, _sel_size)
        : stret.ref = _objc_msgSend_1179(this.pointer, _sel_size);
  }

  /// scroll
  AVCaptionRegionScroll get scroll {
    final _ret = _objc_msgSend_1180(this.pointer, _sel_scroll);
    return AVCaptionRegionScroll.fromValue(_ret);
  }

  /// displayAlignment
  AVCaptionRegionDisplayAlignment get displayAlignment {
    final _ret = _objc_msgSend_1181(this.pointer, _sel_displayAlignment);
    return AVCaptionRegionDisplayAlignment.fromValue(_ret);
  }

  /// writingMode
  AVCaptionRegionWritingMode get writingMode {
    final _ret = _objc_msgSend_1182(this.pointer, _sel_writingMode);
    return AVCaptionRegionWritingMode.fromValue(_ret);
  }

  /// encodeWithCoder:
  void encodeWithCoder_(objc.NSCoder encoder) {
    _objc_msgSend_1183(this.pointer, _sel_encodeWithCoder_, encoder.pointer);
  }

  /// isEqual:
  bool isEqual_(objc.ObjCObjectBase object) {
    return _objc_msgSend_0(this.pointer, _sel_isEqual_, object.pointer);
  }

  /// mutableCopyWithZone:
  objc.ObjCObjectBase mutableCopyWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(this.pointer, _sel_mutableCopyWithZone_, zone);
    return objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  /// init
  AVCaptionRegion init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptionRegion.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVCaptionRegion new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptionRegion, _sel_new);
    return AVCaptionRegion.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVCaptionRegion allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCaptionRegion, _sel_allocWithZone_, zone);
    return AVCaptionRegion.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVCaptionRegion alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptionRegion, _sel_alloc);
    return AVCaptionRegion.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptionRegion,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptionRegion,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptionRegion, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCaptionRegion, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptionRegion,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptionRegion,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptionRegion,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptionRegion, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptionRegion, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptionRegion = objc.getClass("AVCaptionRegion");
late final _sel_appleITTTopRegion = objc.registerName("appleITTTopRegion");
final _objc_msgSend_1177 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_appleITTBottomRegion =
    objc.registerName("appleITTBottomRegion");
late final _sel_appleITTLeftRegion = objc.registerName("appleITTLeftRegion");
late final _sel_appleITTRightRegion = objc.registerName("appleITTRightRegion");
late final _sel_subRipTextBottomRegion =
    objc.registerName("subRipTextBottomRegion");

final class AVCaptionPoint extends ffi.Struct {
  external AVCaptionDimension x;

  external AVCaptionDimension y;
}

final class AVCaptionDimension extends ffi.Struct {
  @ffi.Double()
  external double value;

  @ffi.UnsignedLong()
  external int units;
}

enum AVCaptionUnitsType {
  AVCaptionUnitsTypeUnspecified(0),
  AVCaptionUnitsTypeCells(1),
  AVCaptionUnitsTypePercent(2);

  final int value;
  const AVCaptionUnitsType(this.value);

  static AVCaptionUnitsType fromValue(int value) => switch (value) {
        0 => AVCaptionUnitsTypeUnspecified,
        1 => AVCaptionUnitsTypeCells,
        2 => AVCaptionUnitsTypePercent,
        _ =>
          throw ArgumentError("Unknown value for AVCaptionUnitsType: $value"),
      };
}

late final _sel_origin = objc.registerName("origin");
final _objc_msgSend_1178 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVCaptionPoint Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AVCaptionPoint Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1178Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVCaptionPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AVCaptionPoint>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();

final class AVCaptionSize extends ffi.Struct {
  external AVCaptionDimension width;

  external AVCaptionDimension height;
}

late final _sel_size = objc.registerName("size");
final _objc_msgSend_1179 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVCaptionSize Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AVCaptionSize Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1179Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVCaptionSize>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AVCaptionSize>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();

enum AVCaptionRegionScroll {
  AVCaptionRegionScrollNone(0),
  AVCaptionRegionScrollRollUp(1);

  final int value;
  const AVCaptionRegionScroll(this.value);

  static AVCaptionRegionScroll fromValue(int value) => switch (value) {
        0 => AVCaptionRegionScrollNone,
        1 => AVCaptionRegionScrollRollUp,
        _ => throw ArgumentError(
            "Unknown value for AVCaptionRegionScroll: $value"),
      };
}

late final _sel_scroll = objc.registerName("scroll");
final _objc_msgSend_1180 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum AVCaptionRegionDisplayAlignment {
  AVCaptionRegionDisplayAlignmentBefore(0),
  AVCaptionRegionDisplayAlignmentCenter(1),
  AVCaptionRegionDisplayAlignmentAfter(2);

  final int value;
  const AVCaptionRegionDisplayAlignment(this.value);

  static AVCaptionRegionDisplayAlignment fromValue(int value) =>
      switch (value) {
        0 => AVCaptionRegionDisplayAlignmentBefore,
        1 => AVCaptionRegionDisplayAlignmentCenter,
        2 => AVCaptionRegionDisplayAlignmentAfter,
        _ => throw ArgumentError(
            "Unknown value for AVCaptionRegionDisplayAlignment: $value"),
      };
}

late final _sel_displayAlignment = objc.registerName("displayAlignment");
final _objc_msgSend_1181 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum AVCaptionRegionWritingMode {
  AVCaptionRegionWritingModeLeftToRightAndTopToBottom(0),
  AVCaptionRegionWritingModeTopToBottomAndRightToLeft(2);

  final int value;
  const AVCaptionRegionWritingMode(this.value);

  static AVCaptionRegionWritingMode fromValue(int value) => switch (value) {
        0 => AVCaptionRegionWritingModeLeftToRightAndTopToBottom,
        2 => AVCaptionRegionWritingModeTopToBottomAndRightToLeft,
        _ => throw ArgumentError(
            "Unknown value for AVCaptionRegionWritingMode: $value"),
      };
}

late final _sel_writingMode = objc.registerName("writingMode");
final _objc_msgSend_1182 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_encodeWithCoder_ = objc.registerName("encodeWithCoder:");
final _objc_msgSend_1183 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_mutableCopyWithZone_ =
    objc.registerName("mutableCopyWithZone:");
late final _sel_region = objc.registerName("region");
final _objc_msgSend_1184 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum AVCaptionTextAlignment {
  AVCaptionTextAlignmentStart(0),
  AVCaptionTextAlignmentEnd(1),
  AVCaptionTextAlignmentCenter(2),
  AVCaptionTextAlignmentLeft(3),
  AVCaptionTextAlignmentRight(4);

  final int value;
  const AVCaptionTextAlignment(this.value);

  static AVCaptionTextAlignment fromValue(int value) => switch (value) {
        0 => AVCaptionTextAlignmentStart,
        1 => AVCaptionTextAlignmentEnd,
        2 => AVCaptionTextAlignmentCenter,
        3 => AVCaptionTextAlignmentLeft,
        4 => AVCaptionTextAlignmentRight,
        _ => throw ArgumentError(
            "Unknown value for AVCaptionTextAlignment: $value"),
      };
}

late final _sel_textAlignment = objc.registerName("textAlignment");
final _objc_msgSend_1185 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum AVCaptionAnimation {
  AVCaptionAnimationNone(0),
  AVCaptionAnimationCharacterReveal(1);

  final int value;
  const AVCaptionAnimation(this.value);

  static AVCaptionAnimation fromValue(int value) => switch (value) {
        0 => AVCaptionAnimationNone,
        1 => AVCaptionAnimationCharacterReveal,
        _ =>
          throw ArgumentError("Unknown value for AVCaptionAnimation: $value"),
      };
}

final _objc_msgSend_1186 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVMutableCaption
class AVMutableCaption extends AVCaption {
  AVMutableCaption._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMutableCaption] that points to the same underlying object as [other].
  AVMutableCaption.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMutableCaption] that wraps the given raw object pointer.
  AVMutableCaption.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMutableCaption].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMutableCaption);
  }

  /// text
  objc.NSString get text {
    final _ret = _objc_msgSend_11(this.pointer, _sel_text);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setText:
  set text(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setText_, value.pointer);
  }

  /// timeRange
  void getTimeRange(ffi.Pointer<CMTimeRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_719Stret(stret, this.pointer, _sel_timeRange)
        : stret.ref = _objc_msgSend_719(this.pointer, _sel_timeRange);
  }

  /// setTimeRange:
  set timeRange(CMTimeRange value) {
    return _objc_msgSend_783(this.pointer, _sel_setTimeRange_, value);
  }

  /// setTextColor:inRange:
  void setTextColor_inRange_(ffi.Pointer<CGColor> color, _NSRange range) {
    _objc_msgSend_1187(this.pointer, _sel_setTextColor_inRange_, color, range);
  }

  /// setBackgroundColor:inRange:
  void setBackgroundColor_inRange_(ffi.Pointer<CGColor> color, _NSRange range) {
    _objc_msgSend_1187(
        this.pointer, _sel_setBackgroundColor_inRange_, color, range);
  }

  /// setFontWeight:inRange:
  void setFontWeight_inRange_(AVCaptionFontWeight fontWeight, _NSRange range) {
    _objc_msgSend_1188(
        this.pointer, _sel_setFontWeight_inRange_, fontWeight.value, range);
  }

  /// setFontStyle:inRange:
  void setFontStyle_inRange_(AVCaptionFontStyle fontStyle, _NSRange range) {
    _objc_msgSend_1189(
        this.pointer, _sel_setFontStyle_inRange_, fontStyle.value, range);
  }

  /// setDecoration:inRange:
  void setDecoration_inRange_(AVCaptionDecoration decoration, _NSRange range) {
    _objc_msgSend_1190(
        this.pointer, _sel_setDecoration_inRange_, decoration.value, range);
  }

  /// setTextCombine:inRange:
  void setTextCombine_inRange_(
      AVCaptionTextCombine textCombine, _NSRange range) {
    _objc_msgSend_1191(
        this.pointer, _sel_setTextCombine_inRange_, textCombine.value, range);
  }

  /// setRuby:inRange:
  void setRuby_inRange_(AVCaptionRuby ruby, _NSRange range) {
    _objc_msgSend_1192(
        this.pointer, _sel_setRuby_inRange_, ruby.pointer, range);
  }

  /// removeTextColorInRange:
  void removeTextColorInRange_(_NSRange range) {
    _objc_msgSend_100(this.pointer, _sel_removeTextColorInRange_, range);
  }

  /// removeBackgroundColorInRange:
  void removeBackgroundColorInRange_(_NSRange range) {
    _objc_msgSend_100(this.pointer, _sel_removeBackgroundColorInRange_, range);
  }

  /// removeFontWeightInRange:
  void removeFontWeightInRange_(_NSRange range) {
    _objc_msgSend_100(this.pointer, _sel_removeFontWeightInRange_, range);
  }

  /// removeFontStyleInRange:
  void removeFontStyleInRange_(_NSRange range) {
    _objc_msgSend_100(this.pointer, _sel_removeFontStyleInRange_, range);
  }

  /// removeDecorationInRange:
  void removeDecorationInRange_(_NSRange range) {
    _objc_msgSend_100(this.pointer, _sel_removeDecorationInRange_, range);
  }

  /// removeTextCombineInRange:
  void removeTextCombineInRange_(_NSRange range) {
    _objc_msgSend_100(this.pointer, _sel_removeTextCombineInRange_, range);
  }

  /// removeRubyInRange:
  void removeRubyInRange_(_NSRange range) {
    _objc_msgSend_100(this.pointer, _sel_removeRubyInRange_, range);
  }

  /// region
  AVCaptionRegion get region {
    final _ret = _objc_msgSend_1177(this.pointer, _sel_region);
    return AVCaptionRegion.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRegion:
  set region(AVCaptionRegion value) {
    return _objc_msgSend_1193(this.pointer, _sel_setRegion_, value.pointer);
  }

  /// textAlignment
  AVCaptionTextAlignment get textAlignment {
    final _ret = _objc_msgSend_1185(this.pointer, _sel_textAlignment);
    return AVCaptionTextAlignment.fromValue(_ret);
  }

  /// setTextAlignment:
  set textAlignment(AVCaptionTextAlignment value) {
    return _objc_msgSend_1194(
        this.pointer, _sel_setTextAlignment_, value.value);
  }

  /// animation
  AVCaptionAnimation get animation {
    final _ret = _objc_msgSend_1186(this.pointer, _sel_animation);
    return AVCaptionAnimation.fromValue(_ret);
  }

  /// setAnimation:
  set animation(AVCaptionAnimation value) {
    return _objc_msgSend_1195(this.pointer, _sel_setAnimation_, value.value);
  }

  /// init
  AVMutableCaption init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMutableCaption.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVMutableCaption new1() {
    final _ret = _objc_msgSend_19(_class_AVMutableCaption, _sel_new);
    return AVMutableCaption.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithText:timeRange:
  AVMutableCaption initWithText_timeRange_(
      objc.NSString text, CMTimeRange timeRange) {
    final _ret = _objc_msgSend_1167(
        this.pointer, _sel_initWithText_timeRange_, text.pointer, timeRange);
    return AVMutableCaption.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVMutableCaption allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMutableCaption, _sel_allocWithZone_, zone);
    return AVMutableCaption.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVMutableCaption alloc() {
    final _ret = _objc_msgSend_19(_class_AVMutableCaption, _sel_alloc);
    return AVMutableCaption.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMutableCaption,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMutableCaption,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMutableCaption, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMutableCaption, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMutableCaption,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMutableCaption,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMutableCaption,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMutableCaption, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVMutableCaption, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMutableCaption = objc.getClass("AVMutableCaption");
late final _sel_setText_ = objc.registerName("setText:");
late final _sel_setTextColor_inRange_ =
    objc.registerName("setTextColor:inRange:");
final _objc_msgSend_1187 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGColor>,
                _NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColor>, _NSRange)>();
late final _sel_setBackgroundColor_inRange_ =
    objc.registerName("setBackgroundColor:inRange:");
late final _sel_setFontWeight_inRange_ =
    objc.registerName("setFontWeight:inRange:");
final _objc_msgSend_1188 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, _NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, _NSRange)>();
late final _sel_setFontStyle_inRange_ =
    objc.registerName("setFontStyle:inRange:");
final _objc_msgSend_1189 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, _NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, _NSRange)>();
late final _sel_setDecoration_inRange_ =
    objc.registerName("setDecoration:inRange:");
final _objc_msgSend_1190 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, _NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, _NSRange)>();
late final _sel_setTextCombine_inRange_ =
    objc.registerName("setTextCombine:inRange:");
final _objc_msgSend_1191 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long, _NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, _NSRange)>();
late final _sel_setRuby_inRange_ = objc.registerName("setRuby:inRange:");
final _objc_msgSend_1192 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_removeTextColorInRange_ =
    objc.registerName("removeTextColorInRange:");
late final _sel_removeBackgroundColorInRange_ =
    objc.registerName("removeBackgroundColorInRange:");
late final _sel_removeFontWeightInRange_ =
    objc.registerName("removeFontWeightInRange:");
late final _sel_removeFontStyleInRange_ =
    objc.registerName("removeFontStyleInRange:");
late final _sel_removeDecorationInRange_ =
    objc.registerName("removeDecorationInRange:");
late final _sel_removeTextCombineInRange_ =
    objc.registerName("removeTextCombineInRange:");
late final _sel_removeRubyInRange_ = objc.registerName("removeRubyInRange:");
late final _sel_setRegion_ = objc.registerName("setRegion:");
final _objc_msgSend_1193 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setTextAlignment_ = objc.registerName("setTextAlignment:");
final _objc_msgSend_1194 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setAnimation_ = objc.registerName("setAnimation:");
final _objc_msgSend_1195 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

/// NSUserActivity
class NSUserActivity extends objc.NSObject {
  NSUserActivity._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSUserActivity] that points to the same underlying object as [other].
  NSUserActivity.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSUserActivity] that wraps the given raw object pointer.
  NSUserActivity.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSUserActivity].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSUserActivity);
  }

  /// initWithActivityType:
  NSUserActivity initWithActivityType_(objc.NSString activityType) {
    final _ret = _objc_msgSend_63(
        this.pointer, _sel_initWithActivityType_, activityType.pointer);
    return NSUserActivity.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSUserActivity init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSUserActivity.castFromPointer(_ret, retain: true, release: true);
  }

  /// activityType
  objc.NSString get activityType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_activityType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// title
  objc.NSString? get title {
    final _ret = _objc_msgSend_20(this.pointer, _sel_title);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTitle:
  set title(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setTitle_, value?.pointer ?? ffi.nullptr);
  }

  /// userInfo
  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_84(this.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setUserInfo:
  set userInfo(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer, _sel_setUserInfo_, value?.pointer ?? ffi.nullptr);
  }

  /// addUserInfoEntriesFromDictionary:
  void addUserInfoEntriesFromDictionary_(objc.NSDictionary otherDictionary) {
    _objc_msgSend_642(this.pointer, _sel_addUserInfoEntriesFromDictionary_,
        otherDictionary.pointer);
  }

  /// requiredUserInfoKeys
  objc.NSSet? get requiredUserInfoKeys {
    final _ret = _objc_msgSend_524(this.pointer, _sel_requiredUserInfoKeys);
    return _ret.address == 0
        ? null
        : objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRequiredUserInfoKeys:
  set requiredUserInfoKeys(objc.NSSet? value) {
    return _objc_msgSend_525(this.pointer, _sel_setRequiredUserInfoKeys_,
        value?.pointer ?? ffi.nullptr);
  }

  /// needsSave
  bool get needsSave {
    return _objc_msgSend_13(this.pointer, _sel_needsSave);
  }

  /// setNeedsSave:
  set needsSave(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setNeedsSave_, value);
  }

  /// webpageURL
  objc.NSURL? get webpageURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_webpageURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setWebpageURL:
  set webpageURL(objc.NSURL? value) {
    return _objc_msgSend_25(
        this.pointer, _sel_setWebpageURL_, value?.pointer ?? ffi.nullptr);
  }

  /// referrerURL
  objc.NSURL? get referrerURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_referrerURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setReferrerURL:
  set referrerURL(objc.NSURL? value) {
    return _objc_msgSend_25(
        this.pointer, _sel_setReferrerURL_, value?.pointer ?? ffi.nullptr);
  }

  /// expirationDate
  objc.NSDate? get expirationDate {
    final _ret = _objc_msgSend_126(this.pointer, _sel_expirationDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setExpirationDate:
  set expirationDate(objc.NSDate? value) {
    return _objc_msgSend_172(
        this.pointer, _sel_setExpirationDate_, value?.pointer ?? ffi.nullptr);
  }

  /// keywords
  objc.NSSet get keywords {
    final _ret = _objc_msgSend_1049(this.pointer, _sel_keywords);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// setKeywords:
  set keywords(objc.NSSet value) {
    return _objc_msgSend_1196(this.pointer, _sel_setKeywords_, value.pointer);
  }

  /// supportsContinuationStreams
  bool get supportsContinuationStreams {
    return _objc_msgSend_13(this.pointer, _sel_supportsContinuationStreams);
  }

  /// setSupportsContinuationStreams:
  set supportsContinuationStreams(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setSupportsContinuationStreams_, value);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// targetContentIdentifier
  objc.NSString? get targetContentIdentifier {
    final _ret = _objc_msgSend_20(this.pointer, _sel_targetContentIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTargetContentIdentifier:
  set targetContentIdentifier(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setTargetContentIdentifier_,
        value?.pointer ?? ffi.nullptr);
  }

  /// becomeCurrent
  void becomeCurrent() {
    _objc_msgSend_7(this.pointer, _sel_becomeCurrent);
  }

  /// resignCurrent
  void resignCurrent() {
    _objc_msgSend_7(this.pointer, _sel_resignCurrent);
  }

  /// invalidate
  void invalidate() {
    _objc_msgSend_7(this.pointer, _sel_invalidate);
  }

  /// getContinuationStreamsWithCompletionHandler:
  void getContinuationStreamsWithCompletionHandler_(
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_1197(
        this.pointer,
        _sel_getContinuationStreamsWithCompletionHandler_,
        completionHandler.pointer);
  }

  /// isEligibleForHandoff
  bool get eligibleForHandoff {
    return _objc_msgSend_13(this.pointer, _sel_isEligibleForHandoff);
  }

  /// setEligibleForHandoff:
  set eligibleForHandoff(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setEligibleForHandoff_, value);
  }

  /// isEligibleForSearch
  bool get eligibleForSearch {
    return _objc_msgSend_13(this.pointer, _sel_isEligibleForSearch);
  }

  /// setEligibleForSearch:
  set eligibleForSearch(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setEligibleForSearch_, value);
  }

  /// isEligibleForPublicIndexing
  bool get eligibleForPublicIndexing {
    return _objc_msgSend_13(this.pointer, _sel_isEligibleForPublicIndexing);
  }

  /// setEligibleForPublicIndexing:
  set eligibleForPublicIndexing(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setEligibleForPublicIndexing_, value);
  }

  /// isEligibleForPrediction
  bool get eligibleForPrediction {
    return _objc_msgSend_13(this.pointer, _sel_isEligibleForPrediction);
  }

  /// setEligibleForPrediction:
  set eligibleForPrediction(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setEligibleForPrediction_, value);
  }

  /// persistentIdentifier
  objc.NSString? get persistentIdentifier {
    final _ret = _objc_msgSend_20(this.pointer, _sel_persistentIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPersistentIdentifier:
  set persistentIdentifier(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setPersistentIdentifier_,
        value?.pointer ?? ffi.nullptr);
  }

  /// deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:
  static void
      deleteSavedUserActivitiesWithPersistentIdentifiers_completionHandler_(
          objc.NSArray persistentIdentifiers,
          objc.ObjCBlock<ffi.Void Function()> handler) {
    _objc_msgSend_260(
        _class_NSUserActivity,
        _sel_deleteSavedUserActivitiesWithPersistentIdentifiers_completionHandler_,
        persistentIdentifiers.pointer,
        handler.pointer);
  }

  /// deleteAllSavedUserActivitiesWithCompletionHandler:
  static void deleteAllSavedUserActivitiesWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function()> handler) {
    _objc_msgSend_261(
        _class_NSUserActivity,
        _sel_deleteAllSavedUserActivitiesWithCompletionHandler_,
        handler.pointer);
  }

  /// detectedBarcodeDescriptor
  CIBarcodeDescriptor? get detectedBarcodeDescriptor {
    final _ret =
        _objc_msgSend_1198(this.pointer, _sel_detectedBarcodeDescriptor);
    return _ret.address == 0
        ? null
        : CIBarcodeDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// new
  static NSUserActivity new1() {
    final _ret = _objc_msgSend_19(_class_NSUserActivity, _sel_new);
    return NSUserActivity.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSUserActivity allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSUserActivity, _sel_allocWithZone_, zone);
    return NSUserActivity.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSUserActivity alloc() {
    final _ret = _objc_msgSend_19(_class_NSUserActivity, _sel_alloc);
    return NSUserActivity.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSUserActivity,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSUserActivity,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSUserActivity, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSUserActivity, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSUserActivity,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSUserActivity,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSUserActivity,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSUserActivity, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSUserActivity, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSUserActivity = objc.getClass("NSUserActivity");
late final _sel_initWithActivityType_ =
    objc.registerName("initWithActivityType:");
late final _sel_activityType = objc.registerName("activityType");
late final _sel_title = objc.registerName("title");
late final _sel_setTitle_ = objc.registerName("setTitle:");
late final _sel_setUserInfo_ = objc.registerName("setUserInfo:");
late final _sel_addUserInfoEntriesFromDictionary_ =
    objc.registerName("addUserInfoEntriesFromDictionary:");
late final _sel_requiredUserInfoKeys =
    objc.registerName("requiredUserInfoKeys");
late final _sel_setRequiredUserInfoKeys_ =
    objc.registerName("setRequiredUserInfoKeys:");
late final _sel_needsSave = objc.registerName("needsSave");
late final _sel_setNeedsSave_ = objc.registerName("setNeedsSave:");
late final _sel_webpageURL = objc.registerName("webpageURL");
late final _sel_setWebpageURL_ = objc.registerName("setWebpageURL:");
late final _sel_referrerURL = objc.registerName("referrerURL");
late final _sel_setReferrerURL_ = objc.registerName("setReferrerURL:");
late final _sel_expirationDate = objc.registerName("expirationDate");
late final _sel_setExpirationDate_ = objc.registerName("setExpirationDate:");
late final _sel_keywords = objc.registerName("keywords");
late final _sel_setKeywords_ = objc.registerName("setKeywords:");
final _objc_msgSend_1196 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_supportsContinuationStreams =
    objc.registerName("supportsContinuationStreams");
late final _sel_setSupportsContinuationStreams_ =
    objc.registerName("setSupportsContinuationStreams:");
late final _sel_targetContentIdentifier =
    objc.registerName("targetContentIdentifier");
late final _sel_setTargetContentIdentifier_ =
    objc.registerName("setTargetContentIdentifier:");
late final _sel_becomeCurrent = objc.registerName("becomeCurrent");
void _ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_fnPtrTrampoline).cast(), ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(NSInputStream?, NSOutputStream?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                  arg0.address == 0 ? null : NSInputStream.castFromPointer(arg0, retain: true, release: true),
                  arg1.address == 0 ? null : NSOutputStream.castFromPointer(arg1, retain: true, release: true),
                  arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(NSInputStream?, NSOutputStream?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                ffi.Pointer<objc.ObjCObject> arg2) =>
            fn(
                arg0.address == 0
                    ? null
                    : NSInputStream.castFromPointer(arg0, retain: false, release: true),
                arg1.address == 0 ? null : NSOutputStream.castFromPointer(arg1, retain: false, release: true),
                arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError(
            raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(NSInputStream? arg0, NSOutputStream? arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer,
          arg0?.pointer ?? ffi.nullptr,
          arg1?.pointer ?? ffi.nullptr,
          arg2?.pointer ?? ffi.nullptr);
}

late final _sel_getContinuationStreamsWithCompletionHandler_ =
    objc.registerName("getContinuationStreamsWithCompletionHandler:");
final _objc_msgSend_1197 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_isEligibleForHandoff =
    objc.registerName("isEligibleForHandoff");
late final _sel_setEligibleForHandoff_ =
    objc.registerName("setEligibleForHandoff:");
late final _sel_isEligibleForSearch = objc.registerName("isEligibleForSearch");
late final _sel_setEligibleForSearch_ =
    objc.registerName("setEligibleForSearch:");
late final _sel_isEligibleForPublicIndexing =
    objc.registerName("isEligibleForPublicIndexing");
late final _sel_setEligibleForPublicIndexing_ =
    objc.registerName("setEligibleForPublicIndexing:");
late final _sel_isEligibleForPrediction =
    objc.registerName("isEligibleForPrediction");
late final _sel_setEligibleForPrediction_ =
    objc.registerName("setEligibleForPrediction:");
late final _sel_persistentIdentifier =
    objc.registerName("persistentIdentifier");
late final _sel_setPersistentIdentifier_ =
    objc.registerName("setPersistentIdentifier:");
late final _sel_deleteSavedUserActivitiesWithPersistentIdentifiers_completionHandler_ =
    objc.registerName(
        "deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:");
late final _sel_deleteAllSavedUserActivitiesWithCompletionHandler_ =
    objc.registerName("deleteAllSavedUserActivitiesWithCompletionHandler:");

/// CIBarcodeDescriptor
class CIBarcodeDescriptor extends objc.NSObject {
  CIBarcodeDescriptor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIBarcodeDescriptor] that points to the same underlying object as [other].
  CIBarcodeDescriptor.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [CIBarcodeDescriptor] that wraps the given raw object pointer.
  CIBarcodeDescriptor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIBarcodeDescriptor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_CIBarcodeDescriptor);
  }

  /// init
  CIBarcodeDescriptor init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return CIBarcodeDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static CIBarcodeDescriptor new1() {
    final _ret = _objc_msgSend_19(_class_CIBarcodeDescriptor, _sel_new);
    return CIBarcodeDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CIBarcodeDescriptor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_CIBarcodeDescriptor, _sel_allocWithZone_, zone);
    return CIBarcodeDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CIBarcodeDescriptor alloc() {
    final _ret = _objc_msgSend_19(_class_CIBarcodeDescriptor, _sel_alloc);
    return CIBarcodeDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_CIBarcodeDescriptor,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_CIBarcodeDescriptor,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_CIBarcodeDescriptor, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_CIBarcodeDescriptor, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_CIBarcodeDescriptor,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_CIBarcodeDescriptor,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_CIBarcodeDescriptor,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_CIBarcodeDescriptor, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_CIBarcodeDescriptor, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_CIBarcodeDescriptor = objc.getClass("CIBarcodeDescriptor");
late final _sel_detectedBarcodeDescriptor =
    objc.registerName("detectedBarcodeDescriptor");
final _objc_msgSend_1198 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSNull
class NSNull extends objc.NSObject {
  NSNull._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSNull] that points to the same underlying object as [other].
  NSNull.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSNull] that wraps the given raw object pointer.
  NSNull.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSNull].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSNull);
  }

  /// null
  static NSNull null1() {
    final _ret = _objc_msgSend_1199(_class_NSNull, _sel_null);
    return NSNull.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSNull init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSNull.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSNull new1() {
    final _ret = _objc_msgSend_19(_class_NSNull, _sel_new);
    return NSNull.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSNull allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSNull, _sel_allocWithZone_, zone);
    return NSNull.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSNull alloc() {
    final _ret = _objc_msgSend_19(_class_NSNull, _sel_alloc);
    return NSNull.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSNull,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSNull,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSNull, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSNull, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSNull,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(
        _class_NSNull, _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSNull,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSNull, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_NSNull, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSNull = objc.getClass("NSNull");
late final _sel_null = objc.registerName("null");
final _objc_msgSend_1199 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVMutableCompositionTrack
class AVMutableCompositionTrack extends AVCompositionTrack {
  AVMutableCompositionTrack._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMutableCompositionTrack] that points to the same underlying object as [other].
  AVMutableCompositionTrack.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMutableCompositionTrack] that wraps the given raw object pointer.
  AVMutableCompositionTrack.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMutableCompositionTrack].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMutableCompositionTrack);
  }

  /// isEnabled
  bool get enabled {
    return _objc_msgSend_13(this.pointer, _sel_isEnabled);
  }

  /// setEnabled:
  set enabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setEnabled_, value);
  }

  /// naturalTimeScale
  int get naturalTimeScale {
    return _objc_msgSend_718(this.pointer, _sel_naturalTimeScale);
  }

  /// setNaturalTimeScale:
  set naturalTimeScale(int value) {
    return _objc_msgSend_1027(this.pointer, _sel_setNaturalTimeScale_, value);
  }

  /// languageCode
  objc.NSString? get languageCode {
    final _ret = _objc_msgSend_20(this.pointer, _sel_languageCode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLanguageCode:
  set languageCode(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setLanguageCode_, value?.pointer ?? ffi.nullptr);
  }

  /// extendedLanguageTag
  objc.NSString? get extendedLanguageTag {
    final _ret = _objc_msgSend_20(this.pointer, _sel_extendedLanguageTag);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setExtendedLanguageTag:
  set extendedLanguageTag(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setExtendedLanguageTag_,
        value?.pointer ?? ffi.nullptr);
  }

  /// preferredTransform
  void getPreferredTransform(ffi.Pointer<CGAffineTransform> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_713Stret(stret, this.pointer, _sel_preferredTransform)
        : stret.ref = _objc_msgSend_713(this.pointer, _sel_preferredTransform);
  }

  /// setPreferredTransform:
  set preferredTransform(CGAffineTransform value) {
    return _objc_msgSend_1061(this.pointer, _sel_setPreferredTransform_, value);
  }

  /// preferredVolume
  double get preferredVolume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_preferredVolume)
        : _objc_msgSend_361(this.pointer, _sel_preferredVolume);
  }

  /// setPreferredVolume:
  set preferredVolume(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setPreferredVolume_, value);
  }

  /// segments
  objc.NSArray get segments {
    final _ret = _objc_msgSend_33(this.pointer, _sel_segments);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSegments:
  set segments(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer, _sel_setSegments_, value.pointer);
  }

  /// insertTimeRange:ofTrack:atTime:error:
  bool insertTimeRange_ofTrack_atTime_error_(
      CMTimeRange timeRange,
      AVAssetTrack track,
      CMTime startTime,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1200(
        this.pointer,
        _sel_insertTimeRange_ofTrack_atTime_error_,
        timeRange,
        track.pointer,
        startTime,
        outError);
  }

  /// insertTimeRanges:ofTracks:atTime:error:
  bool insertTimeRanges_ofTracks_atTime_error_(
      objc.NSArray timeRanges,
      objc.NSArray tracks,
      CMTime startTime,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1201(
        this.pointer,
        _sel_insertTimeRanges_ofTracks_atTime_error_,
        timeRanges.pointer,
        tracks.pointer,
        startTime,
        outError);
  }

  /// insertEmptyTimeRange:
  void insertEmptyTimeRange_(CMTimeRange timeRange) {
    _objc_msgSend_1202(this.pointer, _sel_insertEmptyTimeRange_, timeRange);
  }

  /// removeTimeRange:
  void removeTimeRange_(CMTimeRange timeRange) {
    _objc_msgSend_1202(this.pointer, _sel_removeTimeRange_, timeRange);
  }

  /// scaleTimeRange:toDuration:
  void scaleTimeRange_toDuration_(CMTimeRange timeRange, CMTime duration) {
    _objc_msgSend_1203(
        this.pointer, _sel_scaleTimeRange_toDuration_, timeRange, duration);
  }

  /// validateTrackSegments:error:
  bool validateTrackSegments_error_(objc.NSArray trackSegments,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1204(this.pointer, _sel_validateTrackSegments_error_,
        trackSegments.pointer, outError);
  }

  /// addTrackAssociationToTrack:type:
  void addTrackAssociationToTrack_type_(
      AVCompositionTrack compositionTrack, objc.NSString trackAssociationType) {
    _objc_msgSend_1205(this.pointer, _sel_addTrackAssociationToTrack_type_,
        compositionTrack.pointer, trackAssociationType.pointer);
  }

  /// removeTrackAssociationToTrack:type:
  void removeTrackAssociationToTrack_type_(
      AVCompositionTrack compositionTrack, objc.NSString trackAssociationType) {
    _objc_msgSend_1205(this.pointer, _sel_removeTrackAssociationToTrack_type_,
        compositionTrack.pointer, trackAssociationType.pointer);
  }

  /// replaceFormatDescription:withFormatDescription:
  void replaceFormatDescription_withFormatDescription_(
      ffi.Pointer<opaqueCMFormatDescription> originalFormatDescription,
      ffi.Pointer<opaqueCMFormatDescription> replacementFormatDescription) {
    _objc_msgSend_1206(
        this.pointer,
        _sel_replaceFormatDescription_withFormatDescription_,
        originalFormatDescription,
        replacementFormatDescription);
  }

  /// init
  AVMutableCompositionTrack init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMutableCompositionTrack.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMutableCompositionTrack new1() {
    final _ret = _objc_msgSend_19(_class_AVMutableCompositionTrack, _sel_new);
    return AVMutableCompositionTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVMutableCompositionTrack allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVMutableCompositionTrack, _sel_allocWithZone_, zone);
    return AVMutableCompositionTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMutableCompositionTrack alloc() {
    final _ret = _objc_msgSend_19(_class_AVMutableCompositionTrack, _sel_alloc);
    return AVMutableCompositionTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMutableCompositionTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMutableCompositionTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMutableCompositionTrack, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVMutableCompositionTrack, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMutableCompositionTrack,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMutableCompositionTrack,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMutableCompositionTrack,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMutableCompositionTrack, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVMutableCompositionTrack, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMutableCompositionTrack =
    objc.getClass("AVMutableCompositionTrack");
late final _sel_setNaturalTimeScale_ =
    objc.registerName("setNaturalTimeScale:");
late final _sel_setPreferredTransform_ =
    objc.registerName("setPreferredTransform:");
late final _sel_setSegments_ = objc.registerName("setSegments:");
late final _sel_insertTimeRange_ofTrack_atTime_error_ =
    objc.registerName("insertTimeRange:ofTrack:atTime:error:");
final _objc_msgSend_1200 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTimeRange,
                ffi.Pointer<objc.ObjCObject>,
                CMTime,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTimeRange,
            ffi.Pointer<objc.ObjCObject>,
            CMTime,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_insertTimeRanges_ofTracks_atTime_error_ =
    objc.registerName("insertTimeRanges:ofTracks:atTime:error:");
final _objc_msgSend_1201 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                CMTime,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            CMTime,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_insertEmptyTimeRange_ =
    objc.registerName("insertEmptyTimeRange:");
final _objc_msgSend_1202 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTimeRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTimeRange)>();
late final _sel_removeTimeRange_ = objc.registerName("removeTimeRange:");
late final _sel_scaleTimeRange_toDuration_ =
    objc.registerName("scaleTimeRange:toDuration:");
final _objc_msgSend_1203 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTimeRange, CMTime)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTimeRange, CMTime)>();
late final _sel_validateTrackSegments_error_ =
    objc.registerName("validateTrackSegments:error:");
final _objc_msgSend_1204 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_addTrackAssociationToTrack_type_ =
    objc.registerName("addTrackAssociationToTrack:type:");
final _objc_msgSend_1205 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeTrackAssociationToTrack_type_ =
    objc.registerName("removeTrackAssociationToTrack:type:");
late final _sel_replaceFormatDescription_withFormatDescription_ =
    objc.registerName("replaceFormatDescription:withFormatDescription:");
final _objc_msgSend_1206 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<opaqueCMFormatDescription>,
                ffi.Pointer<opaqueCMFormatDescription>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<opaqueCMFormatDescription>,
            ffi.Pointer<opaqueCMFormatDescription>)>();

/// AVComposition
class AVComposition extends AVAsset {
  AVComposition._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVComposition] that points to the same underlying object as [other].
  AVComposition.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVComposition] that wraps the given raw object pointer.
  AVComposition.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVComposition].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVComposition);
  }

  /// tracks
  objc.NSArray get tracks {
    final _ret = _objc_msgSend_33(this.pointer, _sel_tracks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// naturalSize
  void getNaturalSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_naturalSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_naturalSize);
  }

  /// URLAssetInitializationOptions
  objc.NSDictionary get URLAssetInitializationOptions {
    final _ret =
        _objc_msgSend_123(this.pointer, _sel_URLAssetInitializationOptions);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// trackWithTrackID:
  AVCompositionTrack? trackWithTrackID_(int trackID) {
    final _ret =
        _objc_msgSend_1207(this.pointer, _sel_trackWithTrackID_, trackID);
    return _ret.address == 0
        ? null
        : AVCompositionTrack.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTrackWithTrackID:completionHandler:
  void loadTrackWithTrackID_completionHandler_(
      int trackID,
      objc.ObjCBlock<
              ffi.Void Function(
                  AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_1208(
        this.pointer,
        _sel_loadTrackWithTrackID_completionHandler_,
        trackID,
        completionHandler.pointer);
  }

  /// tracksWithMediaType:
  objc.NSArray tracksWithMediaType_(objc.NSString mediaType) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_tracksWithMediaType_, mediaType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaType:completionHandler:
  void loadTracksWithMediaType_completionHandler_(
      objc.NSString mediaType,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaType_completionHandler_,
        mediaType.pointer,
        completionHandler.pointer);
  }

  /// tracksWithMediaCharacteristic:
  objc.NSArray tracksWithMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_390(this.pointer,
        _sel_tracksWithMediaCharacteristic_, mediaCharacteristic.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaCharacteristic:completionHandler:
  void loadTracksWithMediaCharacteristic_completionHandler_(
      objc.NSString mediaCharacteristic,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaCharacteristic_completionHandler_,
        mediaCharacteristic.pointer,
        completionHandler.pointer);
  }

  /// metadataForFormat:
  objc.NSArray metadataForFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_metadataForFormat_, format.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:
  objc.NSArray
      chapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_(
          objc.NSLocale locale, objc.NSArray? commonKeys) {
    final _ret = _objc_msgSend_751(
        this.pointer,
        _sel_chapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_,
        locale.pointer,
        commonKeys?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// chapterMetadataGroupsBestMatchingPreferredLanguages:
  objc.NSArray chapterMetadataGroupsBestMatchingPreferredLanguages_(
      objc.NSArray preferredLanguages) {
    final _ret = _objc_msgSend_86(
        this.pointer,
        _sel_chapterMetadataGroupsBestMatchingPreferredLanguages_,
        preferredLanguages.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionGroupForMediaCharacteristic:
  AVMediaSelectionGroup? mediaSelectionGroupForMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_758(
        this.pointer,
        _sel_mediaSelectionGroupForMediaCharacteristic_,
        mediaCharacteristic.pointer);
    return _ret.address == 0
        ? null
        : AVMediaSelectionGroup.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// unusedTrackID
  int unusedTrackID() {
    return _objc_msgSend_718(this.pointer, _sel_unusedTrackID);
  }

  /// assetWithURL:
  static AVComposition assetWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_332(
        _class_AVComposition, _sel_assetWithURL_, URL.pointer);
    return AVComposition.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVComposition init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVComposition.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVComposition new1() {
    final _ret = _objc_msgSend_19(_class_AVComposition, _sel_new);
    return AVComposition.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVComposition allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVComposition, _sel_allocWithZone_, zone);
    return AVComposition.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVComposition alloc() {
    final _ret = _objc_msgSend_19(_class_AVComposition, _sel_alloc);
    return AVComposition.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVComposition,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVComposition,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVComposition, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVComposition, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVComposition,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVComposition,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVComposition,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVComposition, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVComposition, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVComposition = objc.getClass("AVComposition");
late final _sel_URLAssetInitializationOptions =
    objc.registerName("URLAssetInitializationOptions");
final _objc_msgSend_1207 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
void _ObjCBlock_ffiVoid_AVCompositionTrack_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVCompositionTrack_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVCompositionTrack_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVCompositionTrack_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVCompositionTrack, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_AVCompositionTrack_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  AVCompositionTrack.castFromPointer(arg0, retain: true, release: true),
                  arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(AVCompositionTrack, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVCompositionTrack_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            AVCompositionTrack.castFromPointer(arg0,
                retain: false, release: true),
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVCompositionTrack_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVCompositionTrack_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(AVCompositionTrack, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVCompositionTrack arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1?.pointer ?? ffi.nullptr);
}

final _objc_msgSend_1208 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVMutableComposition
class AVMutableComposition extends AVComposition {
  AVMutableComposition._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMutableComposition] that points to the same underlying object as [other].
  AVMutableComposition.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMutableComposition] that wraps the given raw object pointer.
  AVMutableComposition.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMutableComposition].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMutableComposition);
  }

  /// tracks
  objc.NSArray get tracks {
    final _ret = _objc_msgSend_33(this.pointer, _sel_tracks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// naturalSize
  void getNaturalSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_naturalSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_naturalSize);
  }

  /// setNaturalSize:
  set naturalSize(CGSize value) {
    return _objc_msgSend_819(this.pointer, _sel_setNaturalSize_, value);
  }

  /// composition
  static AVMutableComposition composition() {
    final _ret =
        _objc_msgSend_19(_class_AVMutableComposition, _sel_composition);
    return AVMutableComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// compositionWithURLAssetInitializationOptions:
  static AVMutableComposition compositionWithURLAssetInitializationOptions_(
      objc.NSDictionary? URLAssetInitializationOptions) {
    final _ret = _objc_msgSend_938(
        _class_AVMutableComposition,
        _sel_compositionWithURLAssetInitializationOptions_,
        URLAssetInitializationOptions?.pointer ?? ffi.nullptr);
    return AVMutableComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// insertTimeRange:ofAsset:atTime:error:
  bool insertTimeRange_ofAsset_atTime_error_(
      CMTimeRange timeRange,
      AVAsset asset,
      CMTime startTime,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1209(
        this.pointer,
        _sel_insertTimeRange_ofAsset_atTime_error_,
        timeRange,
        asset.pointer,
        startTime,
        outError);
  }

  /// insertTimeRange:ofAsset:atTime:completionHandler:
  void insertTimeRange_ofAsset_atTime_completionHandler_(
      CMTimeRange timeRange,
      AVAsset asset,
      CMTime startTime,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_1210(
        this.pointer,
        _sel_insertTimeRange_ofAsset_atTime_completionHandler_,
        timeRange,
        asset.pointer,
        startTime,
        completionHandler.pointer);
  }

  /// insertEmptyTimeRange:
  void insertEmptyTimeRange_(CMTimeRange timeRange) {
    _objc_msgSend_1202(this.pointer, _sel_insertEmptyTimeRange_, timeRange);
  }

  /// removeTimeRange:
  void removeTimeRange_(CMTimeRange timeRange) {
    _objc_msgSend_1202(this.pointer, _sel_removeTimeRange_, timeRange);
  }

  /// scaleTimeRange:toDuration:
  void scaleTimeRange_toDuration_(CMTimeRange timeRange, CMTime duration) {
    _objc_msgSend_1203(
        this.pointer, _sel_scaleTimeRange_toDuration_, timeRange, duration);
  }

  /// addMutableTrackWithMediaType:preferredTrackID:
  AVMutableCompositionTrack? addMutableTrackWithMediaType_preferredTrackID_(
      objc.NSString mediaType, int preferredTrackID) {
    final _ret = _objc_msgSend_1211(
        this.pointer,
        _sel_addMutableTrackWithMediaType_preferredTrackID_,
        mediaType.pointer,
        preferredTrackID);
    return _ret.address == 0
        ? null
        : AVMutableCompositionTrack.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// removeTrack:
  void removeTrack_(AVCompositionTrack track) {
    _objc_msgSend_1212(this.pointer, _sel_removeTrack_, track.pointer);
  }

  /// mutableTrackCompatibleWithTrack:
  AVMutableCompositionTrack? mutableTrackCompatibleWithTrack_(
      AVAssetTrack track) {
    final _ret = _objc_msgSend_1213(
        this.pointer, _sel_mutableTrackCompatibleWithTrack_, track.pointer);
    return _ret.address == 0
        ? null
        : AVMutableCompositionTrack.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// trackWithTrackID:
  AVMutableCompositionTrack? trackWithTrackID_(int trackID) {
    final _ret =
        _objc_msgSend_1214(this.pointer, _sel_trackWithTrackID_, trackID);
    return _ret.address == 0
        ? null
        : AVMutableCompositionTrack.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// loadTrackWithTrackID:completionHandler:
  void loadTrackWithTrackID_completionHandler_(
      int trackID,
      objc.ObjCBlock<
              ffi.Void Function(
                  AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_1215(
        this.pointer,
        _sel_loadTrackWithTrackID_completionHandler_,
        trackID,
        completionHandler.pointer);
  }

  /// tracksWithMediaType:
  objc.NSArray tracksWithMediaType_(objc.NSString mediaType) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_tracksWithMediaType_, mediaType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaType:completionHandler:
  void loadTracksWithMediaType_completionHandler_(
      objc.NSString mediaType,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaType_completionHandler_,
        mediaType.pointer,
        completionHandler.pointer);
  }

  /// tracksWithMediaCharacteristic:
  objc.NSArray tracksWithMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_390(this.pointer,
        _sel_tracksWithMediaCharacteristic_, mediaCharacteristic.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaCharacteristic:completionHandler:
  void loadTracksWithMediaCharacteristic_completionHandler_(
      objc.NSString mediaCharacteristic,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaCharacteristic_completionHandler_,
        mediaCharacteristic.pointer,
        completionHandler.pointer);
  }

  /// assetWithURL:
  static AVMutableComposition assetWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_332(
        _class_AVMutableComposition, _sel_assetWithURL_, URL.pointer);
    return AVMutableComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  AVMutableComposition init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMutableComposition.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMutableComposition new1() {
    final _ret = _objc_msgSend_19(_class_AVMutableComposition, _sel_new);
    return AVMutableComposition.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVMutableComposition allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVMutableComposition, _sel_allocWithZone_, zone);
    return AVMutableComposition.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMutableComposition alloc() {
    final _ret = _objc_msgSend_19(_class_AVMutableComposition, _sel_alloc);
    return AVMutableComposition.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMutableComposition,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMutableComposition,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMutableComposition, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVMutableComposition, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMutableComposition,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMutableComposition,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMutableComposition,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMutableComposition, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVMutableComposition, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMutableComposition = objc.getClass("AVMutableComposition");
late final _sel_composition = objc.registerName("composition");
late final _sel_compositionWithURLAssetInitializationOptions_ =
    objc.registerName("compositionWithURLAssetInitializationOptions:");
late final _sel_insertTimeRange_ofAsset_atTime_error_ =
    objc.registerName("insertTimeRange:ofAsset:atTime:error:");
final _objc_msgSend_1209 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTimeRange,
                ffi.Pointer<objc.ObjCObject>,
                CMTime,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTimeRange,
            ffi.Pointer<objc.ObjCObject>,
            CMTime,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_insertTimeRange_ofAsset_atTime_completionHandler_ =
    objc.registerName("insertTimeRange:ofAsset:atTime:completionHandler:");
final _objc_msgSend_1210 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTimeRange,
                ffi.Pointer<objc.ObjCObject>,
                CMTime,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTimeRange,
            ffi.Pointer<objc.ObjCObject>,
            CMTime,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_addMutableTrackWithMediaType_preferredTrackID_ =
    objc.registerName("addMutableTrackWithMediaType:preferredTrackID:");
final _objc_msgSend_1211 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_removeTrack_ = objc.registerName("removeTrack:");
final _objc_msgSend_1212 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_mutableTrackCompatibleWithTrack_ =
    objc.registerName("mutableTrackCompatibleWithTrack:");
final _objc_msgSend_1213 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1214 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
void _ObjCBlock_ffiVoid_AVMutableCompositionTrack_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVMutableCompositionTrack_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVMutableCompositionTrack_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVMutableCompositionTrack_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVMutableCompositionTrack, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_AVMutableCompositionTrack_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(AVMutableCompositionTrack.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(AVMutableCompositionTrack, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVMutableCompositionTrack_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            AVMutableCompositionTrack.castFromPointer(arg0,
                retain: false, release: true),
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVMutableCompositionTrack_NSError(
            raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVMutableCompositionTrack_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            AVMutableCompositionTrack, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVMutableCompositionTrack arg0, objc.NSError? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1?.pointer ?? ffi.nullptr);
}

final _objc_msgSend_1215 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVMutableMetadataItem
class AVMutableMetadataItem extends AVMetadataItem {
  AVMutableMetadataItem._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMutableMetadataItem] that points to the same underlying object as [other].
  AVMutableMetadataItem.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMutableMetadataItem] that wraps the given raw object pointer.
  AVMutableMetadataItem.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMutableMetadataItem].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMutableMetadataItem);
  }

  /// identifier
  objc.NSString? get identifier {
    final _ret = _objc_msgSend_20(this.pointer, _sel_identifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setIdentifier:
  set identifier(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setIdentifier_, value?.pointer ?? ffi.nullptr);
  }

  /// extendedLanguageTag
  objc.NSString? get extendedLanguageTag {
    final _ret = _objc_msgSend_20(this.pointer, _sel_extendedLanguageTag);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setExtendedLanguageTag:
  set extendedLanguageTag(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setExtendedLanguageTag_,
        value?.pointer ?? ffi.nullptr);
  }

  /// locale
  objc.NSLocale? get locale {
    final _ret = _objc_msgSend_133(this.pointer, _sel_locale);
    return _ret.address == 0
        ? null
        : objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLocale:
  set locale(objc.NSLocale? value) {
    return _objc_msgSend_134(
        this.pointer, _sel_setLocale_, value?.pointer ?? ffi.nullptr);
  }

  /// time
  void getTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_time)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_time);
  }

  /// setTime:
  set time(CMTime value) {
    return _objc_msgSend_1026(this.pointer, _sel_setTime_, value);
  }

  /// duration
  void getDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_duration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_duration);
  }

  /// setDuration:
  set duration(CMTime value) {
    return _objc_msgSend_1026(this.pointer, _sel_setDuration_, value);
  }

  /// dataType
  objc.NSString? get dataType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_dataType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDataType:
  set dataType(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setDataType_, value?.pointer ?? ffi.nullptr);
  }

  /// value
  objc.ObjCObjectBase? get value {
    final _ret = _objc_msgSend_85(this.pointer, _sel_value);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setValue:
  set value(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setValue_, value?.pointer ?? ffi.nullptr);
  }

  /// extraAttributes
  objc.NSDictionary? get extraAttributes {
    final _ret = _objc_msgSend_84(this.pointer, _sel_extraAttributes);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setExtraAttributes:
  set extraAttributes(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer, _sel_setExtraAttributes_, value?.pointer ?? ffi.nullptr);
  }

  /// metadataItem
  static AVMutableMetadataItem metadataItem() {
    final _ret =
        _objc_msgSend_1216(_class_AVMutableMetadataItem, _sel_metadataItem);
    return AVMutableMetadataItem.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// startDate
  objc.NSDate? get startDate {
    final _ret = _objc_msgSend_126(this.pointer, _sel_startDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setStartDate:
  set startDate(objc.NSDate? value) {
    return _objc_msgSend_172(
        this.pointer, _sel_setStartDate_, value?.pointer ?? ffi.nullptr);
  }

  /// keySpace
  objc.NSString? get keySpace {
    final _ret = _objc_msgSend_20(this.pointer, _sel_keySpace);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setKeySpace:
  set keySpace(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setKeySpace_, value?.pointer ?? ffi.nullptr);
  }

  /// key
  objc.ObjCObjectBase? get key {
    final _ret = _objc_msgSend_85(this.pointer, _sel_key);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setKey:
  set key(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setKey_, value?.pointer ?? ffi.nullptr);
  }

  /// metadataItemsFromArray:filteredAndSortedAccordingToPreferredLanguages:
  static objc.NSArray
      metadataItemsFromArray_filteredAndSortedAccordingToPreferredLanguages_(
          objc.NSArray metadataItems, objc.NSArray preferredLanguages) {
    final _ret = _objc_msgSend_742(
        _class_AVMutableMetadataItem,
        _sel_metadataItemsFromArray_filteredAndSortedAccordingToPreferredLanguages_,
        metadataItems.pointer,
        preferredLanguages.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataItemsFromArray:filteredByIdentifier:
  static objc.NSArray metadataItemsFromArray_filteredByIdentifier_(
      objc.NSArray metadataItems, objc.NSString identifier) {
    final _ret = _objc_msgSend_743(
        _class_AVMutableMetadataItem,
        _sel_metadataItemsFromArray_filteredByIdentifier_,
        metadataItems.pointer,
        identifier.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataItemsFromArray:filteredByMetadataItemFilter:
  static objc.NSArray metadataItemsFromArray_filteredByMetadataItemFilter_(
      objc.NSArray metadataItems, AVMetadataItemFilter metadataItemFilter) {
    final _ret = _objc_msgSend_745(
        _class_AVMutableMetadataItem,
        _sel_metadataItemsFromArray_filteredByMetadataItemFilter_,
        metadataItems.pointer,
        metadataItemFilter.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// identifierForKey:keySpace:
  static objc.NSString? identifierForKey_keySpace_(
      objc.ObjCObjectBase key, objc.NSString keySpace) {
    final _ret = _objc_msgSend_746(_class_AVMutableMetadataItem,
        _sel_identifierForKey_keySpace_, key.pointer, keySpace.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// keySpaceForIdentifier:
  static objc.NSString? keySpaceForIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_42(_class_AVMutableMetadataItem,
        _sel_keySpaceForIdentifier_, identifier.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// keyForIdentifier:
  static objc.ObjCObjectBase? keyForIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_35(_class_AVMutableMetadataItem,
        _sel_keyForIdentifier_, identifier.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// metadataItemWithPropertiesOfMetadataItem:valueLoadingHandler:
  static AVMetadataItem
      metadataItemWithPropertiesOfMetadataItem_valueLoadingHandler_(
          AVMetadataItem metadataItem,
          objc.ObjCBlock<ffi.Void Function(AVMetadataItemValueRequest)>
              handler) {
    final _ret = _objc_msgSend_748(
        _class_AVMutableMetadataItem,
        _sel_metadataItemWithPropertiesOfMetadataItem_valueLoadingHandler_,
        metadataItem.pointer,
        handler.pointer);
    return AVMetadataItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataItemsFromArray:withLocale:
  static objc.NSArray metadataItemsFromArray_withLocale_(
      objc.NSArray metadataItems, objc.NSLocale locale) {
    final _ret = _objc_msgSend_749(
        _class_AVMutableMetadataItem,
        _sel_metadataItemsFromArray_withLocale_,
        metadataItems.pointer,
        locale.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataItemsFromArray:withKey:keySpace:
  static objc.NSArray metadataItemsFromArray_withKey_keySpace_(
      objc.NSArray metadataItems,
      objc.ObjCObjectBase? key,
      objc.NSString? keySpace) {
    final _ret = _objc_msgSend_750(
        _class_AVMutableMetadataItem,
        _sel_metadataItemsFromArray_withKey_keySpace_,
        metadataItems.pointer,
        key?.pointer ?? ffi.nullptr,
        keySpace?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVMutableMetadataItem init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMutableMetadataItem.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMutableMetadataItem new1() {
    final _ret = _objc_msgSend_19(_class_AVMutableMetadataItem, _sel_new);
    return AVMutableMetadataItem.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVMutableMetadataItem allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVMutableMetadataItem, _sel_allocWithZone_, zone);
    return AVMutableMetadataItem.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMutableMetadataItem alloc() {
    final _ret = _objc_msgSend_19(_class_AVMutableMetadataItem, _sel_alloc);
    return AVMutableMetadataItem.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMutableMetadataItem,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMutableMetadataItem,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMutableMetadataItem, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVMutableMetadataItem, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMutableMetadataItem,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMutableMetadataItem,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMutableMetadataItem,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMutableMetadataItem, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVMutableMetadataItem, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMutableMetadataItem =
    objc.getClass("AVMutableMetadataItem");
late final _sel_setIdentifier_ = objc.registerName("setIdentifier:");
late final _sel_setTime_ = objc.registerName("setTime:");
late final _sel_setDuration_ = objc.registerName("setDuration:");
late final _sel_setDataType_ = objc.registerName("setDataType:");
late final _sel_setExtraAttributes_ = objc.registerName("setExtraAttributes:");
final _objc_msgSend_1216 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setStartDate_ = objc.registerName("setStartDate:");
late final _sel_setKeySpace_ = objc.registerName("setKeySpace:");

/// AVMovieTrack
class AVMovieTrack extends AVAssetTrack {
  AVMovieTrack._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMovieTrack] that points to the same underlying object as [other].
  AVMovieTrack.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMovieTrack] that wraps the given raw object pointer.
  AVMovieTrack.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMovieTrack].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMovieTrack);
  }

  /// mediaPresentationTimeRange
  void getMediaPresentationTimeRange(ffi.Pointer<CMTimeRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_719Stret(
            stret, this.pointer, _sel_mediaPresentationTimeRange)
        : stret.ref =
            _objc_msgSend_719(this.pointer, _sel_mediaPresentationTimeRange);
  }

  /// mediaDecodeTimeRange
  void getMediaDecodeTimeRange(ffi.Pointer<CMTimeRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_719Stret(stret, this.pointer, _sel_mediaDecodeTimeRange)
        : stret.ref =
            _objc_msgSend_719(this.pointer, _sel_mediaDecodeTimeRange);
  }

  /// alternateGroupID
  int get alternateGroupID {
    return _objc_msgSend_125(this.pointer, _sel_alternateGroupID);
  }

  /// mediaDataStorage
  AVMediaDataStorage? get mediaDataStorage {
    final _ret = _objc_msgSend_1217(this.pointer, _sel_mediaDataStorage);
    return _ret.address == 0
        ? null
        : AVMediaDataStorage.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVMovieTrack init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMovieTrack.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVMovieTrack new1() {
    final _ret = _objc_msgSend_19(_class_AVMovieTrack, _sel_new);
    return AVMovieTrack.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVMovieTrack allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMovieTrack, _sel_allocWithZone_, zone);
    return AVMovieTrack.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVMovieTrack alloc() {
    final _ret = _objc_msgSend_19(_class_AVMovieTrack, _sel_alloc);
    return AVMovieTrack.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMovieTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMovieTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMovieTrack, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMovieTrack, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMovieTrack,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMovieTrack,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMovieTrack,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMovieTrack, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVMovieTrack, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMovieTrack = objc.getClass("AVMovieTrack");
late final _sel_mediaPresentationTimeRange =
    objc.registerName("mediaPresentationTimeRange");
late final _sel_mediaDecodeTimeRange =
    objc.registerName("mediaDecodeTimeRange");
late final _sel_alternateGroupID = objc.registerName("alternateGroupID");

/// AVMediaDataStorage
class AVMediaDataStorage extends objc.NSObject {
  AVMediaDataStorage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMediaDataStorage] that points to the same underlying object as [other].
  AVMediaDataStorage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMediaDataStorage] that wraps the given raw object pointer.
  AVMediaDataStorage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMediaDataStorage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMediaDataStorage);
  }

  /// init
  AVMediaDataStorage init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMediaDataStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMediaDataStorage new1() {
    final _ret = _objc_msgSend_19(_class_AVMediaDataStorage, _sel_new);
    return AVMediaDataStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithURL:options:
  AVMediaDataStorage initWithURL_options_(
      objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(this.pointer, _sel_initWithURL_options_,
        URL.pointer, options?.pointer ?? ffi.nullptr);
    return AVMediaDataStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// URL
  objc.NSURL? URL() {
    final _ret = _objc_msgSend_24(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVMediaDataStorage allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMediaDataStorage, _sel_allocWithZone_, zone);
    return AVMediaDataStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMediaDataStorage alloc() {
    final _ret = _objc_msgSend_19(_class_AVMediaDataStorage, _sel_alloc);
    return AVMediaDataStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMediaDataStorage,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMediaDataStorage,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMediaDataStorage, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMediaDataStorage, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMediaDataStorage,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMediaDataStorage,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMediaDataStorage,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMediaDataStorage, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVMediaDataStorage, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMediaDataStorage = objc.getClass("AVMediaDataStorage");
late final _sel_mediaDataStorage = objc.registerName("mediaDataStorage");
final _objc_msgSend_1217 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVMutableMovieTrack
class AVMutableMovieTrack extends AVMovieTrack {
  AVMutableMovieTrack._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMutableMovieTrack] that points to the same underlying object as [other].
  AVMutableMovieTrack.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMutableMovieTrack] that wraps the given raw object pointer.
  AVMutableMovieTrack.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMutableMovieTrack].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMutableMovieTrack);
  }

  /// mediaDataStorage
  AVMediaDataStorage? get mediaDataStorage {
    final _ret = _objc_msgSend_1217(this.pointer, _sel_mediaDataStorage);
    return _ret.address == 0
        ? null
        : AVMediaDataStorage.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMediaDataStorage:
  set mediaDataStorage(AVMediaDataStorage? value) {
    return _objc_msgSend_1218(
        this.pointer, _sel_setMediaDataStorage_, value?.pointer ?? ffi.nullptr);
  }

  /// sampleReferenceBaseURL
  objc.NSURL? get sampleReferenceBaseURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_sampleReferenceBaseURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSampleReferenceBaseURL:
  set sampleReferenceBaseURL(objc.NSURL? value) {
    return _objc_msgSend_25(this.pointer, _sel_setSampleReferenceBaseURL_,
        value?.pointer ?? ffi.nullptr);
  }

  /// isEnabled
  bool get enabled {
    return _objc_msgSend_13(this.pointer, _sel_isEnabled);
  }

  /// setEnabled:
  set enabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setEnabled_, value);
  }

  /// alternateGroupID
  int get alternateGroupID {
    return _objc_msgSend_125(this.pointer, _sel_alternateGroupID);
  }

  /// setAlternateGroupID:
  set alternateGroupID(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setAlternateGroupID_, value);
  }

  /// isModified
  bool get modified {
    return _objc_msgSend_13(this.pointer, _sel_isModified);
  }

  /// setModified:
  set modified(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setModified_, value);
  }

  /// hasProtectedContent
  bool get hasProtectedContent {
    return _objc_msgSend_13(this.pointer, _sel_hasProtectedContent);
  }

  /// timescale
  int get timescale {
    return _objc_msgSend_718(this.pointer, _sel_timescale);
  }

  /// setTimescale:
  set timescale(int value) {
    return _objc_msgSend_1027(this.pointer, _sel_setTimescale_, value);
  }

  /// languageCode
  objc.NSString? get languageCode {
    final _ret = _objc_msgSend_20(this.pointer, _sel_languageCode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLanguageCode:
  set languageCode(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setLanguageCode_, value?.pointer ?? ffi.nullptr);
  }

  /// extendedLanguageTag
  objc.NSString? get extendedLanguageTag {
    final _ret = _objc_msgSend_20(this.pointer, _sel_extendedLanguageTag);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setExtendedLanguageTag:
  set extendedLanguageTag(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setExtendedLanguageTag_,
        value?.pointer ?? ffi.nullptr);
  }

  /// naturalSize
  void getNaturalSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_naturalSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_naturalSize);
  }

  /// setNaturalSize:
  set naturalSize(CGSize value) {
    return _objc_msgSend_819(this.pointer, _sel_setNaturalSize_, value);
  }

  /// preferredTransform
  void getPreferredTransform(ffi.Pointer<CGAffineTransform> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_713Stret(stret, this.pointer, _sel_preferredTransform)
        : stret.ref = _objc_msgSend_713(this.pointer, _sel_preferredTransform);
  }

  /// setPreferredTransform:
  set preferredTransform(CGAffineTransform value) {
    return _objc_msgSend_1061(this.pointer, _sel_setPreferredTransform_, value);
  }

  /// layer
  int get layer {
    return _objc_msgSend_125(this.pointer, _sel_layer);
  }

  /// setLayer:
  set layer(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setLayer_, value);
  }

  /// cleanApertureDimensions
  void getCleanApertureDimensions(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(
            stret, this.pointer, _sel_cleanApertureDimensions)
        : stret.ref =
            _objc_msgSend_714(this.pointer, _sel_cleanApertureDimensions);
  }

  /// setCleanApertureDimensions:
  set cleanApertureDimensions(CGSize value) {
    return _objc_msgSend_819(
        this.pointer, _sel_setCleanApertureDimensions_, value);
  }

  /// productionApertureDimensions
  void getProductionApertureDimensions(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(
            stret, this.pointer, _sel_productionApertureDimensions)
        : stret.ref =
            _objc_msgSend_714(this.pointer, _sel_productionApertureDimensions);
  }

  /// setProductionApertureDimensions:
  set productionApertureDimensions(CGSize value) {
    return _objc_msgSend_819(
        this.pointer, _sel_setProductionApertureDimensions_, value);
  }

  /// encodedPixelsDimensions
  void getEncodedPixelsDimensions(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(
            stret, this.pointer, _sel_encodedPixelsDimensions)
        : stret.ref =
            _objc_msgSend_714(this.pointer, _sel_encodedPixelsDimensions);
  }

  /// setEncodedPixelsDimensions:
  set encodedPixelsDimensions(CGSize value) {
    return _objc_msgSend_819(
        this.pointer, _sel_setEncodedPixelsDimensions_, value);
  }

  /// preferredVolume
  double get preferredVolume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_preferredVolume)
        : _objc_msgSend_361(this.pointer, _sel_preferredVolume);
  }

  /// setPreferredVolume:
  set preferredVolume(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setPreferredVolume_, value);
  }

  /// preferredMediaChunkSize
  int get preferredMediaChunkSize {
    return _objc_msgSend_125(this.pointer, _sel_preferredMediaChunkSize);
  }

  /// setPreferredMediaChunkSize:
  set preferredMediaChunkSize(int value) {
    return _objc_msgSend_144(
        this.pointer, _sel_setPreferredMediaChunkSize_, value);
  }

  /// preferredMediaChunkDuration
  void getPreferredMediaChunkDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_preferredMediaChunkDuration)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_preferredMediaChunkDuration);
  }

  /// setPreferredMediaChunkDuration:
  set preferredMediaChunkDuration(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setPreferredMediaChunkDuration_, value);
  }

  /// preferredMediaChunkAlignment
  int get preferredMediaChunkAlignment {
    return _objc_msgSend_125(this.pointer, _sel_preferredMediaChunkAlignment);
  }

  /// setPreferredMediaChunkAlignment:
  set preferredMediaChunkAlignment(int value) {
    return _objc_msgSend_144(
        this.pointer, _sel_setPreferredMediaChunkAlignment_, value);
  }

  /// insertTimeRange:ofTrack:atTime:copySampleData:error:
  bool insertTimeRange_ofTrack_atTime_copySampleData_error_(
      CMTimeRange timeRange,
      AVAssetTrack track,
      CMTime startTime,
      bool copySampleData,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1219(
        this.pointer,
        _sel_insertTimeRange_ofTrack_atTime_copySampleData_error_,
        timeRange,
        track.pointer,
        startTime,
        copySampleData,
        outError);
  }

  /// insertEmptyTimeRange:
  void insertEmptyTimeRange_(CMTimeRange timeRange) {
    _objc_msgSend_1202(this.pointer, _sel_insertEmptyTimeRange_, timeRange);
  }

  /// removeTimeRange:
  void removeTimeRange_(CMTimeRange timeRange) {
    _objc_msgSend_1202(this.pointer, _sel_removeTimeRange_, timeRange);
  }

  /// scaleTimeRange:toDuration:
  void scaleTimeRange_toDuration_(CMTimeRange timeRange, CMTime duration) {
    _objc_msgSend_1203(
        this.pointer, _sel_scaleTimeRange_toDuration_, timeRange, duration);
  }

  /// metadata
  objc.NSArray get metadata {
    final _ret = _objc_msgSend_33(this.pointer, _sel_metadata);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMetadata:
  set metadata(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer, _sel_setMetadata_, value.pointer);
  }

  /// addTrackAssociationToTrack:type:
  void addTrackAssociationToTrack_type_(
      AVMovieTrack movieTrack, objc.NSString trackAssociationType) {
    _objc_msgSend_1220(this.pointer, _sel_addTrackAssociationToTrack_type_,
        movieTrack.pointer, trackAssociationType.pointer);
  }

  /// removeTrackAssociationToTrack:type:
  void removeTrackAssociationToTrack_type_(
      AVMovieTrack movieTrack, objc.NSString trackAssociationType) {
    _objc_msgSend_1220(this.pointer, _sel_removeTrackAssociationToTrack_type_,
        movieTrack.pointer, trackAssociationType.pointer);
  }

  /// replaceFormatDescription:withFormatDescription:
  void replaceFormatDescription_withFormatDescription_(
      ffi.Pointer<opaqueCMFormatDescription> formatDescription,
      ffi.Pointer<opaqueCMFormatDescription> newFormatDescription) {
    _objc_msgSend_1206(
        this.pointer,
        _sel_replaceFormatDescription_withFormatDescription_,
        formatDescription,
        newFormatDescription);
  }

  /// appendSampleBuffer:decodeTime:presentationTime:error:
  bool appendSampleBuffer_decodeTime_presentationTime_error_(
      ffi.Pointer<opaqueCMSampleBuffer> sampleBuffer,
      ffi.Pointer<CMTime> outDecodeTime,
      ffi.Pointer<CMTime> outPresentationTime,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1221(
        this.pointer,
        _sel_appendSampleBuffer_decodeTime_presentationTime_error_,
        sampleBuffer,
        outDecodeTime,
        outPresentationTime,
        outError);
  }

  /// insertMediaTimeRange:intoTimeRange:
  bool insertMediaTimeRange_intoTimeRange_(
      CMTimeRange mediaTimeRange, CMTimeRange trackTimeRange) {
    return _objc_msgSend_1222(
        this.pointer,
        _sel_insertMediaTimeRange_intoTimeRange_,
        mediaTimeRange,
        trackTimeRange);
  }

  /// hasMediaCharacteristic:
  bool hasMediaCharacteristic_(objc.NSString mediaCharacteristic) {
    return _objc_msgSend_31(this.pointer, _sel_hasMediaCharacteristic_,
        mediaCharacteristic.pointer);
  }

  /// segmentForTrackTime:
  AVAssetTrackSegment? segmentForTrackTime_(CMTime trackTime) {
    final _ret =
        _objc_msgSend_721(this.pointer, _sel_segmentForTrackTime_, trackTime);
    return _ret.address == 0
        ? null
        : AVAssetTrackSegment.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// samplePresentationTimeForTrackTime:
  void samplePresentationTimeForTrackTime_(
      ffi.Pointer<CMTime> stret, CMTime trackTime) {
    objc.useMsgSendVariants
        ? _objc_msgSend_723Stret(stret, this.pointer,
            _sel_samplePresentationTimeForTrackTime_, trackTime)
        : stret.ref = _objc_msgSend_723(
            this.pointer, _sel_samplePresentationTimeForTrackTime_, trackTime);
  }

  /// metadataForFormat:
  objc.NSArray metadataForFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_metadataForFormat_, format.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// associatedTracksOfType:
  objc.NSArray associatedTracksOfType_(objc.NSString trackAssociationType) {
    final _ret = _objc_msgSend_390(this.pointer, _sel_associatedTracksOfType_,
        trackAssociationType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVMutableMovieTrack init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMutableMovieTrack.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMutableMovieTrack new1() {
    final _ret = _objc_msgSend_19(_class_AVMutableMovieTrack, _sel_new);
    return AVMutableMovieTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVMutableMovieTrack allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMutableMovieTrack, _sel_allocWithZone_, zone);
    return AVMutableMovieTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMutableMovieTrack alloc() {
    final _ret = _objc_msgSend_19(_class_AVMutableMovieTrack, _sel_alloc);
    return AVMutableMovieTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMutableMovieTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMutableMovieTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMutableMovieTrack, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMutableMovieTrack, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMutableMovieTrack,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMutableMovieTrack,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMutableMovieTrack,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMutableMovieTrack, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVMutableMovieTrack, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMutableMovieTrack = objc.getClass("AVMutableMovieTrack");
late final _sel_setMediaDataStorage_ =
    objc.registerName("setMediaDataStorage:");
final _objc_msgSend_1218 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setAlternateGroupID_ =
    objc.registerName("setAlternateGroupID:");
late final _sel_isModified = objc.registerName("isModified");
late final _sel_setModified_ = objc.registerName("setModified:");
late final _sel_timescale = objc.registerName("timescale");
late final _sel_setTimescale_ = objc.registerName("setTimescale:");
late final _sel_setLayer_ = objc.registerName("setLayer:");
late final _sel_cleanApertureDimensions =
    objc.registerName("cleanApertureDimensions");
late final _sel_setCleanApertureDimensions_ =
    objc.registerName("setCleanApertureDimensions:");
late final _sel_productionApertureDimensions =
    objc.registerName("productionApertureDimensions");
late final _sel_setProductionApertureDimensions_ =
    objc.registerName("setProductionApertureDimensions:");
late final _sel_encodedPixelsDimensions =
    objc.registerName("encodedPixelsDimensions");
late final _sel_setEncodedPixelsDimensions_ =
    objc.registerName("setEncodedPixelsDimensions:");
late final _sel_preferredMediaChunkSize =
    objc.registerName("preferredMediaChunkSize");
late final _sel_setPreferredMediaChunkSize_ =
    objc.registerName("setPreferredMediaChunkSize:");
late final _sel_insertTimeRange_ofTrack_atTime_copySampleData_error_ =
    objc.registerName("insertTimeRange:ofTrack:atTime:copySampleData:error:");
final _objc_msgSend_1219 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTimeRange,
                ffi.Pointer<objc.ObjCObject>,
                CMTime,
                ffi.Bool,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTimeRange,
            ffi.Pointer<objc.ObjCObject>,
            CMTime,
            bool,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
final _objc_msgSend_1220 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_appendSampleBuffer_decodeTime_presentationTime_error_ =
    objc.registerName("appendSampleBuffer:decodeTime:presentationTime:error:");
final _objc_msgSend_1221 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<opaqueCMSampleBuffer>,
                ffi.Pointer<CMTime>,
                ffi.Pointer<CMTime>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<opaqueCMSampleBuffer>,
            ffi.Pointer<CMTime>,
            ffi.Pointer<CMTime>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_insertMediaTimeRange_intoTimeRange_ =
    objc.registerName("insertMediaTimeRange:intoTimeRange:");
final _objc_msgSend_1222 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTimeRange, CMTimeRange)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTimeRange, CMTimeRange)>();

/// AVMovie
class AVMovie extends AVAsset {
  AVMovie._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMovie] that points to the same underlying object as [other].
  AVMovie.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMovie] that wraps the given raw object pointer.
  AVMovie.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMovie].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_AVMovie);
  }

  /// movieTypes
  static objc.NSArray movieTypes() {
    final _ret = _objc_msgSend_33(_class_AVMovie, _sel_movieTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// movieWithURL:options:
  static AVMovie movieWithURL_options_(
      objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(_class_AVMovie, _sel_movieWithURL_options_,
        URL.pointer, options?.pointer ?? ffi.nullptr);
    return AVMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:options:
  AVMovie initWithURL_options_(objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(this.pointer, _sel_initWithURL_options_,
        URL.pointer, options?.pointer ?? ffi.nullptr);
    return AVMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// movieWithData:options:
  static AVMovie movieWithData_options_(
      objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_1223(_class_AVMovie, _sel_movieWithData_options_,
        data.pointer, options?.pointer ?? ffi.nullptr);
    return AVMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:options:
  AVMovie initWithData_options_(objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_1223(this.pointer, _sel_initWithData_options_,
        data.pointer, options?.pointer ?? ffi.nullptr);
    return AVMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// URL
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// data
  objc.NSData? get data {
    final _ret = _objc_msgSend_337(this.pointer, _sel_data);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultMediaDataStorage
  AVMediaDataStorage? get defaultMediaDataStorage {
    final _ret = _objc_msgSend_1217(this.pointer, _sel_defaultMediaDataStorage);
    return _ret.address == 0
        ? null
        : AVMediaDataStorage.castFromPointer(_ret, retain: true, release: true);
  }

  /// tracks
  objc.NSArray get tracks {
    final _ret = _objc_msgSend_33(this.pointer, _sel_tracks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// canContainMovieFragments
  bool get canContainMovieFragments {
    return _objc_msgSend_13(this.pointer, _sel_canContainMovieFragments);
  }

  /// containsMovieFragments
  bool get containsMovieFragments {
    return _objc_msgSend_13(this.pointer, _sel_containsMovieFragments);
  }

  /// movieHeaderWithFileType:error:
  objc.NSData? movieHeaderWithFileType_error_(objc.NSString fileType,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1224(this.pointer,
        _sel_movieHeaderWithFileType_error_, fileType.pointer, outError);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// writeMovieHeaderToURL:fileType:options:error:
  bool writeMovieHeaderToURL_fileType_options_error_(
      objc.NSURL URL,
      objc.NSString fileType,
      AVMovieWritingOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1225(
        this.pointer,
        _sel_writeMovieHeaderToURL_fileType_options_error_,
        URL.pointer,
        fileType.pointer,
        options.value,
        outError);
  }

  /// isCompatibleWithFileType:
  bool isCompatibleWithFileType_(objc.NSString fileType) {
    return _objc_msgSend_31(
        this.pointer, _sel_isCompatibleWithFileType_, fileType.pointer);
  }

  /// trackWithTrackID:
  AVMovieTrack? trackWithTrackID_(int trackID) {
    final _ret =
        _objc_msgSend_1226(this.pointer, _sel_trackWithTrackID_, trackID);
    return _ret.address == 0
        ? null
        : AVMovieTrack.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTrackWithTrackID:completionHandler:
  void loadTrackWithTrackID_completionHandler_(
      int trackID,
      objc.ObjCBlock<
              ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_1227(
        this.pointer,
        _sel_loadTrackWithTrackID_completionHandler_,
        trackID,
        completionHandler.pointer);
  }

  /// tracksWithMediaType:
  objc.NSArray tracksWithMediaType_(objc.NSString mediaType) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_tracksWithMediaType_, mediaType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaType:completionHandler:
  void loadTracksWithMediaType_completionHandler_(
      objc.NSString mediaType,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaType_completionHandler_,
        mediaType.pointer,
        completionHandler.pointer);
  }

  /// tracksWithMediaCharacteristic:
  objc.NSArray tracksWithMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_390(this.pointer,
        _sel_tracksWithMediaCharacteristic_, mediaCharacteristic.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaCharacteristic:completionHandler:
  void loadTracksWithMediaCharacteristic_completionHandler_(
      objc.NSString mediaCharacteristic,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaCharacteristic_completionHandler_,
        mediaCharacteristic.pointer,
        completionHandler.pointer);
  }

  /// assetWithURL:
  static AVMovie assetWithURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_332(_class_AVMovie, _sel_assetWithURL_, URL.pointer);
    return AVMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVMovie init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVMovie new1() {
    final _ret = _objc_msgSend_19(_class_AVMovie, _sel_new);
    return AVMovie.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVMovie allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_AVMovie, _sel_allocWithZone_, zone);
    return AVMovie.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVMovie alloc() {
    final _ret = _objc_msgSend_19(_class_AVMovie, _sel_alloc);
    return AVMovie.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMovie,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMovie,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMovie, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMovie, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMovie,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMovie,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMovie,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_AVMovie, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_AVMovie, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMovie = objc.getClass("AVMovie");
late final _sel_movieTypes = objc.registerName("movieTypes");
late final _sel_movieWithURL_options_ =
    objc.registerName("movieWithURL:options:");
late final _sel_movieWithData_options_ =
    objc.registerName("movieWithData:options:");
final _objc_msgSend_1223 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_defaultMediaDataStorage =
    objc.registerName("defaultMediaDataStorage");
late final _sel_canContainMovieFragments =
    objc.registerName("canContainMovieFragments");
late final _sel_containsMovieFragments =
    objc.registerName("containsMovieFragments");
late final _sel_movieHeaderWithFileType_error_ =
    objc.registerName("movieHeaderWithFileType:error:");
final _objc_msgSend_1224 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

enum AVMovieWritingOptions {
  AVMovieWritingAddMovieHeaderToDestination(0),
  AVMovieWritingTruncateDestinationToMovieHeaderOnly(1);

  final int value;
  const AVMovieWritingOptions(this.value);

  static AVMovieWritingOptions fromValue(int value) => switch (value) {
        0 => AVMovieWritingAddMovieHeaderToDestination,
        1 => AVMovieWritingTruncateDestinationToMovieHeaderOnly,
        _ => throw ArgumentError(
            "Unknown value for AVMovieWritingOptions: $value"),
      };
}

late final _sel_writeMovieHeaderToURL_fileType_options_error_ =
    objc.registerName("writeMovieHeaderToURL:fileType:options:error:");
final _objc_msgSend_1225 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isCompatibleWithFileType_ =
    objc.registerName("isCompatibleWithFileType:");
final _objc_msgSend_1226 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
void _ObjCBlock_ffiVoid_AVMovieTrack_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVMovieTrack_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVMovieTrack_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      AVMovieTrack, ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc
      .ObjCBlock<ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVMovieTrack_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVMovieTrack, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_AVMovieTrack_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  AVMovieTrack.castFromPointer(arg0, retain: true, release: true),
                  arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc
      .ObjCBlock<ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(AVMovieTrack, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVMovieTrack_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            AVMovieTrack.castFromPointer(arg0, retain: false, release: true),
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1,
                    retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVMovieTrack_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVMovieTrack_NSError_CallExtension on objc
    .ObjCBlock<ffi.Void Function(AVMovieTrack, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVMovieTrack arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1?.pointer ?? ffi.nullptr);
}

final _objc_msgSend_1227 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVMutableMovie
class AVMutableMovie extends AVMovie {
  AVMutableMovie._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMutableMovie] that points to the same underlying object as [other].
  AVMutableMovie.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMutableMovie] that wraps the given raw object pointer.
  AVMutableMovie.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMutableMovie].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMutableMovie);
  }

  /// movieWithURL:options:error:
  static AVMutableMovie? movieWithURL_options_error_(
      objc.NSURL URL,
      objc.NSDictionary? options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_635(
        _class_AVMutableMovie,
        _sel_movieWithURL_options_error_,
        URL.pointer,
        options?.pointer ?? ffi.nullptr,
        outError);
    return _ret.address == 0
        ? null
        : AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:options:error:
  AVMutableMovie? initWithURL_options_error_(
      objc.NSURL URL,
      objc.NSDictionary? options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_635(
        this.pointer,
        _sel_initWithURL_options_error_,
        URL.pointer,
        options?.pointer ?? ffi.nullptr,
        outError);
    return _ret.address == 0
        ? null
        : AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// movieWithData:options:error:
  static AVMutableMovie? movieWithData_options_error_(
      objc.NSData data,
      objc.NSDictionary? options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_633(
        _class_AVMutableMovie,
        _sel_movieWithData_options_error_,
        data.pointer,
        options?.pointer ?? ffi.nullptr,
        outError);
    return _ret.address == 0
        ? null
        : AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:options:error:
  AVMutableMovie? initWithData_options_error_(
      objc.NSData data,
      objc.NSDictionary? options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_633(
        this.pointer,
        _sel_initWithData_options_error_,
        data.pointer,
        options?.pointer ?? ffi.nullptr,
        outError);
    return _ret.address == 0
        ? null
        : AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// movieWithSettingsFromMovie:options:error:
  static AVMutableMovie? movieWithSettingsFromMovie_options_error_(
      AVMovie? movie,
      objc.NSDictionary? options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1228(
        _class_AVMutableMovie,
        _sel_movieWithSettingsFromMovie_options_error_,
        movie?.pointer ?? ffi.nullptr,
        options?.pointer ?? ffi.nullptr,
        outError);
    return _ret.address == 0
        ? null
        : AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithSettingsFromMovie:options:error:
  AVMutableMovie? initWithSettingsFromMovie_options_error_(
      AVMovie? movie,
      objc.NSDictionary? options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1228(
        this.pointer,
        _sel_initWithSettingsFromMovie_options_error_,
        movie?.pointer ?? ffi.nullptr,
        options?.pointer ?? ffi.nullptr,
        outError);
    return _ret.address == 0
        ? null
        : AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredRate
  double get preferredRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_preferredRate)
        : _objc_msgSend_361(this.pointer, _sel_preferredRate);
  }

  /// setPreferredRate:
  set preferredRate(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setPreferredRate_, value);
  }

  /// preferredVolume
  double get preferredVolume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_preferredVolume)
        : _objc_msgSend_361(this.pointer, _sel_preferredVolume);
  }

  /// setPreferredVolume:
  set preferredVolume(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setPreferredVolume_, value);
  }

  /// preferredTransform
  void getPreferredTransform(ffi.Pointer<CGAffineTransform> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_713Stret(stret, this.pointer, _sel_preferredTransform)
        : stret.ref = _objc_msgSend_713(this.pointer, _sel_preferredTransform);
  }

  /// setPreferredTransform:
  set preferredTransform(CGAffineTransform value) {
    return _objc_msgSend_1061(this.pointer, _sel_setPreferredTransform_, value);
  }

  /// timescale
  int get timescale {
    return _objc_msgSend_718(this.pointer, _sel_timescale);
  }

  /// setTimescale:
  set timescale(int value) {
    return _objc_msgSend_1027(this.pointer, _sel_setTimescale_, value);
  }

  /// tracks
  objc.NSArray get tracks {
    final _ret = _objc_msgSend_33(this.pointer, _sel_tracks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isModified
  bool get modified {
    return _objc_msgSend_13(this.pointer, _sel_isModified);
  }

  /// setModified:
  set modified(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setModified_, value);
  }

  /// defaultMediaDataStorage
  AVMediaDataStorage? get defaultMediaDataStorage {
    final _ret = _objc_msgSend_1217(this.pointer, _sel_defaultMediaDataStorage);
    return _ret.address == 0
        ? null
        : AVMediaDataStorage.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDefaultMediaDataStorage:
  set defaultMediaDataStorage(AVMediaDataStorage? value) {
    return _objc_msgSend_1218(this.pointer, _sel_setDefaultMediaDataStorage_,
        value?.pointer ?? ffi.nullptr);
  }

  /// interleavingPeriod
  void getInterleavingPeriod(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_interleavingPeriod)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_interleavingPeriod);
  }

  /// setInterleavingPeriod:
  set interleavingPeriod(CMTime value) {
    return _objc_msgSend_1026(this.pointer, _sel_setInterleavingPeriod_, value);
  }

  /// insertTimeRange:ofAsset:atTime:copySampleData:error:
  bool insertTimeRange_ofAsset_atTime_copySampleData_error_(
      CMTimeRange timeRange,
      AVAsset asset,
      CMTime startTime,
      bool copySampleData,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1229(
        this.pointer,
        _sel_insertTimeRange_ofAsset_atTime_copySampleData_error_,
        timeRange,
        asset.pointer,
        startTime,
        copySampleData,
        outError);
  }

  /// insertEmptyTimeRange:
  void insertEmptyTimeRange_(CMTimeRange timeRange) {
    _objc_msgSend_1202(this.pointer, _sel_insertEmptyTimeRange_, timeRange);
  }

  /// removeTimeRange:
  void removeTimeRange_(CMTimeRange timeRange) {
    _objc_msgSend_1202(this.pointer, _sel_removeTimeRange_, timeRange);
  }

  /// scaleTimeRange:toDuration:
  void scaleTimeRange_toDuration_(CMTimeRange timeRange, CMTime duration) {
    _objc_msgSend_1203(
        this.pointer, _sel_scaleTimeRange_toDuration_, timeRange, duration);
  }

  /// mutableTrackCompatibleWithTrack:
  AVMutableMovieTrack? mutableTrackCompatibleWithTrack_(AVAssetTrack track) {
    final _ret = _objc_msgSend_1230(
        this.pointer, _sel_mutableTrackCompatibleWithTrack_, track.pointer);
    return _ret.address == 0
        ? null
        : AVMutableMovieTrack.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// addMutableTrackWithMediaType:copySettingsFromTrack:options:
  AVMutableMovieTrack?
      addMutableTrackWithMediaType_copySettingsFromTrack_options_(
          objc.NSString mediaType,
          AVAssetTrack? track,
          objc.NSDictionary? options) {
    final _ret = _objc_msgSend_1231(
        this.pointer,
        _sel_addMutableTrackWithMediaType_copySettingsFromTrack_options_,
        mediaType.pointer,
        track?.pointer ?? ffi.nullptr,
        options?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : AVMutableMovieTrack.castFromPointer(_ret,
            retain: false, release: true);
  }

  /// addMutableTracksCopyingSettingsFromTracks:options:
  objc.NSArray addMutableTracksCopyingSettingsFromTracks_options_(
      objc.NSArray existingTracks, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_1232(
        this.pointer,
        _sel_addMutableTracksCopyingSettingsFromTracks_options_,
        existingTracks.pointer,
        options?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: false, release: true);
  }

  /// removeTrack:
  void removeTrack_(AVMovieTrack track) {
    _objc_msgSend_1233(this.pointer, _sel_removeTrack_, track.pointer);
  }

  /// metadata
  objc.NSArray get metadata {
    final _ret = _objc_msgSend_33(this.pointer, _sel_metadata);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMetadata:
  set metadata(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer, _sel_setMetadata_, value.pointer);
  }

  /// trackWithTrackID:
  AVMutableMovieTrack? trackWithTrackID_(int trackID) {
    final _ret =
        _objc_msgSend_1234(this.pointer, _sel_trackWithTrackID_, trackID);
    return _ret.address == 0
        ? null
        : AVMutableMovieTrack.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// loadTrackWithTrackID:completionHandler:
  void loadTrackWithTrackID_completionHandler_(
      int trackID,
      objc.ObjCBlock<
              ffi.Void Function(
                  AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_1235(
        this.pointer,
        _sel_loadTrackWithTrackID_completionHandler_,
        trackID,
        completionHandler.pointer);
  }

  /// tracksWithMediaType:
  objc.NSArray tracksWithMediaType_(objc.NSString mediaType) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_tracksWithMediaType_, mediaType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaType:completionHandler:
  void loadTracksWithMediaType_completionHandler_(
      objc.NSString mediaType,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaType_completionHandler_,
        mediaType.pointer,
        completionHandler.pointer);
  }

  /// tracksWithMediaCharacteristic:
  objc.NSArray tracksWithMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_390(this.pointer,
        _sel_tracksWithMediaCharacteristic_, mediaCharacteristic.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaCharacteristic:completionHandler:
  void loadTracksWithMediaCharacteristic_completionHandler_(
      objc.NSString mediaCharacteristic,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaCharacteristic_completionHandler_,
        mediaCharacteristic.pointer,
        completionHandler.pointer);
  }

  /// metadataForFormat:
  objc.NSArray metadataForFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_metadataForFormat_, format.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:
  objc.NSArray
      chapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_(
          objc.NSLocale locale, objc.NSArray? commonKeys) {
    final _ret = _objc_msgSend_751(
        this.pointer,
        _sel_chapterMetadataGroupsWithTitleLocale_containingItemsWithCommonKeys_,
        locale.pointer,
        commonKeys?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// chapterMetadataGroupsBestMatchingPreferredLanguages:
  objc.NSArray chapterMetadataGroupsBestMatchingPreferredLanguages_(
      objc.NSArray preferredLanguages) {
    final _ret = _objc_msgSend_86(
        this.pointer,
        _sel_chapterMetadataGroupsBestMatchingPreferredLanguages_,
        preferredLanguages.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaSelectionGroupForMediaCharacteristic:
  AVMediaSelectionGroup? mediaSelectionGroupForMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_758(
        this.pointer,
        _sel_mediaSelectionGroupForMediaCharacteristic_,
        mediaCharacteristic.pointer);
    return _ret.address == 0
        ? null
        : AVMediaSelectionGroup.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// unusedTrackID
  int unusedTrackID() {
    return _objc_msgSend_718(this.pointer, _sel_unusedTrackID);
  }

  /// movieTypes
  static objc.NSArray movieTypes() {
    final _ret = _objc_msgSend_33(_class_AVMutableMovie, _sel_movieTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// movieWithURL:options:
  static AVMutableMovie movieWithURL_options_(
      objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(
        _class_AVMutableMovie,
        _sel_movieWithURL_options_,
        URL.pointer,
        options?.pointer ?? ffi.nullptr);
    return AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:options:
  AVMutableMovie initWithURL_options_(
      objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(this.pointer, _sel_initWithURL_options_,
        URL.pointer, options?.pointer ?? ffi.nullptr);
    return AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// movieWithData:options:
  static AVMutableMovie movieWithData_options_(
      objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_1223(
        _class_AVMutableMovie,
        _sel_movieWithData_options_,
        data.pointer,
        options?.pointer ?? ffi.nullptr);
    return AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:options:
  AVMutableMovie initWithData_options_(
      objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_1223(this.pointer, _sel_initWithData_options_,
        data.pointer, options?.pointer ?? ffi.nullptr);
    return AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// assetWithURL:
  static AVMutableMovie assetWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_332(
        _class_AVMutableMovie, _sel_assetWithURL_, URL.pointer);
    return AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVMutableMovie init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMutableMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVMutableMovie new1() {
    final _ret = _objc_msgSend_19(_class_AVMutableMovie, _sel_new);
    return AVMutableMovie.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVMutableMovie allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMutableMovie, _sel_allocWithZone_, zone);
    return AVMutableMovie.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVMutableMovie alloc() {
    final _ret = _objc_msgSend_19(_class_AVMutableMovie, _sel_alloc);
    return AVMutableMovie.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMutableMovie,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMutableMovie,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMutableMovie, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMutableMovie, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMutableMovie,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMutableMovie,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMutableMovie,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMutableMovie, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVMutableMovie, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMutableMovie = objc.getClass("AVMutableMovie");
late final _sel_movieWithURL_options_error_ =
    objc.registerName("movieWithURL:options:error:");
late final _sel_movieWithData_options_error_ =
    objc.registerName("movieWithData:options:error:");
late final _sel_movieWithSettingsFromMovie_options_error_ =
    objc.registerName("movieWithSettingsFromMovie:options:error:");
final _objc_msgSend_1228 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithSettingsFromMovie_options_error_ =
    objc.registerName("initWithSettingsFromMovie:options:error:");
late final _sel_setPreferredRate_ = objc.registerName("setPreferredRate:");
late final _sel_setDefaultMediaDataStorage_ =
    objc.registerName("setDefaultMediaDataStorage:");
late final _sel_interleavingPeriod = objc.registerName("interleavingPeriod");
late final _sel_setInterleavingPeriod_ =
    objc.registerName("setInterleavingPeriod:");
late final _sel_insertTimeRange_ofAsset_atTime_copySampleData_error_ =
    objc.registerName("insertTimeRange:ofAsset:atTime:copySampleData:error:");
final _objc_msgSend_1229 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTimeRange,
                ffi.Pointer<objc.ObjCObject>,
                CMTime,
                ffi.Bool,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTimeRange,
            ffi.Pointer<objc.ObjCObject>,
            CMTime,
            bool,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
final _objc_msgSend_1230 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addMutableTrackWithMediaType_copySettingsFromTrack_options_ =
    objc.registerName(
        "addMutableTrackWithMediaType:copySettingsFromTrack:options:");
final _objc_msgSend_1231 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addMutableTracksCopyingSettingsFromTracks_options_ =
    objc.registerName("addMutableTracksCopyingSettingsFromTracks:options:");
final _objc_msgSend_1232 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1233 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1234 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
void _ObjCBlock_ffiVoid_AVMutableMovieTrack_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVMutableMovieTrack_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVMutableMovieTrack_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVMutableMovieTrack_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVMutableMovieTrack, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_AVMutableMovieTrack_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  AVMutableMovieTrack.castFromPointer(arg0, retain: true, release: true),
                  arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(AVMutableMovieTrack, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVMutableMovieTrack_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            AVMutableMovieTrack.castFromPointer(arg0,
                retain: false, release: true),
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVMutableMovieTrack_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVMutableMovieTrack_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(AVMutableMovieTrack, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVMutableMovieTrack arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1?.pointer ?? ffi.nullptr);
}

final _objc_msgSend_1235 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVFragmentedMovie
class AVFragmentedMovie extends AVMovie {
  AVFragmentedMovie._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVFragmentedMovie] that points to the same underlying object as [other].
  AVFragmentedMovie.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVFragmentedMovie] that wraps the given raw object pointer.
  AVFragmentedMovie.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVFragmentedMovie].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVFragmentedMovie);
  }

  /// tracks
  objc.NSArray get tracks {
    final _ret = _objc_msgSend_33(this.pointer, _sel_tracks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// trackWithTrackID:
  AVFragmentedMovieTrack? trackWithTrackID_(int trackID) {
    final _ret =
        _objc_msgSend_1236(this.pointer, _sel_trackWithTrackID_, trackID);
    return _ret.address == 0
        ? null
        : AVFragmentedMovieTrack.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// loadTrackWithTrackID:completionHandler:
  void loadTrackWithTrackID_completionHandler_(
      int trackID,
      objc.ObjCBlock<
              ffi.Void Function(
                  AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_1237(
        this.pointer,
        _sel_loadTrackWithTrackID_completionHandler_,
        trackID,
        completionHandler.pointer);
  }

  /// tracksWithMediaType:
  objc.NSArray tracksWithMediaType_(objc.NSString mediaType) {
    final _ret = _objc_msgSend_390(
        this.pointer, _sel_tracksWithMediaType_, mediaType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaType:completionHandler:
  void loadTracksWithMediaType_completionHandler_(
      objc.NSString mediaType,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaType_completionHandler_,
        mediaType.pointer,
        completionHandler.pointer);
  }

  /// tracksWithMediaCharacteristic:
  objc.NSArray tracksWithMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_390(this.pointer,
        _sel_tracksWithMediaCharacteristic_, mediaCharacteristic.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadTracksWithMediaCharacteristic:completionHandler:
  void loadTracksWithMediaCharacteristic_completionHandler_(
      objc.NSString mediaCharacteristic,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_725(
        this.pointer,
        _sel_loadTracksWithMediaCharacteristic_completionHandler_,
        mediaCharacteristic.pointer,
        completionHandler.pointer);
  }

  /// movieTypes
  static objc.NSArray movieTypes() {
    final _ret = _objc_msgSend_33(_class_AVFragmentedMovie, _sel_movieTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// movieWithURL:options:
  static AVFragmentedMovie movieWithURL_options_(
      objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(
        _class_AVFragmentedMovie,
        _sel_movieWithURL_options_,
        URL.pointer,
        options?.pointer ?? ffi.nullptr);
    return AVFragmentedMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:options:
  AVFragmentedMovie initWithURL_options_(
      objc.NSURL URL, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_763(this.pointer, _sel_initWithURL_options_,
        URL.pointer, options?.pointer ?? ffi.nullptr);
    return AVFragmentedMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// movieWithData:options:
  static AVFragmentedMovie movieWithData_options_(
      objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_1223(
        _class_AVFragmentedMovie,
        _sel_movieWithData_options_,
        data.pointer,
        options?.pointer ?? ffi.nullptr);
    return AVFragmentedMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithData:options:
  AVFragmentedMovie initWithData_options_(
      objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_1223(this.pointer, _sel_initWithData_options_,
        data.pointer, options?.pointer ?? ffi.nullptr);
    return AVFragmentedMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// assetWithURL:
  static AVFragmentedMovie assetWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_332(
        _class_AVFragmentedMovie, _sel_assetWithURL_, URL.pointer);
    return AVFragmentedMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVFragmentedMovie init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVFragmentedMovie.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVFragmentedMovie new1() {
    final _ret = _objc_msgSend_19(_class_AVFragmentedMovie, _sel_new);
    return AVFragmentedMovie.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVFragmentedMovie allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVFragmentedMovie, _sel_allocWithZone_, zone);
    return AVFragmentedMovie.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVFragmentedMovie alloc() {
    final _ret = _objc_msgSend_19(_class_AVFragmentedMovie, _sel_alloc);
    return AVFragmentedMovie.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVFragmentedMovie,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVFragmentedMovie,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVFragmentedMovie, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVFragmentedMovie, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVFragmentedMovie,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVFragmentedMovie,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVFragmentedMovie,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVFragmentedMovie, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVFragmentedMovie, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVFragmentedMovie = objc.getClass("AVFragmentedMovie");

/// AVFragmentedMovieTrack
class AVFragmentedMovieTrack extends AVMovieTrack {
  AVFragmentedMovieTrack._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVFragmentedMovieTrack] that points to the same underlying object as [other].
  AVFragmentedMovieTrack.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVFragmentedMovieTrack] that wraps the given raw object pointer.
  AVFragmentedMovieTrack.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVFragmentedMovieTrack].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVFragmentedMovieTrack);
  }

  /// init
  AVFragmentedMovieTrack init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVFragmentedMovieTrack.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVFragmentedMovieTrack new1() {
    final _ret = _objc_msgSend_19(_class_AVFragmentedMovieTrack, _sel_new);
    return AVFragmentedMovieTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVFragmentedMovieTrack allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVFragmentedMovieTrack, _sel_allocWithZone_, zone);
    return AVFragmentedMovieTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVFragmentedMovieTrack alloc() {
    final _ret = _objc_msgSend_19(_class_AVFragmentedMovieTrack, _sel_alloc);
    return AVFragmentedMovieTrack.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVFragmentedMovieTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVFragmentedMovieTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVFragmentedMovieTrack, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVFragmentedMovieTrack, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVFragmentedMovieTrack,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVFragmentedMovieTrack,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVFragmentedMovieTrack,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVFragmentedMovieTrack, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVFragmentedMovieTrack, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVFragmentedMovieTrack =
    objc.getClass("AVFragmentedMovieTrack");
final _objc_msgSend_1236 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
void _ObjCBlock_ffiVoid_AVFragmentedMovieTrack_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVFragmentedMovieTrack_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVFragmentedMovieTrack_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVFragmentedMovieTrack_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVFragmentedMovieTrack, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_AVFragmentedMovieTrack_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(AVFragmentedMovieTrack.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(AVFragmentedMovieTrack, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVFragmentedMovieTrack_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            AVFragmentedMovieTrack.castFromPointer(arg0,
                retain: false, release: true),
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVFragmentedMovieTrack_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVFragmentedMovieTrack_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            AVFragmentedMovieTrack, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVFragmentedMovieTrack arg0, objc.NSError? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1?.pointer ?? ffi.nullptr);
}

final _objc_msgSend_1237 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVOutputSettingsAssistant
class AVOutputSettingsAssistant extends objc.NSObject {
  AVOutputSettingsAssistant._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVOutputSettingsAssistant] that points to the same underlying object as [other].
  AVOutputSettingsAssistant.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVOutputSettingsAssistant] that wraps the given raw object pointer.
  AVOutputSettingsAssistant.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVOutputSettingsAssistant].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVOutputSettingsAssistant);
  }

  /// init
  AVOutputSettingsAssistant init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVOutputSettingsAssistant.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVOutputSettingsAssistant new1() {
    final _ret = _objc_msgSend_19(_class_AVOutputSettingsAssistant, _sel_new);
    return AVOutputSettingsAssistant.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// availableOutputSettingsPresets
  static objc.NSArray availableOutputSettingsPresets() {
    final _ret = _objc_msgSend_33(
        _class_AVOutputSettingsAssistant, _sel_availableOutputSettingsPresets);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputSettingsAssistantWithPreset:
  static AVOutputSettingsAssistant? outputSettingsAssistantWithPreset_(
      objc.NSString presetIdentifier) {
    final _ret = _objc_msgSend_35(_class_AVOutputSettingsAssistant,
        _sel_outputSettingsAssistantWithPreset_, presetIdentifier.pointer);
    return _ret.address == 0
        ? null
        : AVOutputSettingsAssistant.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// audioSettings
  objc.NSDictionary? get audioSettings {
    final _ret = _objc_msgSend_84(this.pointer, _sel_audioSettings);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// videoSettings
  objc.NSDictionary? get videoSettings {
    final _ret = _objc_msgSend_84(this.pointer, _sel_videoSettings);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputFileType
  objc.NSString get outputFileType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_outputFileType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceAudioFormat
  ffi.Pointer<opaqueCMFormatDescription> get sourceAudioFormat {
    return _objc_msgSend_730(this.pointer, _sel_sourceAudioFormat);
  }

  /// setSourceAudioFormat:
  set sourceAudioFormat(ffi.Pointer<opaqueCMFormatDescription> value) {
    return _objc_msgSend_1238(this.pointer, _sel_setSourceAudioFormat_, value);
  }

  /// sourceVideoFormat
  ffi.Pointer<opaqueCMFormatDescription> get sourceVideoFormat {
    return _objc_msgSend_730(this.pointer, _sel_sourceVideoFormat);
  }

  /// setSourceVideoFormat:
  set sourceVideoFormat(ffi.Pointer<opaqueCMFormatDescription> value) {
    return _objc_msgSend_1238(this.pointer, _sel_setSourceVideoFormat_, value);
  }

  /// sourceVideoAverageFrameDuration
  void getSourceVideoAverageFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_sourceVideoAverageFrameDuration)
        : stret.ref = _objc_msgSend_712(
            this.pointer, _sel_sourceVideoAverageFrameDuration);
  }

  /// setSourceVideoAverageFrameDuration:
  set sourceVideoAverageFrameDuration(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setSourceVideoAverageFrameDuration_, value);
  }

  /// sourceVideoMinFrameDuration
  void getSourceVideoMinFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_sourceVideoMinFrameDuration)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_sourceVideoMinFrameDuration);
  }

  /// setSourceVideoMinFrameDuration:
  set sourceVideoMinFrameDuration(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setSourceVideoMinFrameDuration_, value);
  }

  /// allocWithZone:
  static AVOutputSettingsAssistant allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVOutputSettingsAssistant, _sel_allocWithZone_, zone);
    return AVOutputSettingsAssistant.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVOutputSettingsAssistant alloc() {
    final _ret = _objc_msgSend_19(_class_AVOutputSettingsAssistant, _sel_alloc);
    return AVOutputSettingsAssistant.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVOutputSettingsAssistant,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVOutputSettingsAssistant,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVOutputSettingsAssistant, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVOutputSettingsAssistant, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVOutputSettingsAssistant,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVOutputSettingsAssistant,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVOutputSettingsAssistant,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVOutputSettingsAssistant, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVOutputSettingsAssistant, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVOutputSettingsAssistant =
    objc.getClass("AVOutputSettingsAssistant");
late final _sel_availableOutputSettingsPresets =
    objc.registerName("availableOutputSettingsPresets");
late final _sel_outputSettingsAssistantWithPreset_ =
    objc.registerName("outputSettingsAssistantWithPreset:");
late final _sel_audioSettings = objc.registerName("audioSettings");
late final _sel_videoSettings = objc.registerName("videoSettings");
late final _sel_sourceAudioFormat = objc.registerName("sourceAudioFormat");
late final _sel_setSourceAudioFormat_ =
    objc.registerName("setSourceAudioFormat:");
final _objc_msgSend_1238 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<opaqueCMFormatDescription>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<opaqueCMFormatDescription>)>();
late final _sel_sourceVideoFormat = objc.registerName("sourceVideoFormat");
late final _sel_setSourceVideoFormat_ =
    objc.registerName("setSourceVideoFormat:");
late final _sel_sourceVideoAverageFrameDuration =
    objc.registerName("sourceVideoAverageFrameDuration");
late final _sel_setSourceVideoAverageFrameDuration_ =
    objc.registerName("setSourceVideoAverageFrameDuration:");
late final _sel_sourceVideoMinFrameDuration =
    objc.registerName("sourceVideoMinFrameDuration");
late final _sel_setSourceVideoMinFrameDuration_ =
    objc.registerName("setSourceVideoMinFrameDuration:");

/// AVPlayer
class AVPlayer extends objc.NSObject {
  AVPlayer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayer] that points to the same underlying object as [other].
  AVPlayer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayer] that wraps the given raw object pointer.
  AVPlayer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_AVPlayer);
  }

  /// playerWithURL:
  static AVPlayer playerWithURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_332(_class_AVPlayer, _sel_playerWithURL_, URL.pointer);
    return AVPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// playerWithPlayerItem:
  static AVPlayer playerWithPlayerItem_(AVPlayerItem? item) {
    final _ret = _objc_msgSend_1263(_class_AVPlayer, _sel_playerWithPlayerItem_,
        item?.pointer ?? ffi.nullptr);
    return AVPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:
  AVPlayer initWithURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_332(this.pointer, _sel_initWithURL_, URL.pointer);
    return AVPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithPlayerItem:
  AVPlayer initWithPlayerItem_(AVPlayerItem? item) {
    final _ret = _objc_msgSend_1263(
        this.pointer, _sel_initWithPlayerItem_, item?.pointer ?? ffi.nullptr);
    return AVPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// status
  AVPlayerStatus get status {
    final _ret = _objc_msgSend_1264(this.pointer, _sel_status);
    return AVPlayerStatus.fromValue(_ret);
  }

  /// error
  objc.NSError? get error {
    final _ret = _objc_msgSend_344(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// rate
  double get rate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_rate)
        : _objc_msgSend_361(this.pointer, _sel_rate);
  }

  /// setRate:
  set rate(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setRate_, value);
  }

  /// defaultRate
  double get defaultRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_defaultRate)
        : _objc_msgSend_361(this.pointer, _sel_defaultRate);
  }

  /// setDefaultRate:
  set defaultRate(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setDefaultRate_, value);
  }

  /// play
  void play() {
    _objc_msgSend_7(this.pointer, _sel_play);
  }

  /// pause
  void pause() {
    _objc_msgSend_7(this.pointer, _sel_pause);
  }

  /// timeControlStatus
  AVPlayerTimeControlStatus get timeControlStatus {
    final _ret = _objc_msgSend_1265(this.pointer, _sel_timeControlStatus);
    return AVPlayerTimeControlStatus.fromValue(_ret);
  }

  /// reasonForWaitingToPlay
  objc.NSString? get reasonForWaitingToPlay {
    final _ret = _objc_msgSend_20(this.pointer, _sel_reasonForWaitingToPlay);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// playImmediatelyAtRate:
  void playImmediatelyAtRate_(double rate) {
    _objc_msgSend_1266(this.pointer, _sel_playImmediatelyAtRate_, rate);
  }

  /// currentItem
  AVPlayerItem? get currentItem {
    final _ret = _objc_msgSend_1262(this.pointer, _sel_currentItem);
    return _ret.address == 0
        ? null
        : AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// replaceCurrentItemWithPlayerItem:
  void replaceCurrentItemWithPlayerItem_(AVPlayerItem? item) {
    _objc_msgSend_1267(this.pointer, _sel_replaceCurrentItemWithPlayerItem_,
        item?.pointer ?? ffi.nullptr);
  }

  /// actionAtItemEnd
  AVPlayerActionAtItemEnd get actionAtItemEnd {
    final _ret = _objc_msgSend_1268(this.pointer, _sel_actionAtItemEnd);
    return AVPlayerActionAtItemEnd.fromValue(_ret);
  }

  /// setActionAtItemEnd:
  set actionAtItemEnd(AVPlayerActionAtItemEnd value) {
    return _objc_msgSend_1269(
        this.pointer, _sel_setActionAtItemEnd_, value.value);
  }

  /// currentTime
  void currentTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_currentTime)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_currentTime);
  }

  /// seekToDate:
  void seekToDate_(objc.NSDate date) {
    _objc_msgSend_258(this.pointer, _sel_seekToDate_, date.pointer);
  }

  /// seekToDate:completionHandler:
  void seekToDate_completionHandler_(objc.NSDate date,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)> completionHandler) {
    _objc_msgSend_1270(this.pointer, _sel_seekToDate_completionHandler_,
        date.pointer, completionHandler.pointer);
  }

  /// seekToTime:
  void seekToTime_(CMTime time) {
    _objc_msgSend_1067(this.pointer, _sel_seekToTime_, time);
  }

  /// seekToTime:toleranceBefore:toleranceAfter:
  void seekToTime_toleranceBefore_toleranceAfter_(
      CMTime time, CMTime toleranceBefore, CMTime toleranceAfter) {
    _objc_msgSend_1259(
        this.pointer,
        _sel_seekToTime_toleranceBefore_toleranceAfter_,
        time,
        toleranceBefore,
        toleranceAfter);
  }

  /// seekToTime:completionHandler:
  void seekToTime_completionHandler_(CMTime time,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)> completionHandler) {
    _objc_msgSend_1271(this.pointer, _sel_seekToTime_completionHandler_, time,
        completionHandler.pointer);
  }

  /// seekToTime:toleranceBefore:toleranceAfter:completionHandler:
  void seekToTime_toleranceBefore_toleranceAfter_completionHandler_(
      CMTime time,
      CMTime toleranceBefore,
      CMTime toleranceAfter,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)> completionHandler) {
    _objc_msgSend_1272(
        this.pointer,
        _sel_seekToTime_toleranceBefore_toleranceAfter_completionHandler_,
        time,
        toleranceBefore,
        toleranceAfter,
        completionHandler.pointer);
  }

  /// automaticallyWaitsToMinimizeStalling
  bool get automaticallyWaitsToMinimizeStalling {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticallyWaitsToMinimizeStalling);
  }

  /// setAutomaticallyWaitsToMinimizeStalling:
  set automaticallyWaitsToMinimizeStalling(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutomaticallyWaitsToMinimizeStalling_, value);
  }

  /// setRate:time:atHostTime:
  void setRate_time_atHostTime_(
      double rate, CMTime itemTime, CMTime hostClockTime) {
    _objc_msgSend_1273(this.pointer, _sel_setRate_time_atHostTime_, rate,
        itemTime, hostClockTime);
  }

  /// prerollAtRate:completionHandler:
  void prerollAtRate_completionHandler_(double rate,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>? completionHandler) {
    _objc_msgSend_1274(this.pointer, _sel_prerollAtRate_completionHandler_,
        rate, completionHandler?.pointer ?? ffi.nullptr);
  }

  /// cancelPendingPrerolls
  void cancelPendingPrerolls() {
    _objc_msgSend_7(this.pointer, _sel_cancelPendingPrerolls);
  }

  /// sourceClock
  ffi.Pointer<OpaqueCMClock> get sourceClock {
    return _objc_msgSend_1275(this.pointer, _sel_sourceClock);
  }

  /// setSourceClock:
  set sourceClock(ffi.Pointer<OpaqueCMClock> value) {
    return _objc_msgSend_1276(this.pointer, _sel_setSourceClock_, value);
  }

  /// addPeriodicTimeObserverForInterval:queue:usingBlock:
  objc.ObjCObjectBase addPeriodicTimeObserverForInterval_queue_usingBlock_(
      CMTime interval,
      objc.NSObject? queue,
      objc.ObjCBlock<ffi.Void Function(CMTime)> block) {
    final _ret = _objc_msgSend_1277(
        this.pointer,
        _sel_addPeriodicTimeObserverForInterval_queue_usingBlock_,
        interval,
        queue?.pointer ?? ffi.nullptr,
        block.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// addBoundaryTimeObserverForTimes:queue:usingBlock:
  objc.ObjCObjectBase addBoundaryTimeObserverForTimes_queue_usingBlock_(
      objc.NSArray times,
      objc.NSObject? queue,
      objc.ObjCBlock<ffi.Void Function()> block) {
    final _ret = _objc_msgSend_1278(
        this.pointer,
        _sel_addBoundaryTimeObserverForTimes_queue_usingBlock_,
        times.pointer,
        queue?.pointer ?? ffi.nullptr,
        block.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// removeTimeObserver:
  void removeTimeObserver_(objc.ObjCObjectBase observer) {
    _objc_msgSend_27(this.pointer, _sel_removeTimeObserver_, observer.pointer);
  }

  /// volume
  double get volume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_volume)
        : _objc_msgSend_361(this.pointer, _sel_volume);
  }

  /// setVolume:
  set volume(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setVolume_, value);
  }

  /// isMuted
  bool get muted {
    return _objc_msgSend_13(this.pointer, _sel_isMuted);
  }

  /// setMuted:
  set muted(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setMuted_, value);
  }

  /// appliesMediaSelectionCriteriaAutomatically
  bool get appliesMediaSelectionCriteriaAutomatically {
    return _objc_msgSend_13(
        this.pointer, _sel_appliesMediaSelectionCriteriaAutomatically);
  }

  /// setAppliesMediaSelectionCriteriaAutomatically:
  set appliesMediaSelectionCriteriaAutomatically(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setAppliesMediaSelectionCriteriaAutomatically_, value);
  }

  /// setMediaSelectionCriteria:forMediaCharacteristic:
  void setMediaSelectionCriteria_forMediaCharacteristic_(
      AVPlayerMediaSelectionCriteria? criteria,
      objc.NSString mediaCharacteristic) {
    _objc_msgSend_1281(
        this.pointer,
        _sel_setMediaSelectionCriteria_forMediaCharacteristic_,
        criteria?.pointer ?? ffi.nullptr,
        mediaCharacteristic.pointer);
  }

  /// mediaSelectionCriteriaForMediaCharacteristic:
  AVPlayerMediaSelectionCriteria? mediaSelectionCriteriaForMediaCharacteristic_(
      objc.NSString mediaCharacteristic) {
    final _ret = _objc_msgSend_1282(
        this.pointer,
        _sel_mediaSelectionCriteriaForMediaCharacteristic_,
        mediaCharacteristic.pointer);
    return _ret.address == 0
        ? null
        : AVPlayerMediaSelectionCriteria.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// audioOutputDeviceUniqueID
  objc.NSString? get audioOutputDeviceUniqueID {
    final _ret = _objc_msgSend_20(this.pointer, _sel_audioOutputDeviceUniqueID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAudioOutputDeviceUniqueID:
  set audioOutputDeviceUniqueID(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setAudioOutputDeviceUniqueID_,
        value?.pointer ?? ffi.nullptr);
  }

  /// allowsExternalPlayback
  bool get allowsExternalPlayback {
    return _objc_msgSend_13(this.pointer, _sel_allowsExternalPlayback);
  }

  /// setAllowsExternalPlayback:
  set allowsExternalPlayback(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAllowsExternalPlayback_, value);
  }

  /// isExternalPlaybackActive
  bool get externalPlaybackActive {
    return _objc_msgSend_13(this.pointer, _sel_isExternalPlaybackActive);
  }

  /// usesExternalPlaybackWhileExternalScreenIsActive
  bool get usesExternalPlaybackWhileExternalScreenIsActive {
    return _objc_msgSend_13(
        this.pointer, _sel_usesExternalPlaybackWhileExternalScreenIsActive);
  }

  /// setUsesExternalPlaybackWhileExternalScreenIsActive:
  set usesExternalPlaybackWhileExternalScreenIsActive(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setUsesExternalPlaybackWhileExternalScreenIsActive_, value);
  }

  /// externalPlaybackVideoGravity
  objc.NSString get externalPlaybackVideoGravity {
    final _ret =
        _objc_msgSend_11(this.pointer, _sel_externalPlaybackVideoGravity);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setExternalPlaybackVideoGravity:
  set externalPlaybackVideoGravity(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setExternalPlaybackVideoGravity_, value.pointer);
  }

  /// outputObscuredDueToInsufficientExternalProtection
  bool get outputObscuredDueToInsufficientExternalProtection {
    return _objc_msgSend_13(
        this.pointer, _sel_outputObscuredDueToInsufficientExternalProtection);
  }

  /// availableHDRModes
  static AVPlayerHDRMode getAvailableHDRModes() {
    final _ret = _objc_msgSend_1283(_class_AVPlayer, _sel_availableHDRModes);
    return AVPlayerHDRMode.fromValue(_ret);
  }

  /// eligibleForHDRPlayback
  static bool getEligibleForHDRPlayback() {
    return _objc_msgSend_13(_class_AVPlayer, _sel_eligibleForHDRPlayback);
  }

  /// preferredVideoDecoderGPURegistryID
  int get preferredVideoDecoderGPURegistryID {
    return _objc_msgSend_1108(
        this.pointer, _sel_preferredVideoDecoderGPURegistryID);
  }

  /// setPreferredVideoDecoderGPURegistryID:
  set preferredVideoDecoderGPURegistryID(int value) {
    return _objc_msgSend_1284(
        this.pointer, _sel_setPreferredVideoDecoderGPURegistryID_, value);
  }

  /// preventsDisplaySleepDuringVideoPlayback
  bool get preventsDisplaySleepDuringVideoPlayback {
    return _objc_msgSend_13(
        this.pointer, _sel_preventsDisplaySleepDuringVideoPlayback);
  }

  /// setPreventsDisplaySleepDuringVideoPlayback:
  set preventsDisplaySleepDuringVideoPlayback(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setPreventsDisplaySleepDuringVideoPlayback_, value);
  }

  /// preventsAutomaticBackgroundingDuringVideoPlayback
  bool get preventsAutomaticBackgroundingDuringVideoPlayback {
    return _objc_msgSend_13(
        this.pointer, _sel_preventsAutomaticBackgroundingDuringVideoPlayback);
  }

  /// setPreventsAutomaticBackgroundingDuringVideoPlayback:
  set preventsAutomaticBackgroundingDuringVideoPlayback(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setPreventsAutomaticBackgroundingDuringVideoPlayback_, value);
  }

  /// audiovisualBackgroundPlaybackPolicy
  AVPlayerAudiovisualBackgroundPlaybackPolicy
      get audiovisualBackgroundPlaybackPolicy {
    final _ret = _objc_msgSend_1285(
        this.pointer, _sel_audiovisualBackgroundPlaybackPolicy);
    return AVPlayerAudiovisualBackgroundPlaybackPolicy.fromValue(_ret);
  }

  /// setAudiovisualBackgroundPlaybackPolicy:
  set audiovisualBackgroundPlaybackPolicy(
      AVPlayerAudiovisualBackgroundPlaybackPolicy value) {
    return _objc_msgSend_1286(this.pointer,
        _sel_setAudiovisualBackgroundPlaybackPolicy_, value.value);
  }

  /// playbackCoordinator
  AVPlayerPlaybackCoordinator get playbackCoordinator {
    final _ret = _objc_msgSend_1291(this.pointer, _sel_playbackCoordinator);
    return AVPlayerPlaybackCoordinator.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// videoOutput
  AVPlayerVideoOutput? get videoOutput {
    final _ret = _objc_msgSend_1296(this.pointer, _sel_videoOutput);
    return _ret.address == 0
        ? null
        : AVPlayerVideoOutput.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setVideoOutput:
  set videoOutput(AVPlayerVideoOutput? value) {
    return _objc_msgSend_1297(
        this.pointer, _sel_setVideoOutput_, value?.pointer ?? ffi.nullptr);
  }

  /// isClosedCaptionDisplayEnabled
  bool get closedCaptionDisplayEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isClosedCaptionDisplayEnabled);
  }

  /// setClosedCaptionDisplayEnabled:
  set closedCaptionDisplayEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setClosedCaptionDisplayEnabled_, value);
  }

  /// masterClock
  ffi.Pointer<OpaqueCMClock> get masterClock {
    return _objc_msgSend_1275(this.pointer, _sel_masterClock);
  }

  /// setMasterClock:
  set masterClock(ffi.Pointer<OpaqueCMClock> value) {
    return _objc_msgSend_1276(this.pointer, _sel_setMasterClock_, value);
  }

  /// init
  AVPlayer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVPlayer new1() {
    final _ret = _objc_msgSend_19(_class_AVPlayer, _sel_new);
    return AVPlayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVPlayer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_AVPlayer, _sel_allocWithZone_, zone);
    return AVPlayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVPlayer alloc() {
    final _ret = _objc_msgSend_19(_class_AVPlayer, _sel_alloc);
    return AVPlayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVPlayer, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVPlayer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_AVPlayer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVPlayer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayer = objc.getClass("AVPlayer");
late final _sel_playerWithURL_ = objc.registerName("playerWithURL:");

/// AVPlayerItem
class AVPlayerItem extends objc.NSObject {
  AVPlayerItem._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerItem] that points to the same underlying object as [other].
  AVPlayerItem.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerItem] that wraps the given raw object pointer.
  AVPlayerItem.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerItem].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVPlayerItem);
  }

  /// init
  AVPlayerItem init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVPlayerItem new1() {
    final _ret = _objc_msgSend_19(_class_AVPlayerItem, _sel_new);
    return AVPlayerItem.castFromPointer(_ret, retain: false, release: true);
  }

  /// playerItemWithURL:
  static AVPlayerItem playerItemWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_332(
        _class_AVPlayerItem, _sel_playerItemWithURL_, URL.pointer);
    return AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// playerItemWithAsset:
  static AVPlayerItem playerItemWithAsset_(AVAsset asset) {
    final _ret = _objc_msgSend_1239(
        _class_AVPlayerItem, _sel_playerItemWithAsset_, asset.pointer);
    return AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// playerItemWithAsset:automaticallyLoadedAssetKeys:
  static AVPlayerItem playerItemWithAsset_automaticallyLoadedAssetKeys_(
      AVAsset asset, objc.NSArray? automaticallyLoadedAssetKeys) {
    final _ret = _objc_msgSend_1240(
        _class_AVPlayerItem,
        _sel_playerItemWithAsset_automaticallyLoadedAssetKeys_,
        asset.pointer,
        automaticallyLoadedAssetKeys?.pointer ?? ffi.nullptr);
    return AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:
  AVPlayerItem initWithURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_332(this.pointer, _sel_initWithURL_, URL.pointer);
    return AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithAsset:
  AVPlayerItem initWithAsset_(AVAsset asset) {
    final _ret =
        _objc_msgSend_1239(this.pointer, _sel_initWithAsset_, asset.pointer);
    return AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithAsset:automaticallyLoadedAssetKeys:
  AVPlayerItem initWithAsset_automaticallyLoadedAssetKeys_(
      AVAsset asset, objc.NSArray? automaticallyLoadedAssetKeys) {
    final _ret = _objc_msgSend_1240(
        this.pointer,
        _sel_initWithAsset_automaticallyLoadedAssetKeys_,
        asset.pointer,
        automaticallyLoadedAssetKeys?.pointer ?? ffi.nullptr);
    return AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// copyWithZone:
  objc.ObjCObjectBase copyWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(this.pointer, _sel_copyWithZone_, zone);
    return objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  /// copy
  objc.ObjCObjectBase copy() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_copy);
    return objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  /// status
  AVPlayerItemStatus get status {
    final _ret = _objc_msgSend_1241(this.pointer, _sel_status);
    return AVPlayerItemStatus.fromValue(_ret);
  }

  /// error
  objc.NSError? get error {
    final _ret = _objc_msgSend_344(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// asset
  AVAsset get asset {
    final _ret = _objc_msgSend_779(this.pointer, _sel_asset);
    return AVAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// tracks
  objc.NSArray get tracks {
    final _ret = _objc_msgSend_33(this.pointer, _sel_tracks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// duration
  void getDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_duration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_duration);
  }

  /// presentationSize
  void getPresentationSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer, _sel_presentationSize)
        : stret.ref = _objc_msgSend_714(this.pointer, _sel_presentationSize);
  }

  /// timedMetadata
  objc.NSArray? get timedMetadata {
    final _ret = _objc_msgSend_88(this.pointer, _sel_timedMetadata);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyLoadedAssetKeys
  objc.NSArray get automaticallyLoadedAssetKeys {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_automaticallyLoadedAssetKeys);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// canPlayFastForward
  bool get canPlayFastForward {
    return _objc_msgSend_13(this.pointer, _sel_canPlayFastForward);
  }

  /// canPlaySlowForward
  bool get canPlaySlowForward {
    return _objc_msgSend_13(this.pointer, _sel_canPlaySlowForward);
  }

  /// canPlayReverse
  bool get canPlayReverse {
    return _objc_msgSend_13(this.pointer, _sel_canPlayReverse);
  }

  /// canPlaySlowReverse
  bool get canPlaySlowReverse {
    return _objc_msgSend_13(this.pointer, _sel_canPlaySlowReverse);
  }

  /// canPlayFastReverse
  bool get canPlayFastReverse {
    return _objc_msgSend_13(this.pointer, _sel_canPlayFastReverse);
  }

  /// canStepForward
  bool get canStepForward {
    return _objc_msgSend_13(this.pointer, _sel_canStepForward);
  }

  /// canStepBackward
  bool get canStepBackward {
    return _objc_msgSend_13(this.pointer, _sel_canStepBackward);
  }

  /// configuredTimeOffsetFromLive
  void getConfiguredTimeOffsetFromLive(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_configuredTimeOffsetFromLive)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_configuredTimeOffsetFromLive);
  }

  /// setConfiguredTimeOffsetFromLive:
  set configuredTimeOffsetFromLive(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setConfiguredTimeOffsetFromLive_, value);
  }

  /// recommendedTimeOffsetFromLive
  void getRecommendedTimeOffsetFromLive(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_recommendedTimeOffsetFromLive)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_recommendedTimeOffsetFromLive);
  }

  /// automaticallyPreservesTimeOffsetFromLive
  bool get automaticallyPreservesTimeOffsetFromLive {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticallyPreservesTimeOffsetFromLive);
  }

  /// setAutomaticallyPreservesTimeOffsetFromLive:
  set automaticallyPreservesTimeOffsetFromLive(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutomaticallyPreservesTimeOffsetFromLive_, value);
  }

  /// currentTime
  void currentTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_currentTime)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_currentTime);
  }

  /// forwardPlaybackEndTime
  void getForwardPlaybackEndTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_forwardPlaybackEndTime)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_forwardPlaybackEndTime);
  }

  /// setForwardPlaybackEndTime:
  set forwardPlaybackEndTime(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setForwardPlaybackEndTime_, value);
  }

  /// reversePlaybackEndTime
  void getReversePlaybackEndTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_reversePlaybackEndTime)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_reversePlaybackEndTime);
  }

  /// setReversePlaybackEndTime:
  set reversePlaybackEndTime(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setReversePlaybackEndTime_, value);
  }

  /// seekableTimeRanges
  objc.NSArray get seekableTimeRanges {
    final _ret = _objc_msgSend_33(this.pointer, _sel_seekableTimeRanges);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// seekToTime:completionHandler:
  void seekToTime_completionHandler_(CMTime time,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>? completionHandler) {
    _objc_msgSend_1242(this.pointer, _sel_seekToTime_completionHandler_, time,
        completionHandler?.pointer ?? ffi.nullptr);
  }

  /// seekToTime:toleranceBefore:toleranceAfter:completionHandler:
  void seekToTime_toleranceBefore_toleranceAfter_completionHandler_(
      CMTime time,
      CMTime toleranceBefore,
      CMTime toleranceAfter,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>? completionHandler) {
    _objc_msgSend_1243(
        this.pointer,
        _sel_seekToTime_toleranceBefore_toleranceAfter_completionHandler_,
        time,
        toleranceBefore,
        toleranceAfter,
        completionHandler?.pointer ?? ffi.nullptr);
  }

  /// cancelPendingSeeks
  void cancelPendingSeeks() {
    _objc_msgSend_7(this.pointer, _sel_cancelPendingSeeks);
  }

  /// currentDate
  objc.NSDate? currentDate() {
    final _ret = _objc_msgSend_126(this.pointer, _sel_currentDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// seekToDate:completionHandler:
  bool seekToDate_completionHandler_(objc.NSDate date,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>? completionHandler) {
    return _objc_msgSend_1244(this.pointer, _sel_seekToDate_completionHandler_,
        date.pointer, completionHandler?.pointer ?? ffi.nullptr);
  }

  /// stepByCount:
  void stepByCount_(int stepCount) {
    _objc_msgSend_145(this.pointer, _sel_stepByCount_, stepCount);
  }

  /// timebase
  ffi.Pointer<OpaqueCMTimebase> get timebase {
    return _objc_msgSend_1245(this.pointer, _sel_timebase);
  }

  /// videoComposition
  AVVideoComposition? get videoComposition {
    final _ret = _objc_msgSend_1015(this.pointer, _sel_videoComposition);
    return _ret.address == 0
        ? null
        : AVVideoComposition.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVideoComposition:
  set videoComposition(AVVideoComposition? value) {
    return _objc_msgSend_1016(
        this.pointer, _sel_setVideoComposition_, value?.pointer ?? ffi.nullptr);
  }

  /// customVideoCompositor
  objc.ObjCObjectBase? get customVideoCompositor {
    final _ret = _objc_msgSend_85(this.pointer, _sel_customVideoCompositor);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// seekingWaitsForVideoCompositionRendering
  bool get seekingWaitsForVideoCompositionRendering {
    return _objc_msgSend_13(
        this.pointer, _sel_seekingWaitsForVideoCompositionRendering);
  }

  /// setSeekingWaitsForVideoCompositionRendering:
  set seekingWaitsForVideoCompositionRendering(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setSeekingWaitsForVideoCompositionRendering_, value);
  }

  /// textStyleRules
  objc.NSArray? get textStyleRules {
    final _ret = _objc_msgSend_88(this.pointer, _sel_textStyleRules);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTextStyleRules:
  set textStyleRules(objc.NSArray? value) {
    return _objc_msgSend_549(
        this.pointer, _sel_setTextStyleRules_, value?.pointer ?? ffi.nullptr);
  }

  /// videoApertureMode
  objc.NSString get videoApertureMode {
    final _ret = _objc_msgSend_11(this.pointer, _sel_videoApertureMode);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVideoApertureMode:
  set videoApertureMode(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setVideoApertureMode_, value.pointer);
  }

  /// appliesPerFrameHDRDisplayMetadata
  bool get appliesPerFrameHDRDisplayMetadata {
    return _objc_msgSend_13(
        this.pointer, _sel_appliesPerFrameHDRDisplayMetadata);
  }

  /// setAppliesPerFrameHDRDisplayMetadata:
  set appliesPerFrameHDRDisplayMetadata(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAppliesPerFrameHDRDisplayMetadata_, value);
  }

  /// audioTimePitchAlgorithm
  objc.NSString get audioTimePitchAlgorithm {
    final _ret = _objc_msgSend_11(this.pointer, _sel_audioTimePitchAlgorithm);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAudioTimePitchAlgorithm:
  set audioTimePitchAlgorithm(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setAudioTimePitchAlgorithm_, value.pointer);
  }

  /// isAudioSpatializationAllowed
  bool get audioSpatializationAllowed {
    return _objc_msgSend_13(this.pointer, _sel_isAudioSpatializationAllowed);
  }

  /// setAudioSpatializationAllowed:
  set audioSpatializationAllowed(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAudioSpatializationAllowed_, value);
  }

  /// allowedAudioSpatializationFormats
  AVAudioSpatializationFormats get allowedAudioSpatializationFormats {
    final _ret = _objc_msgSend_1246(
        this.pointer, _sel_allowedAudioSpatializationFormats);
    return AVAudioSpatializationFormats.fromValue(_ret);
  }

  /// setAllowedAudioSpatializationFormats:
  set allowedAudioSpatializationFormats(AVAudioSpatializationFormats value) {
    return _objc_msgSend_1247(
        this.pointer, _sel_setAllowedAudioSpatializationFormats_, value.value);
  }

  /// audioMix
  AVAudioMix? get audioMix {
    final _ret = _objc_msgSend_789(this.pointer, _sel_audioMix);
    return _ret.address == 0
        ? null
        : AVAudioMix.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAudioMix:
  set audioMix(AVAudioMix? value) {
    return _objc_msgSend_790(
        this.pointer, _sel_setAudioMix_, value?.pointer ?? ffi.nullptr);
  }

  /// loadedTimeRanges
  objc.NSArray get loadedTimeRanges {
    final _ret = _objc_msgSend_33(this.pointer, _sel_loadedTimeRanges);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isPlaybackLikelyToKeepUp
  bool get playbackLikelyToKeepUp {
    return _objc_msgSend_13(this.pointer, _sel_isPlaybackLikelyToKeepUp);
  }

  /// isPlaybackBufferFull
  bool get playbackBufferFull {
    return _objc_msgSend_13(this.pointer, _sel_isPlaybackBufferFull);
  }

  /// isPlaybackBufferEmpty
  bool get playbackBufferEmpty {
    return _objc_msgSend_13(this.pointer, _sel_isPlaybackBufferEmpty);
  }

  /// canUseNetworkResourcesForLiveStreamingWhilePaused
  bool get canUseNetworkResourcesForLiveStreamingWhilePaused {
    return _objc_msgSend_13(
        this.pointer, _sel_canUseNetworkResourcesForLiveStreamingWhilePaused);
  }

  /// setCanUseNetworkResourcesForLiveStreamingWhilePaused:
  set canUseNetworkResourcesForLiveStreamingWhilePaused(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setCanUseNetworkResourcesForLiveStreamingWhilePaused_, value);
  }

  /// preferredForwardBufferDuration
  double get preferredForwardBufferDuration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            this.pointer, _sel_preferredForwardBufferDuration)
        : _objc_msgSend_18(this.pointer, _sel_preferredForwardBufferDuration);
  }

  /// setPreferredForwardBufferDuration:
  set preferredForwardBufferDuration(double value) {
    return _objc_msgSend_226(
        this.pointer, _sel_setPreferredForwardBufferDuration_, value);
  }

  /// preferredPeakBitRate
  double get preferredPeakBitRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_preferredPeakBitRate)
        : _objc_msgSend_18(this.pointer, _sel_preferredPeakBitRate);
  }

  /// setPreferredPeakBitRate:
  set preferredPeakBitRate(double value) {
    return _objc_msgSend_226(
        this.pointer, _sel_setPreferredPeakBitRate_, value);
  }

  /// preferredPeakBitRateForExpensiveNetworks
  double get preferredPeakBitRateForExpensiveNetworks {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            this.pointer, _sel_preferredPeakBitRateForExpensiveNetworks)
        : _objc_msgSend_18(
            this.pointer, _sel_preferredPeakBitRateForExpensiveNetworks);
  }

  /// setPreferredPeakBitRateForExpensiveNetworks:
  set preferredPeakBitRateForExpensiveNetworks(double value) {
    return _objc_msgSend_226(
        this.pointer, _sel_setPreferredPeakBitRateForExpensiveNetworks_, value);
  }

  /// preferredMaximumResolution
  void getPreferredMaximumResolution(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(
            stret, this.pointer, _sel_preferredMaximumResolution)
        : stret.ref =
            _objc_msgSend_714(this.pointer, _sel_preferredMaximumResolution);
  }

  /// setPreferredMaximumResolution:
  set preferredMaximumResolution(CGSize value) {
    return _objc_msgSend_819(
        this.pointer, _sel_setPreferredMaximumResolution_, value);
  }

  /// preferredMaximumResolutionForExpensiveNetworks
  void getPreferredMaximumResolutionForExpensiveNetworks(
      ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_714Stret(stret, this.pointer,
            _sel_preferredMaximumResolutionForExpensiveNetworks)
        : stret.ref = _objc_msgSend_714(
            this.pointer, _sel_preferredMaximumResolutionForExpensiveNetworks);
  }

  /// setPreferredMaximumResolutionForExpensiveNetworks:
  set preferredMaximumResolutionForExpensiveNetworks(CGSize value) {
    return _objc_msgSend_819(this.pointer,
        _sel_setPreferredMaximumResolutionForExpensiveNetworks_, value);
  }

  /// startsOnFirstEligibleVariant
  bool get startsOnFirstEligibleVariant {
    return _objc_msgSend_13(this.pointer, _sel_startsOnFirstEligibleVariant);
  }

  /// setStartsOnFirstEligibleVariant:
  set startsOnFirstEligibleVariant(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setStartsOnFirstEligibleVariant_, value);
  }

  /// variantPreferences
  AVVariantPreferences get variantPreferences {
    final _ret = _objc_msgSend_1248(this.pointer, _sel_variantPreferences);
    return AVVariantPreferences.fromValue(_ret);
  }

  /// setVariantPreferences:
  set variantPreferences(AVVariantPreferences value) {
    return _objc_msgSend_1249(
        this.pointer, _sel_setVariantPreferences_, value.value);
  }

  /// selectMediaOption:inMediaSelectionGroup:
  void selectMediaOption_inMediaSelectionGroup_(
      AVMediaSelectionOption? mediaSelectionOption,
      AVMediaSelectionGroup mediaSelectionGroup) {
    _objc_msgSend_1250(
        this.pointer,
        _sel_selectMediaOption_inMediaSelectionGroup_,
        mediaSelectionOption?.pointer ?? ffi.nullptr,
        mediaSelectionGroup.pointer);
  }

  /// selectMediaOptionAutomaticallyInMediaSelectionGroup:
  void selectMediaOptionAutomaticallyInMediaSelectionGroup_(
      AVMediaSelectionGroup mediaSelectionGroup) {
    _objc_msgSend_1251(
        this.pointer,
        _sel_selectMediaOptionAutomaticallyInMediaSelectionGroup_,
        mediaSelectionGroup.pointer);
  }

  /// currentMediaSelection
  AVMediaSelection get currentMediaSelection {
    final _ret = _objc_msgSend_761(this.pointer, _sel_currentMediaSelection);
    return AVMediaSelection.castFromPointer(_ret, retain: true, release: true);
  }

  /// accessLog
  AVPlayerItemAccessLog? accessLog() {
    final _ret = _objc_msgSend_1252(this.pointer, _sel_accessLog);
    return _ret.address == 0
        ? null
        : AVPlayerItemAccessLog.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// errorLog
  AVPlayerItemErrorLog? errorLog() {
    final _ret = _objc_msgSend_1253(this.pointer, _sel_errorLog);
    return _ret.address == 0
        ? null
        : AVPlayerItemErrorLog.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// addOutput:
  void addOutput_(AVPlayerItemOutput output) {
    _objc_msgSend_1257(this.pointer, _sel_addOutput_, output.pointer);
  }

  /// removeOutput:
  void removeOutput_(AVPlayerItemOutput output) {
    _objc_msgSend_1257(this.pointer, _sel_removeOutput_, output.pointer);
  }

  /// outputs
  objc.NSArray get outputs {
    final _ret = _objc_msgSend_33(this.pointer, _sel_outputs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// addMediaDataCollector:
  void addMediaDataCollector_(AVPlayerItemMediaDataCollector collector) {
    _objc_msgSend_1258(
        this.pointer, _sel_addMediaDataCollector_, collector.pointer);
  }

  /// removeMediaDataCollector:
  void removeMediaDataCollector_(AVPlayerItemMediaDataCollector collector) {
    _objc_msgSend_1258(
        this.pointer, _sel_removeMediaDataCollector_, collector.pointer);
  }

  /// mediaDataCollectors
  objc.NSArray get mediaDataCollectors {
    final _ret = _objc_msgSend_33(this.pointer, _sel_mediaDataCollectors);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// seekToTime:
  void seekToTime_(CMTime time) {
    _objc_msgSend_1067(this.pointer, _sel_seekToTime_, time);
  }

  /// seekToTime:toleranceBefore:toleranceAfter:
  void seekToTime_toleranceBefore_toleranceAfter_(
      CMTime time, CMTime toleranceBefore, CMTime toleranceAfter) {
    _objc_msgSend_1259(
        this.pointer,
        _sel_seekToTime_toleranceBefore_toleranceAfter_,
        time,
        toleranceBefore,
        toleranceAfter);
  }

  /// seekToDate:
  bool seekToDate_(objc.NSDate date) {
    return _objc_msgSend_118(this.pointer, _sel_seekToDate_, date.pointer);
  }

  /// selectedMediaOptionInMediaSelectionGroup:
  AVMediaSelectionOption? selectedMediaOptionInMediaSelectionGroup_(
      AVMediaSelectionGroup mediaSelectionGroup) {
    final _ret = _objc_msgSend_754(
        this.pointer,
        _sel_selectedMediaOptionInMediaSelectionGroup_,
        mediaSelectionGroup.pointer);
    return _ret.address == 0
        ? null
        : AVMediaSelectionOption.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// isAuthorizationRequiredForPlayback
  bool get authorizationRequiredForPlayback {
    return _objc_msgSend_13(
        this.pointer, _sel_isAuthorizationRequiredForPlayback);
  }

  /// isApplicationAuthorizedForPlayback
  bool get applicationAuthorizedForPlayback {
    return _objc_msgSend_13(
        this.pointer, _sel_isApplicationAuthorizedForPlayback);
  }

  /// isContentAuthorizedForPlayback
  bool get contentAuthorizedForPlayback {
    return _objc_msgSend_13(this.pointer, _sel_isContentAuthorizedForPlayback);
  }

  /// requestContentAuthorizationAsynchronouslyWithTimeoutInterval:completionHandler:
  void
      requestContentAuthorizationAsynchronouslyWithTimeoutInterval_completionHandler_(
          double timeoutInterval, objc.ObjCBlock<ffi.Void Function()> handler) {
    _objc_msgSend_1260(
        this.pointer,
        _sel_requestContentAuthorizationAsynchronouslyWithTimeoutInterval_completionHandler_,
        timeoutInterval,
        handler.pointer);
  }

  /// cancelContentAuthorizationRequest
  void cancelContentAuthorizationRequest() {
    _objc_msgSend_7(this.pointer, _sel_cancelContentAuthorizationRequest);
  }

  /// contentAuthorizationRequestStatus
  AVContentAuthorizationStatus get contentAuthorizationRequestStatus {
    final _ret = _objc_msgSend_1261(
        this.pointer, _sel_contentAuthorizationRequestStatus);
    return AVContentAuthorizationStatus.fromValue(_ret);
  }

  /// automaticallyHandlesInterstitialEvents
  bool get automaticallyHandlesInterstitialEvents {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticallyHandlesInterstitialEvents);
  }

  /// setAutomaticallyHandlesInterstitialEvents:
  set automaticallyHandlesInterstitialEvents(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutomaticallyHandlesInterstitialEvents_, value);
  }

  /// templatePlayerItem
  AVPlayerItem? get templatePlayerItem {
    final _ret = _objc_msgSend_1262(this.pointer, _sel_templatePlayerItem);
    return _ret.address == 0
        ? null
        : AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVPlayerItem allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVPlayerItem, _sel_allocWithZone_, zone);
    return AVPlayerItem.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVPlayerItem alloc() {
    final _ret = _objc_msgSend_19(_class_AVPlayerItem, _sel_alloc);
    return AVPlayerItem.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerItem,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerItem,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVPlayerItem, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVPlayerItem, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerItem,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerItem,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerItem,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVPlayerItem, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVPlayerItem, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerItem = objc.getClass("AVPlayerItem");
late final _sel_playerItemWithURL_ = objc.registerName("playerItemWithURL:");
late final _sel_playerItemWithAsset_ =
    objc.registerName("playerItemWithAsset:");
final _objc_msgSend_1239 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_playerItemWithAsset_automaticallyLoadedAssetKeys_ =
    objc.registerName("playerItemWithAsset:automaticallyLoadedAssetKeys:");
final _objc_msgSend_1240 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithAsset_ = objc.registerName("initWithAsset:");
late final _sel_initWithAsset_automaticallyLoadedAssetKeys_ =
    objc.registerName("initWithAsset:automaticallyLoadedAssetKeys:");
late final _sel_copyWithZone_ = objc.registerName("copyWithZone:");
late final _sel_copy = objc.registerName("copy");

enum AVPlayerItemStatus {
  AVPlayerItemStatusUnknown(0),
  AVPlayerItemStatusReadyToPlay(1),
  AVPlayerItemStatusFailed(2);

  final int value;
  const AVPlayerItemStatus(this.value);

  static AVPlayerItemStatus fromValue(int value) => switch (value) {
        0 => AVPlayerItemStatusUnknown,
        1 => AVPlayerItemStatusReadyToPlay,
        2 => AVPlayerItemStatusFailed,
        _ =>
          throw ArgumentError("Unknown value for AVPlayerItemStatus: $value"),
      };
}

final _objc_msgSend_1241 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_presentationSize = objc.registerName("presentationSize");
late final _sel_timedMetadata = objc.registerName("timedMetadata");
late final _sel_automaticallyLoadedAssetKeys =
    objc.registerName("automaticallyLoadedAssetKeys");
late final _sel_canPlayFastForward = objc.registerName("canPlayFastForward");
late final _sel_canPlaySlowForward = objc.registerName("canPlaySlowForward");
late final _sel_canPlayReverse = objc.registerName("canPlayReverse");
late final _sel_canPlaySlowReverse = objc.registerName("canPlaySlowReverse");
late final _sel_canPlayFastReverse = objc.registerName("canPlayFastReverse");
late final _sel_canStepForward = objc.registerName("canStepForward");
late final _sel_canStepBackward = objc.registerName("canStepBackward");
late final _sel_configuredTimeOffsetFromLive =
    objc.registerName("configuredTimeOffsetFromLive");
late final _sel_setConfiguredTimeOffsetFromLive_ =
    objc.registerName("setConfiguredTimeOffsetFromLive:");
late final _sel_recommendedTimeOffsetFromLive =
    objc.registerName("recommendedTimeOffsetFromLive");
late final _sel_automaticallyPreservesTimeOffsetFromLive =
    objc.registerName("automaticallyPreservesTimeOffsetFromLive");
late final _sel_setAutomaticallyPreservesTimeOffsetFromLive_ =
    objc.registerName("setAutomaticallyPreservesTimeOffsetFromLive:");
late final _sel_currentTime = objc.registerName("currentTime");
late final _sel_forwardPlaybackEndTime =
    objc.registerName("forwardPlaybackEndTime");
late final _sel_setForwardPlaybackEndTime_ =
    objc.registerName("setForwardPlaybackEndTime:");
late final _sel_reversePlaybackEndTime =
    objc.registerName("reversePlaybackEndTime");
late final _sel_setReversePlaybackEndTime_ =
    objc.registerName("setReversePlaybackEndTime:");
late final _sel_seekableTimeRanges = objc.registerName("seekableTimeRanges");
late final _sel_seekToTime_completionHandler_ =
    objc.registerName("seekToTime:completionHandler:");
final _objc_msgSend_1242 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTime,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_seekToTime_toleranceBefore_toleranceAfter_completionHandler_ =
    objc.registerName(
        "seekToTime:toleranceBefore:toleranceAfter:completionHandler:");
final _objc_msgSend_1243 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                CMTime,
                CMTime,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTime,
            CMTime,
            CMTime,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_cancelPendingSeeks = objc.registerName("cancelPendingSeeks");
late final _sel_currentDate = objc.registerName("currentDate");
late final _sel_seekToDate_completionHandler_ =
    objc.registerName("seekToDate:completionHandler:");
final _objc_msgSend_1244 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_stepByCount_ = objc.registerName("stepByCount:");

final class OpaqueCMTimebase extends ffi.Opaque {}

late final _sel_timebase = objc.registerName("timebase");
final _objc_msgSend_1245 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<OpaqueCMTimebase> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<OpaqueCMTimebase> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_seekingWaitsForVideoCompositionRendering =
    objc.registerName("seekingWaitsForVideoCompositionRendering");
late final _sel_setSeekingWaitsForVideoCompositionRendering_ =
    objc.registerName("setSeekingWaitsForVideoCompositionRendering:");
late final _sel_textStyleRules = objc.registerName("textStyleRules");
late final _sel_setTextStyleRules_ = objc.registerName("setTextStyleRules:");
late final _sel_videoApertureMode = objc.registerName("videoApertureMode");
late final _sel_setVideoApertureMode_ =
    objc.registerName("setVideoApertureMode:");
late final _sel_appliesPerFrameHDRDisplayMetadata =
    objc.registerName("appliesPerFrameHDRDisplayMetadata");
late final _sel_setAppliesPerFrameHDRDisplayMetadata_ =
    objc.registerName("setAppliesPerFrameHDRDisplayMetadata:");
late final _sel_isAudioSpatializationAllowed =
    objc.registerName("isAudioSpatializationAllowed");
late final _sel_setAudioSpatializationAllowed_ =
    objc.registerName("setAudioSpatializationAllowed:");

enum AVAudioSpatializationFormats {
  AVAudioSpatializationFormatNone(0),
  AVAudioSpatializationFormatMonoAndStereo(3),
  AVAudioSpatializationFormatMultichannel(4),
  AVAudioSpatializationFormatMonoStereoAndMultichannel(7);

  final int value;
  const AVAudioSpatializationFormats(this.value);

  static AVAudioSpatializationFormats fromValue(int value) => switch (value) {
        0 => AVAudioSpatializationFormatNone,
        3 => AVAudioSpatializationFormatMonoAndStereo,
        4 => AVAudioSpatializationFormatMultichannel,
        7 => AVAudioSpatializationFormatMonoStereoAndMultichannel,
        _ => throw ArgumentError(
            "Unknown value for AVAudioSpatializationFormats: $value"),
      };
}

late final _sel_allowedAudioSpatializationFormats =
    objc.registerName("allowedAudioSpatializationFormats");
final _objc_msgSend_1246 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAllowedAudioSpatializationFormats_ =
    objc.registerName("setAllowedAudioSpatializationFormats:");
final _objc_msgSend_1247 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_loadedTimeRanges = objc.registerName("loadedTimeRanges");
late final _sel_isPlaybackLikelyToKeepUp =
    objc.registerName("isPlaybackLikelyToKeepUp");
late final _sel_isPlaybackBufferFull =
    objc.registerName("isPlaybackBufferFull");
late final _sel_isPlaybackBufferEmpty =
    objc.registerName("isPlaybackBufferEmpty");
late final _sel_canUseNetworkResourcesForLiveStreamingWhilePaused =
    objc.registerName("canUseNetworkResourcesForLiveStreamingWhilePaused");
late final _sel_setCanUseNetworkResourcesForLiveStreamingWhilePaused_ =
    objc.registerName("setCanUseNetworkResourcesForLiveStreamingWhilePaused:");
late final _sel_preferredForwardBufferDuration =
    objc.registerName("preferredForwardBufferDuration");
late final _sel_setPreferredForwardBufferDuration_ =
    objc.registerName("setPreferredForwardBufferDuration:");
late final _sel_preferredPeakBitRate =
    objc.registerName("preferredPeakBitRate");
late final _sel_setPreferredPeakBitRate_ =
    objc.registerName("setPreferredPeakBitRate:");
late final _sel_preferredPeakBitRateForExpensiveNetworks =
    objc.registerName("preferredPeakBitRateForExpensiveNetworks");
late final _sel_setPreferredPeakBitRateForExpensiveNetworks_ =
    objc.registerName("setPreferredPeakBitRateForExpensiveNetworks:");
late final _sel_preferredMaximumResolution =
    objc.registerName("preferredMaximumResolution");
late final _sel_setPreferredMaximumResolution_ =
    objc.registerName("setPreferredMaximumResolution:");
late final _sel_preferredMaximumResolutionForExpensiveNetworks =
    objc.registerName("preferredMaximumResolutionForExpensiveNetworks");
late final _sel_setPreferredMaximumResolutionForExpensiveNetworks_ =
    objc.registerName("setPreferredMaximumResolutionForExpensiveNetworks:");
late final _sel_startsOnFirstEligibleVariant =
    objc.registerName("startsOnFirstEligibleVariant");
late final _sel_setStartsOnFirstEligibleVariant_ =
    objc.registerName("setStartsOnFirstEligibleVariant:");

enum AVVariantPreferences {
  AVVariantPreferenceNone(0),
  AVVariantPreferenceScalabilityToLosslessAudio(1);

  final int value;
  const AVVariantPreferences(this.value);

  static AVVariantPreferences fromValue(int value) => switch (value) {
        0 => AVVariantPreferenceNone,
        1 => AVVariantPreferenceScalabilityToLosslessAudio,
        _ =>
          throw ArgumentError("Unknown value for AVVariantPreferences: $value"),
      };
}

late final _sel_variantPreferences = objc.registerName("variantPreferences");
final _objc_msgSend_1248 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVariantPreferences_ =
    objc.registerName("setVariantPreferences:");
final _objc_msgSend_1249 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_selectMediaOption_inMediaSelectionGroup_ =
    objc.registerName("selectMediaOption:inMediaSelectionGroup:");
final _objc_msgSend_1250 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_selectMediaOptionAutomaticallyInMediaSelectionGroup_ =
    objc.registerName("selectMediaOptionAutomaticallyInMediaSelectionGroup:");
final _objc_msgSend_1251 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_currentMediaSelection =
    objc.registerName("currentMediaSelection");

/// AVPlayerItemAccessLog
class AVPlayerItemAccessLog extends objc.NSObject {
  AVPlayerItemAccessLog._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerItemAccessLog] that points to the same underlying object as [other].
  AVPlayerItemAccessLog.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerItemAccessLog] that wraps the given raw object pointer.
  AVPlayerItemAccessLog.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerItemAccessLog].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVPlayerItemAccessLog);
  }

  /// init
  AVPlayerItemAccessLog init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerItemAccessLog.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlayerItemAccessLog new1() {
    final _ret = _objc_msgSend_19(_class_AVPlayerItemAccessLog, _sel_new);
    return AVPlayerItemAccessLog.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// extendedLogData
  objc.NSData? extendedLogData() {
    final _ret = _objc_msgSend_337(this.pointer, _sel_extendedLogData);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// extendedLogDataStringEncoding
  int get extendedLogDataStringEncoding {
    return _objc_msgSend_57(this.pointer, _sel_extendedLogDataStringEncoding);
  }

  /// events
  objc.NSArray get events {
    final _ret = _objc_msgSend_33(this.pointer, _sel_events);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVPlayerItemAccessLog allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVPlayerItemAccessLog, _sel_allocWithZone_, zone);
    return AVPlayerItemAccessLog.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlayerItemAccessLog alloc() {
    final _ret = _objc_msgSend_19(_class_AVPlayerItemAccessLog, _sel_alloc);
    return AVPlayerItemAccessLog.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerItemAccessLog,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerItemAccessLog,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVPlayerItemAccessLog, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVPlayerItemAccessLog, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerItemAccessLog,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerItemAccessLog,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerItemAccessLog,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVPlayerItemAccessLog, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlayerItemAccessLog, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerItemAccessLog =
    objc.getClass("AVPlayerItemAccessLog");
late final _sel_extendedLogData = objc.registerName("extendedLogData");
late final _sel_extendedLogDataStringEncoding =
    objc.registerName("extendedLogDataStringEncoding");
late final _sel_events = objc.registerName("events");
late final _sel_accessLog = objc.registerName("accessLog");
final _objc_msgSend_1252 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVPlayerItemErrorLog
class AVPlayerItemErrorLog extends objc.NSObject {
  AVPlayerItemErrorLog._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerItemErrorLog] that points to the same underlying object as [other].
  AVPlayerItemErrorLog.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerItemErrorLog] that wraps the given raw object pointer.
  AVPlayerItemErrorLog.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerItemErrorLog].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVPlayerItemErrorLog);
  }

  /// init
  AVPlayerItemErrorLog init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerItemErrorLog.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlayerItemErrorLog new1() {
    final _ret = _objc_msgSend_19(_class_AVPlayerItemErrorLog, _sel_new);
    return AVPlayerItemErrorLog.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// extendedLogData
  objc.NSData? extendedLogData() {
    final _ret = _objc_msgSend_337(this.pointer, _sel_extendedLogData);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// extendedLogDataStringEncoding
  int get extendedLogDataStringEncoding {
    return _objc_msgSend_57(this.pointer, _sel_extendedLogDataStringEncoding);
  }

  /// events
  objc.NSArray get events {
    final _ret = _objc_msgSend_33(this.pointer, _sel_events);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVPlayerItemErrorLog allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVPlayerItemErrorLog, _sel_allocWithZone_, zone);
    return AVPlayerItemErrorLog.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlayerItemErrorLog alloc() {
    final _ret = _objc_msgSend_19(_class_AVPlayerItemErrorLog, _sel_alloc);
    return AVPlayerItemErrorLog.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerItemErrorLog,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerItemErrorLog,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVPlayerItemErrorLog, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVPlayerItemErrorLog, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerItemErrorLog,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerItemErrorLog,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerItemErrorLog,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVPlayerItemErrorLog, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlayerItemErrorLog, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerItemErrorLog = objc.getClass("AVPlayerItemErrorLog");
late final _sel_errorLog = objc.registerName("errorLog");
final _objc_msgSend_1253 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVPlayerItemOutput
class AVPlayerItemOutput extends objc.NSObject {
  AVPlayerItemOutput._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerItemOutput] that points to the same underlying object as [other].
  AVPlayerItemOutput.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerItemOutput] that wraps the given raw object pointer.
  AVPlayerItemOutput.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerItemOutput].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVPlayerItemOutput);
  }

  /// itemTimeForHostTime:
  void itemTimeForHostTime_(
      ffi.Pointer<CMTime> stret, double hostTimeInSeconds) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1254Stret(
            stret, this.pointer, _sel_itemTimeForHostTime_, hostTimeInSeconds)
        : stret.ref = _objc_msgSend_1254(
            this.pointer, _sel_itemTimeForHostTime_, hostTimeInSeconds);
  }

  /// itemTimeForMachAbsoluteTime:
  void itemTimeForMachAbsoluteTime_(
      ffi.Pointer<CMTime> stret, int machAbsoluteTime) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1255Stret(stret, this.pointer,
            _sel_itemTimeForMachAbsoluteTime_, machAbsoluteTime)
        : stret.ref = _objc_msgSend_1255(
            this.pointer, _sel_itemTimeForMachAbsoluteTime_, machAbsoluteTime);
  }

  /// itemTimeForCVTimeStamp:
  void itemTimeForCVTimeStamp_(
      ffi.Pointer<CMTime> stret, CVTimeStamp timestamp) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1256Stret(
            stret, this.pointer, _sel_itemTimeForCVTimeStamp_, timestamp)
        : stret.ref = _objc_msgSend_1256(
            this.pointer, _sel_itemTimeForCVTimeStamp_, timestamp);
  }

  /// suppressesPlayerRendering
  bool get suppressesPlayerRendering {
    return _objc_msgSend_13(this.pointer, _sel_suppressesPlayerRendering);
  }

  /// setSuppressesPlayerRendering:
  set suppressesPlayerRendering(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setSuppressesPlayerRendering_, value);
  }

  /// init
  AVPlayerItemOutput init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerItemOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlayerItemOutput new1() {
    final _ret = _objc_msgSend_19(_class_AVPlayerItemOutput, _sel_new);
    return AVPlayerItemOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVPlayerItemOutput allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVPlayerItemOutput, _sel_allocWithZone_, zone);
    return AVPlayerItemOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlayerItemOutput alloc() {
    final _ret = _objc_msgSend_19(_class_AVPlayerItemOutput, _sel_alloc);
    return AVPlayerItemOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerItemOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerItemOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVPlayerItemOutput, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVPlayerItemOutput, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerItemOutput,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerItemOutput,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerItemOutput,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVPlayerItemOutput, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlayerItemOutput, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerItemOutput = objc.getClass("AVPlayerItemOutput");
late final _sel_itemTimeForHostTime_ =
    objc.registerName("itemTimeForHostTime:");
final _objc_msgSend_1254 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CMTime Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        CMTime Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
final _objc_msgSend_1254Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_itemTimeForMachAbsoluteTime_ =
    objc.registerName("itemTimeForMachAbsoluteTime:");
final _objc_msgSend_1255 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CMTime Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        CMTime Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_1255Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

final class CVTimeStamp extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  @ffi.Int32()
  external int videoTimeScale;

  @ffi.Int64()
  external int videoTime;

  @ffi.Uint64()
  external int hostTime;

  @ffi.Double()
  external double rateScalar;

  @ffi.Int64()
  external int videoRefreshPeriod;

  external CVSMPTETime smpteTime;

  @ffi.Uint64()
  external int flags;

  @ffi.Uint64()
  external int reserved;
}

final class CVSMPTETime extends ffi.Struct {
  @ffi.Short()
  external int subframes;

  @ffi.Short()
  external int subframeDivisor;

  @ffi.UnsignedInt()
  external int counter;

  @ffi.UnsignedInt()
  external int type;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Short()
  external int hours;

  @ffi.Short()
  external int minutes;

  @ffi.Short()
  external int seconds;

  @ffi.Short()
  external int frames;
}

late final _sel_itemTimeForCVTimeStamp_ =
    objc.registerName("itemTimeForCVTimeStamp:");
final _objc_msgSend_1256 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CMTime Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CVTimeStamp)>>()
    .asFunction<
        CMTime Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CVTimeStamp)>();
final _objc_msgSend_1256Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CVTimeStamp)>>()
    .asFunction<
        void Function(ffi.Pointer<CMTime>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CVTimeStamp)>();
late final _sel_suppressesPlayerRendering =
    objc.registerName("suppressesPlayerRendering");
late final _sel_setSuppressesPlayerRendering_ =
    objc.registerName("setSuppressesPlayerRendering:");
late final _sel_addOutput_ = objc.registerName("addOutput:");
final _objc_msgSend_1257 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeOutput_ = objc.registerName("removeOutput:");
late final _sel_outputs = objc.registerName("outputs");

/// AVPlayerItemMediaDataCollector
class AVPlayerItemMediaDataCollector extends objc.NSObject {
  AVPlayerItemMediaDataCollector._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerItemMediaDataCollector] that points to the same underlying object as [other].
  AVPlayerItemMediaDataCollector.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerItemMediaDataCollector] that wraps the given raw object pointer.
  AVPlayerItemMediaDataCollector.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerItemMediaDataCollector].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVPlayerItemMediaDataCollector);
  }

  /// init
  AVPlayerItemMediaDataCollector init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerItemMediaDataCollector.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlayerItemMediaDataCollector new1() {
    final _ret =
        _objc_msgSend_19(_class_AVPlayerItemMediaDataCollector, _sel_new);
    return AVPlayerItemMediaDataCollector.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVPlayerItemMediaDataCollector allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVPlayerItemMediaDataCollector, _sel_allocWithZone_, zone);
    return AVPlayerItemMediaDataCollector.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlayerItemMediaDataCollector alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVPlayerItemMediaDataCollector, _sel_alloc);
    return AVPlayerItemMediaDataCollector.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerItemMediaDataCollector,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerItemMediaDataCollector,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVPlayerItemMediaDataCollector,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVPlayerItemMediaDataCollector, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerItemMediaDataCollector,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerItemMediaDataCollector,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerItemMediaDataCollector,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVPlayerItemMediaDataCollector,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlayerItemMediaDataCollector, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerItemMediaDataCollector =
    objc.getClass("AVPlayerItemMediaDataCollector");
late final _sel_addMediaDataCollector_ =
    objc.registerName("addMediaDataCollector:");
final _objc_msgSend_1258 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeMediaDataCollector_ =
    objc.registerName("removeMediaDataCollector:");
late final _sel_mediaDataCollectors = objc.registerName("mediaDataCollectors");
late final _sel_seekToTime_ = objc.registerName("seekToTime:");
late final _sel_seekToTime_toleranceBefore_toleranceAfter_ =
    objc.registerName("seekToTime:toleranceBefore:toleranceAfter:");
final _objc_msgSend_1259 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMTime, CMTime, CMTime)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMTime, CMTime, CMTime)>();
late final _sel_seekToDate_ = objc.registerName("seekToDate:");
late final _sel_isAuthorizationRequiredForPlayback =
    objc.registerName("isAuthorizationRequiredForPlayback");
late final _sel_isApplicationAuthorizedForPlayback =
    objc.registerName("isApplicationAuthorizedForPlayback");
late final _sel_isContentAuthorizedForPlayback =
    objc.registerName("isContentAuthorizedForPlayback");
late final _sel_requestContentAuthorizationAsynchronouslyWithTimeoutInterval_completionHandler_ =
    objc.registerName(
        "requestContentAuthorizationAsynchronouslyWithTimeoutInterval:completionHandler:");
final _objc_msgSend_1260 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_cancelContentAuthorizationRequest =
    objc.registerName("cancelContentAuthorizationRequest");

enum AVContentAuthorizationStatus {
  AVContentAuthorizationUnknown(0),
  AVContentAuthorizationCompleted(1),
  AVContentAuthorizationCancelled(2),
  AVContentAuthorizationTimedOut(3),
  AVContentAuthorizationBusy(4),
  AVContentAuthorizationNotAvailable(5),
  AVContentAuthorizationNotPossible(6);

  final int value;
  const AVContentAuthorizationStatus(this.value);

  static AVContentAuthorizationStatus fromValue(int value) => switch (value) {
        0 => AVContentAuthorizationUnknown,
        1 => AVContentAuthorizationCompleted,
        2 => AVContentAuthorizationCancelled,
        3 => AVContentAuthorizationTimedOut,
        4 => AVContentAuthorizationBusy,
        5 => AVContentAuthorizationNotAvailable,
        6 => AVContentAuthorizationNotPossible,
        _ => throw ArgumentError(
            "Unknown value for AVContentAuthorizationStatus: $value"),
      };
}

late final _sel_contentAuthorizationRequestStatus =
    objc.registerName("contentAuthorizationRequestStatus");
final _objc_msgSend_1261 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_automaticallyHandlesInterstitialEvents =
    objc.registerName("automaticallyHandlesInterstitialEvents");
late final _sel_setAutomaticallyHandlesInterstitialEvents_ =
    objc.registerName("setAutomaticallyHandlesInterstitialEvents:");
late final _sel_templatePlayerItem = objc.registerName("templatePlayerItem");
final _objc_msgSend_1262 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_playerWithPlayerItem_ =
    objc.registerName("playerWithPlayerItem:");
final _objc_msgSend_1263 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithPlayerItem_ = objc.registerName("initWithPlayerItem:");

enum AVPlayerStatus {
  AVPlayerStatusUnknown(0),
  AVPlayerStatusReadyToPlay(1),
  AVPlayerStatusFailed(2);

  final int value;
  const AVPlayerStatus(this.value);

  static AVPlayerStatus fromValue(int value) => switch (value) {
        0 => AVPlayerStatusUnknown,
        1 => AVPlayerStatusReadyToPlay,
        2 => AVPlayerStatusFailed,
        _ => throw ArgumentError("Unknown value for AVPlayerStatus: $value"),
      };
}

final _objc_msgSend_1264 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_rate = objc.registerName("rate");
late final _sel_setRate_ = objc.registerName("setRate:");
late final _sel_defaultRate = objc.registerName("defaultRate");
late final _sel_setDefaultRate_ = objc.registerName("setDefaultRate:");
late final _sel_play = objc.registerName("play");

enum AVPlayerTimeControlStatus {
  AVPlayerTimeControlStatusPaused(0),
  AVPlayerTimeControlStatusWaitingToPlayAtSpecifiedRate(1),
  AVPlayerTimeControlStatusPlaying(2);

  final int value;
  const AVPlayerTimeControlStatus(this.value);

  static AVPlayerTimeControlStatus fromValue(int value) => switch (value) {
        0 => AVPlayerTimeControlStatusPaused,
        1 => AVPlayerTimeControlStatusWaitingToPlayAtSpecifiedRate,
        2 => AVPlayerTimeControlStatusPlaying,
        _ => throw ArgumentError(
            "Unknown value for AVPlayerTimeControlStatus: $value"),
      };
}

late final _sel_timeControlStatus = objc.registerName("timeControlStatus");
final _objc_msgSend_1265 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_reasonForWaitingToPlay =
    objc.registerName("reasonForWaitingToPlay");
late final _sel_playImmediatelyAtRate_ =
    objc.registerName("playImmediatelyAtRate:");
final _objc_msgSend_1266 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_currentItem = objc.registerName("currentItem");
late final _sel_replaceCurrentItemWithPlayerItem_ =
    objc.registerName("replaceCurrentItemWithPlayerItem:");
final _objc_msgSend_1267 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum AVPlayerActionAtItemEnd {
  AVPlayerActionAtItemEndAdvance(0),
  AVPlayerActionAtItemEndPause(1),
  AVPlayerActionAtItemEndNone(2);

  final int value;
  const AVPlayerActionAtItemEnd(this.value);

  static AVPlayerActionAtItemEnd fromValue(int value) => switch (value) {
        0 => AVPlayerActionAtItemEndAdvance,
        1 => AVPlayerActionAtItemEndPause,
        2 => AVPlayerActionAtItemEndNone,
        _ => throw ArgumentError(
            "Unknown value for AVPlayerActionAtItemEnd: $value"),
      };
}

late final _sel_actionAtItemEnd = objc.registerName("actionAtItemEnd");
final _objc_msgSend_1268 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setActionAtItemEnd_ = objc.registerName("setActionAtItemEnd:");
final _objc_msgSend_1269 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_1270 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
final _objc_msgSend_1271 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTime,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
final _objc_msgSend_1272 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                CMTime,
                CMTime,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTime,
            CMTime,
            CMTime,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_automaticallyWaitsToMinimizeStalling =
    objc.registerName("automaticallyWaitsToMinimizeStalling");
late final _sel_setAutomaticallyWaitsToMinimizeStalling_ =
    objc.registerName("setAutomaticallyWaitsToMinimizeStalling:");
late final _sel_setRate_time_atHostTime_ =
    objc.registerName("setRate:time:atHostTime:");
final _objc_msgSend_1273 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float, CMTime, CMTime)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, CMTime, CMTime)>();
late final _sel_prerollAtRate_completionHandler_ =
    objc.registerName("prerollAtRate:completionHandler:");
final _objc_msgSend_1274 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Float,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_cancelPendingPrerolls =
    objc.registerName("cancelPendingPrerolls");

final class OpaqueCMClock extends ffi.Opaque {}

late final _sel_sourceClock = objc.registerName("sourceClock");
final _objc_msgSend_1275 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<OpaqueCMClock> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<OpaqueCMClock> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setSourceClock_ = objc.registerName("setSourceClock:");
final _objc_msgSend_1276 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<OpaqueCMClock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<OpaqueCMClock>)>();
void _ObjCBlock_ffiVoid_CMTime_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, CMTime arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(CMTime arg0)>>()
        .asFunction<void Function(CMTime)>()(arg0);
void _ObjCBlock_ffiVoid_CMTime_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, CMTime arg0) =>
    (objc.getBlockClosure(block) as void Function(CMTime))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(CMTime)>`.
abstract final class ObjCBlock_ffiVoid_CMTime {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(CMTime)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(CMTime)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(CMTime)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CMTime arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(CMTime)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Void Function(
                                  ffi.Pointer<objc.ObjCBlockImpl>, CMTime)>(
                          _ObjCBlock_ffiVoid_CMTime_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(CMTime)> fromFunction(
          void Function(CMTime) fn) =>
      objc.ObjCBlock<ffi.Void Function(CMTime)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                          CMTime)>(_ObjCBlock_ffiVoid_CMTime_closureTrampoline)
                  .cast(),
              (CMTime arg0) => fn(arg0)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(CMTime)> listener(
      void Function(CMTime) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>, CMTime)>.listener(
                _ObjCBlock_ffiVoid_CMTime_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (CMTime arg0) => fn(arg0));
    return objc.ObjCBlock<ffi.Void Function(CMTime)>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, CMTime)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(CMTime)>`.
extension ObjCBlock_ffiVoid_CMTime_CallExtension
    on objc.ObjCBlock<ffi.Void Function(CMTime)> {
  void call(CMTime arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block, CMTime arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlockImpl>, CMTime)>()(
      pointer, arg0);
}

late final _sel_addPeriodicTimeObserverForInterval_queue_usingBlock_ =
    objc.registerName("addPeriodicTimeObserverForInterval:queue:usingBlock:");
final _objc_msgSend_1277 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTime,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_addBoundaryTimeObserverForTimes_queue_usingBlock_ =
    objc.registerName("addBoundaryTimeObserverForTimes:queue:usingBlock:");
final _objc_msgSend_1278 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_removeTimeObserver_ = objc.registerName("removeTimeObserver:");
late final _sel_volume = objc.registerName("volume");
late final _sel_setVolume_ = objc.registerName("setVolume:");
late final _sel_isMuted = objc.registerName("isMuted");
late final _sel_setMuted_ = objc.registerName("setMuted:");
late final _sel_appliesMediaSelectionCriteriaAutomatically =
    objc.registerName("appliesMediaSelectionCriteriaAutomatically");
late final _sel_setAppliesMediaSelectionCriteriaAutomatically_ =
    objc.registerName("setAppliesMediaSelectionCriteriaAutomatically:");

/// AVPlayerMediaSelectionCriteria
class AVPlayerMediaSelectionCriteria extends objc.NSObject {
  AVPlayerMediaSelectionCriteria._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerMediaSelectionCriteria] that points to the same underlying object as [other].
  AVPlayerMediaSelectionCriteria.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerMediaSelectionCriteria] that wraps the given raw object pointer.
  AVPlayerMediaSelectionCriteria.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerMediaSelectionCriteria].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVPlayerMediaSelectionCriteria);
  }

  /// preferredLanguages
  objc.NSArray? get preferredLanguages {
    final _ret = _objc_msgSend_88(this.pointer, _sel_preferredLanguages);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredMediaCharacteristics
  objc.NSArray? get preferredMediaCharacteristics {
    final _ret =
        _objc_msgSend_88(this.pointer, _sel_preferredMediaCharacteristics);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// principalMediaCharacteristics
  objc.NSArray? get principalMediaCharacteristics {
    final _ret =
        _objc_msgSend_88(this.pointer, _sel_principalMediaCharacteristics);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithPreferredLanguages:preferredMediaCharacteristics:
  AVPlayerMediaSelectionCriteria
      initWithPreferredLanguages_preferredMediaCharacteristics_(
          objc.NSArray? preferredLanguages,
          objc.NSArray? preferredMediaCharacteristics) {
    final _ret = _objc_msgSend_1279(
        this.pointer,
        _sel_initWithPreferredLanguages_preferredMediaCharacteristics_,
        preferredLanguages?.pointer ?? ffi.nullptr,
        preferredMediaCharacteristics?.pointer ?? ffi.nullptr);
    return AVPlayerMediaSelectionCriteria.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithPrincipalMediaCharacteristics:preferredLanguages:preferredMediaCharacteristics:
  AVPlayerMediaSelectionCriteria
      initWithPrincipalMediaCharacteristics_preferredLanguages_preferredMediaCharacteristics_(
          objc.NSArray? principalMediaCharacteristics,
          objc.NSArray? preferredLanguages,
          objc.NSArray? preferredMediaCharacteristics) {
    final _ret = _objc_msgSend_1280(
        this.pointer,
        _sel_initWithPrincipalMediaCharacteristics_preferredLanguages_preferredMediaCharacteristics_,
        principalMediaCharacteristics?.pointer ?? ffi.nullptr,
        preferredLanguages?.pointer ?? ffi.nullptr,
        preferredMediaCharacteristics?.pointer ?? ffi.nullptr);
    return AVPlayerMediaSelectionCriteria.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  AVPlayerMediaSelectionCriteria init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerMediaSelectionCriteria.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlayerMediaSelectionCriteria new1() {
    final _ret =
        _objc_msgSend_19(_class_AVPlayerMediaSelectionCriteria, _sel_new);
    return AVPlayerMediaSelectionCriteria.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVPlayerMediaSelectionCriteria allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVPlayerMediaSelectionCriteria, _sel_allocWithZone_, zone);
    return AVPlayerMediaSelectionCriteria.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlayerMediaSelectionCriteria alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVPlayerMediaSelectionCriteria, _sel_alloc);
    return AVPlayerMediaSelectionCriteria.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerMediaSelectionCriteria,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerMediaSelectionCriteria,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVPlayerMediaSelectionCriteria,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVPlayerMediaSelectionCriteria, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerMediaSelectionCriteria,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerMediaSelectionCriteria,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerMediaSelectionCriteria,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVPlayerMediaSelectionCriteria,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlayerMediaSelectionCriteria, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerMediaSelectionCriteria =
    objc.getClass("AVPlayerMediaSelectionCriteria");
late final _sel_preferredLanguages = objc.registerName("preferredLanguages");
late final _sel_preferredMediaCharacteristics =
    objc.registerName("preferredMediaCharacteristics");
late final _sel_principalMediaCharacteristics =
    objc.registerName("principalMediaCharacteristics");
late final _sel_initWithPreferredLanguages_preferredMediaCharacteristics_ = objc
    .registerName("initWithPreferredLanguages:preferredMediaCharacteristics:");
final _objc_msgSend_1279 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithPrincipalMediaCharacteristics_preferredLanguages_preferredMediaCharacteristics_ =
    objc.registerName(
        "initWithPrincipalMediaCharacteristics:preferredLanguages:preferredMediaCharacteristics:");
final _objc_msgSend_1280 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setMediaSelectionCriteria_forMediaCharacteristic_ =
    objc.registerName("setMediaSelectionCriteria:forMediaCharacteristic:");
final _objc_msgSend_1281 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_mediaSelectionCriteriaForMediaCharacteristic_ =
    objc.registerName("mediaSelectionCriteriaForMediaCharacteristic:");
final _objc_msgSend_1282 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_audioOutputDeviceUniqueID =
    objc.registerName("audioOutputDeviceUniqueID");
late final _sel_setAudioOutputDeviceUniqueID_ =
    objc.registerName("setAudioOutputDeviceUniqueID:");
late final _sel_allowsExternalPlayback =
    objc.registerName("allowsExternalPlayback");
late final _sel_setAllowsExternalPlayback_ =
    objc.registerName("setAllowsExternalPlayback:");
late final _sel_isExternalPlaybackActive =
    objc.registerName("isExternalPlaybackActive");
late final _sel_usesExternalPlaybackWhileExternalScreenIsActive =
    objc.registerName("usesExternalPlaybackWhileExternalScreenIsActive");
late final _sel_setUsesExternalPlaybackWhileExternalScreenIsActive_ =
    objc.registerName("setUsesExternalPlaybackWhileExternalScreenIsActive:");
late final _sel_externalPlaybackVideoGravity =
    objc.registerName("externalPlaybackVideoGravity");
late final _sel_setExternalPlaybackVideoGravity_ =
    objc.registerName("setExternalPlaybackVideoGravity:");
late final _sel_outputObscuredDueToInsufficientExternalProtection =
    objc.registerName("outputObscuredDueToInsufficientExternalProtection");

enum AVPlayerHDRMode {
  AVPlayerHDRModeHLG(1),
  AVPlayerHDRModeHDR10(2),
  AVPlayerHDRModeDolbyVision(4);

  final int value;
  const AVPlayerHDRMode(this.value);

  static AVPlayerHDRMode fromValue(int value) => switch (value) {
        1 => AVPlayerHDRModeHLG,
        2 => AVPlayerHDRModeHDR10,
        4 => AVPlayerHDRModeDolbyVision,
        _ => throw ArgumentError("Unknown value for AVPlayerHDRMode: $value"),
      };
}

late final _sel_availableHDRModes = objc.registerName("availableHDRModes");
final _objc_msgSend_1283 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_eligibleForHDRPlayback =
    objc.registerName("eligibleForHDRPlayback");
late final _sel_preferredVideoDecoderGPURegistryID =
    objc.registerName("preferredVideoDecoderGPURegistryID");
late final _sel_setPreferredVideoDecoderGPURegistryID_ =
    objc.registerName("setPreferredVideoDecoderGPURegistryID:");
final _objc_msgSend_1284 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint64)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_preventsDisplaySleepDuringVideoPlayback =
    objc.registerName("preventsDisplaySleepDuringVideoPlayback");
late final _sel_setPreventsDisplaySleepDuringVideoPlayback_ =
    objc.registerName("setPreventsDisplaySleepDuringVideoPlayback:");
late final _sel_preventsAutomaticBackgroundingDuringVideoPlayback =
    objc.registerName("preventsAutomaticBackgroundingDuringVideoPlayback");
late final _sel_setPreventsAutomaticBackgroundingDuringVideoPlayback_ =
    objc.registerName("setPreventsAutomaticBackgroundingDuringVideoPlayback:");

enum AVPlayerAudiovisualBackgroundPlaybackPolicy {
  AVPlayerAudiovisualBackgroundPlaybackPolicyAutomatic(1),
  AVPlayerAudiovisualBackgroundPlaybackPolicyPauses(2),
  AVPlayerAudiovisualBackgroundPlaybackPolicyContinuesIfPossible(3);

  final int value;
  const AVPlayerAudiovisualBackgroundPlaybackPolicy(this.value);

  static AVPlayerAudiovisualBackgroundPlaybackPolicy fromValue(int value) =>
      switch (value) {
        1 => AVPlayerAudiovisualBackgroundPlaybackPolicyAutomatic,
        2 => AVPlayerAudiovisualBackgroundPlaybackPolicyPauses,
        3 => AVPlayerAudiovisualBackgroundPlaybackPolicyContinuesIfPossible,
        _ => throw ArgumentError(
            "Unknown value for AVPlayerAudiovisualBackgroundPlaybackPolicy: $value"),
      };
}

late final _sel_audiovisualBackgroundPlaybackPolicy =
    objc.registerName("audiovisualBackgroundPlaybackPolicy");
final _objc_msgSend_1285 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAudiovisualBackgroundPlaybackPolicy_ =
    objc.registerName("setAudiovisualBackgroundPlaybackPolicy:");
final _objc_msgSend_1286 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

/// AVPlayerPlaybackCoordinator
class AVPlayerPlaybackCoordinator extends AVPlaybackCoordinator {
  AVPlayerPlaybackCoordinator._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerPlaybackCoordinator] that points to the same underlying object as [other].
  AVPlayerPlaybackCoordinator.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerPlaybackCoordinator] that wraps the given raw object pointer.
  AVPlayerPlaybackCoordinator.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerPlaybackCoordinator].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVPlayerPlaybackCoordinator);
  }

  /// init
  AVPlayerPlaybackCoordinator init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerPlaybackCoordinator.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlayerPlaybackCoordinator new1() {
    final _ret = _objc_msgSend_19(_class_AVPlayerPlaybackCoordinator, _sel_new);
    return AVPlayerPlaybackCoordinator.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// player
  AVPlayer? get player {
    final _ret = _objc_msgSend_1287(this.pointer, _sel_player);
    return _ret.address == 0
        ? null
        : AVPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// allocWithZone:
  static AVPlayerPlaybackCoordinator allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVPlayerPlaybackCoordinator, _sel_allocWithZone_, zone);
    return AVPlayerPlaybackCoordinator.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlayerPlaybackCoordinator alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVPlayerPlaybackCoordinator, _sel_alloc);
    return AVPlayerPlaybackCoordinator.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerPlaybackCoordinator,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerPlaybackCoordinator,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVPlayerPlaybackCoordinator,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVPlayerPlaybackCoordinator, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerPlaybackCoordinator,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerPlaybackCoordinator,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerPlaybackCoordinator,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVPlayerPlaybackCoordinator,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlayerPlaybackCoordinator, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerPlaybackCoordinator =
    objc.getClass("AVPlayerPlaybackCoordinator");
late final _sel_player = objc.registerName("player");
final _objc_msgSend_1287 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVPlaybackCoordinator
class AVPlaybackCoordinator extends objc.NSObject {
  AVPlaybackCoordinator._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlaybackCoordinator] that points to the same underlying object as [other].
  AVPlaybackCoordinator.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlaybackCoordinator] that wraps the given raw object pointer.
  AVPlaybackCoordinator.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlaybackCoordinator].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVPlaybackCoordinator);
  }

  /// init
  AVPlaybackCoordinator init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlaybackCoordinator.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlaybackCoordinator new1() {
    final _ret = _objc_msgSend_19(_class_AVPlaybackCoordinator, _sel_new);
    return AVPlaybackCoordinator.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// otherParticipants
  objc.NSArray get otherParticipants {
    final _ret = _objc_msgSend_33(this.pointer, _sel_otherParticipants);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// suspensionReasons
  objc.NSArray get suspensionReasons {
    final _ret = _objc_msgSend_33(this.pointer, _sel_suspensionReasons);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// beginSuspensionForReason:
  AVCoordinatedPlaybackSuspension beginSuspensionForReason_(
      objc.NSString suspensionReason) {
    final _ret = _objc_msgSend_1288(
        this.pointer, _sel_beginSuspensionForReason_, suspensionReason.pointer);
    return AVCoordinatedPlaybackSuspension.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// expectedItemTimeAtHostTime:
  void expectedItemTimeAtHostTime_(
      ffi.Pointer<CMTime> stret, CMTime hostClockTime) {
    objc.useMsgSendVariants
        ? _objc_msgSend_723Stret(stret, this.pointer,
            _sel_expectedItemTimeAtHostTime_, hostClockTime)
        : stret.ref = _objc_msgSend_723(
            this.pointer, _sel_expectedItemTimeAtHostTime_, hostClockTime);
  }

  /// setParticipantLimit:forWaitingOutSuspensionsWithReason:
  void setParticipantLimit_forWaitingOutSuspensionsWithReason_(
      int participantLimit, objc.NSString reason) {
    _objc_msgSend_1289(
        this.pointer,
        _sel_setParticipantLimit_forWaitingOutSuspensionsWithReason_,
        participantLimit,
        reason.pointer);
  }

  /// participantLimitForWaitingOutSuspensionsWithReason:
  int participantLimitForWaitingOutSuspensionsWithReason_(
      objc.NSString reason) {
    return _objc_msgSend_1290(
        this.pointer,
        _sel_participantLimitForWaitingOutSuspensionsWithReason_,
        reason.pointer);
  }

  /// suspensionReasonsThatTriggerWaiting
  objc.NSArray get suspensionReasonsThatTriggerWaiting {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_suspensionReasonsThatTriggerWaiting);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSuspensionReasonsThatTriggerWaiting:
  set suspensionReasonsThatTriggerWaiting(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer,
        _sel_setSuspensionReasonsThatTriggerWaiting_, value.pointer);
  }

  /// pauseSnapsToMediaTimeOfOriginator
  bool get pauseSnapsToMediaTimeOfOriginator {
    return _objc_msgSend_13(
        this.pointer, _sel_pauseSnapsToMediaTimeOfOriginator);
  }

  /// setPauseSnapsToMediaTimeOfOriginator:
  set pauseSnapsToMediaTimeOfOriginator(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setPauseSnapsToMediaTimeOfOriginator_, value);
  }

  /// allocWithZone:
  static AVPlaybackCoordinator allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVPlaybackCoordinator, _sel_allocWithZone_, zone);
    return AVPlaybackCoordinator.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlaybackCoordinator alloc() {
    final _ret = _objc_msgSend_19(_class_AVPlaybackCoordinator, _sel_alloc);
    return AVPlaybackCoordinator.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlaybackCoordinator,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlaybackCoordinator,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVPlaybackCoordinator, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVPlaybackCoordinator, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlaybackCoordinator,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlaybackCoordinator,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlaybackCoordinator,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVPlaybackCoordinator, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlaybackCoordinator, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlaybackCoordinator =
    objc.getClass("AVPlaybackCoordinator");
late final _sel_otherParticipants = objc.registerName("otherParticipants");
late final _sel_suspensionReasons = objc.registerName("suspensionReasons");

/// AVCoordinatedPlaybackSuspension
class AVCoordinatedPlaybackSuspension extends objc.NSObject {
  AVCoordinatedPlaybackSuspension._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCoordinatedPlaybackSuspension] that points to the same underlying object as [other].
  AVCoordinatedPlaybackSuspension.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCoordinatedPlaybackSuspension] that wraps the given raw object pointer.
  AVCoordinatedPlaybackSuspension.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCoordinatedPlaybackSuspension].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVCoordinatedPlaybackSuspension);
  }

  /// init
  AVCoordinatedPlaybackSuspension init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCoordinatedPlaybackSuspension.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCoordinatedPlaybackSuspension new1() {
    final _ret =
        _objc_msgSend_19(_class_AVCoordinatedPlaybackSuspension, _sel_new);
    return AVCoordinatedPlaybackSuspension.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// reason
  objc.NSString get reason {
    final _ret = _objc_msgSend_11(this.pointer, _sel_reason);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// beginDate
  objc.NSDate get beginDate {
    final _ret = _objc_msgSend_224(this.pointer, _sel_beginDate);
    return objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// end
  void end() {
    _objc_msgSend_7(this.pointer, _sel_end);
  }

  /// endProposingNewTime:
  void endProposingNewTime_(CMTime time) {
    _objc_msgSend_1067(this.pointer, _sel_endProposingNewTime_, time);
  }

  /// allocWithZone:
  static AVCoordinatedPlaybackSuspension allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCoordinatedPlaybackSuspension, _sel_allocWithZone_, zone);
    return AVCoordinatedPlaybackSuspension.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCoordinatedPlaybackSuspension alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVCoordinatedPlaybackSuspension, _sel_alloc);
    return AVCoordinatedPlaybackSuspension.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCoordinatedPlaybackSuspension,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCoordinatedPlaybackSuspension,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVCoordinatedPlaybackSuspension,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCoordinatedPlaybackSuspension, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCoordinatedPlaybackSuspension,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCoordinatedPlaybackSuspension,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCoordinatedPlaybackSuspension,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVCoordinatedPlaybackSuspension,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCoordinatedPlaybackSuspension, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCoordinatedPlaybackSuspension =
    objc.getClass("AVCoordinatedPlaybackSuspension");
late final _sel_beginDate = objc.registerName("beginDate");
late final _sel_end = objc.registerName("end");
late final _sel_endProposingNewTime_ =
    objc.registerName("endProposingNewTime:");
late final _sel_beginSuspensionForReason_ =
    objc.registerName("beginSuspensionForReason:");
final _objc_msgSend_1288 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_expectedItemTimeAtHostTime_ =
    objc.registerName("expectedItemTimeAtHostTime:");
late final _sel_setParticipantLimit_forWaitingOutSuspensionsWithReason_ = objc
    .registerName("setParticipantLimit:forWaitingOutSuspensionsWithReason:");
final _objc_msgSend_1289 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_participantLimitForWaitingOutSuspensionsWithReason_ =
    objc.registerName("participantLimitForWaitingOutSuspensionsWithReason:");
final _objc_msgSend_1290 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_suspensionReasonsThatTriggerWaiting =
    objc.registerName("suspensionReasonsThatTriggerWaiting");
late final _sel_setSuspensionReasonsThatTriggerWaiting_ =
    objc.registerName("setSuspensionReasonsThatTriggerWaiting:");
late final _sel_pauseSnapsToMediaTimeOfOriginator =
    objc.registerName("pauseSnapsToMediaTimeOfOriginator");
late final _sel_setPauseSnapsToMediaTimeOfOriginator_ =
    objc.registerName("setPauseSnapsToMediaTimeOfOriginator:");
late final _sel_playbackCoordinator = objc.registerName("playbackCoordinator");
final _objc_msgSend_1291 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVPlayerVideoOutput
class AVPlayerVideoOutput extends objc.NSObject {
  AVPlayerVideoOutput._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerVideoOutput] that points to the same underlying object as [other].
  AVPlayerVideoOutput.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerVideoOutput] that wraps the given raw object pointer.
  AVPlayerVideoOutput.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerVideoOutput].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVPlayerVideoOutput);
  }

  /// init
  AVPlayerVideoOutput init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerVideoOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlayerVideoOutput new1() {
    final _ret = _objc_msgSend_19(_class_AVPlayerVideoOutput, _sel_new);
    return AVPlayerVideoOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithSpecification:
  AVPlayerVideoOutput initWithSpecification_(
      AVVideoOutputSpecification specification) {
    final _ret = _objc_msgSend_1294(
        this.pointer, _sel_initWithSpecification_, specification.pointer);
    return AVPlayerVideoOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// copyTaggedBufferGroupForHostTime:presentationTimeStamp:activeConfiguration:
  ffi.Pointer<OpaqueCMTaggedBufferGroup>
      copyTaggedBufferGroupForHostTime_presentationTimeStamp_activeConfiguration_(
          CMTime hostTime,
          ffi.Pointer<CMTime> presentationTimeStampOut,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> activeConfigurationOut) {
    return _objc_msgSend_1295(
        this.pointer,
        _sel_copyTaggedBufferGroupForHostTime_presentationTimeStamp_activeConfiguration_,
        hostTime,
        presentationTimeStampOut,
        activeConfigurationOut);
  }

  /// allocWithZone:
  static AVPlayerVideoOutput allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVPlayerVideoOutput, _sel_allocWithZone_, zone);
    return AVPlayerVideoOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlayerVideoOutput alloc() {
    final _ret = _objc_msgSend_19(_class_AVPlayerVideoOutput, _sel_alloc);
    return AVPlayerVideoOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerVideoOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerVideoOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVPlayerVideoOutput, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVPlayerVideoOutput, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerVideoOutput,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerVideoOutput,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerVideoOutput,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVPlayerVideoOutput, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlayerVideoOutput, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerVideoOutput = objc.getClass("AVPlayerVideoOutput");

/// AVVideoOutputSpecification
class AVVideoOutputSpecification extends objc.NSObject {
  AVVideoOutputSpecification._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVVideoOutputSpecification] that points to the same underlying object as [other].
  AVVideoOutputSpecification.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVVideoOutputSpecification] that wraps the given raw object pointer.
  AVVideoOutputSpecification.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVVideoOutputSpecification].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVVideoOutputSpecification);
  }

  /// init
  AVVideoOutputSpecification init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVVideoOutputSpecification.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVVideoOutputSpecification new1() {
    final _ret = _objc_msgSend_19(_class_AVVideoOutputSpecification, _sel_new);
    return AVVideoOutputSpecification.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithTagCollections:
  AVVideoOutputSpecification initWithTagCollections_(
      objc.NSArray tagCollections) {
    final _ret = _objc_msgSend_1292(
        this.pointer, _sel_initWithTagCollections_, tagCollections.pointer);
    return AVVideoOutputSpecification.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setOutputPixelBufferAttributes:forTagCollection:
  void setOutputPixelBufferAttributes_forTagCollection_(
      objc.NSDictionary? pixelBufferAttributes,
      ffi.Pointer<OpaqueCMTagCollection> tagCollection) {
    _objc_msgSend_1293(
        this.pointer,
        _sel_setOutputPixelBufferAttributes_forTagCollection_,
        pixelBufferAttributes?.pointer ?? ffi.nullptr,
        tagCollection);
  }

  /// preferredTagCollections
  objc.NSArray get preferredTagCollections {
    final _ret = _objc_msgSend_33(this.pointer, _sel_preferredTagCollections);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultPixelBufferAttributes
  objc.NSDictionary? get defaultPixelBufferAttributes {
    final _ret =
        _objc_msgSend_84(this.pointer, _sel_defaultPixelBufferAttributes);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDefaultPixelBufferAttributes:
  set defaultPixelBufferAttributes(objc.NSDictionary? value) {
    return _objc_msgSend_189(this.pointer,
        _sel_setDefaultPixelBufferAttributes_, value?.pointer ?? ffi.nullptr);
  }

  /// allocWithZone:
  static AVVideoOutputSpecification allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVVideoOutputSpecification, _sel_allocWithZone_, zone);
    return AVVideoOutputSpecification.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVVideoOutputSpecification alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVVideoOutputSpecification, _sel_alloc);
    return AVVideoOutputSpecification.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVVideoOutputSpecification,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVVideoOutputSpecification,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVVideoOutputSpecification,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVVideoOutputSpecification, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVVideoOutputSpecification,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVVideoOutputSpecification,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVVideoOutputSpecification,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVVideoOutputSpecification, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVVideoOutputSpecification, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVVideoOutputSpecification =
    objc.getClass("AVVideoOutputSpecification");
late final _sel_initWithTagCollections_ =
    objc.registerName("initWithTagCollections:");
final _objc_msgSend_1292 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

final class OpaqueCMTagCollection extends ffi.Opaque {}

late final _sel_setOutputPixelBufferAttributes_forTagCollection_ =
    objc.registerName("setOutputPixelBufferAttributes:forTagCollection:");
final _objc_msgSend_1293 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<OpaqueCMTagCollection>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<OpaqueCMTagCollection>)>();
late final _sel_preferredTagCollections =
    objc.registerName("preferredTagCollections");
late final _sel_defaultPixelBufferAttributes =
    objc.registerName("defaultPixelBufferAttributes");
late final _sel_setDefaultPixelBufferAttributes_ =
    objc.registerName("setDefaultPixelBufferAttributes:");
late final _sel_initWithSpecification_ =
    objc.registerName("initWithSpecification:");
final _objc_msgSend_1294 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

final class OpaqueCMTaggedBufferGroup extends ffi.Opaque {}

/// AVPlayerVideoOutputConfiguration
class AVPlayerVideoOutputConfiguration extends objc.NSObject {
  AVPlayerVideoOutputConfiguration._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerVideoOutputConfiguration] that points to the same underlying object as [other].
  AVPlayerVideoOutputConfiguration.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerVideoOutputConfiguration] that wraps the given raw object pointer.
  AVPlayerVideoOutputConfiguration.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerVideoOutputConfiguration].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVPlayerVideoOutputConfiguration);
  }

  /// init
  AVPlayerVideoOutputConfiguration init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerVideoOutputConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlayerVideoOutputConfiguration new1() {
    final _ret =
        _objc_msgSend_19(_class_AVPlayerVideoOutputConfiguration, _sel_new);
    return AVPlayerVideoOutputConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// sourcePlayerItem
  AVPlayerItem? get sourcePlayerItem {
    final _ret = _objc_msgSend_1262(this.pointer, _sel_sourcePlayerItem);
    return _ret.address == 0
        ? null
        : AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// dataChannelDescriptions
  objc.NSArray get dataChannelDescriptions {
    final _ret = _objc_msgSend_33(this.pointer, _sel_dataChannelDescriptions);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// activationTime
  void getActivationTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_activationTime)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_activationTime);
  }

  /// allocWithZone:
  static AVPlayerVideoOutputConfiguration allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVPlayerVideoOutputConfiguration, _sel_allocWithZone_, zone);
    return AVPlayerVideoOutputConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlayerVideoOutputConfiguration alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVPlayerVideoOutputConfiguration, _sel_alloc);
    return AVPlayerVideoOutputConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerVideoOutputConfiguration,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerVideoOutputConfiguration,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVPlayerVideoOutputConfiguration,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVPlayerVideoOutputConfiguration, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerVideoOutputConfiguration,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerVideoOutputConfiguration,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerVideoOutputConfiguration,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVPlayerVideoOutputConfiguration,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlayerVideoOutputConfiguration, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerVideoOutputConfiguration =
    objc.getClass("AVPlayerVideoOutputConfiguration");
late final _sel_sourcePlayerItem = objc.registerName("sourcePlayerItem");
late final _sel_dataChannelDescriptions =
    objc.registerName("dataChannelDescriptions");
late final _sel_activationTime = objc.registerName("activationTime");
late final _sel_copyTaggedBufferGroupForHostTime_presentationTimeStamp_activeConfiguration_ =
    objc.registerName(
        "copyTaggedBufferGroupForHostTime:presentationTimeStamp:activeConfiguration:");
final _objc_msgSend_1295 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<OpaqueCMTaggedBufferGroup> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                ffi.Pointer<CMTime>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<OpaqueCMTaggedBufferGroup> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTime,
            ffi.Pointer<CMTime>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_videoOutput = objc.registerName("videoOutput");
final _objc_msgSend_1296 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVideoOutput_ = objc.registerName("setVideoOutput:");
final _objc_msgSend_1297 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isClosedCaptionDisplayEnabled =
    objc.registerName("isClosedCaptionDisplayEnabled");
late final _sel_setClosedCaptionDisplayEnabled_ =
    objc.registerName("setClosedCaptionDisplayEnabled:");
late final _sel_masterClock = objc.registerName("masterClock");
late final _sel_setMasterClock_ = objc.registerName("setMasterClock:");

/// AVPlayerItemLegibleOutput
class AVPlayerItemLegibleOutput extends AVPlayerItemOutput {
  AVPlayerItemLegibleOutput._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerItemLegibleOutput] that points to the same underlying object as [other].
  AVPlayerItemLegibleOutput.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerItemLegibleOutput] that wraps the given raw object pointer.
  AVPlayerItemLegibleOutput.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerItemLegibleOutput].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVPlayerItemLegibleOutput);
  }

  /// setDelegate:queue:
  void setDelegate_queue_(
      objc.ObjCObjectBase? delegate, objc.NSObject? delegateQueue) {
    _objc_msgSend_697(
        this.pointer,
        _sel_setDelegate_queue_,
        delegate?.pointer ?? ffi.nullptr,
        delegateQueue?.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// delegateQueue
  objc.NSObject? get delegateQueue {
    final _ret = _objc_msgSend_400(this.pointer, _sel_delegateQueue);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// advanceIntervalForDelegateInvocation
  double get advanceIntervalForDelegateInvocation {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            this.pointer, _sel_advanceIntervalForDelegateInvocation)
        : _objc_msgSend_18(
            this.pointer, _sel_advanceIntervalForDelegateInvocation);
  }

  /// setAdvanceIntervalForDelegateInvocation:
  set advanceIntervalForDelegateInvocation(double value) {
    return _objc_msgSend_226(
        this.pointer, _sel_setAdvanceIntervalForDelegateInvocation_, value);
  }

  /// initWithMediaSubtypesForNativeRepresentation:
  AVPlayerItemLegibleOutput initWithMediaSubtypesForNativeRepresentation_(
      objc.NSArray subtypes) {
    final _ret = _objc_msgSend_1292(this.pointer,
        _sel_initWithMediaSubtypesForNativeRepresentation_, subtypes.pointer);
    return AVPlayerItemLegibleOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// textStylingResolution
  objc.NSString get textStylingResolution {
    final _ret = _objc_msgSend_11(this.pointer, _sel_textStylingResolution);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTextStylingResolution:
  set textStylingResolution(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setTextStylingResolution_, value.pointer);
  }

  /// init
  AVPlayerItemLegibleOutput init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerItemLegibleOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlayerItemLegibleOutput new1() {
    final _ret = _objc_msgSend_19(_class_AVPlayerItemLegibleOutput, _sel_new);
    return AVPlayerItemLegibleOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVPlayerItemLegibleOutput allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVPlayerItemLegibleOutput, _sel_allocWithZone_, zone);
    return AVPlayerItemLegibleOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlayerItemLegibleOutput alloc() {
    final _ret = _objc_msgSend_19(_class_AVPlayerItemLegibleOutput, _sel_alloc);
    return AVPlayerItemLegibleOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerItemLegibleOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerItemLegibleOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVPlayerItemLegibleOutput, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVPlayerItemLegibleOutput, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerItemLegibleOutput,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerItemLegibleOutput,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerItemLegibleOutput,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVPlayerItemLegibleOutput, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlayerItemLegibleOutput, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerItemLegibleOutput =
    objc.getClass("AVPlayerItemLegibleOutput");
late final _sel_advanceIntervalForDelegateInvocation =
    objc.registerName("advanceIntervalForDelegateInvocation");
late final _sel_setAdvanceIntervalForDelegateInvocation_ =
    objc.registerName("setAdvanceIntervalForDelegateInvocation:");
late final _sel_initWithMediaSubtypesForNativeRepresentation_ =
    objc.registerName("initWithMediaSubtypesForNativeRepresentation:");
late final _sel_textStylingResolution =
    objc.registerName("textStylingResolution");
late final _sel_setTextStylingResolution_ =
    objc.registerName("setTextStylingResolution:");

/// AVPlayerInterstitialEvent
class AVPlayerInterstitialEvent extends objc.NSObject {
  AVPlayerInterstitialEvent._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVPlayerInterstitialEvent] that points to the same underlying object as [other].
  AVPlayerInterstitialEvent.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVPlayerInterstitialEvent] that wraps the given raw object pointer.
  AVPlayerInterstitialEvent.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVPlayerInterstitialEvent].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVPlayerInterstitialEvent);
  }

  /// init
  AVPlayerInterstitialEvent init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVPlayerInterstitialEvent.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVPlayerInterstitialEvent new1() {
    final _ret = _objc_msgSend_19(_class_AVPlayerInterstitialEvent, _sel_new);
    return AVPlayerInterstitialEvent.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// interstitialEventWithPrimaryItem:identifier:time:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:
  static AVPlayerInterstitialEvent
      interstitialEventWithPrimaryItem_identifier_time_templateItems_restrictions_resumptionOffset_playoutLimit_userDefinedAttributes_(
          AVPlayerItem primaryItem,
          objc.NSString? identifier,
          CMTime time,
          objc.NSArray templateItems,
          AVPlayerInterstitialEventRestrictions restrictions,
          CMTime resumptionOffset,
          CMTime playoutLimit,
          objc.NSDictionary? userDefinedAttributes) {
    final _ret = _objc_msgSend_1298(
        _class_AVPlayerInterstitialEvent,
        _sel_interstitialEventWithPrimaryItem_identifier_time_templateItems_restrictions_resumptionOffset_playoutLimit_userDefinedAttributes_,
        primaryItem.pointer,
        identifier?.pointer ?? ffi.nullptr,
        time,
        templateItems.pointer,
        restrictions.value,
        resumptionOffset,
        playoutLimit,
        userDefinedAttributes?.pointer ?? ffi.nullptr);
    return AVPlayerInterstitialEvent.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// interstitialEventWithPrimaryItem:identifier:date:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:
  static AVPlayerInterstitialEvent
      interstitialEventWithPrimaryItem_identifier_date_templateItems_restrictions_resumptionOffset_playoutLimit_userDefinedAttributes_(
          AVPlayerItem primaryItem,
          objc.NSString? identifier,
          objc.NSDate date,
          objc.NSArray templateItems,
          AVPlayerInterstitialEventRestrictions restrictions,
          CMTime resumptionOffset,
          CMTime playoutLimit,
          objc.NSDictionary? userDefinedAttributes) {
    final _ret = _objc_msgSend_1299(
        _class_AVPlayerInterstitialEvent,
        _sel_interstitialEventWithPrimaryItem_identifier_date_templateItems_restrictions_resumptionOffset_playoutLimit_userDefinedAttributes_,
        primaryItem.pointer,
        identifier?.pointer ?? ffi.nullptr,
        date.pointer,
        templateItems.pointer,
        restrictions.value,
        resumptionOffset,
        playoutLimit,
        userDefinedAttributes?.pointer ?? ffi.nullptr);
    return AVPlayerInterstitialEvent.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// interstitialEventWithPrimaryItem:time:
  static AVPlayerInterstitialEvent interstitialEventWithPrimaryItem_time_(
      AVPlayerItem primaryItem, CMTime time) {
    final _ret = _objc_msgSend_1300(_class_AVPlayerInterstitialEvent,
        _sel_interstitialEventWithPrimaryItem_time_, primaryItem.pointer, time);
    return AVPlayerInterstitialEvent.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// interstitialEventWithPrimaryItem:date:
  static AVPlayerInterstitialEvent interstitialEventWithPrimaryItem_date_(
      AVPlayerItem primaryItem, objc.NSDate date) {
    final _ret = _objc_msgSend_1301(
        _class_AVPlayerInterstitialEvent,
        _sel_interstitialEventWithPrimaryItem_date_,
        primaryItem.pointer,
        date.pointer);
    return AVPlayerInterstitialEvent.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// primaryItem
  AVPlayerItem? get primaryItem {
    final _ret = _objc_msgSend_1262(this.pointer, _sel_primaryItem);
    return _ret.address == 0
        ? null
        : AVPlayerItem.castFromPointer(_ret, retain: true, release: true);
  }

  /// identifier
  objc.NSString get identifier {
    final _ret = _objc_msgSend_11(this.pointer, _sel_identifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// time
  void getTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_time)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_time);
  }

  /// date
  objc.NSDate? get date {
    final _ret = _objc_msgSend_126(this.pointer, _sel_date);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// templateItems
  objc.NSArray get templateItems {
    final _ret = _objc_msgSend_33(this.pointer, _sel_templateItems);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// restrictions
  AVPlayerInterstitialEventRestrictions get restrictions {
    final _ret = _objc_msgSend_1302(this.pointer, _sel_restrictions);
    return AVPlayerInterstitialEventRestrictions.fromValue(_ret);
  }

  /// resumptionOffset
  void getResumptionOffset(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_resumptionOffset)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_resumptionOffset);
  }

  /// playoutLimit
  void getPlayoutLimit(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_playoutLimit)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_playoutLimit);
  }

  /// alignsStartWithPrimarySegmentBoundary
  bool get alignsStartWithPrimarySegmentBoundary {
    return _objc_msgSend_13(
        this.pointer, _sel_alignsStartWithPrimarySegmentBoundary);
  }

  /// alignsResumptionWithPrimarySegmentBoundary
  bool get alignsResumptionWithPrimarySegmentBoundary {
    return _objc_msgSend_13(
        this.pointer, _sel_alignsResumptionWithPrimarySegmentBoundary);
  }

  /// cue
  objc.NSString get cue {
    final _ret = _objc_msgSend_11(this.pointer, _sel_cue);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// willPlayOnce
  bool get willPlayOnce {
    return _objc_msgSend_13(this.pointer, _sel_willPlayOnce);
  }

  /// userDefinedAttributes
  objc.NSDictionary get userDefinedAttributes {
    final _ret = _objc_msgSend_123(this.pointer, _sel_userDefinedAttributes);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// assetListResponse
  objc.NSDictionary? get assetListResponse {
    final _ret = _objc_msgSend_84(this.pointer, _sel_assetListResponse);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPrimaryItem:
  set primaryItem(AVPlayerItem? value) {
    return _objc_msgSend_1303(
        this.pointer, _sel_setPrimaryItem_, value?.pointer ?? ffi.nullptr);
  }

  /// setIdentifier:
  set identifier(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setIdentifier_, value.pointer);
  }

  /// setTime:
  set time(CMTime value) {
    return _objc_msgSend_1026(this.pointer, _sel_setTime_, value);
  }

  /// setDate:
  set date(objc.NSDate? value) {
    return _objc_msgSend_172(
        this.pointer, _sel_setDate_, value?.pointer ?? ffi.nullptr);
  }

  /// setTemplateItems:
  set templateItems(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setTemplateItems_, value.pointer);
  }

  /// setRestrictions:
  set restrictions(AVPlayerInterstitialEventRestrictions value) {
    return _objc_msgSend_1304(this.pointer, _sel_setRestrictions_, value.value);
  }

  /// setResumptionOffset:
  set resumptionOffset(CMTime value) {
    return _objc_msgSend_1026(this.pointer, _sel_setResumptionOffset_, value);
  }

  /// setPlayoutLimit:
  set playoutLimit(CMTime value) {
    return _objc_msgSend_1026(this.pointer, _sel_setPlayoutLimit_, value);
  }

  /// setAlignsStartWithPrimarySegmentBoundary:
  set alignsStartWithPrimarySegmentBoundary(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAlignsStartWithPrimarySegmentBoundary_, value);
  }

  /// setAlignsResumptionWithPrimarySegmentBoundary:
  set alignsResumptionWithPrimarySegmentBoundary(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setAlignsResumptionWithPrimarySegmentBoundary_, value);
  }

  /// setCue:
  set cue(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setCue_, value.pointer);
  }

  /// setWillPlayOnce:
  set willPlayOnce(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setWillPlayOnce_, value);
  }

  /// setUserDefinedAttributes:
  set userDefinedAttributes(objc.NSDictionary value) {
    return _objc_msgSend_124(
        this.pointer, _sel_setUserDefinedAttributes_, value.pointer);
  }

  /// allocWithZone:
  static AVPlayerInterstitialEvent allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVPlayerInterstitialEvent, _sel_allocWithZone_, zone);
    return AVPlayerInterstitialEvent.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVPlayerInterstitialEvent alloc() {
    final _ret = _objc_msgSend_19(_class_AVPlayerInterstitialEvent, _sel_alloc);
    return AVPlayerInterstitialEvent.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVPlayerInterstitialEvent,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVPlayerInterstitialEvent,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVPlayerInterstitialEvent, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVPlayerInterstitialEvent, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVPlayerInterstitialEvent,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVPlayerInterstitialEvent,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVPlayerInterstitialEvent,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVPlayerInterstitialEvent, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVPlayerInterstitialEvent, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVPlayerInterstitialEvent =
    objc.getClass("AVPlayerInterstitialEvent");

enum AVPlayerInterstitialEventRestrictions {
  AVPlayerInterstitialEventRestrictionNone(0),
  AVPlayerInterstitialEventRestrictionConstrainsSeekingForwardInPrimaryContent(
      1),
  AVPlayerInterstitialEventRestrictionRequiresPlaybackAtPreferredRateForAdvancement(
      4);

  static const AVPlayerInterstitialEventRestrictionDefaultPolicy =
      AVPlayerInterstitialEventRestrictionNone;

  final int value;
  const AVPlayerInterstitialEventRestrictions(this.value);

  static AVPlayerInterstitialEventRestrictions fromValue(int value) =>
      switch (value) {
        0 => AVPlayerInterstitialEventRestrictionNone,
        1 =>
          AVPlayerInterstitialEventRestrictionConstrainsSeekingForwardInPrimaryContent,
        4 =>
          AVPlayerInterstitialEventRestrictionRequiresPlaybackAtPreferredRateForAdvancement,
        _ => throw ArgumentError(
            "Unknown value for AVPlayerInterstitialEventRestrictions: $value"),
      };

  @override
  String toString() {
    if (this == AVPlayerInterstitialEventRestrictionNone)
      return "AVPlayerInterstitialEventRestrictions.AVPlayerInterstitialEventRestrictionNone, AVPlayerInterstitialEventRestrictions.AVPlayerInterstitialEventRestrictionDefaultPolicy";
    return super.toString();
  }
}

late final _sel_interstitialEventWithPrimaryItem_identifier_time_templateItems_restrictions_resumptionOffset_playoutLimit_userDefinedAttributes_ =
    objc.registerName(
        "interstitialEventWithPrimaryItem:identifier:time:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:");
final _objc_msgSend_1298 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                CMTime,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                CMTime,
                CMTime,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            CMTime,
            ffi.Pointer<objc.ObjCObject>,
            int,
            CMTime,
            CMTime,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_interstitialEventWithPrimaryItem_identifier_date_templateItems_restrictions_resumptionOffset_playoutLimit_userDefinedAttributes_ =
    objc.registerName(
        "interstitialEventWithPrimaryItem:identifier:date:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:");
final _objc_msgSend_1299 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                CMTime,
                CMTime,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            CMTime,
            CMTime,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_interstitialEventWithPrimaryItem_time_ =
    objc.registerName("interstitialEventWithPrimaryItem:time:");
final _objc_msgSend_1300 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CMTime)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CMTime)>();
late final _sel_interstitialEventWithPrimaryItem_date_ =
    objc.registerName("interstitialEventWithPrimaryItem:date:");
final _objc_msgSend_1301 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_primaryItem = objc.registerName("primaryItem");
late final _sel_templateItems = objc.registerName("templateItems");
late final _sel_restrictions = objc.registerName("restrictions");
final _objc_msgSend_1302 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_resumptionOffset = objc.registerName("resumptionOffset");
late final _sel_playoutLimit = objc.registerName("playoutLimit");
late final _sel_alignsStartWithPrimarySegmentBoundary =
    objc.registerName("alignsStartWithPrimarySegmentBoundary");
late final _sel_alignsResumptionWithPrimarySegmentBoundary =
    objc.registerName("alignsResumptionWithPrimarySegmentBoundary");
late final _sel_cue = objc.registerName("cue");
late final _sel_willPlayOnce = objc.registerName("willPlayOnce");
late final _sel_userDefinedAttributes =
    objc.registerName("userDefinedAttributes");
late final _sel_assetListResponse = objc.registerName("assetListResponse");
late final _sel_setPrimaryItem_ = objc.registerName("setPrimaryItem:");
final _objc_msgSend_1303 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setDate_ = objc.registerName("setDate:");
late final _sel_setTemplateItems_ = objc.registerName("setTemplateItems:");
late final _sel_setRestrictions_ = objc.registerName("setRestrictions:");
final _objc_msgSend_1304 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setResumptionOffset_ =
    objc.registerName("setResumptionOffset:");
late final _sel_setPlayoutLimit_ = objc.registerName("setPlayoutLimit:");
late final _sel_setAlignsStartWithPrimarySegmentBoundary_ =
    objc.registerName("setAlignsStartWithPrimarySegmentBoundary:");
late final _sel_setAlignsResumptionWithPrimarySegmentBoundary_ =
    objc.registerName("setAlignsResumptionWithPrimarySegmentBoundary:");
late final _sel_setCue_ = objc.registerName("setCue:");
late final _sel_setWillPlayOnce_ = objc.registerName("setWillPlayOnce:");
late final _sel_setUserDefinedAttributes_ =
    objc.registerName("setUserDefinedAttributes:");

/// AVSampleBufferAudioRenderer
class AVSampleBufferAudioRenderer extends objc.NSObject {
  AVSampleBufferAudioRenderer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVSampleBufferAudioRenderer] that points to the same underlying object as [other].
  AVSampleBufferAudioRenderer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVSampleBufferAudioRenderer] that wraps the given raw object pointer.
  AVSampleBufferAudioRenderer.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVSampleBufferAudioRenderer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVSampleBufferAudioRenderer);
  }

  /// status
  AVQueuedSampleBufferRenderingStatus get status {
    final _ret = _objc_msgSend_1305(this.pointer, _sel_status);
    return AVQueuedSampleBufferRenderingStatus.fromValue(_ret);
  }

  /// error
  objc.NSError? get error {
    final _ret = _objc_msgSend_344(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// audioOutputDeviceUniqueID
  objc.NSString? get audioOutputDeviceUniqueID {
    final _ret = _objc_msgSend_20(this.pointer, _sel_audioOutputDeviceUniqueID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAudioOutputDeviceUniqueID:
  set audioOutputDeviceUniqueID(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setAudioOutputDeviceUniqueID_,
        value?.pointer ?? ffi.nullptr);
  }

  /// audioTimePitchAlgorithm
  objc.NSString get audioTimePitchAlgorithm {
    final _ret = _objc_msgSend_11(this.pointer, _sel_audioTimePitchAlgorithm);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAudioTimePitchAlgorithm:
  set audioTimePitchAlgorithm(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setAudioTimePitchAlgorithm_, value.pointer);
  }

  /// allowedAudioSpatializationFormats
  AVAudioSpatializationFormats get allowedAudioSpatializationFormats {
    final _ret = _objc_msgSend_1246(
        this.pointer, _sel_allowedAudioSpatializationFormats);
    return AVAudioSpatializationFormats.fromValue(_ret);
  }

  /// setAllowedAudioSpatializationFormats:
  set allowedAudioSpatializationFormats(AVAudioSpatializationFormats value) {
    return _objc_msgSend_1247(
        this.pointer, _sel_setAllowedAudioSpatializationFormats_, value.value);
  }

  /// volume
  double get volume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_volume)
        : _objc_msgSend_361(this.pointer, _sel_volume);
  }

  /// setVolume:
  set volume(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setVolume_, value);
  }

  /// isMuted
  bool get muted {
    return _objc_msgSend_13(this.pointer, _sel_isMuted);
  }

  /// setMuted:
  set muted(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setMuted_, value);
  }

  /// flushFromSourceTime:completionHandler:
  void flushFromSourceTime_completionHandler_(CMTime time,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)> completionHandler) {
    _objc_msgSend_1271(
        this.pointer,
        _sel_flushFromSourceTime_completionHandler_,
        time,
        completionHandler.pointer);
  }

  /// init
  AVSampleBufferAudioRenderer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVSampleBufferAudioRenderer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVSampleBufferAudioRenderer new1() {
    final _ret = _objc_msgSend_19(_class_AVSampleBufferAudioRenderer, _sel_new);
    return AVSampleBufferAudioRenderer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVSampleBufferAudioRenderer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVSampleBufferAudioRenderer, _sel_allocWithZone_, zone);
    return AVSampleBufferAudioRenderer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVSampleBufferAudioRenderer alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVSampleBufferAudioRenderer, _sel_alloc);
    return AVSampleBufferAudioRenderer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVSampleBufferAudioRenderer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVSampleBufferAudioRenderer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVSampleBufferAudioRenderer,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVSampleBufferAudioRenderer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVSampleBufferAudioRenderer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVSampleBufferAudioRenderer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVSampleBufferAudioRenderer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVSampleBufferAudioRenderer,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVSampleBufferAudioRenderer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVSampleBufferAudioRenderer =
    objc.getClass("AVSampleBufferAudioRenderer");

enum AVQueuedSampleBufferRenderingStatus {
  AVQueuedSampleBufferRenderingStatusUnknown(0),
  AVQueuedSampleBufferRenderingStatusRendering(1),
  AVQueuedSampleBufferRenderingStatusFailed(2);

  final int value;
  const AVQueuedSampleBufferRenderingStatus(this.value);

  static AVQueuedSampleBufferRenderingStatus fromValue(int value) =>
      switch (value) {
        0 => AVQueuedSampleBufferRenderingStatusUnknown,
        1 => AVQueuedSampleBufferRenderingStatusRendering,
        2 => AVQueuedSampleBufferRenderingStatusFailed,
        _ => throw ArgumentError(
            "Unknown value for AVQueuedSampleBufferRenderingStatus: $value"),
      };
}

final _objc_msgSend_1305 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_flushFromSourceTime_completionHandler_ =
    objc.registerName("flushFromSourceTime:completionHandler:");

/// AVSampleBufferDisplayLayer
class AVSampleBufferDisplayLayer extends CALayer {
  AVSampleBufferDisplayLayer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVSampleBufferDisplayLayer] that points to the same underlying object as [other].
  AVSampleBufferDisplayLayer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVSampleBufferDisplayLayer] that wraps the given raw object pointer.
  AVSampleBufferDisplayLayer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVSampleBufferDisplayLayer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVSampleBufferDisplayLayer);
  }

  /// controlTimebase
  ffi.Pointer<OpaqueCMTimebase> get controlTimebase {
    return _objc_msgSend_1245(this.pointer, _sel_controlTimebase);
  }

  /// setControlTimebase:
  set controlTimebase(ffi.Pointer<OpaqueCMTimebase> value) {
    return _objc_msgSend_1306(this.pointer, _sel_setControlTimebase_, value);
  }

  /// videoGravity
  objc.NSString get videoGravity {
    final _ret = _objc_msgSend_11(this.pointer, _sel_videoGravity);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVideoGravity:
  set videoGravity(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setVideoGravity_, value.pointer);
  }

  /// timebase
  ffi.Pointer<OpaqueCMTimebase> get timebase {
    return _objc_msgSend_1245(this.pointer, _sel_timebase);
  }

  /// status
  AVQueuedSampleBufferRenderingStatus get status {
    final _ret = _objc_msgSend_1305(this.pointer, _sel_status);
    return AVQueuedSampleBufferRenderingStatus.fromValue(_ret);
  }

  /// error
  objc.NSError? get error {
    final _ret = _objc_msgSend_344(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// enqueueSampleBuffer:
  void enqueueSampleBuffer_(ffi.Pointer<opaqueCMSampleBuffer> sampleBuffer) {
    _objc_msgSend_1307(this.pointer, _sel_enqueueSampleBuffer_, sampleBuffer);
  }

  /// flush
  void flush() {
    _objc_msgSend_7(this.pointer, _sel_flush);
  }

  /// flushAndRemoveImage
  void flushAndRemoveImage() {
    _objc_msgSend_7(this.pointer, _sel_flushAndRemoveImage);
  }

  /// requiresFlushToResumeDecoding
  bool get requiresFlushToResumeDecoding {
    return _objc_msgSend_13(this.pointer, _sel_requiresFlushToResumeDecoding);
  }

  /// isReadyForMoreMediaData
  bool get readyForMoreMediaData {
    return _objc_msgSend_13(this.pointer, _sel_isReadyForMoreMediaData);
  }

  /// requestMediaDataWhenReadyOnQueue:usingBlock:
  void requestMediaDataWhenReadyOnQueue_usingBlock_(
      objc.NSObject queue, objc.ObjCBlock<ffi.Void Function()> block) {
    _objc_msgSend_1059(
        this.pointer,
        _sel_requestMediaDataWhenReadyOnQueue_usingBlock_,
        queue.pointer,
        block.pointer);
  }

  /// stopRequestingMediaData
  void stopRequestingMediaData() {
    _objc_msgSend_7(this.pointer, _sel_stopRequestingMediaData);
  }

  /// hasSufficientMediaDataForReliablePlaybackStart
  bool get hasSufficientMediaDataForReliablePlaybackStart {
    return _objc_msgSend_13(
        this.pointer, _sel_hasSufficientMediaDataForReliablePlaybackStart);
  }

  /// preventsCapture
  bool get preventsCapture {
    return _objc_msgSend_13(this.pointer, _sel_preventsCapture);
  }

  /// setPreventsCapture:
  set preventsCapture(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setPreventsCapture_, value);
  }

  /// preventsDisplaySleepDuringVideoPlayback
  bool get preventsDisplaySleepDuringVideoPlayback {
    return _objc_msgSend_13(
        this.pointer, _sel_preventsDisplaySleepDuringVideoPlayback);
  }

  /// setPreventsDisplaySleepDuringVideoPlayback:
  set preventsDisplaySleepDuringVideoPlayback(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setPreventsDisplaySleepDuringVideoPlayback_, value);
  }

  /// preventsAutomaticBackgroundingDuringVideoPlayback
  bool get preventsAutomaticBackgroundingDuringVideoPlayback {
    return _objc_msgSend_13(
        this.pointer, _sel_preventsAutomaticBackgroundingDuringVideoPlayback);
  }

  /// setPreventsAutomaticBackgroundingDuringVideoPlayback:
  set preventsAutomaticBackgroundingDuringVideoPlayback(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setPreventsAutomaticBackgroundingDuringVideoPlayback_, value);
  }

  /// outputObscuredDueToInsufficientExternalProtection
  bool get outputObscuredDueToInsufficientExternalProtection {
    return _objc_msgSend_13(
        this.pointer, _sel_outputObscuredDueToInsufficientExternalProtection);
  }

  /// sampleBufferRenderer
  AVSampleBufferVideoRenderer get sampleBufferRenderer {
    final _ret = _objc_msgSend_1309(this.pointer, _sel_sampleBufferRenderer);
    return AVSampleBufferVideoRenderer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// layer
  static AVSampleBufferDisplayLayer layer() {
    final _ret =
        _objc_msgSend_19(_class_AVSampleBufferDisplayLayer, _sel_layer);
    return AVSampleBufferDisplayLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  AVSampleBufferDisplayLayer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVSampleBufferDisplayLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithLayer:
  AVSampleBufferDisplayLayer initWithLayer_(objc.ObjCObjectBase layer) {
    final _ret =
        _objc_msgSend_616(this.pointer, _sel_initWithLayer_, layer.pointer);
    return AVSampleBufferDisplayLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// presentationLayer
  AVSampleBufferDisplayLayer? presentationLayer() {
    final _ret = _objc_msgSend_85(this.pointer, _sel_presentationLayer);
    return _ret.address == 0
        ? null
        : AVSampleBufferDisplayLayer.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// modelLayer
  AVSampleBufferDisplayLayer modelLayer() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_modelLayer);
    return AVSampleBufferDisplayLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// defaultValueForKey:
  static objc.ObjCObjectBase? defaultValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_35(_class_AVSampleBufferDisplayLayer,
        _sel_defaultValueForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// needsDisplayForKey:
  static bool needsDisplayForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVSampleBufferDisplayLayer,
        _sel_needsDisplayForKey_, key.pointer);
  }

  /// cornerCurveExpansionFactor:
  static double cornerCurveExpansionFactor_(objc.NSString curve) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_90Fpret(_class_AVSampleBufferDisplayLayer,
            _sel_cornerCurveExpansionFactor_, curve.pointer)
        : _objc_msgSend_90(_class_AVSampleBufferDisplayLayer,
            _sel_cornerCurveExpansionFactor_, curve.pointer);
  }

  /// defaultActionForKey:
  static objc.ObjCObjectBase? defaultActionForKey_(objc.NSString event) {
    final _ret = _objc_msgSend_35(_class_AVSampleBufferDisplayLayer,
        _sel_defaultActionForKey_, event.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// layerWithRemoteClientId:
  static CALayer layerWithRemoteClientId_(int client_id) {
    final _ret = _objc_msgSend_838(_class_AVSampleBufferDisplayLayer,
        _sel_layerWithRemoteClientId_, client_id);
    return CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVSampleBufferDisplayLayer new1() {
    final _ret = _objc_msgSend_19(_class_AVSampleBufferDisplayLayer, _sel_new);
    return AVSampleBufferDisplayLayer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVSampleBufferDisplayLayer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVSampleBufferDisplayLayer, _sel_allocWithZone_, zone);
    return AVSampleBufferDisplayLayer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVSampleBufferDisplayLayer alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVSampleBufferDisplayLayer, _sel_alloc);
    return AVSampleBufferDisplayLayer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVSampleBufferDisplayLayer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVSampleBufferDisplayLayer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVSampleBufferDisplayLayer,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVSampleBufferDisplayLayer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVSampleBufferDisplayLayer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVSampleBufferDisplayLayer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVSampleBufferDisplayLayer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVSampleBufferDisplayLayer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVSampleBufferDisplayLayer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVSampleBufferDisplayLayer =
    objc.getClass("AVSampleBufferDisplayLayer");
late final _sel_controlTimebase = objc.registerName("controlTimebase");
late final _sel_setControlTimebase_ = objc.registerName("setControlTimebase:");
final _objc_msgSend_1306 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<OpaqueCMTimebase>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<OpaqueCMTimebase>)>();
late final _sel_videoGravity = objc.registerName("videoGravity");
late final _sel_setVideoGravity_ = objc.registerName("setVideoGravity:");
late final _sel_enqueueSampleBuffer_ =
    objc.registerName("enqueueSampleBuffer:");
final _objc_msgSend_1307 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<opaqueCMSampleBuffer>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<opaqueCMSampleBuffer>)>();
late final _sel_flush = objc.registerName("flush");
late final _sel_flushAndRemoveImage = objc.registerName("flushAndRemoveImage");
late final _sel_requiresFlushToResumeDecoding =
    objc.registerName("requiresFlushToResumeDecoding");
late final _sel_stopRequestingMediaData =
    objc.registerName("stopRequestingMediaData");
late final _sel_hasSufficientMediaDataForReliablePlaybackStart =
    objc.registerName("hasSufficientMediaDataForReliablePlaybackStart");
late final _sel_preventsCapture = objc.registerName("preventsCapture");
late final _sel_setPreventsCapture_ = objc.registerName("setPreventsCapture:");

/// AVSampleBufferVideoRenderer
class AVSampleBufferVideoRenderer extends objc.NSObject {
  AVSampleBufferVideoRenderer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVSampleBufferVideoRenderer] that points to the same underlying object as [other].
  AVSampleBufferVideoRenderer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVSampleBufferVideoRenderer] that wraps the given raw object pointer.
  AVSampleBufferVideoRenderer.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVSampleBufferVideoRenderer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVSampleBufferVideoRenderer);
  }

  /// status
  AVQueuedSampleBufferRenderingStatus get status {
    final _ret = _objc_msgSend_1305(this.pointer, _sel_status);
    return AVQueuedSampleBufferRenderingStatus.fromValue(_ret);
  }

  /// error
  objc.NSError? get error {
    final _ret = _objc_msgSend_344(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// requiresFlushToResumeDecoding
  bool get requiresFlushToResumeDecoding {
    return _objc_msgSend_13(this.pointer, _sel_requiresFlushToResumeDecoding);
  }

  /// flushWithRemovalOfDisplayedImage:completionHandler:
  void flushWithRemovalOfDisplayedImage_completionHandler_(
      bool removeDisplayedImage, objc.ObjCBlock<ffi.Void Function()>? handler) {
    _objc_msgSend_1308(
        this.pointer,
        _sel_flushWithRemovalOfDisplayedImage_completionHandler_,
        removeDisplayedImage,
        handler?.pointer ?? ffi.nullptr);
  }

  /// init
  AVSampleBufferVideoRenderer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVSampleBufferVideoRenderer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVSampleBufferVideoRenderer new1() {
    final _ret = _objc_msgSend_19(_class_AVSampleBufferVideoRenderer, _sel_new);
    return AVSampleBufferVideoRenderer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVSampleBufferVideoRenderer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVSampleBufferVideoRenderer, _sel_allocWithZone_, zone);
    return AVSampleBufferVideoRenderer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVSampleBufferVideoRenderer alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVSampleBufferVideoRenderer, _sel_alloc);
    return AVSampleBufferVideoRenderer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVSampleBufferVideoRenderer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVSampleBufferVideoRenderer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVSampleBufferVideoRenderer,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVSampleBufferVideoRenderer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVSampleBufferVideoRenderer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVSampleBufferVideoRenderer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVSampleBufferVideoRenderer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVSampleBufferVideoRenderer,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVSampleBufferVideoRenderer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVSampleBufferVideoRenderer =
    objc.getClass("AVSampleBufferVideoRenderer");
late final _sel_flushWithRemovalOfDisplayedImage_completionHandler_ =
    objc.registerName("flushWithRemovalOfDisplayedImage:completionHandler:");
final _objc_msgSend_1308 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_sampleBufferRenderer =
    objc.registerName("sampleBufferRenderer");
final _objc_msgSend_1309 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVSampleBufferRenderSynchronizer
class AVSampleBufferRenderSynchronizer extends objc.NSObject {
  AVSampleBufferRenderSynchronizer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVSampleBufferRenderSynchronizer] that points to the same underlying object as [other].
  AVSampleBufferRenderSynchronizer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVSampleBufferRenderSynchronizer] that wraps the given raw object pointer.
  AVSampleBufferRenderSynchronizer.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVSampleBufferRenderSynchronizer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVSampleBufferRenderSynchronizer);
  }

  /// timebase
  ffi.Pointer<OpaqueCMTimebase> get timebase {
    return _objc_msgSend_1245(this.pointer, _sel_timebase);
  }

  /// rate
  double get rate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_rate)
        : _objc_msgSend_361(this.pointer, _sel_rate);
  }

  /// setRate:
  set rate(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setRate_, value);
  }

  /// currentTime
  void currentTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_currentTime)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_currentTime);
  }

  /// setRate:time:
  void setRate_time_(double rate, CMTime time) {
    _objc_msgSend_1310(this.pointer, _sel_setRate_time_, rate, time);
  }

  /// setRate:time:atHostTime:
  void setRate_time_atHostTime_(double rate, CMTime time, CMTime hostTime) {
    _objc_msgSend_1273(
        this.pointer, _sel_setRate_time_atHostTime_, rate, time, hostTime);
  }

  /// delaysRateChangeUntilHasSufficientMediaData
  bool get delaysRateChangeUntilHasSufficientMediaData {
    return _objc_msgSend_13(
        this.pointer, _sel_delaysRateChangeUntilHasSufficientMediaData);
  }

  /// setDelaysRateChangeUntilHasSufficientMediaData:
  set delaysRateChangeUntilHasSufficientMediaData(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setDelaysRateChangeUntilHasSufficientMediaData_, value);
  }

  /// renderers
  objc.NSArray get renderers {
    final _ret = _objc_msgSend_33(this.pointer, _sel_renderers);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// addRenderer:
  void addRenderer_(objc.ObjCObjectBase renderer) {
    _objc_msgSend_27(this.pointer, _sel_addRenderer_, renderer.pointer);
  }

  /// removeRenderer:atTime:completionHandler:
  void removeRenderer_atTime_completionHandler_(
      objc.ObjCObjectBase renderer,
      CMTime time,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>? completionHandler) {
    _objc_msgSend_1311(
        this.pointer,
        _sel_removeRenderer_atTime_completionHandler_,
        renderer.pointer,
        time,
        completionHandler?.pointer ?? ffi.nullptr);
  }

  /// addPeriodicTimeObserverForInterval:queue:usingBlock:
  objc.ObjCObjectBase addPeriodicTimeObserverForInterval_queue_usingBlock_(
      CMTime interval,
      objc.NSObject? queue,
      objc.ObjCBlock<ffi.Void Function(CMTime)> block) {
    final _ret = _objc_msgSend_1277(
        this.pointer,
        _sel_addPeriodicTimeObserverForInterval_queue_usingBlock_,
        interval,
        queue?.pointer ?? ffi.nullptr,
        block.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// addBoundaryTimeObserverForTimes:queue:usingBlock:
  objc.ObjCObjectBase addBoundaryTimeObserverForTimes_queue_usingBlock_(
      objc.NSArray times,
      objc.NSObject? queue,
      objc.ObjCBlock<ffi.Void Function()> block) {
    final _ret = _objc_msgSend_1278(
        this.pointer,
        _sel_addBoundaryTimeObserverForTimes_queue_usingBlock_,
        times.pointer,
        queue?.pointer ?? ffi.nullptr,
        block.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// removeTimeObserver:
  void removeTimeObserver_(objc.ObjCObjectBase observer) {
    _objc_msgSend_27(this.pointer, _sel_removeTimeObserver_, observer.pointer);
  }

  /// init
  AVSampleBufferRenderSynchronizer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVSampleBufferRenderSynchronizer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVSampleBufferRenderSynchronizer new1() {
    final _ret =
        _objc_msgSend_19(_class_AVSampleBufferRenderSynchronizer, _sel_new);
    return AVSampleBufferRenderSynchronizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVSampleBufferRenderSynchronizer allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVSampleBufferRenderSynchronizer, _sel_allocWithZone_, zone);
    return AVSampleBufferRenderSynchronizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVSampleBufferRenderSynchronizer alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVSampleBufferRenderSynchronizer, _sel_alloc);
    return AVSampleBufferRenderSynchronizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVSampleBufferRenderSynchronizer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVSampleBufferRenderSynchronizer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVSampleBufferRenderSynchronizer,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVSampleBufferRenderSynchronizer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVSampleBufferRenderSynchronizer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVSampleBufferRenderSynchronizer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVSampleBufferRenderSynchronizer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVSampleBufferRenderSynchronizer,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVSampleBufferRenderSynchronizer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVSampleBufferRenderSynchronizer =
    objc.getClass("AVSampleBufferRenderSynchronizer");
late final _sel_setRate_time_ = objc.registerName("setRate:time:");
final _objc_msgSend_1310 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float, CMTime)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, CMTime)>();
late final _sel_delaysRateChangeUntilHasSufficientMediaData =
    objc.registerName("delaysRateChangeUntilHasSufficientMediaData");
late final _sel_setDelaysRateChangeUntilHasSufficientMediaData_ =
    objc.registerName("setDelaysRateChangeUntilHasSufficientMediaData:");
late final _sel_renderers = objc.registerName("renderers");
late final _sel_addRenderer_ = objc.registerName("addRenderer:");
late final _sel_removeRenderer_atTime_completionHandler_ =
    objc.registerName("removeRenderer:atTime:completionHandler:");
final _objc_msgSend_1311 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                CMTime,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CMTime,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// AVAudioConverter
class AVAudioConverter extends objc.NSObject {
  AVAudioConverter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioConverter] that points to the same underlying object as [other].
  AVAudioConverter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioConverter] that wraps the given raw object pointer.
  AVAudioConverter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioConverter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioConverter);
  }

  /// initFromFormat:toFormat:
  AVAudioConverter? initFromFormat_toFormat_(
      AVAudioFormat fromFormat, AVAudioFormat toFormat) {
    final _ret = _objc_msgSend_1312(this.pointer, _sel_initFromFormat_toFormat_,
        fromFormat.pointer, toFormat.pointer);
    return _ret.address == 0
        ? null
        : AVAudioConverter.castFromPointer(_ret, retain: true, release: true);
  }

  /// reset
  void reset() {
    _objc_msgSend_7(this.pointer, _sel_reset);
  }

  /// inputFormat
  AVAudioFormat get inputFormat {
    final _ret = _objc_msgSend_1092(this.pointer, _sel_inputFormat);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputFormat
  AVAudioFormat get outputFormat {
    final _ret = _objc_msgSend_1092(this.pointer, _sel_outputFormat);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// channelMap
  objc.NSArray get channelMap {
    final _ret = _objc_msgSend_33(this.pointer, _sel_channelMap);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setChannelMap:
  set channelMap(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer, _sel_setChannelMap_, value.pointer);
  }

  /// magicCookie
  objc.NSData? get magicCookie {
    final _ret = _objc_msgSend_337(this.pointer, _sel_magicCookie);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMagicCookie:
  set magicCookie(objc.NSData? value) {
    return _objc_msgSend_514(
        this.pointer, _sel_setMagicCookie_, value?.pointer ?? ffi.nullptr);
  }

  /// downmix
  bool get downmix {
    return _objc_msgSend_13(this.pointer, _sel_downmix);
  }

  /// setDownmix:
  set downmix(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setDownmix_, value);
  }

  /// dither
  bool get dither {
    return _objc_msgSend_13(this.pointer, _sel_dither);
  }

  /// setDither:
  set dither(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setDither_, value);
  }

  /// sampleRateConverterQuality
  int get sampleRateConverterQuality {
    return _objc_msgSend_125(this.pointer, _sel_sampleRateConverterQuality);
  }

  /// setSampleRateConverterQuality:
  set sampleRateConverterQuality(int value) {
    return _objc_msgSend_144(
        this.pointer, _sel_setSampleRateConverterQuality_, value);
  }

  /// sampleRateConverterAlgorithm
  objc.NSString? get sampleRateConverterAlgorithm {
    final _ret =
        _objc_msgSend_20(this.pointer, _sel_sampleRateConverterAlgorithm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSampleRateConverterAlgorithm:
  set sampleRateConverterAlgorithm(objc.NSString? value) {
    return _objc_msgSend_21(this.pointer, _sel_setSampleRateConverterAlgorithm_,
        value?.pointer ?? ffi.nullptr);
  }

  /// primeMethod
  AVAudioConverterPrimeMethod get primeMethod {
    final _ret = _objc_msgSend_1313(this.pointer, _sel_primeMethod);
    return AVAudioConverterPrimeMethod.fromValue(_ret);
  }

  /// setPrimeMethod:
  set primeMethod(AVAudioConverterPrimeMethod value) {
    return _objc_msgSend_1314(this.pointer, _sel_setPrimeMethod_, value.value);
  }

  /// primeInfo
  void getPrimeInfo(ffi.Pointer<AVAudioConverterPrimeInfo> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1315Stret(stret, this.pointer, _sel_primeInfo)
        : stret.ref = _objc_msgSend_1315(this.pointer, _sel_primeInfo);
  }

  /// setPrimeInfo:
  set primeInfo(AVAudioConverterPrimeInfo value) {
    return _objc_msgSend_1316(this.pointer, _sel_setPrimeInfo_, value);
  }

  /// convertToBuffer:fromBuffer:error:
  bool convertToBuffer_fromBuffer_error_(
      AVAudioPCMBuffer outputBuffer,
      AVAudioPCMBuffer inputBuffer,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1323(
        this.pointer,
        _sel_convertToBuffer_fromBuffer_error_,
        outputBuffer.pointer,
        inputBuffer.pointer,
        outError);
  }

  /// convertToBuffer:error:withInputFromBlock:
  AVAudioConverterOutputStatus convertToBuffer_error_withInputFromBlock_(
      AVAudioBuffer outputBuffer,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
      objc.ObjCBlock<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)>
          inputBlock) {
    final _ret = _objc_msgSend_1324(
        this.pointer,
        _sel_convertToBuffer_error_withInputFromBlock_,
        outputBuffer.pointer,
        outError,
        inputBlock.pointer);
    return AVAudioConverterOutputStatus.fromValue(_ret);
  }

  /// bitRate
  int get bitRate {
    return _objc_msgSend_125(this.pointer, _sel_bitRate);
  }

  /// setBitRate:
  set bitRate(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setBitRate_, value);
  }

  /// bitRateStrategy
  objc.NSString? get bitRateStrategy {
    final _ret = _objc_msgSend_20(this.pointer, _sel_bitRateStrategy);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setBitRateStrategy:
  set bitRateStrategy(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setBitRateStrategy_, value?.pointer ?? ffi.nullptr);
  }

  /// maximumOutputPacketSize
  int get maximumOutputPacketSize {
    return _objc_msgSend_125(this.pointer, _sel_maximumOutputPacketSize);
  }

  /// availableEncodeBitRates
  objc.NSArray? get availableEncodeBitRates {
    final _ret = _objc_msgSend_88(this.pointer, _sel_availableEncodeBitRates);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// applicableEncodeBitRates
  objc.NSArray? get applicableEncodeBitRates {
    final _ret = _objc_msgSend_88(this.pointer, _sel_applicableEncodeBitRates);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableEncodeSampleRates
  objc.NSArray? get availableEncodeSampleRates {
    final _ret =
        _objc_msgSend_88(this.pointer, _sel_availableEncodeSampleRates);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// applicableEncodeSampleRates
  objc.NSArray? get applicableEncodeSampleRates {
    final _ret =
        _objc_msgSend_88(this.pointer, _sel_applicableEncodeSampleRates);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableEncodeChannelLayoutTags
  objc.NSArray? get availableEncodeChannelLayoutTags {
    final _ret =
        _objc_msgSend_88(this.pointer, _sel_availableEncodeChannelLayoutTags);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVAudioConverter init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioConverter.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAudioConverter new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioConverter, _sel_new);
    return AVAudioConverter.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioConverter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioConverter, _sel_allocWithZone_, zone);
    return AVAudioConverter.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioConverter alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioConverter, _sel_alloc);
    return AVAudioConverter.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioConverter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioConverter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioConverter, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioConverter, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioConverter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioConverter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioConverter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioConverter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioConverter, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioConverter = objc.getClass("AVAudioConverter");
late final _sel_initFromFormat_toFormat_ =
    objc.registerName("initFromFormat:toFormat:");
final _objc_msgSend_1312 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_inputFormat = objc.registerName("inputFormat");
late final _sel_outputFormat = objc.registerName("outputFormat");
late final _sel_downmix = objc.registerName("downmix");
late final _sel_setDownmix_ = objc.registerName("setDownmix:");
late final _sel_dither = objc.registerName("dither");
late final _sel_setDither_ = objc.registerName("setDither:");
late final _sel_sampleRateConverterQuality =
    objc.registerName("sampleRateConverterQuality");
late final _sel_setSampleRateConverterQuality_ =
    objc.registerName("setSampleRateConverterQuality:");
late final _sel_sampleRateConverterAlgorithm =
    objc.registerName("sampleRateConverterAlgorithm");
late final _sel_setSampleRateConverterAlgorithm_ =
    objc.registerName("setSampleRateConverterAlgorithm:");

enum AVAudioConverterPrimeMethod {
  AVAudioConverterPrimeMethod_Pre(0),
  AVAudioConverterPrimeMethod_Normal(1),
  AVAudioConverterPrimeMethod_None(2);

  final int value;
  const AVAudioConverterPrimeMethod(this.value);

  static AVAudioConverterPrimeMethod fromValue(int value) => switch (value) {
        0 => AVAudioConverterPrimeMethod_Pre,
        1 => AVAudioConverterPrimeMethod_Normal,
        2 => AVAudioConverterPrimeMethod_None,
        _ => throw ArgumentError(
            "Unknown value for AVAudioConverterPrimeMethod: $value"),
      };
}

late final _sel_primeMethod = objc.registerName("primeMethod");
final _objc_msgSend_1313 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPrimeMethod_ = objc.registerName("setPrimeMethod:");
final _objc_msgSend_1314 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

final class AVAudioConverterPrimeInfo extends ffi.Struct {
  @ffi.Uint32()
  external int leadingFrames;

  @ffi.Uint32()
  external int trailingFrames;
}

late final _sel_primeInfo = objc.registerName("primeInfo");
final _objc_msgSend_1315 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVAudioConverterPrimeInfo Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AVAudioConverterPrimeInfo Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1315Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVAudioConverterPrimeInfo>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AVAudioConverterPrimeInfo>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPrimeInfo_ = objc.registerName("setPrimeInfo:");
final _objc_msgSend_1316 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, AVAudioConverterPrimeInfo)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, AVAudioConverterPrimeInfo)>();

/// AVAudioPCMBuffer
class AVAudioPCMBuffer extends AVAudioBuffer {
  AVAudioPCMBuffer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioPCMBuffer] that points to the same underlying object as [other].
  AVAudioPCMBuffer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioPCMBuffer] that wraps the given raw object pointer.
  AVAudioPCMBuffer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioPCMBuffer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioPCMBuffer);
  }

  /// initWithPCMFormat:frameCapacity:
  AVAudioPCMBuffer? initWithPCMFormat_frameCapacity_(
      AVAudioFormat format, int frameCapacity) {
    final _ret = _objc_msgSend_1317(this.pointer,
        _sel_initWithPCMFormat_frameCapacity_, format.pointer, frameCapacity);
    return _ret.address == 0
        ? null
        : AVAudioPCMBuffer.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithPCMFormat:bufferListNoCopy:deallocator:
  AVAudioPCMBuffer? initWithPCMFormat_bufferListNoCopy_deallocator_(
      AVAudioFormat format,
      ffi.Pointer<AudioBufferList> bufferList,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)>?
          deallocator) {
    final _ret = _objc_msgSend_1318(
        this.pointer,
        _sel_initWithPCMFormat_bufferListNoCopy_deallocator_,
        format.pointer,
        bufferList,
        deallocator?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : AVAudioPCMBuffer.castFromPointer(_ret, retain: false, release: true);
  }

  /// frameCapacity
  int get frameCapacity {
    return _objc_msgSend_988(this.pointer, _sel_frameCapacity);
  }

  /// frameLength
  int get frameLength {
    return _objc_msgSend_988(this.pointer, _sel_frameLength);
  }

  /// setFrameLength:
  set frameLength(int value) {
    return _objc_msgSend_1097(this.pointer, _sel_setFrameLength_, value);
  }

  /// stride
  int get stride {
    return _objc_msgSend_57(this.pointer, _sel_stride);
  }

  /// floatChannelData
  ffi.Pointer<ffi.Pointer<ffi.Float>> get floatChannelData {
    return _objc_msgSend_1319(this.pointer, _sel_floatChannelData);
  }

  /// int16ChannelData
  ffi.Pointer<ffi.Pointer<ffi.Int16>> get int16ChannelData {
    return _objc_msgSend_1320(this.pointer, _sel_int16ChannelData);
  }

  /// int32ChannelData
  ffi.Pointer<ffi.Pointer<ffi.Int32>> get int32ChannelData {
    return _objc_msgSend_1321(this.pointer, _sel_int32ChannelData);
  }

  /// init
  AVAudioPCMBuffer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioPCMBuffer.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAudioPCMBuffer new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioPCMBuffer, _sel_new);
    return AVAudioPCMBuffer.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioPCMBuffer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioPCMBuffer, _sel_allocWithZone_, zone);
    return AVAudioPCMBuffer.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioPCMBuffer alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioPCMBuffer, _sel_alloc);
    return AVAudioPCMBuffer.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioPCMBuffer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioPCMBuffer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioPCMBuffer, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioPCMBuffer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioPCMBuffer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioPCMBuffer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioPCMBuffer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioPCMBuffer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioPCMBuffer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioPCMBuffer = objc.getClass("AVAudioPCMBuffer");
late final _sel_initWithPCMFormat_frameCapacity_ =
    objc.registerName("initWithPCMFormat:frameCapacity:");
final _objc_msgSend_1317 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Uint32)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
void _ObjCBlock_ffiVoid_AudioBufferList_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<AudioBufferList> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<AudioBufferList> arg0)>>()
        .asFunction<void Function(ffi.Pointer<AudioBufferList>)>()(arg0);
void _ObjCBlock_ffiVoid_AudioBufferList_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<AudioBufferList> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<AudioBufferList>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)>`.
abstract final class ObjCBlock_ffiVoid_AudioBufferList {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AudioBufferList> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<AudioBufferList>)>(_ObjCBlock_ffiVoid_AudioBufferList_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)> fromFunction(
          void Function(ffi.Pointer<AudioBufferList>) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<AudioBufferList>)>(
                      _ObjCBlock_ffiVoid_AudioBufferList_closureTrampoline)
                  .cast(),
              (ffi.Pointer<AudioBufferList> arg0) => fn(arg0)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)>
      listener(void Function(ffi.Pointer<AudioBufferList>) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<AudioBufferList>)>.listener(
                _ObjCBlock_ffiVoid_AudioBufferList_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<AudioBufferList> arg0) => fn(arg0));
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<AudioBufferList>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)>`.
extension ObjCBlock_ffiVoid_AudioBufferList_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<AudioBufferList>)> {
  void call(ffi.Pointer<AudioBufferList> arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<AudioBufferList> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<AudioBufferList>)>()(pointer, arg0);
}

late final _sel_initWithPCMFormat_bufferListNoCopy_deallocator_ =
    objc.registerName("initWithPCMFormat:bufferListNoCopy:deallocator:");
final _objc_msgSend_1318 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<AudioBufferList>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<AudioBufferList>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_frameCapacity = objc.registerName("frameCapacity");
late final _sel_frameLength = objc.registerName("frameLength");
late final _sel_setFrameLength_ = objc.registerName("setFrameLength:");
late final _sel_stride = objc.registerName("stride");
late final _sel_floatChannelData = objc.registerName("floatChannelData");
final _objc_msgSend_1319 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Pointer<ffi.Float>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.Pointer<ffi.Float>> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_int16ChannelData = objc.registerName("int16ChannelData");
final _objc_msgSend_1320 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Pointer<ffi.Int16>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.Pointer<ffi.Int16>> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_int32ChannelData = objc.registerName("int32ChannelData");
final _objc_msgSend_1321 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Pointer<ffi.Int32>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.Pointer<ffi.Int32>> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVAudioBuffer
class AVAudioBuffer extends objc.NSObject {
  AVAudioBuffer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioBuffer] that points to the same underlying object as [other].
  AVAudioBuffer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioBuffer] that wraps the given raw object pointer.
  AVAudioBuffer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioBuffer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioBuffer);
  }

  /// format
  AVAudioFormat get format {
    final _ret = _objc_msgSend_1092(this.pointer, _sel_format);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// audioBufferList
  ffi.Pointer<AudioBufferList> get audioBufferList {
    return _objc_msgSend_1322(this.pointer, _sel_audioBufferList);
  }

  /// mutableAudioBufferList
  ffi.Pointer<AudioBufferList> get mutableAudioBufferList {
    return _objc_msgSend_1322(this.pointer, _sel_mutableAudioBufferList);
  }

  /// init
  AVAudioBuffer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioBuffer.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAudioBuffer new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioBuffer, _sel_new);
    return AVAudioBuffer.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioBuffer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioBuffer, _sel_allocWithZone_, zone);
    return AVAudioBuffer.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioBuffer alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioBuffer, _sel_alloc);
    return AVAudioBuffer.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioBuffer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioBuffer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioBuffer, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioBuffer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioBuffer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioBuffer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioBuffer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioBuffer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioBuffer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioBuffer = objc.getClass("AVAudioBuffer");
late final _sel_audioBufferList = objc.registerName("audioBufferList");
final _objc_msgSend_1322 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<AudioBufferList> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<AudioBufferList> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mutableAudioBufferList =
    objc.registerName("mutableAudioBufferList");
late final _sel_convertToBuffer_fromBuffer_error_ =
    objc.registerName("convertToBuffer:fromBuffer:error:");
final _objc_msgSend_1323 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

enum AVAudioConverterOutputStatus {
  AVAudioConverterOutputStatus_HaveData(0),
  AVAudioConverterOutputStatus_InputRanDry(1),
  AVAudioConverterOutputStatus_EndOfStream(2),
  AVAudioConverterOutputStatus_Error(3);

  final int value;
  const AVAudioConverterOutputStatus(this.value);

  static AVAudioConverterOutputStatus fromValue(int value) => switch (value) {
        0 => AVAudioConverterOutputStatus_HaveData,
        1 => AVAudioConverterOutputStatus_InputRanDry,
        2 => AVAudioConverterOutputStatus_EndOfStream,
        3 => AVAudioConverterOutputStatus_Error,
        _ => throw ArgumentError(
            "Unknown value for AVAudioConverterOutputStatus: $value"),
      };
}

ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_AVAudioBuffer_Uint32_AVAudioConverterInputStatus_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            int arg0,
            ffi.Pointer<ffi.UnsignedLong> arg1) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Uint32 arg0, ffi.Pointer<ffi.UnsignedLong> arg1)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    int, ffi.Pointer<ffi.UnsignedLong>)>()(arg0, arg1);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_AVAudioBuffer_Uint32_AVAudioConverterInputStatus_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            int arg0,
            ffi.Pointer<ffi.UnsignedLong> arg1) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            int, ffi.Pointer<ffi.UnsignedLong>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)>`.
abstract final class ObjCBlock_AVAudioBuffer_Uint32_AVAudioConverterInputStatus {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Pointer<objc.ObjCObject> Function(
              ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Uint32 arg0, ffi.Pointer<ffi.UnsignedLong> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)>(
                              _ObjCBlock_AVAudioBuffer_Uint32_AVAudioConverterInputStatus_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)> fromFunction(
          AVAudioBuffer? Function(int, ffi.Pointer<ffi.UnsignedLong>) fn) =>
      objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)>(
                          _ObjCBlock_AVAudioBuffer_Uint32_AVAudioConverterInputStatus_closureTrampoline)
                      .cast(),
              (int arg0, ffi.Pointer<ffi.UnsignedLong> arg1) =>
                  fn(arg0, arg1)?.retainAndReturnPointer() ?? ffi.nullptr),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)>`.
extension ObjCBlock_AVAudioBuffer_Uint32_AVAudioConverterInputStatus_CallExtension
    on objc.ObjCBlock<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Uint32, ffi.Pointer<ffi.UnsignedLong>)> {
  AVAudioBuffer? call(int arg0, ffi.Pointer<ffi.UnsignedLong> arg1) => pointer
              .ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Uint32 arg0,
                          ffi.Pointer<ffi.UnsignedLong> arg1)>>()
              .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, int, ffi.Pointer<ffi.UnsignedLong>)>()
              (pointer, arg0, arg1)
              .address ==
          0
      ? null
      : AVAudioBuffer.castFromPointer(
          pointer.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Uint32 arg0, ffi.Pointer<ffi.UnsignedLong> arg1)>>()
              .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, int, ffi.Pointer<ffi.UnsignedLong>)>()(pointer, arg0, arg1),
          retain: false,
          release: true);
}

enum AVAudioConverterInputStatus {
  AVAudioConverterInputStatus_HaveData(0),
  AVAudioConverterInputStatus_NoDataNow(1),
  AVAudioConverterInputStatus_EndOfStream(2);

  final int value;
  const AVAudioConverterInputStatus(this.value);

  static AVAudioConverterInputStatus fromValue(int value) => switch (value) {
        0 => AVAudioConverterInputStatus_HaveData,
        1 => AVAudioConverterInputStatus_NoDataNow,
        2 => AVAudioConverterInputStatus_EndOfStream,
        _ => throw ArgumentError(
            "Unknown value for AVAudioConverterInputStatus: $value"),
      };
}

late final _sel_convertToBuffer_error_withInputFromBlock_ =
    objc.registerName("convertToBuffer:error:withInputFromBlock:");
final _objc_msgSend_1324 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_bitRate = objc.registerName("bitRate");
late final _sel_setBitRate_ = objc.registerName("setBitRate:");
late final _sel_bitRateStrategy = objc.registerName("bitRateStrategy");
late final _sel_setBitRateStrategy_ = objc.registerName("setBitRateStrategy:");
late final _sel_maximumOutputPacketSize =
    objc.registerName("maximumOutputPacketSize");
late final _sel_availableEncodeBitRates =
    objc.registerName("availableEncodeBitRates");
late final _sel_applicableEncodeBitRates =
    objc.registerName("applicableEncodeBitRates");
late final _sel_availableEncodeSampleRates =
    objc.registerName("availableEncodeSampleRates");
late final _sel_applicableEncodeSampleRates =
    objc.registerName("applicableEncodeSampleRates");
late final _sel_availableEncodeChannelLayoutTags =
    objc.registerName("availableEncodeChannelLayoutTags");

enum AVAudioSessionCategoryOptions {
  AVAudioSessionCategoryOptionMixWithOthers(1),
  AVAudioSessionCategoryOptionDuckOthers(2),
  AVAudioSessionCategoryOptionAllowBluetooth(4),
  AVAudioSessionCategoryOptionDefaultToSpeaker(8),
  AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers(17),
  AVAudioSessionCategoryOptionAllowBluetoothA2DP(32),
  AVAudioSessionCategoryOptionAllowAirPlay(64),
  AVAudioSessionCategoryOptionOverrideMutedMicrophoneInterruption(128);

  final int value;
  const AVAudioSessionCategoryOptions(this.value);

  static AVAudioSessionCategoryOptions fromValue(int value) => switch (value) {
        1 => AVAudioSessionCategoryOptionMixWithOthers,
        2 => AVAudioSessionCategoryOptionDuckOthers,
        4 => AVAudioSessionCategoryOptionAllowBluetooth,
        8 => AVAudioSessionCategoryOptionDefaultToSpeaker,
        17 => AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers,
        32 => AVAudioSessionCategoryOptionAllowBluetoothA2DP,
        64 => AVAudioSessionCategoryOptionAllowAirPlay,
        128 => AVAudioSessionCategoryOptionOverrideMutedMicrophoneInterruption,
        _ => throw ArgumentError(
            "Unknown value for AVAudioSessionCategoryOptions: $value"),
      };
}

/// AVAudioSession
class AVAudioSession extends objc.NSObject {
  AVAudioSession._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioSession] that points to the same underlying object as [other].
  AVAudioSession.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioSession] that wraps the given raw object pointer.
  AVAudioSession.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioSession].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioSession);
  }

  /// sharedInstance
  static AVAudioSession sharedInstance() {
    final _ret = _objc_msgSend_1325(_class_AVAudioSession, _sel_sharedInstance);
    return AVAudioSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableCategories
  objc.NSArray get availableCategories {
    final _ret = _objc_msgSend_33(this.pointer, _sel_availableCategories);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCategory:error:
  bool setCategory_error_(objc.NSString category,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_297(
        this.pointer, _sel_setCategory_error_, category.pointer, outError);
  }

  /// setCategory:withOptions:error:
  bool setCategory_withOptions_error_(
      objc.NSString category,
      AVAudioSessionCategoryOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1326(this.pointer, _sel_setCategory_withOptions_error_,
        category.pointer, options.value, outError);
  }

  /// setCategory:mode:options:error:
  bool setCategory_mode_options_error_(
      objc.NSString category,
      objc.NSString mode,
      AVAudioSessionCategoryOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1327(
        this.pointer,
        _sel_setCategory_mode_options_error_,
        category.pointer,
        mode.pointer,
        options.value,
        outError);
  }

  /// setCategory:mode:routeSharingPolicy:options:error:
  bool setCategory_mode_routeSharingPolicy_options_error_(
      objc.NSString category,
      objc.NSString mode,
      AVAudioSessionRouteSharingPolicy policy,
      AVAudioSessionCategoryOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1328(
        this.pointer,
        _sel_setCategory_mode_routeSharingPolicy_options_error_,
        category.pointer,
        mode.pointer,
        policy.value,
        options.value,
        outError);
  }

  /// category
  objc.NSString get category {
    final _ret = _objc_msgSend_11(this.pointer, _sel_category);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// categoryOptions
  AVAudioSessionCategoryOptions get categoryOptions {
    final _ret = _objc_msgSend_1329(this.pointer, _sel_categoryOptions);
    return AVAudioSessionCategoryOptions.fromValue(_ret);
  }

  /// routeSharingPolicy
  AVAudioSessionRouteSharingPolicy get routeSharingPolicy {
    final _ret = _objc_msgSend_1330(this.pointer, _sel_routeSharingPolicy);
    return AVAudioSessionRouteSharingPolicy.fromValue(_ret);
  }

  /// availableModes
  objc.NSArray get availableModes {
    final _ret = _objc_msgSend_33(this.pointer, _sel_availableModes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMode:error:
  bool setMode_error_(
      objc.NSString mode, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_297(
        this.pointer, _sel_setMode_error_, mode.pointer, outError);
  }

  /// mode
  objc.NSString get mode {
    final _ret = _objc_msgSend_11(this.pointer, _sel_mode);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAllowHapticsAndSystemSoundsDuringRecording:error:
  bool setAllowHapticsAndSystemSoundsDuringRecording_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1331(
        this.pointer,
        _sel_setAllowHapticsAndSystemSoundsDuringRecording_error_,
        inValue,
        outError);
  }

  /// allowHapticsAndSystemSoundsDuringRecording
  bool get allowHapticsAndSystemSoundsDuringRecording {
    return _objc_msgSend_13(
        this.pointer, _sel_allowHapticsAndSystemSoundsDuringRecording);
  }

  /// recordPermission
  AVAudioSessionRecordPermission get recordPermission {
    final _ret = _objc_msgSend_1332(this.pointer, _sel_recordPermission);
    return AVAudioSessionRecordPermission.fromValue(_ret);
  }

  /// requestRecordPermission:
  void requestRecordPermission_(
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)> response) {
    _objc_msgSend_1333(
        this.pointer, _sel_requestRecordPermission_, response.pointer);
  }

  /// overrideOutputAudioPort:error:
  bool overrideOutputAudioPort_error_(AVAudioSessionPortOverride portOverride,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1334(this.pointer, _sel_overrideOutputAudioPort_error_,
        portOverride.value, outError);
  }

  /// setPreferredInput:error:
  bool setPreferredInput_error_(AVAudioSessionPortDescription? inPort,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1338(this.pointer, _sel_setPreferredInput_error_,
        inPort?.pointer ?? ffi.nullptr, outError);
  }

  /// preferredInput
  AVAudioSessionPortDescription? get preferredInput {
    final _ret = _objc_msgSend_1339(this.pointer, _sel_preferredInput);
    return _ret.address == 0
        ? null
        : AVAudioSessionPortDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setPrefersNoInterruptionsFromSystemAlerts:error:
  bool setPrefersNoInterruptionsFromSystemAlerts_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1331(
        this.pointer,
        _sel_setPrefersNoInterruptionsFromSystemAlerts_error_,
        inValue,
        outError);
  }

  /// prefersNoInterruptionsFromSystemAlerts
  bool get prefersNoInterruptionsFromSystemAlerts {
    return _objc_msgSend_13(
        this.pointer, _sel_prefersNoInterruptionsFromSystemAlerts);
  }

  /// renderingMode
  AVAudioSessionRenderingMode get renderingMode {
    final _ret = _objc_msgSend_1340(this.pointer, _sel_renderingMode);
    return AVAudioSessionRenderingMode.fromValue(_ret);
  }

  /// setActive:error:
  bool setActive_error_(
      bool active, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1331(
        this.pointer, _sel_setActive_error_, active, outError);
  }

  /// setActive:withOptions:error:
  bool setActive_withOptions_error_(
      bool active,
      AVAudioSessionSetActiveOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1341(this.pointer, _sel_setActive_withOptions_error_,
        active, options.value, outError);
  }

  /// activateWithOptions:completionHandler:
  void activateWithOptions_completionHandler_(
      AVAudioSessionActivationOptions options,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>
          handler) {
    _objc_msgSend_1342(
        this.pointer,
        _sel_activateWithOptions_completionHandler_,
        options.value,
        handler.pointer);
  }

  /// setPreferredSampleRate:error:
  bool setPreferredSampleRate_error_(
      double sampleRate, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1343(
        this.pointer, _sel_setPreferredSampleRate_error_, sampleRate, outError);
  }

  /// preferredSampleRate
  double get preferredSampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_preferredSampleRate)
        : _objc_msgSend_18(this.pointer, _sel_preferredSampleRate);
  }

  /// setPreferredIOBufferDuration:error:
  bool setPreferredIOBufferDuration_error_(
      double duration, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1343(this.pointer,
        _sel_setPreferredIOBufferDuration_error_, duration, outError);
  }

  /// preferredIOBufferDuration
  double get preferredIOBufferDuration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_preferredIOBufferDuration)
        : _objc_msgSend_18(this.pointer, _sel_preferredIOBufferDuration);
  }

  /// setPreferredInputNumberOfChannels:error:
  bool setPreferredInputNumberOfChannels_error_(
      int count, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1344(this.pointer,
        _sel_setPreferredInputNumberOfChannels_error_, count, outError);
  }

  /// preferredInputNumberOfChannels
  int get preferredInputNumberOfChannels {
    return _objc_msgSend_125(this.pointer, _sel_preferredInputNumberOfChannels);
  }

  /// setPreferredOutputNumberOfChannels:error:
  bool setPreferredOutputNumberOfChannels_error_(
      int count, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1344(this.pointer,
        _sel_setPreferredOutputNumberOfChannels_error_, count, outError);
  }

  /// preferredOutputNumberOfChannels
  int get preferredOutputNumberOfChannels {
    return _objc_msgSend_125(
        this.pointer, _sel_preferredOutputNumberOfChannels);
  }

  /// setPreferredInputOrientation:error:
  bool setPreferredInputOrientation_error_(AVAudioStereoOrientation orientation,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1345(this.pointer,
        _sel_setPreferredInputOrientation_error_, orientation.value, outError);
  }

  /// preferredInputOrientation
  AVAudioStereoOrientation get preferredInputOrientation {
    final _ret =
        _objc_msgSend_1346(this.pointer, _sel_preferredInputOrientation);
    return AVAudioStereoOrientation.fromValue(_ret);
  }

  /// inputOrientation
  AVAudioStereoOrientation get inputOrientation {
    final _ret = _objc_msgSend_1346(this.pointer, _sel_inputOrientation);
    return AVAudioStereoOrientation.fromValue(_ret);
  }

  /// maximumInputNumberOfChannels
  int get maximumInputNumberOfChannels {
    return _objc_msgSend_125(this.pointer, _sel_maximumInputNumberOfChannels);
  }

  /// maximumOutputNumberOfChannels
  int get maximumOutputNumberOfChannels {
    return _objc_msgSend_125(this.pointer, _sel_maximumOutputNumberOfChannels);
  }

  /// setInputGain:error:
  bool setInputGain_error_(
      double gain, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1347(
        this.pointer, _sel_setInputGain_error_, gain, outError);
  }

  /// inputGain
  double get inputGain {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_inputGain)
        : _objc_msgSend_361(this.pointer, _sel_inputGain);
  }

  /// isInputGainSettable
  bool get inputGainSettable {
    return _objc_msgSend_13(this.pointer, _sel_isInputGainSettable);
  }

  /// isInputAvailable
  bool get inputAvailable {
    return _objc_msgSend_13(this.pointer, _sel_isInputAvailable);
  }

  /// inputDataSources
  objc.NSArray? get inputDataSources {
    final _ret = _objc_msgSend_88(this.pointer, _sel_inputDataSources);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// inputDataSource
  AVAudioSessionDataSourceDescription? get inputDataSource {
    final _ret = _objc_msgSend_1336(this.pointer, _sel_inputDataSource);
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setInputDataSource:error:
  bool setInputDataSource_error_(
      AVAudioSessionDataSourceDescription? dataSource,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1337(this.pointer, _sel_setInputDataSource_error_,
        dataSource?.pointer ?? ffi.nullptr, outError);
  }

  /// outputDataSources
  objc.NSArray? get outputDataSources {
    final _ret = _objc_msgSend_88(this.pointer, _sel_outputDataSources);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputDataSource
  AVAudioSessionDataSourceDescription? get outputDataSource {
    final _ret = _objc_msgSend_1336(this.pointer, _sel_outputDataSource);
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setOutputDataSource:error:
  bool setOutputDataSource_error_(
      AVAudioSessionDataSourceDescription? dataSource,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1337(this.pointer, _sel_setOutputDataSource_error_,
        dataSource?.pointer ?? ffi.nullptr, outError);
  }

  /// sampleRate
  double get sampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_sampleRate)
        : _objc_msgSend_18(this.pointer, _sel_sampleRate);
  }

  /// inputNumberOfChannels
  int get inputNumberOfChannels {
    return _objc_msgSend_125(this.pointer, _sel_inputNumberOfChannels);
  }

  /// outputNumberOfChannels
  int get outputNumberOfChannels {
    return _objc_msgSend_125(this.pointer, _sel_outputNumberOfChannels);
  }

  /// inputLatency
  double get inputLatency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_inputLatency)
        : _objc_msgSend_18(this.pointer, _sel_inputLatency);
  }

  /// outputLatency
  double get outputLatency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_outputLatency)
        : _objc_msgSend_18(this.pointer, _sel_outputLatency);
  }

  /// IOBufferDuration
  double get IOBufferDuration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_IOBufferDuration)
        : _objc_msgSend_18(this.pointer, _sel_IOBufferDuration);
  }

  /// supportedOutputChannelLayouts
  objc.NSArray get supportedOutputChannelLayouts {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_supportedOutputChannelLayouts);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isOtherAudioPlaying
  bool get otherAudioPlaying {
    return _objc_msgSend_13(this.pointer, _sel_isOtherAudioPlaying);
  }

  /// secondaryAudioShouldBeSilencedHint
  bool get secondaryAudioShouldBeSilencedHint {
    return _objc_msgSend_13(
        this.pointer, _sel_secondaryAudioShouldBeSilencedHint);
  }

  /// outputVolume
  double get outputVolume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_outputVolume)
        : _objc_msgSend_361(this.pointer, _sel_outputVolume);
  }

  /// promptStyle
  AVAudioSessionPromptStyle get promptStyle {
    final _ret = _objc_msgSend_1348(this.pointer, _sel_promptStyle);
    return AVAudioSessionPromptStyle.fromValue(_ret);
  }

  /// availableInputs
  objc.NSArray? get availableInputs {
    final _ret = _objc_msgSend_88(this.pointer, _sel_availableInputs);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// currentRoute
  AVAudioSessionRouteDescription get currentRoute {
    final _ret = _objc_msgSend_1349(this.pointer, _sel_currentRoute);
    return AVAudioSessionRouteDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setAggregatedIOPreference:error:
  bool setAggregatedIOPreference_error_(AVAudioSessionIOType inIOType,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1350(this.pointer,
        _sel_setAggregatedIOPreference_error_, inIOType.value, outError);
  }

  /// setSupportsMultichannelContent:error:
  bool setSupportsMultichannelContent_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1331(this.pointer,
        _sel_setSupportsMultichannelContent_error_, inValue, outError);
  }

  /// supportsMultichannelContent
  bool get supportsMultichannelContent {
    return _objc_msgSend_13(this.pointer, _sel_supportsMultichannelContent);
  }

  /// setPrefersInterruptionOnRouteDisconnect:error:
  bool setPrefersInterruptionOnRouteDisconnect_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1331(this.pointer,
        _sel_setPrefersInterruptionOnRouteDisconnect_error_, inValue, outError);
  }

  /// prefersInterruptionOnRouteDisconnect
  bool get prefersInterruptionOnRouteDisconnect {
    return _objc_msgSend_13(
        this.pointer, _sel_prefersInterruptionOnRouteDisconnect);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// init
  AVAudioSession init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// setActive:withFlags:error:
  bool setActive_withFlags_error_(bool active, int flags,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1351(
        this.pointer, _sel_setActive_withFlags_error_, active, flags, outError);
  }

  /// inputIsAvailable
  bool get inputIsAvailable {
    return _objc_msgSend_13(this.pointer, _sel_inputIsAvailable);
  }

  /// currentHardwareSampleRate
  double get currentHardwareSampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_currentHardwareSampleRate)
        : _objc_msgSend_18(this.pointer, _sel_currentHardwareSampleRate);
  }

  /// currentHardwareInputNumberOfChannels
  int get currentHardwareInputNumberOfChannels {
    return _objc_msgSend_125(
        this.pointer, _sel_currentHardwareInputNumberOfChannels);
  }

  /// currentHardwareOutputNumberOfChannels
  int get currentHardwareOutputNumberOfChannels {
    return _objc_msgSend_125(
        this.pointer, _sel_currentHardwareOutputNumberOfChannels);
  }

  /// setPreferredHardwareSampleRate:error:
  bool setPreferredHardwareSampleRate_error_(
      double sampleRate, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1343(this.pointer,
        _sel_setPreferredHardwareSampleRate_error_, sampleRate, outError);
  }

  /// preferredHardwareSampleRate
  double get preferredHardwareSampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_preferredHardwareSampleRate)
        : _objc_msgSend_18(this.pointer, _sel_preferredHardwareSampleRate);
  }

  /// new
  static AVAudioSession new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioSession, _sel_new);
    return AVAudioSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioSession allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioSession, _sel_allocWithZone_, zone);
    return AVAudioSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioSession alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioSession, _sel_alloc);
    return AVAudioSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioSession,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioSession,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioSession, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioSession, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioSession,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioSession,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioSession,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioSession, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioSession, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioSession = objc.getClass("AVAudioSession");
late final _sel_sharedInstance = objc.registerName("sharedInstance");
final _objc_msgSend_1325 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_availableCategories = objc.registerName("availableCategories");
late final _sel_setCategory_error_ = objc.registerName("setCategory:error:");
late final _sel_setCategory_withOptions_error_ =
    objc.registerName("setCategory:withOptions:error:");
final _objc_msgSend_1326 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setCategory_mode_options_error_ =
    objc.registerName("setCategory:mode:options:error:");
final _objc_msgSend_1327 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

enum AVAudioSessionRouteSharingPolicy {
  AVAudioSessionRouteSharingPolicyDefault(0),
  AVAudioSessionRouteSharingPolicyLongFormAudio(1),
  AVAudioSessionRouteSharingPolicyIndependent(2),
  AVAudioSessionRouteSharingPolicyLongFormVideo(3);

  static const AVAudioSessionRouteSharingPolicyLongForm =
      AVAudioSessionRouteSharingPolicyLongFormAudio;

  final int value;
  const AVAudioSessionRouteSharingPolicy(this.value);

  static AVAudioSessionRouteSharingPolicy fromValue(int value) =>
      switch (value) {
        0 => AVAudioSessionRouteSharingPolicyDefault,
        1 => AVAudioSessionRouteSharingPolicyLongFormAudio,
        2 => AVAudioSessionRouteSharingPolicyIndependent,
        3 => AVAudioSessionRouteSharingPolicyLongFormVideo,
        _ => throw ArgumentError(
            "Unknown value for AVAudioSessionRouteSharingPolicy: $value"),
      };

  @override
  String toString() {
    if (this == AVAudioSessionRouteSharingPolicyLongFormAudio)
      return "AVAudioSessionRouteSharingPolicy.AVAudioSessionRouteSharingPolicyLongFormAudio, AVAudioSessionRouteSharingPolicy.AVAudioSessionRouteSharingPolicyLongForm";
    return super.toString();
  }
}

late final _sel_setCategory_mode_routeSharingPolicy_options_error_ =
    objc.registerName("setCategory:mode:routeSharingPolicy:options:error:");
final _objc_msgSend_1328 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_category = objc.registerName("category");
late final _sel_categoryOptions = objc.registerName("categoryOptions");
final _objc_msgSend_1329 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_routeSharingPolicy = objc.registerName("routeSharingPolicy");
final _objc_msgSend_1330 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_availableModes = objc.registerName("availableModes");
late final _sel_setMode_error_ = objc.registerName("setMode:error:");
late final _sel_mode = objc.registerName("mode");
late final _sel_setAllowHapticsAndSystemSoundsDuringRecording_error_ =
    objc.registerName("setAllowHapticsAndSystemSoundsDuringRecording:error:");
final _objc_msgSend_1331 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_allowHapticsAndSystemSoundsDuringRecording =
    objc.registerName("allowHapticsAndSystemSoundsDuringRecording");

enum AVAudioSessionRecordPermission {
  AVAudioSessionRecordPermissionUndetermined(1970168948),
  AVAudioSessionRecordPermissionDenied(1684369017),
  AVAudioSessionRecordPermissionGranted(1735552628);

  final int value;
  const AVAudioSessionRecordPermission(this.value);

  static AVAudioSessionRecordPermission fromValue(int value) => switch (value) {
        1970168948 => AVAudioSessionRecordPermissionUndetermined,
        1684369017 => AVAudioSessionRecordPermissionDenied,
        1735552628 => AVAudioSessionRecordPermissionGranted,
        _ => throw ArgumentError(
            "Unknown value for AVAudioSessionRecordPermission: $value"),
      };
}

late final _sel_recordPermission = objc.registerName("recordPermission");
final _objc_msgSend_1332 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_requestRecordPermission_ =
    objc.registerName("requestRecordPermission:");
final _objc_msgSend_1333 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();

enum AVAudioSessionPortOverride {
  AVAudioSessionPortOverrideNone(0),
  AVAudioSessionPortOverrideSpeaker(1936747378);

  final int value;
  const AVAudioSessionPortOverride(this.value);

  static AVAudioSessionPortOverride fromValue(int value) => switch (value) {
        0 => AVAudioSessionPortOverrideNone,
        1936747378 => AVAudioSessionPortOverrideSpeaker,
        _ => throw ArgumentError(
            "Unknown value for AVAudioSessionPortOverride: $value"),
      };
}

late final _sel_overrideOutputAudioPort_error_ =
    objc.registerName("overrideOutputAudioPort:error:");
final _objc_msgSend_1334 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

/// AVAudioSessionPortDescription
class AVAudioSessionPortDescription extends objc.NSObject {
  AVAudioSessionPortDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioSessionPortDescription] that points to the same underlying object as [other].
  AVAudioSessionPortDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioSessionPortDescription] that wraps the given raw object pointer.
  AVAudioSessionPortDescription.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioSessionPortDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioSessionPortDescription);
  }

  /// portType
  objc.NSString get portType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_portType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// portName
  objc.NSString get portName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_portName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// UID
  objc.NSString get UID {
    final _ret = _objc_msgSend_11(this.pointer, _sel_UID);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// hasHardwareVoiceCallProcessing
  bool get hasHardwareVoiceCallProcessing {
    return _objc_msgSend_13(this.pointer, _sel_hasHardwareVoiceCallProcessing);
  }

  /// isSpatialAudioEnabled
  bool get spatialAudioEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isSpatialAudioEnabled);
  }

  /// channels
  objc.NSArray? get channels {
    final _ret = _objc_msgSend_88(this.pointer, _sel_channels);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// dataSources
  objc.NSArray? get dataSources {
    final _ret = _objc_msgSend_88(this.pointer, _sel_dataSources);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// selectedDataSource
  AVAudioSessionDataSourceDescription? get selectedDataSource {
    final _ret = _objc_msgSend_1336(this.pointer, _sel_selectedDataSource);
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// preferredDataSource
  AVAudioSessionDataSourceDescription? get preferredDataSource {
    final _ret = _objc_msgSend_1336(this.pointer, _sel_preferredDataSource);
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setPreferredDataSource:error:
  bool setPreferredDataSource_error_(
      AVAudioSessionDataSourceDescription? dataSource,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1337(this.pointer, _sel_setPreferredDataSource_error_,
        dataSource?.pointer ?? ffi.nullptr, outError);
  }

  /// init
  AVAudioSessionPortDescription init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioSessionPortDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAudioSessionPortDescription new1() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioSessionPortDescription, _sel_new);
    return AVAudioSessionPortDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioSessionPortDescription allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAudioSessionPortDescription, _sel_allocWithZone_, zone);
    return AVAudioSessionPortDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAudioSessionPortDescription alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioSessionPortDescription, _sel_alloc);
    return AVAudioSessionPortDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioSessionPortDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioSessionPortDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVAudioSessionPortDescription,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAudioSessionPortDescription, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioSessionPortDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioSessionPortDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioSessionPortDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVAudioSessionPortDescription,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAudioSessionPortDescription, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioSessionPortDescription =
    objc.getClass("AVAudioSessionPortDescription");
late final _sel_portType = objc.registerName("portType");
late final _sel_portName = objc.registerName("portName");
late final _sel_UID = objc.registerName("UID");
late final _sel_hasHardwareVoiceCallProcessing =
    objc.registerName("hasHardwareVoiceCallProcessing");
late final _sel_isSpatialAudioEnabled =
    objc.registerName("isSpatialAudioEnabled");
late final _sel_channels = objc.registerName("channels");
late final _sel_dataSources = objc.registerName("dataSources");

/// AVAudioSessionDataSourceDescription
class AVAudioSessionDataSourceDescription extends objc.NSObject {
  AVAudioSessionDataSourceDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioSessionDataSourceDescription] that points to the same underlying object as [other].
  AVAudioSessionDataSourceDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioSessionDataSourceDescription] that wraps the given raw object pointer.
  AVAudioSessionDataSourceDescription.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioSessionDataSourceDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVAudioSessionDataSourceDescription);
  }

  /// dataSourceID
  objc.NSNumber get dataSourceID {
    final _ret = _objc_msgSend_194(this.pointer, _sel_dataSourceID);
    return objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// dataSourceName
  objc.NSString get dataSourceName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_dataSourceName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// location
  objc.NSString? get location {
    final _ret = _objc_msgSend_20(this.pointer, _sel_location);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// orientation
  objc.NSString? get orientation {
    final _ret = _objc_msgSend_20(this.pointer, _sel_orientation);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportedPolarPatterns
  objc.NSArray? get supportedPolarPatterns {
    final _ret = _objc_msgSend_88(this.pointer, _sel_supportedPolarPatterns);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// selectedPolarPattern
  objc.NSString? get selectedPolarPattern {
    final _ret = _objc_msgSend_20(this.pointer, _sel_selectedPolarPattern);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredPolarPattern
  objc.NSString? get preferredPolarPattern {
    final _ret = _objc_msgSend_20(this.pointer, _sel_preferredPolarPattern);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPreferredPolarPattern:error:
  bool setPreferredPolarPattern_error_(objc.NSString? pattern,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1335(
        this.pointer,
        _sel_setPreferredPolarPattern_error_,
        pattern?.pointer ?? ffi.nullptr,
        outError);
  }

  /// init
  AVAudioSessionDataSourceDescription init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioSessionDataSourceDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAudioSessionDataSourceDescription new1() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioSessionDataSourceDescription, _sel_new);
    return AVAudioSessionDataSourceDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioSessionDataSourceDescription allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAudioSessionDataSourceDescription, _sel_allocWithZone_, zone);
    return AVAudioSessionDataSourceDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAudioSessionDataSourceDescription alloc() {
    final _ret = _objc_msgSend_19(
        _class_AVAudioSessionDataSourceDescription, _sel_alloc);
    return AVAudioSessionDataSourceDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioSessionDataSourceDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioSessionDataSourceDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVAudioSessionDataSourceDescription,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAudioSessionDataSourceDescription, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioSessionDataSourceDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioSessionDataSourceDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioSessionDataSourceDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVAudioSessionDataSourceDescription,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_AVAudioSessionDataSourceDescription,
        _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioSessionDataSourceDescription =
    objc.getClass("AVAudioSessionDataSourceDescription");
late final _sel_dataSourceID = objc.registerName("dataSourceID");
late final _sel_dataSourceName = objc.registerName("dataSourceName");
late final _sel_location = objc.registerName("location");
late final _sel_orientation = objc.registerName("orientation");
late final _sel_supportedPolarPatterns =
    objc.registerName("supportedPolarPatterns");
late final _sel_selectedPolarPattern =
    objc.registerName("selectedPolarPattern");
late final _sel_preferredPolarPattern =
    objc.registerName("preferredPolarPattern");
late final _sel_setPreferredPolarPattern_error_ =
    objc.registerName("setPreferredPolarPattern:error:");
final _objc_msgSend_1335 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_selectedDataSource = objc.registerName("selectedDataSource");
final _objc_msgSend_1336 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_preferredDataSource = objc.registerName("preferredDataSource");
late final _sel_setPreferredDataSource_error_ =
    objc.registerName("setPreferredDataSource:error:");
final _objc_msgSend_1337 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setPreferredInput_error_ =
    objc.registerName("setPreferredInput:error:");
final _objc_msgSend_1338 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_preferredInput = objc.registerName("preferredInput");
final _objc_msgSend_1339 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPrefersNoInterruptionsFromSystemAlerts_error_ =
    objc.registerName("setPrefersNoInterruptionsFromSystemAlerts:error:");
late final _sel_prefersNoInterruptionsFromSystemAlerts =
    objc.registerName("prefersNoInterruptionsFromSystemAlerts");

enum AVAudioSessionRenderingMode {
  AVAudioSessionRenderingModeNotApplicable(0),
  AVAudioSessionRenderingModeMonoStereo(1),
  AVAudioSessionRenderingModeSurround(2),
  AVAudioSessionRenderingModeSpatialAudio(3),
  AVAudioSessionRenderingModeDolbyAudio(4),
  AVAudioSessionRenderingModeDolbyAtmos(5);

  final int value;
  const AVAudioSessionRenderingMode(this.value);

  static AVAudioSessionRenderingMode fromValue(int value) => switch (value) {
        0 => AVAudioSessionRenderingModeNotApplicable,
        1 => AVAudioSessionRenderingModeMonoStereo,
        2 => AVAudioSessionRenderingModeSurround,
        3 => AVAudioSessionRenderingModeSpatialAudio,
        4 => AVAudioSessionRenderingModeDolbyAudio,
        5 => AVAudioSessionRenderingModeDolbyAtmos,
        _ => throw ArgumentError(
            "Unknown value for AVAudioSessionRenderingMode: $value"),
      };
}

late final _sel_renderingMode = objc.registerName("renderingMode");
final _objc_msgSend_1340 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setActive_error_ = objc.registerName("setActive:error:");

enum AVAudioSessionSetActiveOptions {
  AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation(1);

  final int value;
  const AVAudioSessionSetActiveOptions(this.value);

  static AVAudioSessionSetActiveOptions fromValue(int value) => switch (value) {
        1 => AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation,
        _ => throw ArgumentError(
            "Unknown value for AVAudioSessionSetActiveOptions: $value"),
      };
}

late final _sel_setActive_withOptions_error_ =
    objc.registerName("setActive:withOptions:error:");
final _objc_msgSend_1341 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

enum AVAudioSessionActivationOptions {
  AVAudioSessionActivationOptionNone(0);

  final int value;
  const AVAudioSessionActivationOptions(this.value);

  static AVAudioSessionActivationOptions fromValue(int value) =>
      switch (value) {
        0 => AVAudioSessionActivationOptionNone,
        _ => throw ArgumentError(
            "Unknown value for AVAudioSessionActivationOptions: $value"),
      };
}

late final _sel_activateWithOptions_completionHandler_ =
    objc.registerName("activateWithOptions:completionHandler:");
final _objc_msgSend_1342 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_setPreferredSampleRate_error_ =
    objc.registerName("setPreferredSampleRate:error:");
final _objc_msgSend_1343 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_preferredSampleRate = objc.registerName("preferredSampleRate");
late final _sel_setPreferredIOBufferDuration_error_ =
    objc.registerName("setPreferredIOBufferDuration:error:");
late final _sel_preferredIOBufferDuration =
    objc.registerName("preferredIOBufferDuration");
late final _sel_setPreferredInputNumberOfChannels_error_ =
    objc.registerName("setPreferredInputNumberOfChannels:error:");
final _objc_msgSend_1344 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_preferredInputNumberOfChannels =
    objc.registerName("preferredInputNumberOfChannels");
late final _sel_setPreferredOutputNumberOfChannels_error_ =
    objc.registerName("setPreferredOutputNumberOfChannels:error:");
late final _sel_preferredOutputNumberOfChannels =
    objc.registerName("preferredOutputNumberOfChannels");

enum AVAudioStereoOrientation {
  AVAudioStereoOrientationNone(0),
  AVAudioStereoOrientationPortrait(1),
  AVAudioStereoOrientationPortraitUpsideDown(2),
  AVAudioStereoOrientationLandscapeRight(3),
  AVAudioStereoOrientationLandscapeLeft(4);

  final int value;
  const AVAudioStereoOrientation(this.value);

  static AVAudioStereoOrientation fromValue(int value) => switch (value) {
        0 => AVAudioStereoOrientationNone,
        1 => AVAudioStereoOrientationPortrait,
        2 => AVAudioStereoOrientationPortraitUpsideDown,
        3 => AVAudioStereoOrientationLandscapeRight,
        4 => AVAudioStereoOrientationLandscapeLeft,
        _ => throw ArgumentError(
            "Unknown value for AVAudioStereoOrientation: $value"),
      };
}

late final _sel_setPreferredInputOrientation_error_ =
    objc.registerName("setPreferredInputOrientation:error:");
final _objc_msgSend_1345 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_preferredInputOrientation =
    objc.registerName("preferredInputOrientation");
final _objc_msgSend_1346 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_inputOrientation = objc.registerName("inputOrientation");
late final _sel_maximumInputNumberOfChannels =
    objc.registerName("maximumInputNumberOfChannels");
late final _sel_maximumOutputNumberOfChannels =
    objc.registerName("maximumOutputNumberOfChannels");
late final _sel_setInputGain_error_ = objc.registerName("setInputGain:error:");
final _objc_msgSend_1347 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Float,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_inputGain = objc.registerName("inputGain");
late final _sel_isInputGainSettable = objc.registerName("isInputGainSettable");
late final _sel_isInputAvailable = objc.registerName("isInputAvailable");
late final _sel_inputDataSources = objc.registerName("inputDataSources");
late final _sel_inputDataSource = objc.registerName("inputDataSource");
late final _sel_setInputDataSource_error_ =
    objc.registerName("setInputDataSource:error:");
late final _sel_outputDataSources = objc.registerName("outputDataSources");
late final _sel_outputDataSource = objc.registerName("outputDataSource");
late final _sel_setOutputDataSource_error_ =
    objc.registerName("setOutputDataSource:error:");
late final _sel_inputNumberOfChannels =
    objc.registerName("inputNumberOfChannels");
late final _sel_outputNumberOfChannels =
    objc.registerName("outputNumberOfChannels");
late final _sel_inputLatency = objc.registerName("inputLatency");
late final _sel_outputLatency = objc.registerName("outputLatency");
late final _sel_IOBufferDuration = objc.registerName("IOBufferDuration");
late final _sel_supportedOutputChannelLayouts =
    objc.registerName("supportedOutputChannelLayouts");
late final _sel_isOtherAudioPlaying = objc.registerName("isOtherAudioPlaying");
late final _sel_secondaryAudioShouldBeSilencedHint =
    objc.registerName("secondaryAudioShouldBeSilencedHint");
late final _sel_outputVolume = objc.registerName("outputVolume");

enum AVAudioSessionPromptStyle {
  AVAudioSessionPromptStyleNone(1852796517),
  AVAudioSessionPromptStyleShort(1936224884),
  AVAudioSessionPromptStyleNormal(1852992876);

  final int value;
  const AVAudioSessionPromptStyle(this.value);

  static AVAudioSessionPromptStyle fromValue(int value) => switch (value) {
        1852796517 => AVAudioSessionPromptStyleNone,
        1936224884 => AVAudioSessionPromptStyleShort,
        1852992876 => AVAudioSessionPromptStyleNormal,
        _ => throw ArgumentError(
            "Unknown value for AVAudioSessionPromptStyle: $value"),
      };
}

late final _sel_promptStyle = objc.registerName("promptStyle");
final _objc_msgSend_1348 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_availableInputs = objc.registerName("availableInputs");

/// AVAudioSessionRouteDescription
class AVAudioSessionRouteDescription extends objc.NSObject {
  AVAudioSessionRouteDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioSessionRouteDescription] that points to the same underlying object as [other].
  AVAudioSessionRouteDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioSessionRouteDescription] that wraps the given raw object pointer.
  AVAudioSessionRouteDescription.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioSessionRouteDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVAudioSessionRouteDescription);
  }

  /// inputs
  objc.NSArray get inputs {
    final _ret = _objc_msgSend_33(this.pointer, _sel_inputs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputs
  objc.NSArray get outputs {
    final _ret = _objc_msgSend_33(this.pointer, _sel_outputs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  AVAudioSessionRouteDescription init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioSessionRouteDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVAudioSessionRouteDescription new1() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioSessionRouteDescription, _sel_new);
    return AVAudioSessionRouteDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioSessionRouteDescription allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAudioSessionRouteDescription, _sel_allocWithZone_, zone);
    return AVAudioSessionRouteDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAudioSessionRouteDescription alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioSessionRouteDescription, _sel_alloc);
    return AVAudioSessionRouteDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioSessionRouteDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioSessionRouteDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVAudioSessionRouteDescription,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAudioSessionRouteDescription, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioSessionRouteDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioSessionRouteDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioSessionRouteDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVAudioSessionRouteDescription,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAudioSessionRouteDescription, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioSessionRouteDescription =
    objc.getClass("AVAudioSessionRouteDescription");
late final _sel_currentRoute = objc.registerName("currentRoute");
final _objc_msgSend_1349 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum AVAudioSessionIOType {
  AVAudioSessionIOTypeNotSpecified(0),
  AVAudioSessionIOTypeAggregated(1);

  final int value;
  const AVAudioSessionIOType(this.value);

  static AVAudioSessionIOType fromValue(int value) => switch (value) {
        0 => AVAudioSessionIOTypeNotSpecified,
        1 => AVAudioSessionIOTypeAggregated,
        _ =>
          throw ArgumentError("Unknown value for AVAudioSessionIOType: $value"),
      };
}

late final _sel_setAggregatedIOPreference_error_ =
    objc.registerName("setAggregatedIOPreference:error:");
final _objc_msgSend_1350 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setSupportsMultichannelContent_error_ =
    objc.registerName("setSupportsMultichannelContent:error:");
late final _sel_supportsMultichannelContent =
    objc.registerName("supportsMultichannelContent");
late final _sel_setPrefersInterruptionOnRouteDisconnect_error_ =
    objc.registerName("setPrefersInterruptionOnRouteDisconnect:error:");
late final _sel_prefersInterruptionOnRouteDisconnect =
    objc.registerName("prefersInterruptionOnRouteDisconnect");
late final _sel_setActive_withFlags_error_ =
    objc.registerName("setActive:withFlags:error:");
final _objc_msgSend_1351 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.Long,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_inputIsAvailable = objc.registerName("inputIsAvailable");
late final _sel_currentHardwareSampleRate =
    objc.registerName("currentHardwareSampleRate");
late final _sel_currentHardwareInputNumberOfChannels =
    objc.registerName("currentHardwareInputNumberOfChannels");
late final _sel_currentHardwareOutputNumberOfChannels =
    objc.registerName("currentHardwareOutputNumberOfChannels");
late final _sel_setPreferredHardwareSampleRate_error_ =
    objc.registerName("setPreferredHardwareSampleRate:error:");
late final _sel_preferredHardwareSampleRate =
    objc.registerName("preferredHardwareSampleRate");

/// AVAudioSequencer
class AVAudioSequencer extends objc.NSObject {
  AVAudioSequencer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioSequencer] that points to the same underlying object as [other].
  AVAudioSequencer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioSequencer] that wraps the given raw object pointer.
  AVAudioSequencer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioSequencer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioSequencer);
  }

  /// init
  AVAudioSequencer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioSequencer.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithAudioEngine:
  AVAudioSequencer initWithAudioEngine_(AVAudioEngine engine) {
    final _ret = _objc_msgSend_1394(
        this.pointer, _sel_initWithAudioEngine_, engine.pointer);
    return AVAudioSequencer.castFromPointer(_ret, retain: true, release: true);
  }

  /// loadFromURL:options:error:
  bool loadFromURL_options_error_(
      objc.NSURL fileURL,
      AVMusicSequenceLoadOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1395(this.pointer, _sel_loadFromURL_options_error_,
        fileURL.pointer, options.value, outError);
  }

  /// loadFromData:options:error:
  bool loadFromData_options_error_(
      objc.NSData data,
      AVMusicSequenceLoadOptions options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1396(this.pointer, _sel_loadFromData_options_error_,
        data.pointer, options.value, outError);
  }

  /// writeToURL:SMPTEResolution:replaceExisting:error:
  bool writeToURL_SMPTEResolution_replaceExisting_error_(
      objc.NSURL fileURL,
      int resolution,
      bool replace,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1397(
        this.pointer,
        _sel_writeToURL_SMPTEResolution_replaceExisting_error_,
        fileURL.pointer,
        resolution,
        replace,
        outError);
  }

  /// dataWithSMPTEResolution:error:
  objc.NSData dataWithSMPTEResolution_error_(
      int SMPTEResolution, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1398(this.pointer,
        _sel_dataWithSMPTEResolution_error_, SMPTEResolution, outError);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// secondsForBeats:
  double secondsForBeats_(double beats) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1399Fpret(this.pointer, _sel_secondsForBeats_, beats)
        : _objc_msgSend_1399(this.pointer, _sel_secondsForBeats_, beats);
  }

  /// beatsForSeconds:
  double beatsForSeconds_(double seconds) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1399Fpret(this.pointer, _sel_beatsForSeconds_, seconds)
        : _objc_msgSend_1399(this.pointer, _sel_beatsForSeconds_, seconds);
  }

  /// reverseEvents
  void reverseEvents() {
    _objc_msgSend_7(this.pointer, _sel_reverseEvents);
  }

  /// createAndAppendTrack
  AVMusicTrack createAndAppendTrack() {
    final _ret = _objc_msgSend_1411(this.pointer, _sel_createAndAppendTrack);
    return AVMusicTrack.castFromPointer(_ret, retain: true, release: true);
  }

  /// removeTrack:
  bool removeTrack_(AVMusicTrack track) {
    return _objc_msgSend_1412(this.pointer, _sel_removeTrack_, track.pointer);
  }

  /// setUserCallback:
  void setUserCallback_(
      objc.ObjCBlock<ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)>?
          userCallback) {
    _objc_msgSend_1413(this.pointer, _sel_setUserCallback_,
        userCallback?.pointer ?? ffi.nullptr);
  }

  /// tracks
  objc.NSArray get tracks {
    final _ret = _objc_msgSend_33(this.pointer, _sel_tracks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// tempoTrack
  AVMusicTrack get tempoTrack {
    final _ret = _objc_msgSend_1411(this.pointer, _sel_tempoTrack);
    return AVMusicTrack.castFromPointer(_ret, retain: true, release: true);
  }

  /// userInfo
  objc.NSDictionary get userInfo {
    final _ret = _objc_msgSend_123(this.pointer, _sel_userInfo);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// currentPositionInSeconds
  double get currentPositionInSeconds {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_currentPositionInSeconds)
        : _objc_msgSend_18(this.pointer, _sel_currentPositionInSeconds);
  }

  /// setCurrentPositionInSeconds:
  set currentPositionInSeconds(double value) {
    return _objc_msgSend_226(
        this.pointer, _sel_setCurrentPositionInSeconds_, value);
  }

  /// currentPositionInBeats
  double get currentPositionInBeats {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_currentPositionInBeats)
        : _objc_msgSend_18(this.pointer, _sel_currentPositionInBeats);
  }

  /// setCurrentPositionInBeats:
  set currentPositionInBeats(double value) {
    return _objc_msgSend_226(
        this.pointer, _sel_setCurrentPositionInBeats_, value);
  }

  /// isPlaying
  bool get playing {
    return _objc_msgSend_13(this.pointer, _sel_isPlaying);
  }

  /// rate
  double get rate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_rate)
        : _objc_msgSend_361(this.pointer, _sel_rate);
  }

  /// setRate:
  set rate(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setRate_, value);
  }

  /// hostTimeForBeats:error:
  int hostTimeForBeats_error_(
      double inBeats, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1414(
        this.pointer, _sel_hostTimeForBeats_error_, inBeats, outError);
  }

  /// beatsForHostTime:error:
  double beatsForHostTime_error_(
      int inHostTime, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1415Fpret(
            this.pointer, _sel_beatsForHostTime_error_, inHostTime, outError)
        : _objc_msgSend_1415(
            this.pointer, _sel_beatsForHostTime_error_, inHostTime, outError);
  }

  /// prepareToPlay
  void prepareToPlay() {
    _objc_msgSend_7(this.pointer, _sel_prepareToPlay);
  }

  /// startAndReturnError:
  bool startAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_39(this.pointer, _sel_startAndReturnError_, outError);
  }

  /// stop
  void stop() {
    _objc_msgSend_7(this.pointer, _sel_stop);
  }

  /// new
  static AVAudioSequencer new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioSequencer, _sel_new);
    return AVAudioSequencer.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioSequencer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioSequencer, _sel_allocWithZone_, zone);
    return AVAudioSequencer.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioSequencer alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioSequencer, _sel_alloc);
    return AVAudioSequencer.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioSequencer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioSequencer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioSequencer, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioSequencer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioSequencer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioSequencer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioSequencer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioSequencer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioSequencer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioSequencer = objc.getClass("AVAudioSequencer");

/// AVAudioEngine
class AVAudioEngine extends objc.NSObject {
  AVAudioEngine._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioEngine] that points to the same underlying object as [other].
  AVAudioEngine.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioEngine] that wraps the given raw object pointer.
  AVAudioEngine.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioEngine].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioEngine);
  }

  /// init
  AVAudioEngine init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioEngine.castFromPointer(_ret, retain: true, release: true);
  }

  /// attachNode:
  void attachNode_(AVAudioNode node) {
    _objc_msgSend_1365(this.pointer, _sel_attachNode_, node.pointer);
  }

  /// detachNode:
  void detachNode_(AVAudioNode node) {
    _objc_msgSend_1365(this.pointer, _sel_detachNode_, node.pointer);
  }

  /// connect:to:fromBus:toBus:format:
  void connect_to_fromBus_toBus_format_(AVAudioNode node1, AVAudioNode node2,
      int bus1, int bus2, AVAudioFormat? format) {
    _objc_msgSend_1366(
        this.pointer,
        _sel_connect_to_fromBus_toBus_format_,
        node1.pointer,
        node2.pointer,
        bus1,
        bus2,
        format?.pointer ?? ffi.nullptr);
  }

  /// connect:to:format:
  void connect_to_format_(
      AVAudioNode node1, AVAudioNode node2, AVAudioFormat? format) {
    _objc_msgSend_1367(this.pointer, _sel_connect_to_format_, node1.pointer,
        node2.pointer, format?.pointer ?? ffi.nullptr);
  }

  /// connect:toConnectionPoints:fromBus:format:
  void connect_toConnectionPoints_fromBus_format_(AVAudioNode sourceNode,
      objc.NSArray destNodes, int sourceBus, AVAudioFormat? format) {
    _objc_msgSend_1368(
        this.pointer,
        _sel_connect_toConnectionPoints_fromBus_format_,
        sourceNode.pointer,
        destNodes.pointer,
        sourceBus,
        format?.pointer ?? ffi.nullptr);
  }

  /// disconnectNodeInput:bus:
  void disconnectNodeInput_bus_(AVAudioNode node, int bus) {
    _objc_msgSend_1369(
        this.pointer, _sel_disconnectNodeInput_bus_, node.pointer, bus);
  }

  /// disconnectNodeInput:
  void disconnectNodeInput_(AVAudioNode node) {
    _objc_msgSend_1365(this.pointer, _sel_disconnectNodeInput_, node.pointer);
  }

  /// disconnectNodeOutput:bus:
  void disconnectNodeOutput_bus_(AVAudioNode node, int bus) {
    _objc_msgSend_1369(
        this.pointer, _sel_disconnectNodeOutput_bus_, node.pointer, bus);
  }

  /// disconnectNodeOutput:
  void disconnectNodeOutput_(AVAudioNode node) {
    _objc_msgSend_1365(this.pointer, _sel_disconnectNodeOutput_, node.pointer);
  }

  /// prepare
  void prepare() {
    _objc_msgSend_7(this.pointer, _sel_prepare);
  }

  /// startAndReturnError:
  bool startAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_39(this.pointer, _sel_startAndReturnError_, outError);
  }

  /// pause
  void pause() {
    _objc_msgSend_7(this.pointer, _sel_pause);
  }

  /// reset
  void reset() {
    _objc_msgSend_7(this.pointer, _sel_reset);
  }

  /// stop
  void stop() {
    _objc_msgSend_7(this.pointer, _sel_stop);
  }

  /// inputConnectionPointForNode:inputBus:
  AVAudioConnectionPoint? inputConnectionPointForNode_inputBus_(
      AVAudioNode node, int bus) {
    final _ret = _objc_msgSend_1372(this.pointer,
        _sel_inputConnectionPointForNode_inputBus_, node.pointer, bus);
    return _ret.address == 0
        ? null
        : AVAudioConnectionPoint.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// outputConnectionPointsForNode:outputBus:
  objc.NSArray outputConnectionPointsForNode_outputBus_(
      AVAudioNode node, int bus) {
    final _ret = _objc_msgSend_1373(this.pointer,
        _sel_outputConnectionPointsForNode_outputBus_, node.pointer, bus);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// musicSequence
  ffi.Pointer<OpaqueMusicSequence> get musicSequence {
    return _objc_msgSend_1374(this.pointer, _sel_musicSequence);
  }

  /// setMusicSequence:
  set musicSequence(ffi.Pointer<OpaqueMusicSequence> value) {
    return _objc_msgSend_1375(this.pointer, _sel_setMusicSequence_, value);
  }

  /// outputNode
  AVAudioOutputNode get outputNode {
    final _ret = _objc_msgSend_1377(this.pointer, _sel_outputNode);
    return AVAudioOutputNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// inputNode
  AVAudioInputNode get inputNode {
    final _ret = _objc_msgSend_1382(this.pointer, _sel_inputNode);
    return AVAudioInputNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// mainMixerNode
  AVAudioMixerNode get mainMixerNode {
    final _ret = _objc_msgSend_1383(this.pointer, _sel_mainMixerNode);
    return AVAudioMixerNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// isRunning
  bool get running {
    return _objc_msgSend_13(this.pointer, _sel_isRunning);
  }

  /// isAutoShutdownEnabled
  bool get autoShutdownEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isAutoShutdownEnabled);
  }

  /// setAutoShutdownEnabled:
  set autoShutdownEnabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setAutoShutdownEnabled_, value);
  }

  /// attachedNodes
  objc.NSSet get attachedNodes {
    final _ret = _objc_msgSend_1049(this.pointer, _sel_attachedNodes);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// enableManualRenderingMode:format:maximumFrameCount:error:
  bool enableManualRenderingMode_format_maximumFrameCount_error_(
      AVAudioEngineManualRenderingMode mode,
      AVAudioFormat pcmFormat,
      int maximumFrameCount,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1384(
        this.pointer,
        _sel_enableManualRenderingMode_format_maximumFrameCount_error_,
        mode.value,
        pcmFormat.pointer,
        maximumFrameCount,
        outError);
  }

  /// disableManualRenderingMode
  void disableManualRenderingMode() {
    _objc_msgSend_7(this.pointer, _sel_disableManualRenderingMode);
  }

  /// renderOffline:toBuffer:error:
  AVAudioEngineManualRenderingStatus renderOffline_toBuffer_error_(
      int numberOfFrames,
      AVAudioPCMBuffer buffer,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1385(
        this.pointer,
        _sel_renderOffline_toBuffer_error_,
        numberOfFrames,
        buffer.pointer,
        outError);
    return AVAudioEngineManualRenderingStatus.fromValue(_ret);
  }

  /// manualRenderingBlock
  objc.ObjCBlock<
          ffi.Long Function(
              ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)>
      get manualRenderingBlock {
    final _ret = _objc_msgSend_1386(this.pointer, _sel_manualRenderingBlock);
    return ObjCBlock_AVAudioEngineManualRenderingStatus_Uint32_AudioBufferList_ffiInt
        .castFromPointer(_ret, retain: true, release: true);
  }

  /// isInManualRenderingMode
  bool get isInManualRenderingMode {
    return _objc_msgSend_13(this.pointer, _sel_isInManualRenderingMode);
  }

  /// manualRenderingMode
  AVAudioEngineManualRenderingMode get manualRenderingMode {
    final _ret = _objc_msgSend_1387(this.pointer, _sel_manualRenderingMode);
    return AVAudioEngineManualRenderingMode.fromValue(_ret);
  }

  /// manualRenderingFormat
  AVAudioFormat get manualRenderingFormat {
    final _ret = _objc_msgSend_1092(this.pointer, _sel_manualRenderingFormat);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// manualRenderingMaximumFrameCount
  int get manualRenderingMaximumFrameCount {
    return _objc_msgSend_988(
        this.pointer, _sel_manualRenderingMaximumFrameCount);
  }

  /// manualRenderingSampleTime
  int get manualRenderingSampleTime {
    return _objc_msgSend_9(this.pointer, _sel_manualRenderingSampleTime);
  }

  /// connectMIDI:to:format:block:
  void connectMIDI_to_format_block_(
      AVAudioNode sourceNode,
      AVAudioNode destinationNode,
      AVAudioFormat? format,
      objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>?
          tapBlock) {
    _objc_msgSend_1388(
        this.pointer,
        _sel_connectMIDI_to_format_block_,
        sourceNode.pointer,
        destinationNode.pointer,
        format?.pointer ?? ffi.nullptr,
        tapBlock?.pointer ?? ffi.nullptr);
  }

  /// connectMIDI:to:format:eventListBlock:
  void connectMIDI_to_format_eventListBlock_(
      AVAudioNode sourceNode,
      AVAudioNode destinationNode,
      AVAudioFormat? format,
      objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>?
          tapBlock) {
    _objc_msgSend_1389(
        this.pointer,
        _sel_connectMIDI_to_format_eventListBlock_,
        sourceNode.pointer,
        destinationNode.pointer,
        format?.pointer ?? ffi.nullptr,
        tapBlock?.pointer ?? ffi.nullptr);
  }

  /// connectMIDI:toNodes:format:block:
  void connectMIDI_toNodes_format_block_(
      AVAudioNode sourceNode,
      objc.NSArray destinationNodes,
      AVAudioFormat? format,
      objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Int64, ffi.Uint8, ffi.Long, ffi.Pointer<ffi.Uint8>)>?
          tapBlock) {
    _objc_msgSend_1390(
        this.pointer,
        _sel_connectMIDI_toNodes_format_block_,
        sourceNode.pointer,
        destinationNodes.pointer,
        format?.pointer ?? ffi.nullptr,
        tapBlock?.pointer ?? ffi.nullptr);
  }

  /// connectMIDI:toNodes:format:eventListBlock:
  void connectMIDI_toNodes_format_eventListBlock_(
      AVAudioNode sourceNode,
      objc.NSArray destinationNodes,
      AVAudioFormat? format,
      objc.ObjCBlock<
              ffi.Int Function(
                  ffi.Int64, ffi.Uint8, ffi.Pointer<MIDIEventList>)>?
          tapBlock) {
    _objc_msgSend_1391(
        this.pointer,
        _sel_connectMIDI_toNodes_format_eventListBlock_,
        sourceNode.pointer,
        destinationNodes.pointer,
        format?.pointer ?? ffi.nullptr,
        tapBlock?.pointer ?? ffi.nullptr);
  }

  /// disconnectMIDI:from:
  void disconnectMIDI_from_(
      AVAudioNode sourceNode, AVAudioNode destinationNode) {
    _objc_msgSend_1392(this.pointer, _sel_disconnectMIDI_from_,
        sourceNode.pointer, destinationNode.pointer);
  }

  /// disconnectMIDI:fromNodes:
  void disconnectMIDI_fromNodes_(
      AVAudioNode sourceNode, objc.NSArray destinationNodes) {
    _objc_msgSend_1393(this.pointer, _sel_disconnectMIDI_fromNodes_,
        sourceNode.pointer, destinationNodes.pointer);
  }

  /// disconnectMIDIInput:
  void disconnectMIDIInput_(AVAudioNode node) {
    _objc_msgSend_1365(this.pointer, _sel_disconnectMIDIInput_, node.pointer);
  }

  /// disconnectMIDIOutput:
  void disconnectMIDIOutput_(AVAudioNode node) {
    _objc_msgSend_1365(this.pointer, _sel_disconnectMIDIOutput_, node.pointer);
  }

  /// new
  static AVAudioEngine new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioEngine, _sel_new);
    return AVAudioEngine.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioEngine allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioEngine, _sel_allocWithZone_, zone);
    return AVAudioEngine.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioEngine alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioEngine, _sel_alloc);
    return AVAudioEngine.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioEngine,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioEngine,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioEngine, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioEngine, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioEngine,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioEngine,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioEngine,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioEngine, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioEngine, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioEngine = objc.getClass("AVAudioEngine");

/// AVAudioNode
class AVAudioNode extends objc.NSObject {
  AVAudioNode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioNode] that points to the same underlying object as [other].
  AVAudioNode.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioNode] that wraps the given raw object pointer.
  AVAudioNode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioNode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioNode);
  }

  /// reset
  void reset() {
    _objc_msgSend_7(this.pointer, _sel_reset);
  }

  /// inputFormatForBus:
  AVAudioFormat inputFormatForBus_(int bus) {
    final _ret = _objc_msgSend_1352(this.pointer, _sel_inputFormatForBus_, bus);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputFormatForBus:
  AVAudioFormat outputFormatForBus_(int bus) {
    final _ret =
        _objc_msgSend_1352(this.pointer, _sel_outputFormatForBus_, bus);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  /// nameForInputBus:
  objc.NSString? nameForInputBus_(int bus) {
    final _ret = _objc_msgSend_1353(this.pointer, _sel_nameForInputBus_, bus);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// nameForOutputBus:
  objc.NSString? nameForOutputBus_(int bus) {
    final _ret = _objc_msgSend_1353(this.pointer, _sel_nameForOutputBus_, bus);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// installTapOnBus:bufferSize:format:block:
  void installTapOnBus_bufferSize_format_block_(
      int bus,
      int bufferSize,
      AVAudioFormat? format,
      objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)>
          tapBlock) {
    _objc_msgSend_1362(
        this.pointer,
        _sel_installTapOnBus_bufferSize_format_block_,
        bus,
        bufferSize,
        format?.pointer ?? ffi.nullptr,
        tapBlock.pointer);
  }

  /// removeTapOnBus:
  void removeTapOnBus_(int bus) {
    _objc_msgSend_425(this.pointer, _sel_removeTapOnBus_, bus);
  }

  /// engine
  AVAudioEngine? get engine {
    final _ret = _objc_msgSend_1363(this.pointer, _sel_engine);
    return _ret.address == 0
        ? null
        : AVAudioEngine.castFromPointer(_ret, retain: true, release: true);
  }

  /// numberOfInputs
  int get numberOfInputs {
    return _objc_msgSend_57(this.pointer, _sel_numberOfInputs);
  }

  /// numberOfOutputs
  int get numberOfOutputs {
    return _objc_msgSend_57(this.pointer, _sel_numberOfOutputs);
  }

  /// lastRenderTime
  AVAudioTime? get lastRenderTime {
    final _ret = _objc_msgSend_1364(this.pointer, _sel_lastRenderTime);
    return _ret.address == 0
        ? null
        : AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// AUAudioUnit
  AUAudioUnit get AUAudioUnit1 {
    final _ret = _objc_msgSend_1095(this.pointer, _sel_AUAudioUnit);
    return AUAudioUnit.castFromPointer(_ret, retain: true, release: true);
  }

  /// latency
  double get latency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_latency)
        : _objc_msgSend_18(this.pointer, _sel_latency);
  }

  /// outputPresentationLatency
  double get outputPresentationLatency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_outputPresentationLatency)
        : _objc_msgSend_18(this.pointer, _sel_outputPresentationLatency);
  }

  /// init
  AVAudioNode init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAudioNode new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioNode, _sel_new);
    return AVAudioNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioNode allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioNode, _sel_allocWithZone_, zone);
    return AVAudioNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioNode alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioNode, _sel_alloc);
    return AVAudioNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioNode,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioNode,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioNode, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioNode, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioNode,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioNode,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioNode,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioNode, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioNode, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioNode = objc.getClass("AVAudioNode");
late final _sel_inputFormatForBus_ = objc.registerName("inputFormatForBus:");
final _objc_msgSend_1352 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_outputFormatForBus_ = objc.registerName("outputFormatForBus:");
late final _sel_nameForInputBus_ = objc.registerName("nameForInputBus:");
final _objc_msgSend_1353 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_nameForOutputBus_ = objc.registerName("nameForOutputBus:");
void _ObjCBlock_ffiVoid_AVAudioPCMBuffer_AVAudioTime_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVAudioPCMBuffer_AVAudioTime_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)>`.
abstract final class ObjCBlock_ffiVoid_AVAudioPCMBuffer_AVAudioTime {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_AVAudioPCMBuffer_AVAudioTime_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)> fromFunction(
          void Function(AVAudioPCMBuffer, AVAudioTime) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_AVAudioPCMBuffer_AVAudioTime_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  AVAudioPCMBuffer.castFromPointer(arg0, retain: true, release: true),
                  AVAudioTime.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)>
      listener(void Function(AVAudioPCMBuffer, AVAudioTime) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVAudioPCMBuffer_AVAudioTime_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0,
                ffi.Pointer<objc.ObjCObject> arg1) =>
            fn(
                AVAudioPCMBuffer.castFromPointer(arg0,
                    retain: false, release: true),
                AVAudioTime.castFromPointer(arg1,
                    retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVAudioPCMBuffer_AVAudioTime(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)>`.
extension ObjCBlock_ffiVoid_AVAudioPCMBuffer_AVAudioTime_CallExtension
    on objc.ObjCBlock<ffi.Void Function(AVAudioPCMBuffer, AVAudioTime)> {
  void call(AVAudioPCMBuffer arg0, AVAudioTime arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1.pointer);
}

/// AVAudioTime
class AVAudioTime extends objc.NSObject {
  AVAudioTime._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioTime] that points to the same underlying object as [other].
  AVAudioTime.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioTime] that wraps the given raw object pointer.
  AVAudioTime.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioTime].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioTime);
  }

  /// initWithAudioTimeStamp:sampleRate:
  AVAudioTime initWithAudioTimeStamp_sampleRate_(
      ffi.Pointer<AudioTimeStamp> ts, double sampleRate) {
    final _ret = _objc_msgSend_1354(
        this.pointer, _sel_initWithAudioTimeStamp_sampleRate_, ts, sampleRate);
    return AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithHostTime:
  AVAudioTime initWithHostTime_(int hostTime) {
    final _ret =
        _objc_msgSend_1355(this.pointer, _sel_initWithHostTime_, hostTime);
    return AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithSampleTime:atRate:
  AVAudioTime initWithSampleTime_atRate_(int sampleTime, double sampleRate) {
    final _ret = _objc_msgSend_1356(
        this.pointer, _sel_initWithSampleTime_atRate_, sampleTime, sampleRate);
    return AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithHostTime:sampleTime:atRate:
  AVAudioTime initWithHostTime_sampleTime_atRate_(
      int hostTime, int sampleTime, double sampleRate) {
    final _ret = _objc_msgSend_1357(
        this.pointer,
        _sel_initWithHostTime_sampleTime_atRate_,
        hostTime,
        sampleTime,
        sampleRate);
    return AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeWithAudioTimeStamp:sampleRate:
  static AVAudioTime timeWithAudioTimeStamp_sampleRate_(
      ffi.Pointer<AudioTimeStamp> ts, double sampleRate) {
    final _ret = _objc_msgSend_1354(_class_AVAudioTime,
        _sel_timeWithAudioTimeStamp_sampleRate_, ts, sampleRate);
    return AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeWithHostTime:
  static AVAudioTime timeWithHostTime_(int hostTime) {
    final _ret = _objc_msgSend_1355(
        _class_AVAudioTime, _sel_timeWithHostTime_, hostTime);
    return AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeWithSampleTime:atRate:
  static AVAudioTime timeWithSampleTime_atRate_(
      int sampleTime, double sampleRate) {
    final _ret = _objc_msgSend_1356(_class_AVAudioTime,
        _sel_timeWithSampleTime_atRate_, sampleTime, sampleRate);
    return AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeWithHostTime:sampleTime:atRate:
  static AVAudioTime timeWithHostTime_sampleTime_atRate_(
      int hostTime, int sampleTime, double sampleRate) {
    final _ret = _objc_msgSend_1357(
        _class_AVAudioTime,
        _sel_timeWithHostTime_sampleTime_atRate_,
        hostTime,
        sampleTime,
        sampleRate);
    return AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// hostTimeForSeconds:
  static int hostTimeForSeconds_(double seconds) {
    return _objc_msgSend_1358(
        _class_AVAudioTime, _sel_hostTimeForSeconds_, seconds);
  }

  /// secondsForHostTime:
  static double secondsForHostTime_(int hostTime) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1359Fpret(
            _class_AVAudioTime, _sel_secondsForHostTime_, hostTime)
        : _objc_msgSend_1359(
            _class_AVAudioTime, _sel_secondsForHostTime_, hostTime);
  }

  /// extrapolateTimeFromAnchor:
  AVAudioTime? extrapolateTimeFromAnchor_(AVAudioTime anchorTime) {
    final _ret = _objc_msgSend_1360(
        this.pointer, _sel_extrapolateTimeFromAnchor_, anchorTime.pointer);
    return _ret.address == 0
        ? null
        : AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// isHostTimeValid
  bool get hostTimeValid {
    return _objc_msgSend_13(this.pointer, _sel_isHostTimeValid);
  }

  /// hostTime
  int get hostTime {
    return _objc_msgSend_1108(this.pointer, _sel_hostTime);
  }

  /// isSampleTimeValid
  bool get sampleTimeValid {
    return _objc_msgSend_13(this.pointer, _sel_isSampleTimeValid);
  }

  /// sampleTime
  int get sampleTime {
    return _objc_msgSend_9(this.pointer, _sel_sampleTime);
  }

  /// sampleRate
  double get sampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_sampleRate)
        : _objc_msgSend_18(this.pointer, _sel_sampleRate);
  }

  /// audioTimeStamp
  void getAudioTimeStamp(ffi.Pointer<AudioTimeStamp> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1361Stret(stret, this.pointer, _sel_audioTimeStamp)
        : stret.ref = _objc_msgSend_1361(this.pointer, _sel_audioTimeStamp);
  }

  /// init
  AVAudioTime init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioTime.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAudioTime new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioTime, _sel_new);
    return AVAudioTime.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioTime allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioTime, _sel_allocWithZone_, zone);
    return AVAudioTime.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioTime alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioTime, _sel_alloc);
    return AVAudioTime.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioTime,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioTime,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioTime, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioTime, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioTime,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioTime,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioTime,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioTime, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioTime, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioTime = objc.getClass("AVAudioTime");
late final _sel_initWithAudioTimeStamp_sampleRate_ =
    objc.registerName("initWithAudioTimeStamp:sampleRate:");
final _objc_msgSend_1354 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<AudioTimeStamp>,
                ffi.Double)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<AudioTimeStamp>,
            double)>();
late final _sel_initWithHostTime_ = objc.registerName("initWithHostTime:");
final _objc_msgSend_1355 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint64)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithSampleTime_atRate_ =
    objc.registerName("initWithSampleTime:atRate:");
final _objc_msgSend_1356 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64, ffi.Double)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, double)>();
late final _sel_initWithHostTime_sampleTime_atRate_ =
    objc.registerName("initWithHostTime:sampleTime:atRate:");
final _objc_msgSend_1357 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Uint64,
                ffi.Int64,
                ffi.Double)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int, double)>();
late final _sel_timeWithAudioTimeStamp_sampleRate_ =
    objc.registerName("timeWithAudioTimeStamp:sampleRate:");
late final _sel_timeWithHostTime_ = objc.registerName("timeWithHostTime:");
late final _sel_timeWithSampleTime_atRate_ =
    objc.registerName("timeWithSampleTime:atRate:");
late final _sel_timeWithHostTime_sampleTime_atRate_ =
    objc.registerName("timeWithHostTime:sampleTime:atRate:");
late final _sel_hostTimeForSeconds_ = objc.registerName("hostTimeForSeconds:");
final _objc_msgSend_1358 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Uint64 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_secondsForHostTime_ = objc.registerName("secondsForHostTime:");
final _objc_msgSend_1359 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint64)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_1359Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint64)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_extrapolateTimeFromAnchor_ =
    objc.registerName("extrapolateTimeFromAnchor:");
final _objc_msgSend_1360 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isHostTimeValid = objc.registerName("isHostTimeValid");
late final _sel_hostTime = objc.registerName("hostTime");
late final _sel_isSampleTimeValid = objc.registerName("isSampleTimeValid");
late final _sel_sampleTime = objc.registerName("sampleTime");
late final _sel_audioTimeStamp = objc.registerName("audioTimeStamp");
final _objc_msgSend_1361 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AudioTimeStamp Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AudioTimeStamp Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1361Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AudioTimeStamp>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AudioTimeStamp>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_installTapOnBus_bufferSize_format_block_ =
    objc.registerName("installTapOnBus:bufferSize:format:block:");
final _objc_msgSend_1362 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Uint32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_removeTapOnBus_ = objc.registerName("removeTapOnBus:");
late final _sel_engine = objc.registerName("engine");
final _objc_msgSend_1363 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_numberOfInputs = objc.registerName("numberOfInputs");
late final _sel_numberOfOutputs = objc.registerName("numberOfOutputs");
late final _sel_lastRenderTime = objc.registerName("lastRenderTime");
final _objc_msgSend_1364 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_AUAudioUnit = objc.registerName("AUAudioUnit");
late final _sel_outputPresentationLatency =
    objc.registerName("outputPresentationLatency");
late final _sel_attachNode_ = objc.registerName("attachNode:");
final _objc_msgSend_1365 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_detachNode_ = objc.registerName("detachNode:");
late final _sel_connect_to_fromBus_toBus_format_ =
    objc.registerName("connect:to:fromBus:toBus:format:");
final _objc_msgSend_1366 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_connect_to_format_ = objc.registerName("connect:to:format:");
final _objc_msgSend_1367 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_connect_toConnectionPoints_fromBus_format_ =
    objc.registerName("connect:toConnectionPoints:fromBus:format:");
final _objc_msgSend_1368 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_disconnectNodeInput_bus_ =
    objc.registerName("disconnectNodeInput:bus:");
final _objc_msgSend_1369 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_disconnectNodeInput_ =
    objc.registerName("disconnectNodeInput:");
late final _sel_disconnectNodeOutput_bus_ =
    objc.registerName("disconnectNodeOutput:bus:");
late final _sel_disconnectNodeOutput_ =
    objc.registerName("disconnectNodeOutput:");
late final _sel_prepare = objc.registerName("prepare");
late final _sel_startAndReturnError_ =
    objc.registerName("startAndReturnError:");

/// AVAudioConnectionPoint
class AVAudioConnectionPoint extends objc.NSObject {
  AVAudioConnectionPoint._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioConnectionPoint] that points to the same underlying object as [other].
  AVAudioConnectionPoint.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioConnectionPoint] that wraps the given raw object pointer.
  AVAudioConnectionPoint.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioConnectionPoint].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioConnectionPoint);
  }

  /// initWithNode:bus:
  AVAudioConnectionPoint initWithNode_bus_(AVAudioNode node, int bus) {
    final _ret = _objc_msgSend_1370(
        this.pointer, _sel_initWithNode_bus_, node.pointer, bus);
    return AVAudioConnectionPoint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  AVAudioConnectionPoint init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioConnectionPoint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// node
  AVAudioNode? get node {
    final _ret = _objc_msgSend_1371(this.pointer, _sel_node);
    return _ret.address == 0
        ? null
        : AVAudioNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// bus
  int get bus {
    return _objc_msgSend_57(this.pointer, _sel_bus);
  }

  /// new
  static AVAudioConnectionPoint new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioConnectionPoint, _sel_new);
    return AVAudioConnectionPoint.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioConnectionPoint allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVAudioConnectionPoint, _sel_allocWithZone_, zone);
    return AVAudioConnectionPoint.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAudioConnectionPoint alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioConnectionPoint, _sel_alloc);
    return AVAudioConnectionPoint.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioConnectionPoint,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioConnectionPoint,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioConnectionPoint, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVAudioConnectionPoint, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioConnectionPoint,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioConnectionPoint,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioConnectionPoint,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioConnectionPoint, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAudioConnectionPoint, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioConnectionPoint =
    objc.getClass("AVAudioConnectionPoint");
late final _sel_initWithNode_bus_ = objc.registerName("initWithNode:bus:");
final _objc_msgSend_1370 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_node = objc.registerName("node");
final _objc_msgSend_1371 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_bus = objc.registerName("bus");
late final _sel_inputConnectionPointForNode_inputBus_ =
    objc.registerName("inputConnectionPointForNode:inputBus:");
final _objc_msgSend_1372 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_outputConnectionPointsForNode_outputBus_ =
    objc.registerName("outputConnectionPointsForNode:outputBus:");
final _objc_msgSend_1373 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

final class OpaqueMusicSequence extends ffi.Opaque {}

late final _sel_musicSequence = objc.registerName("musicSequence");
final _objc_msgSend_1374 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<OpaqueMusicSequence> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<OpaqueMusicSequence> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMusicSequence_ = objc.registerName("setMusicSequence:");
final _objc_msgSend_1375 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<OpaqueMusicSequence>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<OpaqueMusicSequence>)>();

/// AVAudioOutputNode
class AVAudioOutputNode extends AVAudioIONode {
  AVAudioOutputNode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioOutputNode] that points to the same underlying object as [other].
  AVAudioOutputNode.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioOutputNode] that wraps the given raw object pointer.
  AVAudioOutputNode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioOutputNode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioOutputNode);
  }

  /// init
  AVAudioOutputNode init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioOutputNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAudioOutputNode new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioOutputNode, _sel_new);
    return AVAudioOutputNode.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioOutputNode allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioOutputNode, _sel_allocWithZone_, zone);
    return AVAudioOutputNode.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAudioOutputNode alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioOutputNode, _sel_alloc);
    return AVAudioOutputNode.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioOutputNode,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioOutputNode,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioOutputNode, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioOutputNode, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioOutputNode,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioOutputNode,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioOutputNode,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioOutputNode, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVAudioOutputNode, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioOutputNode = objc.getClass("AVAudioOutputNode");

/// AVAudioIONode
class AVAudioIONode extends AVAudioNode {
  AVAudioIONode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioIONode] that points to the same underlying object as [other].
  AVAudioIONode.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioIONode] that wraps the given raw object pointer.
  AVAudioIONode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioIONode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioIONode);
  }

  /// presentationLatency
  double get presentationLatency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_presentationLatency)
        : _objc_msgSend_18(this.pointer, _sel_presentationLatency);
  }

  /// audioUnit
  ffi.Pointer<ComponentInstanceRecord> get audioUnit {
    return _objc_msgSend_1376(this.pointer, _sel_audioUnit);
  }

  /// isVoiceProcessingEnabled
  bool get voiceProcessingEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isVoiceProcessingEnabled);
  }

  /// setVoiceProcessingEnabled:error:
  bool setVoiceProcessingEnabled_error_(
      bool enabled, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1331(
        this.pointer, _sel_setVoiceProcessingEnabled_error_, enabled, outError);
  }

  /// init
  AVAudioIONode init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioIONode.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAudioIONode new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioIONode, _sel_new);
    return AVAudioIONode.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioIONode allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioIONode, _sel_allocWithZone_, zone);
    return AVAudioIONode.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioIONode alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioIONode, _sel_alloc);
    return AVAudioIONode.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioIONode,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioIONode,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioIONode, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioIONode, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioIONode,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioIONode,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioIONode,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioIONode, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioIONode, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioIONode = objc.getClass("AVAudioIONode");
late final _sel_presentationLatency = objc.registerName("presentationLatency");

@ffi.Packed(2)
final class ComponentInstanceRecord extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<ffi.Long> data;
}

late final _sel_audioUnit = objc.registerName("audioUnit");
final _objc_msgSend_1376 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ComponentInstanceRecord> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ComponentInstanceRecord> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isVoiceProcessingEnabled =
    objc.registerName("isVoiceProcessingEnabled");
late final _sel_setVoiceProcessingEnabled_error_ =
    objc.registerName("setVoiceProcessingEnabled:error:");
late final _sel_outputNode = objc.registerName("outputNode");
final _objc_msgSend_1377 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVAudioInputNode
class AVAudioInputNode extends AVAudioIONode {
  AVAudioInputNode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioInputNode] that points to the same underlying object as [other].
  AVAudioInputNode.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioInputNode] that wraps the given raw object pointer.
  AVAudioInputNode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioInputNode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioInputNode);
  }

  /// init
  AVAudioInputNode init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioInputNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// setManualRenderingInputPCMFormat:inputBlock:
  bool setManualRenderingInputPCMFormat_inputBlock_(AVAudioFormat format,
      objc.ObjCBlock<ffi.Pointer<AudioBufferList> Function(ffi.Uint32)> block) {
    return _objc_msgSend_1378(
        this.pointer,
        _sel_setManualRenderingInputPCMFormat_inputBlock_,
        format.pointer,
        block.pointer);
  }

  /// isVoiceProcessingBypassed
  bool get voiceProcessingBypassed {
    return _objc_msgSend_13(this.pointer, _sel_isVoiceProcessingBypassed);
  }

  /// setVoiceProcessingBypassed:
  set voiceProcessingBypassed(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setVoiceProcessingBypassed_, value);
  }

  /// isVoiceProcessingAGCEnabled
  bool get voiceProcessingAGCEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isVoiceProcessingAGCEnabled);
  }

  /// setVoiceProcessingAGCEnabled:
  set voiceProcessingAGCEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setVoiceProcessingAGCEnabled_, value);
  }

  /// isVoiceProcessingInputMuted
  bool get voiceProcessingInputMuted {
    return _objc_msgSend_13(this.pointer, _sel_isVoiceProcessingInputMuted);
  }

  /// setVoiceProcessingInputMuted:
  set voiceProcessingInputMuted(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setVoiceProcessingInputMuted_, value);
  }

  /// setMutedSpeechActivityEventListener:
  bool setMutedSpeechActivityEventListener_(
      objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)>? listenerBlock) {
    return _objc_msgSend_1379(
        this.pointer,
        _sel_setMutedSpeechActivityEventListener_,
        listenerBlock?.pointer ?? ffi.nullptr);
  }

  /// voiceProcessingOtherAudioDuckingConfiguration
  void getVoiceProcessingOtherAudioDuckingConfiguration(
      ffi.Pointer<AVAudioVoiceProcessingOtherAudioDuckingConfiguration> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1380Stret(stret, this.pointer,
            _sel_voiceProcessingOtherAudioDuckingConfiguration)
        : stret.ref = _objc_msgSend_1380(
            this.pointer, _sel_voiceProcessingOtherAudioDuckingConfiguration);
  }

  /// setVoiceProcessingOtherAudioDuckingConfiguration:
  set voiceProcessingOtherAudioDuckingConfiguration(
      AVAudioVoiceProcessingOtherAudioDuckingConfiguration value) {
    return _objc_msgSend_1381(this.pointer,
        _sel_setVoiceProcessingOtherAudioDuckingConfiguration_, value);
  }

  /// new
  static AVAudioInputNode new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioInputNode, _sel_new);
    return AVAudioInputNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioInputNode allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioInputNode, _sel_allocWithZone_, zone);
    return AVAudioInputNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioInputNode alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioInputNode, _sel_alloc);
    return AVAudioInputNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioInputNode,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioInputNode,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioInputNode, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioInputNode, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioInputNode,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioInputNode,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioInputNode,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioInputNode, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioInputNode, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioInputNode = objc.getClass("AVAudioInputNode");
ffi.Pointer<AudioBufferList> _ObjCBlock_AudioBufferList_Uint32_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<AudioBufferList> Function(ffi.Uint32 arg0)>>()
        .asFunction<ffi.Pointer<AudioBufferList> Function(int)>()(arg0);
ffi.Pointer<AudioBufferList>
    _ObjCBlock_AudioBufferList_Uint32_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block, int arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<AudioBufferList> Function(
            int))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<AudioBufferList> Function(ffi.Uint32)>`.
abstract final class ObjCBlock_AudioBufferList_Uint32 {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Pointer<AudioBufferList> Function(ffi.Uint32)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Pointer<AudioBufferList> Function(ffi.Uint32)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<AudioBufferList> Function(ffi.Uint32)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<AudioBufferList> Function(ffi.Uint32 arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Pointer<AudioBufferList> Function(ffi.Uint32)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<AudioBufferList> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Uint32)>(_ObjCBlock_AudioBufferList_Uint32_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<AudioBufferList> Function(ffi.Uint32)> fromFunction(
          ffi.Pointer<AudioBufferList> Function(int) fn) =>
      objc.ObjCBlock<ffi.Pointer<AudioBufferList> Function(ffi.Uint32)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<AudioBufferList> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Uint32)>(
                      _ObjCBlock_AudioBufferList_Uint32_closureTrampoline)
                  .cast(),
              (int arg0) => fn(arg0)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<AudioBufferList> Function(ffi.Uint32)>`.
extension ObjCBlock_AudioBufferList_Uint32_CallExtension
    on objc.ObjCBlock<ffi.Pointer<AudioBufferList> Function(ffi.Uint32)> {
  ffi.Pointer<AudioBufferList> call(int arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<AudioBufferList> Function(
                  ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Uint32 arg0)>>()
      .asFunction<
          ffi.Pointer<AudioBufferList> Function(
              ffi.Pointer<objc.ObjCBlockImpl>, int)>()(pointer, arg0);
}

late final _sel_setManualRenderingInputPCMFormat_inputBlock_ =
    objc.registerName("setManualRenderingInputPCMFormat:inputBlock:");
final _objc_msgSend_1378 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_isVoiceProcessingBypassed =
    objc.registerName("isVoiceProcessingBypassed");
late final _sel_setVoiceProcessingBypassed_ =
    objc.registerName("setVoiceProcessingBypassed:");
late final _sel_isVoiceProcessingAGCEnabled =
    objc.registerName("isVoiceProcessingAGCEnabled");
late final _sel_setVoiceProcessingAGCEnabled_ =
    objc.registerName("setVoiceProcessingAGCEnabled:");
late final _sel_isVoiceProcessingInputMuted =
    objc.registerName("isVoiceProcessingInputMuted");
late final _sel_setVoiceProcessingInputMuted_ =
    objc.registerName("setVoiceProcessingInputMuted:");
void
    _ObjCBlock_ffiVoid_AVAudioVoiceProcessingSpeechActivityEvent_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block, int arg0) =>
        block
            .ref.target
            .cast<
                ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong arg0)>>()
            .asFunction<void Function(int)>()(arg0);
void
    _ObjCBlock_ffiVoid_AVAudioVoiceProcessingSpeechActivityEvent_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block, int arg0) =>
        (objc.getBlockClosure(block) as void Function(int))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)>`.
abstract final class ObjCBlock_ffiVoid_AVAudioVoiceProcessingSpeechActivityEvent {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong arg0)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.UnsignedLong)>(
                          _ObjCBlock_ffiVoid_AVAudioVoiceProcessingSpeechActivityEvent_fnPtrTrampoline)
                      .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)> fromFunction(
          void Function(AVAudioVoiceProcessingSpeechActivityEvent) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(
                              ffi.Pointer<objc.ObjCBlockImpl>, ffi.UnsignedLong)>(
                      _ObjCBlock_ffiVoid_AVAudioVoiceProcessingSpeechActivityEvent_closureTrampoline)
                  .cast(),
              (int arg0) => fn(AVAudioVoiceProcessingSpeechActivityEvent.fromValue(arg0))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)> listener(
      void Function(AVAudioVoiceProcessingSpeechActivityEvent) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.UnsignedLong)>.listener(
                _ObjCBlock_ffiVoid_AVAudioVoiceProcessingSpeechActivityEvent_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0) =>
            fn(AVAudioVoiceProcessingSpeechActivityEvent.fromValue(arg0)));
    return objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.UnsignedLong)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)>`.
extension ObjCBlock_ffiVoid_AVAudioVoiceProcessingSpeechActivityEvent_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.UnsignedLong)> {
  void call(AVAudioVoiceProcessingSpeechActivityEvent arg0) => pointer
          .ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.UnsignedLong arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlockImpl>, int)>()(
      pointer, arg0.value);
}

enum AVAudioVoiceProcessingSpeechActivityEvent {
  AVAudioVoiceProcessingSpeechActivityStarted(0),
  AVAudioVoiceProcessingSpeechActivityEnded(1);

  final int value;
  const AVAudioVoiceProcessingSpeechActivityEvent(this.value);

  static AVAudioVoiceProcessingSpeechActivityEvent fromValue(int value) =>
      switch (value) {
        0 => AVAudioVoiceProcessingSpeechActivityStarted,
        1 => AVAudioVoiceProcessingSpeechActivityEnded,
        _ => throw ArgumentError(
            "Unknown value for AVAudioVoiceProcessingSpeechActivityEvent: $value"),
      };
}

late final _sel_setMutedSpeechActivityEventListener_ =
    objc.registerName("setMutedSpeechActivityEventListener:");
final _objc_msgSend_1379 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();

final class AVAudioVoiceProcessingOtherAudioDuckingConfiguration
    extends ffi.Struct {
  @ffi.Bool()
  external bool enableAdvancedDucking;

  @ffi.UnsignedLong()
  external int duckingLevel;
}

enum AVAudioVoiceProcessingOtherAudioDuckingLevel {
  AVAudioVoiceProcessingOtherAudioDuckingLevelDefault(0),
  AVAudioVoiceProcessingOtherAudioDuckingLevelMin(10),
  AVAudioVoiceProcessingOtherAudioDuckingLevelMid(20),
  AVAudioVoiceProcessingOtherAudioDuckingLevelMax(30);

  final int value;
  const AVAudioVoiceProcessingOtherAudioDuckingLevel(this.value);

  static AVAudioVoiceProcessingOtherAudioDuckingLevel fromValue(int value) =>
      switch (value) {
        0 => AVAudioVoiceProcessingOtherAudioDuckingLevelDefault,
        10 => AVAudioVoiceProcessingOtherAudioDuckingLevelMin,
        20 => AVAudioVoiceProcessingOtherAudioDuckingLevelMid,
        30 => AVAudioVoiceProcessingOtherAudioDuckingLevelMax,
        _ => throw ArgumentError(
            "Unknown value for AVAudioVoiceProcessingOtherAudioDuckingLevel: $value"),
      };
}

late final _sel_voiceProcessingOtherAudioDuckingConfiguration =
    objc.registerName("voiceProcessingOtherAudioDuckingConfiguration");
final _objc_msgSend_1380 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVAudioVoiceProcessingOtherAudioDuckingConfiguration Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AVAudioVoiceProcessingOtherAudioDuckingConfiguration Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1380Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<
                    AVAudioVoiceProcessingOtherAudioDuckingConfiguration>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<AVAudioVoiceProcessingOtherAudioDuckingConfiguration>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVoiceProcessingOtherAudioDuckingConfiguration_ =
    objc.registerName("setVoiceProcessingOtherAudioDuckingConfiguration:");
final _objc_msgSend_1381 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AVAudioVoiceProcessingOtherAudioDuckingConfiguration)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AVAudioVoiceProcessingOtherAudioDuckingConfiguration)>();
late final _sel_inputNode = objc.registerName("inputNode");
final _objc_msgSend_1382 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVAudioMixerNode
class AVAudioMixerNode extends AVAudioNode {
  AVAudioMixerNode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioMixerNode] that points to the same underlying object as [other].
  AVAudioMixerNode.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioMixerNode] that wraps the given raw object pointer.
  AVAudioMixerNode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioMixerNode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioMixerNode);
  }

  /// init
  AVAudioMixerNode init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioMixerNode.castFromPointer(_ret, retain: true, release: true);
  }

  /// outputVolume
  double get outputVolume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_outputVolume)
        : _objc_msgSend_361(this.pointer, _sel_outputVolume);
  }

  /// setOutputVolume:
  set outputVolume(double value) {
    return _objc_msgSend_362(this.pointer, _sel_setOutputVolume_, value);
  }

  /// nextAvailableInputBus
  int get nextAvailableInputBus {
    return _objc_msgSend_57(this.pointer, _sel_nextAvailableInputBus);
  }

  /// new
  static AVAudioMixerNode new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioMixerNode, _sel_new);
    return AVAudioMixerNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioMixerNode allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioMixerNode, _sel_allocWithZone_, zone);
    return AVAudioMixerNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioMixerNode alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioMixerNode, _sel_alloc);
    return AVAudioMixerNode.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioMixerNode,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioMixerNode,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioMixerNode, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioMixerNode, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioMixerNode,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioMixerNode,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioMixerNode,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioMixerNode, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioMixerNode, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioMixerNode = objc.getClass("AVAudioMixerNode");
late final _sel_setOutputVolume_ = objc.registerName("setOutputVolume:");
late final _sel_nextAvailableInputBus =
    objc.registerName("nextAvailableInputBus");
late final _sel_mainMixerNode = objc.registerName("mainMixerNode");
final _objc_msgSend_1383 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isAutoShutdownEnabled =
    objc.registerName("isAutoShutdownEnabled");
late final _sel_setAutoShutdownEnabled_ =
    objc.registerName("setAutoShutdownEnabled:");
late final _sel_attachedNodes = objc.registerName("attachedNodes");

enum AVAudioEngineManualRenderingMode {
  AVAudioEngineManualRenderingModeOffline(0),
  AVAudioEngineManualRenderingModeRealtime(1);

  final int value;
  const AVAudioEngineManualRenderingMode(this.value);

  static AVAudioEngineManualRenderingMode fromValue(int value) =>
      switch (value) {
        0 => AVAudioEngineManualRenderingModeOffline,
        1 => AVAudioEngineManualRenderingModeRealtime,
        _ => throw ArgumentError(
            "Unknown value for AVAudioEngineManualRenderingMode: $value"),
      };
}

late final _sel_enableManualRenderingMode_format_maximumFrameCount_error_ = objc
    .registerName("enableManualRenderingMode:format:maximumFrameCount:error:");
final _objc_msgSend_1384 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Uint32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_disableManualRenderingMode =
    objc.registerName("disableManualRenderingMode");

enum AVAudioEngineManualRenderingStatus {
  AVAudioEngineManualRenderingStatusError(-1),
  AVAudioEngineManualRenderingStatusSuccess(0),
  AVAudioEngineManualRenderingStatusInsufficientDataFromInputNode(1),
  AVAudioEngineManualRenderingStatusCannotDoInCurrentContext(2);

  final int value;
  const AVAudioEngineManualRenderingStatus(this.value);

  static AVAudioEngineManualRenderingStatus fromValue(int value) =>
      switch (value) {
        -1 => AVAudioEngineManualRenderingStatusError,
        0 => AVAudioEngineManualRenderingStatusSuccess,
        1 => AVAudioEngineManualRenderingStatusInsufficientDataFromInputNode,
        2 => AVAudioEngineManualRenderingStatusCannotDoInCurrentContext,
        _ => throw ArgumentError(
            "Unknown value for AVAudioEngineManualRenderingStatus: $value"),
      };
}

late final _sel_renderOffline_toBuffer_error_ =
    objc.registerName("renderOffline:toBuffer:error:");
final _objc_msgSend_1385 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Uint32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
int _ObjCBlock_AVAudioEngineManualRenderingStatus_Uint32_AudioBufferList_ffiInt_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        ffi.Pointer<AudioBufferList> arg1,
        ffi.Pointer<ffi.Int> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Long Function(
                    ffi.Uint32 arg0,
                    ffi.Pointer<AudioBufferList> arg1,
                    ffi.Pointer<ffi.Int> arg2)>>()
        .asFunction<
            int Function(int, ffi.Pointer<AudioBufferList>,
                ffi.Pointer<ffi.Int>)>()(arg0, arg1, arg2);
int _ObjCBlock_AVAudioEngineManualRenderingStatus_Uint32_AudioBufferList_ffiInt_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        ffi.Pointer<AudioBufferList> arg1,
        ffi.Pointer<ffi.Int> arg2) =>
    (objc.getBlockClosure(block) as int Function(int,
        ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Long Function(ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)>`.
abstract final class ObjCBlock_AVAudioEngineManualRenderingStatus_Uint32_AudioBufferList_ffiInt {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Long Function(
              ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Long Function(ffi.Uint32, ffi.Pointer<AudioBufferList>,
                      ffi.Pointer<ffi.Int>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Long Function(ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Uint32 arg0, ffi.Pointer<AudioBufferList> arg1, ffi.Pointer<ffi.Int> arg2)>> ptr) =>
          objc.ObjCBlock<ffi.Long Function(ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Long Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)>(
                              _ObjCBlock_AVAudioEngineManualRenderingStatus_Uint32_AudioBufferList_ffiInt_fnPtrTrampoline, 0)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Long Function(ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)>
      fromFunction(AVAudioEngineManualRenderingStatus Function(int, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>) fn) =>
          objc.ObjCBlock<ffi.Long Function(ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Long Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)>(
                              _ObjCBlock_AVAudioEngineManualRenderingStatus_Uint32_AudioBufferList_ffiInt_closureTrampoline, 0)
                          .cast(),
                  (int arg0, ffi.Pointer<AudioBufferList> arg1, ffi.Pointer<ffi.Int> arg2) =>
                      fn(arg0, arg1, arg2).value),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Long Function(ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)>`.
extension ObjCBlock_AVAudioEngineManualRenderingStatus_Uint32_AudioBufferList_ffiInt_CallExtension
    on objc.ObjCBlock<
        ffi.Long Function(
            ffi.Uint32, ffi.Pointer<AudioBufferList>, ffi.Pointer<ffi.Int>)> {
  AVAudioEngineManualRenderingStatus call(int arg0,
          ffi.Pointer<AudioBufferList> arg1, ffi.Pointer<ffi.Int> arg2) =>
      AVAudioEngineManualRenderingStatus.fromValue(pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Long Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Uint32 arg0,
                      ffi.Pointer<AudioBufferList> arg1,
                      ffi.Pointer<ffi.Int> arg2)>>()
          .asFunction<
              int Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  int,
                  ffi.Pointer<AudioBufferList>,
                  ffi.Pointer<ffi.Int>)>()(pointer, arg0, arg1, arg2));
}

late final _sel_manualRenderingBlock =
    objc.registerName("manualRenderingBlock");
final _objc_msgSend_1386 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isInManualRenderingMode =
    objc.registerName("isInManualRenderingMode");
late final _sel_manualRenderingMode = objc.registerName("manualRenderingMode");
final _objc_msgSend_1387 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_manualRenderingFormat =
    objc.registerName("manualRenderingFormat");
late final _sel_manualRenderingMaximumFrameCount =
    objc.registerName("manualRenderingMaximumFrameCount");
late final _sel_manualRenderingSampleTime =
    objc.registerName("manualRenderingSampleTime");
late final _sel_connectMIDI_to_format_block_ =
    objc.registerName("connectMIDI:to:format:block:");
final _objc_msgSend_1388 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_connectMIDI_to_format_eventListBlock_ =
    objc.registerName("connectMIDI:to:format:eventListBlock:");
final _objc_msgSend_1389 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_connectMIDI_toNodes_format_block_ =
    objc.registerName("connectMIDI:toNodes:format:block:");
final _objc_msgSend_1390 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_connectMIDI_toNodes_format_eventListBlock_ =
    objc.registerName("connectMIDI:toNodes:format:eventListBlock:");
final _objc_msgSend_1391 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_disconnectMIDI_from_ =
    objc.registerName("disconnectMIDI:from:");
final _objc_msgSend_1392 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_disconnectMIDI_fromNodes_ =
    objc.registerName("disconnectMIDI:fromNodes:");
final _objc_msgSend_1393 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_disconnectMIDIInput_ =
    objc.registerName("disconnectMIDIInput:");
late final _sel_disconnectMIDIOutput_ =
    objc.registerName("disconnectMIDIOutput:");
late final _sel_initWithAudioEngine_ =
    objc.registerName("initWithAudioEngine:");
final _objc_msgSend_1394 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum AVMusicSequenceLoadOptions {
  AVMusicSequenceLoadSMF_PreserveTracks(0),
  AVMusicSequenceLoadSMF_ChannelsToTracks(1);

  final int value;
  const AVMusicSequenceLoadOptions(this.value);

  static AVMusicSequenceLoadOptions fromValue(int value) => switch (value) {
        0 => AVMusicSequenceLoadSMF_PreserveTracks,
        1 => AVMusicSequenceLoadSMF_ChannelsToTracks,
        _ => throw ArgumentError(
            "Unknown value for AVMusicSequenceLoadOptions: $value"),
      };
}

late final _sel_loadFromURL_options_error_ =
    objc.registerName("loadFromURL:options:error:");
final _objc_msgSend_1395 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_loadFromData_options_error_ =
    objc.registerName("loadFromData:options:error:");
final _objc_msgSend_1396 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_writeToURL_SMPTEResolution_replaceExisting_error_ =
    objc.registerName("writeToURL:SMPTEResolution:replaceExisting:error:");
final _objc_msgSend_1397 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Bool,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            bool,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_dataWithSMPTEResolution_error_ =
    objc.registerName("dataWithSMPTEResolution:error:");
final _objc_msgSend_1398 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_secondsForBeats_ = objc.registerName("secondsForBeats:");
final _objc_msgSend_1399 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
final _objc_msgSend_1399Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_beatsForSeconds_ = objc.registerName("beatsForSeconds:");
late final _sel_reverseEvents = objc.registerName("reverseEvents");

/// AVMusicTrack
class AVMusicTrack extends objc.NSObject {
  AVMusicTrack._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMusicTrack] that points to the same underlying object as [other].
  AVMusicTrack.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMusicTrack] that wraps the given raw object pointer.
  AVMusicTrack.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMusicTrack].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMusicTrack);
  }

  /// destinationAudioUnit
  AVAudioUnit? get destinationAudioUnit {
    final _ret = _objc_msgSend_1401(this.pointer, _sel_destinationAudioUnit);
    return _ret.address == 0
        ? null
        : AVAudioUnit.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDestinationAudioUnit:
  set destinationAudioUnit(AVAudioUnit? value) {
    return _objc_msgSend_1402(this.pointer, _sel_setDestinationAudioUnit_,
        value?.pointer ?? ffi.nullptr);
  }

  /// destinationMIDIEndpoint
  int get destinationMIDIEndpoint {
    return _objc_msgSend_647(this.pointer, _sel_destinationMIDIEndpoint);
  }

  /// setDestinationMIDIEndpoint:
  set destinationMIDIEndpoint(int value) {
    return _objc_msgSend_1403(
        this.pointer, _sel_setDestinationMIDIEndpoint_, value);
  }

  /// loopRange
  void getLoopRange(ffi.Pointer<_AVBeatRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1404Stret(stret, this.pointer, _sel_loopRange)
        : stret.ref = _objc_msgSend_1404(this.pointer, _sel_loopRange);
  }

  /// setLoopRange:
  set loopRange(_AVBeatRange value) {
    return _objc_msgSend_1405(this.pointer, _sel_setLoopRange_, value);
  }

  /// isLoopingEnabled
  bool get loopingEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isLoopingEnabled);
  }

  /// setLoopingEnabled:
  set loopingEnabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setLoopingEnabled_, value);
  }

  /// numberOfLoops
  int get numberOfLoops {
    return _objc_msgSend_125(this.pointer, _sel_numberOfLoops);
  }

  /// setNumberOfLoops:
  set numberOfLoops(int value) {
    return _objc_msgSend_144(this.pointer, _sel_setNumberOfLoops_, value);
  }

  /// offsetTime
  double get offsetTime {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_offsetTime)
        : _objc_msgSend_18(this.pointer, _sel_offsetTime);
  }

  /// setOffsetTime:
  set offsetTime(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setOffsetTime_, value);
  }

  /// isMuted
  bool get muted {
    return _objc_msgSend_13(this.pointer, _sel_isMuted);
  }

  /// setMuted:
  set muted(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setMuted_, value);
  }

  /// isSoloed
  bool get soloed {
    return _objc_msgSend_13(this.pointer, _sel_isSoloed);
  }

  /// setSoloed:
  set soloed(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setSoloed_, value);
  }

  /// lengthInBeats
  double get lengthInBeats {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_lengthInBeats)
        : _objc_msgSend_18(this.pointer, _sel_lengthInBeats);
  }

  /// setLengthInBeats:
  set lengthInBeats(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setLengthInBeats_, value);
  }

  /// lengthInSeconds
  double get lengthInSeconds {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_lengthInSeconds)
        : _objc_msgSend_18(this.pointer, _sel_lengthInSeconds);
  }

  /// setLengthInSeconds:
  set lengthInSeconds(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setLengthInSeconds_, value);
  }

  /// timeResolution
  int get timeResolution {
    return _objc_msgSend_57(this.pointer, _sel_timeResolution);
  }

  /// usesAutomatedParameters
  bool get usesAutomatedParameters {
    return _objc_msgSend_13(this.pointer, _sel_usesAutomatedParameters);
  }

  /// setUsesAutomatedParameters:
  set usesAutomatedParameters(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setUsesAutomatedParameters_, value);
  }

  /// addEvent:atBeat:
  void addEvent_atBeat_(AVMusicEvent event, double beat) {
    _objc_msgSend_1406(
        this.pointer, _sel_addEvent_atBeat_, event.pointer, beat);
  }

  /// moveEventsInRange:byAmount:
  void moveEventsInRange_byAmount_(_AVBeatRange range, double beatAmount) {
    _objc_msgSend_1407(
        this.pointer, _sel_moveEventsInRange_byAmount_, range, beatAmount);
  }

  /// clearEventsInRange:
  void clearEventsInRange_(_AVBeatRange range) {
    _objc_msgSend_1408(this.pointer, _sel_clearEventsInRange_, range);
  }

  /// cutEventsInRange:
  void cutEventsInRange_(_AVBeatRange range) {
    _objc_msgSend_1408(this.pointer, _sel_cutEventsInRange_, range);
  }

  /// copyEventsInRange:fromTrack:insertAtBeat:
  void copyEventsInRange_fromTrack_insertAtBeat_(
      _AVBeatRange range, AVMusicTrack sourceTrack, double insertStartBeat) {
    _objc_msgSend_1409(
        this.pointer,
        _sel_copyEventsInRange_fromTrack_insertAtBeat_,
        range,
        sourceTrack.pointer,
        insertStartBeat);
  }

  /// copyAndMergeEventsInRange:fromTrack:mergeAtBeat:
  void copyAndMergeEventsInRange_fromTrack_mergeAtBeat_(
      _AVBeatRange range, AVMusicTrack sourceTrack, double mergeStartBeat) {
    _objc_msgSend_1409(
        this.pointer,
        _sel_copyAndMergeEventsInRange_fromTrack_mergeAtBeat_,
        range,
        sourceTrack.pointer,
        mergeStartBeat);
  }

  /// enumerateEventsInRange:usingBlock:
  void enumerateEventsInRange_usingBlock_(
      _AVBeatRange range,
      objc.ObjCBlock<
              ffi.Void Function(
                  AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>
          block) {
    _objc_msgSend_1410(this.pointer, _sel_enumerateEventsInRange_usingBlock_,
        range, block.pointer);
  }

  /// init
  AVMusicTrack init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMusicTrack.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVMusicTrack new1() {
    final _ret = _objc_msgSend_19(_class_AVMusicTrack, _sel_new);
    return AVMusicTrack.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVMusicTrack allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMusicTrack, _sel_allocWithZone_, zone);
    return AVMusicTrack.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVMusicTrack alloc() {
    final _ret = _objc_msgSend_19(_class_AVMusicTrack, _sel_alloc);
    return AVMusicTrack.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMusicTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMusicTrack,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMusicTrack, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMusicTrack, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMusicTrack,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMusicTrack,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMusicTrack,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMusicTrack, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVMusicTrack, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMusicTrack = objc.getClass("AVMusicTrack");

/// AVAudioUnit
class AVAudioUnit extends AVAudioNode {
  AVAudioUnit._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioUnit] that points to the same underlying object as [other].
  AVAudioUnit.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioUnit] that wraps the given raw object pointer.
  AVAudioUnit.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioUnit].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioUnit);
  }

  /// instantiateWithComponentDescription:options:completionHandler:
  static void instantiateWithComponentDescription_options_completionHandler_(
      AudioComponentDescription audioComponentDescription,
      AudioComponentInstantiationOptions options,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_1400(
        _class_AVAudioUnit,
        _sel_instantiateWithComponentDescription_options_completionHandler_,
        audioComponentDescription,
        options.value,
        completionHandler.pointer);
  }

  /// loadAudioUnitPresetAtURL:error:
  bool loadAudioUnitPresetAtURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_298(this.pointer, _sel_loadAudioUnitPresetAtURL_error_,
        url.pointer, outError);
  }

  /// audioComponentDescription
  void getAudioComponentDescription(
      ffi.Pointer<AudioComponentDescription> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1075Stret(
            stret, this.pointer, _sel_audioComponentDescription)
        : stret.ref =
            _objc_msgSend_1075(this.pointer, _sel_audioComponentDescription);
  }

  /// audioUnit
  ffi.Pointer<ComponentInstanceRecord> get audioUnit {
    return _objc_msgSend_1376(this.pointer, _sel_audioUnit);
  }

  /// AUAudioUnit
  AUAudioUnit get AUAudioUnit1 {
    final _ret = _objc_msgSend_1095(this.pointer, _sel_AUAudioUnit);
    return AUAudioUnit.castFromPointer(_ret, retain: true, release: true);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_11(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// manufacturerName
  objc.NSString get manufacturerName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_manufacturerName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// version
  int get version {
    return _objc_msgSend_57(this.pointer, _sel_version);
  }

  /// init
  AVAudioUnit init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVAudioUnit.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVAudioUnit new1() {
    final _ret = _objc_msgSend_19(_class_AVAudioUnit, _sel_new);
    return AVAudioUnit.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioUnit allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVAudioUnit, _sel_allocWithZone_, zone);
    return AVAudioUnit.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVAudioUnit alloc() {
    final _ret = _objc_msgSend_19(_class_AVAudioUnit, _sel_alloc);
    return AVAudioUnit.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVAudioUnit,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVAudioUnit,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVAudioUnit, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVAudioUnit, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVAudioUnit,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVAudioUnit,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVAudioUnit,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVAudioUnit, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVAudioUnit, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioUnit = objc.getClass("AVAudioUnit");
void _ObjCBlock_ffiVoid_AVAudioUnit_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_AVAudioUnit_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_AVAudioUnit_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_AVAudioUnit_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(AVAudioUnit?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_AVAudioUnit_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                  arg0.address == 0 ? null : AVAudioUnit.castFromPointer(arg0, retain: true, release: true),
                  arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(AVAudioUnit?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVAudioUnit_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0.address == 0
                ? null
                : AVAudioUnit.castFromPointer(arg0,
                    retain: false, release: true),
            arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVAudioUnit_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_AVAudioUnit_NSError_CallExtension on objc.ObjCBlock<
    ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(AVAudioUnit? arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

final _objc_msgSend_1400 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AudioComponentDescription,
                ffi.Int,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AudioComponentDescription,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_loadAudioUnitPresetAtURL_error_ =
    objc.registerName("loadAudioUnitPresetAtURL:error:");
late final _sel_audioComponentDescription =
    objc.registerName("audioComponentDescription");
late final _sel_destinationAudioUnit =
    objc.registerName("destinationAudioUnit");
final _objc_msgSend_1401 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDestinationAudioUnit_ =
    objc.registerName("setDestinationAudioUnit:");
final _objc_msgSend_1402 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_destinationMIDIEndpoint =
    objc.registerName("destinationMIDIEndpoint");
late final _sel_setDestinationMIDIEndpoint_ =
    objc.registerName("setDestinationMIDIEndpoint:");
final _objc_msgSend_1403 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

final class _AVBeatRange extends ffi.Struct {
  @ffi.Double()
  external double start;

  @ffi.Double()
  external double length;
}

late final _sel_loopRange = objc.registerName("loopRange");
final _objc_msgSend_1404 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _AVBeatRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        _AVBeatRange Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1404Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_AVBeatRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<_AVBeatRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setLoopRange_ = objc.registerName("setLoopRange:");
final _objc_msgSend_1405 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _AVBeatRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _AVBeatRange)>();
late final _sel_isLoopingEnabled = objc.registerName("isLoopingEnabled");
late final _sel_setLoopingEnabled_ = objc.registerName("setLoopingEnabled:");
late final _sel_numberOfLoops = objc.registerName("numberOfLoops");
late final _sel_setNumberOfLoops_ = objc.registerName("setNumberOfLoops:");
late final _sel_offsetTime = objc.registerName("offsetTime");
late final _sel_setOffsetTime_ = objc.registerName("setOffsetTime:");
late final _sel_isSoloed = objc.registerName("isSoloed");
late final _sel_setSoloed_ = objc.registerName("setSoloed:");
late final _sel_lengthInBeats = objc.registerName("lengthInBeats");
late final _sel_setLengthInBeats_ = objc.registerName("setLengthInBeats:");
late final _sel_lengthInSeconds = objc.registerName("lengthInSeconds");
late final _sel_setLengthInSeconds_ = objc.registerName("setLengthInSeconds:");
late final _sel_timeResolution = objc.registerName("timeResolution");
late final _sel_usesAutomatedParameters =
    objc.registerName("usesAutomatedParameters");
late final _sel_setUsesAutomatedParameters_ =
    objc.registerName("setUsesAutomatedParameters:");

/// AVMusicEvent
class AVMusicEvent extends objc.NSObject {
  AVMusicEvent._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMusicEvent] that points to the same underlying object as [other].
  AVMusicEvent.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMusicEvent] that wraps the given raw object pointer.
  AVMusicEvent.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMusicEvent].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMusicEvent);
  }

  /// init
  AVMusicEvent init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMusicEvent.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVMusicEvent new1() {
    final _ret = _objc_msgSend_19(_class_AVMusicEvent, _sel_new);
    return AVMusicEvent.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVMusicEvent allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMusicEvent, _sel_allocWithZone_, zone);
    return AVMusicEvent.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVMusicEvent alloc() {
    final _ret = _objc_msgSend_19(_class_AVMusicEvent, _sel_alloc);
    return AVMusicEvent.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMusicEvent,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMusicEvent,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMusicEvent, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMusicEvent, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMusicEvent,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMusicEvent,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMusicEvent,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMusicEvent, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVMusicEvent, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMusicEvent = objc.getClass("AVMusicEvent");
late final _sel_addEvent_atBeat_ = objc.registerName("addEvent:atBeat:");
final _objc_msgSend_1406 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_moveEventsInRange_byAmount_ =
    objc.registerName("moveEventsInRange:byAmount:");
final _objc_msgSend_1407 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _AVBeatRange, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _AVBeatRange, double)>();
late final _sel_clearEventsInRange_ = objc.registerName("clearEventsInRange:");
final _objc_msgSend_1408 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _AVBeatRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _AVBeatRange)>();
late final _sel_cutEventsInRange_ = objc.registerName("cutEventsInRange:");
late final _sel_copyEventsInRange_fromTrack_insertAtBeat_ =
    objc.registerName("copyEventsInRange:fromTrack:insertAtBeat:");
final _objc_msgSend_1409 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _AVBeatRange,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _AVBeatRange,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_copyAndMergeEventsInRange_fromTrack_mergeAtBeat_ =
    objc.registerName("copyAndMergeEventsInRange:fromTrack:mergeAtBeat:");
void _ObjCBlock_ffiVoid_AVMusicEvent_ffiDouble_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<ffi.Double> arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<ffi.Double> arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Double>,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_AVMusicEvent_ffiDouble_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<ffi.Double> arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>`.
abstract final class ObjCBlock_ffiVoid_AVMusicEvent_ffiDouble_bool {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(AVMusicEvent, ffi.Pointer<ffi.Double>,
                      ffi.Pointer<ffi.Bool>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<ffi.Double> arg1, ffi.Pointer<ffi.Bool> arg2)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>(
                              _ObjCBlock_ffiVoid_AVMusicEvent_ffiDouble_bool_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>
      fromFunction(void Function(AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>) fn) =>
          objc.ObjCBlock<ffi.Void Function(AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>(_ObjCBlock_ffiVoid_AVMusicEvent_ffiDouble_bool_closureTrampoline)
                          .cast(),
                  (ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<ffi.Double> arg1,
                          ffi.Pointer<ffi.Bool> arg2) =>
                      fn(AVMusicEvent.castFromPointer(arg0, retain: true, release: true), arg1, arg2)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(
              AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>
      listener(
          void Function(
                  AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)
              fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<ffi.Double>,
                        ffi.Pointer<ffi.Bool>)>.listener(
                _ObjCBlock_ffiVoid_AVMusicEvent_ffiDouble_bool_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<ffi.Double> arg1,
                ffi.Pointer<ffi.Bool> arg2) =>
            fn(AVMusicEvent.castFromPointer(arg0, retain: false, release: true),
                arg1, arg2));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVMusicEvent_ffiDouble_bool(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
        ffi.Void Function(AVMusicEvent, ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Bool>)>(wrapper, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>`.
extension ObjCBlock_ffiVoid_AVMusicEvent_ffiDouble_bool_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            AVMusicEvent, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)> {
  void call(AVMusicEvent arg0, ffi.Pointer<ffi.Double> arg1,
          ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<ffi.Double> arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Bool>)>()(pointer, arg0.pointer, arg1, arg2);
}

late final _sel_enumerateEventsInRange_usingBlock_ =
    objc.registerName("enumerateEventsInRange:usingBlock:");
final _objc_msgSend_1410 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _AVBeatRange,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _AVBeatRange,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_createAndAppendTrack =
    objc.registerName("createAndAppendTrack");
final _objc_msgSend_1411 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1412 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_AVMusicTrack_NSData_ffiDouble_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        double arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1, ffi.Double arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>, double)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_AVMusicTrack_NSData_ffiDouble_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        double arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>, double))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)>`.
abstract final class ObjCBlock_ffiVoid_AVMusicTrack_NSData_ffiDouble {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
      ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)>(
          pointer,
          retain: retain,
          release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)> fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Double arg2)>> ptr) =>
      objc.ObjCBlock<ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<objc.ObjCObject>,
                          ffi.Pointer<objc.ObjCObject>,
                          ffi.Double)>(_ObjCBlock_ffiVoid_AVMusicTrack_NSData_ffiDouble_fnPtrTrampoline)
                  .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)> fromFunction(
          void Function(AVMusicTrack, objc.NSData, double) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Double)>(_ObjCBlock_ffiVoid_AVMusicTrack_NSData_ffiDouble_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, double arg2) => fn(
                  AVMusicTrack.castFromPointer(arg0, retain: true, release: true),
                  objc.NSData.castFromPointer(arg1, retain: true, release: true),
                  arg2)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc
      .ObjCBlock<ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)>
      listener(void Function(AVMusicTrack, objc.NSData, double) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Double)>.listener(
                _ObjCBlock_ffiVoid_AVMusicTrack_NSData_ffiDouble_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                double arg2) =>
            fn(
                AVMusicTrack.castFromPointer(arg0,
                    retain: false, release: true),
                objc.NSData.castFromPointer(arg1, retain: false, release: true),
                arg2));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_AVMusicTrack_NSData_ffiDouble(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Double)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)>`.
extension ObjCBlock_ffiVoid_AVMusicTrack_NSData_ffiDouble_CallExtension on objc
    .ObjCBlock<ffi.Void Function(AVMusicTrack, objc.NSData, ffi.Double)> {
  void call(AVMusicTrack arg0, objc.NSData arg1, double arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Double arg2)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>,
                  double)>()(pointer, arg0.pointer, arg1.pointer, arg2);
}

late final _sel_setUserCallback_ = objc.registerName("setUserCallback:");
final _objc_msgSend_1413 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_tempoTrack = objc.registerName("tempoTrack");
late final _sel_currentPositionInSeconds =
    objc.registerName("currentPositionInSeconds");
late final _sel_setCurrentPositionInSeconds_ =
    objc.registerName("setCurrentPositionInSeconds:");
late final _sel_currentPositionInBeats =
    objc.registerName("currentPositionInBeats");
late final _sel_setCurrentPositionInBeats_ =
    objc.registerName("setCurrentPositionInBeats:");
late final _sel_isPlaying = objc.registerName("isPlaying");
late final _sel_hostTimeForBeats_error_ =
    objc.registerName("hostTimeForBeats:error:");
final _objc_msgSend_1414 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLongLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_beatsForHostTime_error_ =
    objc.registerName("beatsForHostTime:error:");
final _objc_msgSend_1415 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLongLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
final _objc_msgSend_1415Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLongLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_prepareToPlay = objc.registerName("prepareToPlay");

/// AVCaptureDevice
class AVCaptureDevice extends objc.NSObject {
  AVCaptureDevice._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureDevice] that points to the same underlying object as [other].
  AVCaptureDevice.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureDevice] that wraps the given raw object pointer.
  AVCaptureDevice.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureDevice].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureDevice);
  }

  /// init
  AVCaptureDevice init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureDevice.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVCaptureDevice new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptureDevice, _sel_new);
    return AVCaptureDevice.castFromPointer(_ret, retain: false, release: true);
  }

  /// devices
  static objc.NSArray devices() {
    final _ret = _objc_msgSend_33(_class_AVCaptureDevice, _sel_devices);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// devicesWithMediaType:
  static objc.NSArray devicesWithMediaType_(objc.NSString mediaType) {
    final _ret = _objc_msgSend_390(
        _class_AVCaptureDevice, _sel_devicesWithMediaType_, mediaType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultDeviceWithMediaType:
  static AVCaptureDevice? defaultDeviceWithMediaType_(objc.NSString mediaType) {
    final _ret = _objc_msgSend_1416(_class_AVCaptureDevice,
        _sel_defaultDeviceWithMediaType_, mediaType.pointer);
    return _ret.address == 0
        ? null
        : AVCaptureDevice.castFromPointer(_ret, retain: true, release: true);
  }

  /// deviceWithUniqueID:
  static AVCaptureDevice? deviceWithUniqueID_(objc.NSString deviceUniqueID) {
    final _ret = _objc_msgSend_1416(_class_AVCaptureDevice,
        _sel_deviceWithUniqueID_, deviceUniqueID.pointer);
    return _ret.address == 0
        ? null
        : AVCaptureDevice.castFromPointer(_ret, retain: true, release: true);
  }

  /// uniqueID
  objc.NSString get uniqueID {
    final _ret = _objc_msgSend_11(this.pointer, _sel_uniqueID);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// modelID
  objc.NSString get modelID {
    final _ret = _objc_msgSend_11(this.pointer, _sel_modelID);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedName
  objc.NSString get localizedName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_localizedName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// manufacturer
  objc.NSString get manufacturer {
    final _ret = _objc_msgSend_11(this.pointer, _sel_manufacturer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// transportType
  int get transportType {
    return _objc_msgSend_718(this.pointer, _sel_transportType);
  }

  /// hasMediaType:
  bool hasMediaType_(objc.NSString mediaType) {
    return _objc_msgSend_31(
        this.pointer, _sel_hasMediaType_, mediaType.pointer);
  }

  /// lockForConfiguration:
  bool lockForConfiguration_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_39(this.pointer, _sel_lockForConfiguration_, outError);
  }

  /// unlockForConfiguration
  void unlockForConfiguration() {
    _objc_msgSend_7(this.pointer, _sel_unlockForConfiguration);
  }

  /// supportsAVCaptureSessionPreset:
  bool supportsAVCaptureSessionPreset_(objc.NSString preset) {
    return _objc_msgSend_31(
        this.pointer, _sel_supportsAVCaptureSessionPreset_, preset.pointer);
  }

  /// isConnected
  bool get connected {
    return _objc_msgSend_13(this.pointer, _sel_isConnected);
  }

  /// isInUseByAnotherApplication
  bool get inUseByAnotherApplication {
    return _objc_msgSend_13(this.pointer, _sel_isInUseByAnotherApplication);
  }

  /// isSuspended
  bool get suspended {
    return _objc_msgSend_13(this.pointer, _sel_isSuspended);
  }

  /// linkedDevices
  objc.NSArray get linkedDevices {
    final _ret = _objc_msgSend_33(this.pointer, _sel_linkedDevices);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// formats
  objc.NSArray get formats {
    final _ret = _objc_msgSend_33(this.pointer, _sel_formats);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// activeFormat
  AVCaptureDeviceFormat get activeFormat {
    final _ret = _objc_msgSend_1421(this.pointer, _sel_activeFormat);
    return AVCaptureDeviceFormat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setActiveFormat:
  set activeFormat(AVCaptureDeviceFormat value) {
    return _objc_msgSend_1422(
        this.pointer, _sel_setActiveFormat_, value.pointer);
  }

  /// activeVideoMinFrameDuration
  void getActiveVideoMinFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_activeVideoMinFrameDuration)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_activeVideoMinFrameDuration);
  }

  /// setActiveVideoMinFrameDuration:
  set activeVideoMinFrameDuration(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setActiveVideoMinFrameDuration_, value);
  }

  /// activeVideoMaxFrameDuration
  void getActiveVideoMaxFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_activeVideoMaxFrameDuration)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_activeVideoMaxFrameDuration);
  }

  /// setActiveVideoMaxFrameDuration:
  set activeVideoMaxFrameDuration(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setActiveVideoMaxFrameDuration_, value);
  }

  /// inputSources
  objc.NSArray get inputSources {
    final _ret = _objc_msgSend_33(this.pointer, _sel_inputSources);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// activeInputSource
  AVCaptureDeviceInputSource? get activeInputSource {
    final _ret = _objc_msgSend_1423(this.pointer, _sel_activeInputSource);
    return _ret.address == 0
        ? null
        : AVCaptureDeviceInputSource.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setActiveInputSource:
  set activeInputSource(AVCaptureDeviceInputSource? value) {
    return _objc_msgSend_1424(this.pointer, _sel_setActiveInputSource_,
        value?.pointer ?? ffi.nullptr);
  }

  /// position
  AVCaptureDevicePosition get position {
    final _ret = _objc_msgSend_1425(this.pointer, _sel_position);
    return AVCaptureDevicePosition.fromValue(_ret);
  }

  /// deviceType
  objc.NSString get deviceType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_deviceType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultDeviceWithDeviceType:mediaType:position:
  static AVCaptureDevice? defaultDeviceWithDeviceType_mediaType_position_(
      objc.NSString deviceType,
      objc.NSString? mediaType,
      AVCaptureDevicePosition position) {
    final _ret = _objc_msgSend_1426(
        _class_AVCaptureDevice,
        _sel_defaultDeviceWithDeviceType_mediaType_position_,
        deviceType.pointer,
        mediaType?.pointer ?? ffi.nullptr,
        position.value);
    return _ret.address == 0
        ? null
        : AVCaptureDevice.castFromPointer(_ret, retain: true, release: true);
  }

  /// userPreferredCamera
  static AVCaptureDevice? getUserPreferredCamera() {
    final _ret =
        _objc_msgSend_1427(_class_AVCaptureDevice, _sel_userPreferredCamera);
    return _ret.address == 0
        ? null
        : AVCaptureDevice.castFromPointer(_ret, retain: true, release: true);
  }

  /// setUserPreferredCamera:
  static void setUserPreferredCamera(AVCaptureDevice? value) {
    return _objc_msgSend_1428(_class_AVCaptureDevice,
        _sel_setUserPreferredCamera_, value?.pointer ?? ffi.nullptr);
  }

  /// systemPreferredCamera
  static AVCaptureDevice? getSystemPreferredCamera() {
    final _ret =
        _objc_msgSend_1427(_class_AVCaptureDevice, _sel_systemPreferredCamera);
    return _ret.address == 0
        ? null
        : AVCaptureDevice.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemPressureState
  AVCaptureSystemPressureState get systemPressureState {
    final _ret = _objc_msgSend_1430(this.pointer, _sel_systemPressureState);
    return AVCaptureSystemPressureState.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// isVirtualDevice
  bool get virtualDevice {
    return _objc_msgSend_13(this.pointer, _sel_isVirtualDevice);
  }

  /// constituentDevices
  objc.NSArray get constituentDevices {
    final _ret = _objc_msgSend_33(this.pointer, _sel_constituentDevices);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// virtualDeviceSwitchOverVideoZoomFactors
  objc.NSArray get virtualDeviceSwitchOverVideoZoomFactors {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_virtualDeviceSwitchOverVideoZoomFactors);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPrimaryConstituentDeviceSwitchingBehavior:restrictedSwitchingBehaviorConditions:
  void
      setPrimaryConstituentDeviceSwitchingBehavior_restrictedSwitchingBehaviorConditions_(
          AVCapturePrimaryConstituentDeviceSwitchingBehavior switchingBehavior,
          AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions
              restrictedSwitchingBehaviorConditions) {
    _objc_msgSend_1431(
        this.pointer,
        _sel_setPrimaryConstituentDeviceSwitchingBehavior_restrictedSwitchingBehaviorConditions_,
        switchingBehavior.value,
        restrictedSwitchingBehaviorConditions.value);
  }

  /// primaryConstituentDeviceSwitchingBehavior
  AVCapturePrimaryConstituentDeviceSwitchingBehavior
      get primaryConstituentDeviceSwitchingBehavior {
    final _ret = _objc_msgSend_1432(
        this.pointer, _sel_primaryConstituentDeviceSwitchingBehavior);
    return AVCapturePrimaryConstituentDeviceSwitchingBehavior.fromValue(_ret);
  }

  /// primaryConstituentDeviceRestrictedSwitchingBehaviorConditions
  AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions
      get primaryConstituentDeviceRestrictedSwitchingBehaviorConditions {
    final _ret = _objc_msgSend_1433(this.pointer,
        _sel_primaryConstituentDeviceRestrictedSwitchingBehaviorConditions);
    return AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions
        .fromValue(_ret);
  }

  /// activePrimaryConstituentDeviceSwitchingBehavior
  AVCapturePrimaryConstituentDeviceSwitchingBehavior
      get activePrimaryConstituentDeviceSwitchingBehavior {
    final _ret = _objc_msgSend_1432(
        this.pointer, _sel_activePrimaryConstituentDeviceSwitchingBehavior);
    return AVCapturePrimaryConstituentDeviceSwitchingBehavior.fromValue(_ret);
  }

  /// activePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions
  AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions
      get activePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions {
    final _ret = _objc_msgSend_1433(this.pointer,
        _sel_activePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions);
    return AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions
        .fromValue(_ret);
  }

  /// activePrimaryConstituentDevice
  AVCaptureDevice? get activePrimaryConstituentDevice {
    final _ret =
        _objc_msgSend_1427(this.pointer, _sel_activePrimaryConstituentDevice);
    return _ret.address == 0
        ? null
        : AVCaptureDevice.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportedFallbackPrimaryConstituentDevices
  objc.NSArray get supportedFallbackPrimaryConstituentDevices {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_supportedFallbackPrimaryConstituentDevices);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// fallbackPrimaryConstituentDevices
  objc.NSArray get fallbackPrimaryConstituentDevices {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_fallbackPrimaryConstituentDevices);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFallbackPrimaryConstituentDevices:
  set fallbackPrimaryConstituentDevices(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer,
        _sel_setFallbackPrimaryConstituentDevices_, value.pointer);
  }

  /// hasFlash
  bool get hasFlash {
    return _objc_msgSend_13(this.pointer, _sel_hasFlash);
  }

  /// isFlashAvailable
  bool get flashAvailable {
    return _objc_msgSend_13(this.pointer, _sel_isFlashAvailable);
  }

  /// isFlashActive
  bool get flashActive {
    return _objc_msgSend_13(this.pointer, _sel_isFlashActive);
  }

  /// isFlashModeSupported:
  bool isFlashModeSupported_(AVCaptureFlashMode flashMode) {
    return _objc_msgSend_1434(
        this.pointer, _sel_isFlashModeSupported_, flashMode.value);
  }

  /// flashMode
  AVCaptureFlashMode get flashMode {
    final _ret = _objc_msgSend_1435(this.pointer, _sel_flashMode);
    return AVCaptureFlashMode.fromValue(_ret);
  }

  /// setFlashMode:
  set flashMode(AVCaptureFlashMode value) {
    return _objc_msgSend_1436(this.pointer, _sel_setFlashMode_, value.value);
  }

  /// hasTorch
  bool get hasTorch {
    return _objc_msgSend_13(this.pointer, _sel_hasTorch);
  }

  /// isTorchAvailable
  bool get torchAvailable {
    return _objc_msgSend_13(this.pointer, _sel_isTorchAvailable);
  }

  /// isTorchActive
  bool get torchActive {
    return _objc_msgSend_13(this.pointer, _sel_isTorchActive);
  }

  /// torchLevel
  double get torchLevel {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_torchLevel)
        : _objc_msgSend_361(this.pointer, _sel_torchLevel);
  }

  /// isTorchModeSupported:
  bool isTorchModeSupported_(AVCaptureTorchMode torchMode) {
    return _objc_msgSend_1437(
        this.pointer, _sel_isTorchModeSupported_, torchMode.value);
  }

  /// torchMode
  AVCaptureTorchMode get torchMode {
    final _ret = _objc_msgSend_1438(this.pointer, _sel_torchMode);
    return AVCaptureTorchMode.fromValue(_ret);
  }

  /// setTorchMode:
  set torchMode(AVCaptureTorchMode value) {
    return _objc_msgSend_1439(this.pointer, _sel_setTorchMode_, value.value);
  }

  /// setTorchModeOnWithLevel:error:
  bool setTorchModeOnWithLevel_error_(
      double torchLevel, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_1347(this.pointer, _sel_setTorchModeOnWithLevel_error_,
        torchLevel, outError);
  }

  /// isFocusModeSupported:
  bool isFocusModeSupported_(AVCaptureFocusMode focusMode) {
    return _objc_msgSend_1440(
        this.pointer, _sel_isFocusModeSupported_, focusMode.value);
  }

  /// isLockingFocusWithCustomLensPositionSupported
  bool get lockingFocusWithCustomLensPositionSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isLockingFocusWithCustomLensPositionSupported);
  }

  /// focusMode
  AVCaptureFocusMode get focusMode {
    final _ret = _objc_msgSend_1441(this.pointer, _sel_focusMode);
    return AVCaptureFocusMode.fromValue(_ret);
  }

  /// setFocusMode:
  set focusMode(AVCaptureFocusMode value) {
    return _objc_msgSend_1442(this.pointer, _sel_setFocusMode_, value.value);
  }

  /// isFocusPointOfInterestSupported
  bool get focusPointOfInterestSupported {
    return _objc_msgSend_13(this.pointer, _sel_isFocusPointOfInterestSupported);
  }

  /// focusPointOfInterest
  void getFocusPointOfInterest(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_795Stret(stret, this.pointer, _sel_focusPointOfInterest)
        : stret.ref =
            _objc_msgSend_795(this.pointer, _sel_focusPointOfInterest);
  }

  /// setFocusPointOfInterest:
  set focusPointOfInterest(CGPoint value) {
    return _objc_msgSend_796(
        this.pointer, _sel_setFocusPointOfInterest_, value);
  }

  /// isAdjustingFocus
  bool get adjustingFocus {
    return _objc_msgSend_13(this.pointer, _sel_isAdjustingFocus);
  }

  /// isAutoFocusRangeRestrictionSupported
  bool get autoFocusRangeRestrictionSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isAutoFocusRangeRestrictionSupported);
  }

  /// autoFocusRangeRestriction
  AVCaptureAutoFocusRangeRestriction get autoFocusRangeRestriction {
    final _ret =
        _objc_msgSend_1443(this.pointer, _sel_autoFocusRangeRestriction);
    return AVCaptureAutoFocusRangeRestriction.fromValue(_ret);
  }

  /// setAutoFocusRangeRestriction:
  set autoFocusRangeRestriction(AVCaptureAutoFocusRangeRestriction value) {
    return _objc_msgSend_1444(
        this.pointer, _sel_setAutoFocusRangeRestriction_, value.value);
  }

  /// isSmoothAutoFocusSupported
  bool get smoothAutoFocusSupported {
    return _objc_msgSend_13(this.pointer, _sel_isSmoothAutoFocusSupported);
  }

  /// isSmoothAutoFocusEnabled
  bool get smoothAutoFocusEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isSmoothAutoFocusEnabled);
  }

  /// setSmoothAutoFocusEnabled:
  set smoothAutoFocusEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setSmoothAutoFocusEnabled_, value);
  }

  /// automaticallyAdjustsFaceDrivenAutoFocusEnabled
  bool get automaticallyAdjustsFaceDrivenAutoFocusEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticallyAdjustsFaceDrivenAutoFocusEnabled);
  }

  /// setAutomaticallyAdjustsFaceDrivenAutoFocusEnabled:
  set automaticallyAdjustsFaceDrivenAutoFocusEnabled(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setAutomaticallyAdjustsFaceDrivenAutoFocusEnabled_, value);
  }

  /// isFaceDrivenAutoFocusEnabled
  bool get faceDrivenAutoFocusEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isFaceDrivenAutoFocusEnabled);
  }

  /// setFaceDrivenAutoFocusEnabled:
  set faceDrivenAutoFocusEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setFaceDrivenAutoFocusEnabled_, value);
  }

  /// lensPosition
  double get lensPosition {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_lensPosition)
        : _objc_msgSend_361(this.pointer, _sel_lensPosition);
  }

  /// setFocusModeLockedWithLensPosition:completionHandler:
  void setFocusModeLockedWithLensPosition_completionHandler_(
      double lensPosition, objc.ObjCBlock<ffi.Void Function(CMTime)>? handler) {
    _objc_msgSend_1445(
        this.pointer,
        _sel_setFocusModeLockedWithLensPosition_completionHandler_,
        lensPosition,
        handler?.pointer ?? ffi.nullptr);
  }

  /// minimumFocusDistance
  int get minimumFocusDistance {
    return _objc_msgSend_125(this.pointer, _sel_minimumFocusDistance);
  }

  /// isExposureModeSupported:
  bool isExposureModeSupported_(AVCaptureExposureMode exposureMode) {
    return _objc_msgSend_1446(
        this.pointer, _sel_isExposureModeSupported_, exposureMode.value);
  }

  /// exposureMode
  AVCaptureExposureMode get exposureMode {
    final _ret = _objc_msgSend_1447(this.pointer, _sel_exposureMode);
    return AVCaptureExposureMode.fromValue(_ret);
  }

  /// setExposureMode:
  set exposureMode(AVCaptureExposureMode value) {
    return _objc_msgSend_1448(this.pointer, _sel_setExposureMode_, value.value);
  }

  /// isExposurePointOfInterestSupported
  bool get exposurePointOfInterestSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isExposurePointOfInterestSupported);
  }

  /// exposurePointOfInterest
  void getExposurePointOfInterest(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_795Stret(
            stret, this.pointer, _sel_exposurePointOfInterest)
        : stret.ref =
            _objc_msgSend_795(this.pointer, _sel_exposurePointOfInterest);
  }

  /// setExposurePointOfInterest:
  set exposurePointOfInterest(CGPoint value) {
    return _objc_msgSend_796(
        this.pointer, _sel_setExposurePointOfInterest_, value);
  }

  /// automaticallyAdjustsFaceDrivenAutoExposureEnabled
  bool get automaticallyAdjustsFaceDrivenAutoExposureEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticallyAdjustsFaceDrivenAutoExposureEnabled);
  }

  /// setAutomaticallyAdjustsFaceDrivenAutoExposureEnabled:
  set automaticallyAdjustsFaceDrivenAutoExposureEnabled(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setAutomaticallyAdjustsFaceDrivenAutoExposureEnabled_, value);
  }

  /// isFaceDrivenAutoExposureEnabled
  bool get faceDrivenAutoExposureEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isFaceDrivenAutoExposureEnabled);
  }

  /// setFaceDrivenAutoExposureEnabled:
  set faceDrivenAutoExposureEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setFaceDrivenAutoExposureEnabled_, value);
  }

  /// activeMaxExposureDuration
  void getActiveMaxExposureDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_activeMaxExposureDuration)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_activeMaxExposureDuration);
  }

  /// setActiveMaxExposureDuration:
  set activeMaxExposureDuration(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setActiveMaxExposureDuration_, value);
  }

  /// isAdjustingExposure
  bool get adjustingExposure {
    return _objc_msgSend_13(this.pointer, _sel_isAdjustingExposure);
  }

  /// lensAperture
  double get lensAperture {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_lensAperture)
        : _objc_msgSend_361(this.pointer, _sel_lensAperture);
  }

  /// exposureDuration
  void getExposureDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_exposureDuration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_exposureDuration);
  }

  /// ISO
  double get ISO {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_ISO)
        : _objc_msgSend_361(this.pointer, _sel_ISO);
  }

  /// setExposureModeCustomWithDuration:ISO:completionHandler:
  void setExposureModeCustomWithDuration_ISO_completionHandler_(CMTime duration,
      double ISO, objc.ObjCBlock<ffi.Void Function(CMTime)>? handler) {
    _objc_msgSend_1449(
        this.pointer,
        _sel_setExposureModeCustomWithDuration_ISO_completionHandler_,
        duration,
        ISO,
        handler?.pointer ?? ffi.nullptr);
  }

  /// exposureTargetOffset
  double get exposureTargetOffset {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_exposureTargetOffset)
        : _objc_msgSend_361(this.pointer, _sel_exposureTargetOffset);
  }

  /// exposureTargetBias
  double get exposureTargetBias {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_exposureTargetBias)
        : _objc_msgSend_361(this.pointer, _sel_exposureTargetBias);
  }

  /// minExposureTargetBias
  double get minExposureTargetBias {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_minExposureTargetBias)
        : _objc_msgSend_361(this.pointer, _sel_minExposureTargetBias);
  }

  /// maxExposureTargetBias
  double get maxExposureTargetBias {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_maxExposureTargetBias)
        : _objc_msgSend_361(this.pointer, _sel_maxExposureTargetBias);
  }

  /// setExposureTargetBias:completionHandler:
  void setExposureTargetBias_completionHandler_(
      double bias, objc.ObjCBlock<ffi.Void Function(CMTime)>? handler) {
    _objc_msgSend_1445(
        this.pointer,
        _sel_setExposureTargetBias_completionHandler_,
        bias,
        handler?.pointer ?? ffi.nullptr);
  }

  /// isGlobalToneMappingEnabled
  bool get globalToneMappingEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isGlobalToneMappingEnabled);
  }

  /// setGlobalToneMappingEnabled:
  set globalToneMappingEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setGlobalToneMappingEnabled_, value);
  }

  /// isWhiteBalanceModeSupported:
  bool isWhiteBalanceModeSupported_(
      AVCaptureWhiteBalanceMode whiteBalanceMode) {
    return _objc_msgSend_1450(this.pointer, _sel_isWhiteBalanceModeSupported_,
        whiteBalanceMode.value);
  }

  /// isLockingWhiteBalanceWithCustomDeviceGainsSupported
  bool get lockingWhiteBalanceWithCustomDeviceGainsSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isLockingWhiteBalanceWithCustomDeviceGainsSupported);
  }

  /// whiteBalanceMode
  AVCaptureWhiteBalanceMode get whiteBalanceMode {
    final _ret = _objc_msgSend_1451(this.pointer, _sel_whiteBalanceMode);
    return AVCaptureWhiteBalanceMode.fromValue(_ret);
  }

  /// setWhiteBalanceMode:
  set whiteBalanceMode(AVCaptureWhiteBalanceMode value) {
    return _objc_msgSend_1452(
        this.pointer, _sel_setWhiteBalanceMode_, value.value);
  }

  /// isAdjustingWhiteBalance
  bool get adjustingWhiteBalance {
    return _objc_msgSend_13(this.pointer, _sel_isAdjustingWhiteBalance);
  }

  /// deviceWhiteBalanceGains
  void getDeviceWhiteBalanceGains(
      ffi.Pointer<AVCaptureWhiteBalanceGains> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1453Stret(
            stret, this.pointer, _sel_deviceWhiteBalanceGains)
        : stret.ref =
            _objc_msgSend_1453(this.pointer, _sel_deviceWhiteBalanceGains);
  }

  /// grayWorldDeviceWhiteBalanceGains
  void getGrayWorldDeviceWhiteBalanceGains(
      ffi.Pointer<AVCaptureWhiteBalanceGains> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1453Stret(
            stret, this.pointer, _sel_grayWorldDeviceWhiteBalanceGains)
        : stret.ref = _objc_msgSend_1453(
            this.pointer, _sel_grayWorldDeviceWhiteBalanceGains);
  }

  /// maxWhiteBalanceGain
  double get maxWhiteBalanceGain {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_maxWhiteBalanceGain)
        : _objc_msgSend_361(this.pointer, _sel_maxWhiteBalanceGain);
  }

  /// setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:completionHandler:
  void setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains_completionHandler_(
      AVCaptureWhiteBalanceGains whiteBalanceGains,
      objc.ObjCBlock<ffi.Void Function(CMTime)>? handler) {
    _objc_msgSend_1454(
        this.pointer,
        _sel_setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains_completionHandler_,
        whiteBalanceGains,
        handler?.pointer ?? ffi.nullptr);
  }

  /// chromaticityValuesForDeviceWhiteBalanceGains:
  void chromaticityValuesForDeviceWhiteBalanceGains_(
      ffi.Pointer<AVCaptureWhiteBalanceChromaticityValues> stret,
      AVCaptureWhiteBalanceGains whiteBalanceGains) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1455Stret(
            stret,
            this.pointer,
            _sel_chromaticityValuesForDeviceWhiteBalanceGains_,
            whiteBalanceGains)
        : stret.ref = _objc_msgSend_1455(
            this.pointer,
            _sel_chromaticityValuesForDeviceWhiteBalanceGains_,
            whiteBalanceGains);
  }

  /// deviceWhiteBalanceGainsForChromaticityValues:
  void deviceWhiteBalanceGainsForChromaticityValues_(
      ffi.Pointer<AVCaptureWhiteBalanceGains> stret,
      AVCaptureWhiteBalanceChromaticityValues chromaticityValues) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1456Stret(
            stret,
            this.pointer,
            _sel_deviceWhiteBalanceGainsForChromaticityValues_,
            chromaticityValues)
        : stret.ref = _objc_msgSend_1456(
            this.pointer,
            _sel_deviceWhiteBalanceGainsForChromaticityValues_,
            chromaticityValues);
  }

  /// temperatureAndTintValuesForDeviceWhiteBalanceGains:
  void temperatureAndTintValuesForDeviceWhiteBalanceGains_(
      ffi.Pointer<AVCaptureWhiteBalanceTemperatureAndTintValues> stret,
      AVCaptureWhiteBalanceGains whiteBalanceGains) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1457Stret(
            stret,
            this.pointer,
            _sel_temperatureAndTintValuesForDeviceWhiteBalanceGains_,
            whiteBalanceGains)
        : stret.ref = _objc_msgSend_1457(
            this.pointer,
            _sel_temperatureAndTintValuesForDeviceWhiteBalanceGains_,
            whiteBalanceGains);
  }

  /// deviceWhiteBalanceGainsForTemperatureAndTintValues:
  void deviceWhiteBalanceGainsForTemperatureAndTintValues_(
      ffi.Pointer<AVCaptureWhiteBalanceGains> stret,
      AVCaptureWhiteBalanceTemperatureAndTintValues tempAndTintValues) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1458Stret(
            stret,
            this.pointer,
            _sel_deviceWhiteBalanceGainsForTemperatureAndTintValues_,
            tempAndTintValues)
        : stret.ref = _objc_msgSend_1458(
            this.pointer,
            _sel_deviceWhiteBalanceGainsForTemperatureAndTintValues_,
            tempAndTintValues);
  }

  /// isSubjectAreaChangeMonitoringEnabled
  bool get subjectAreaChangeMonitoringEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isSubjectAreaChangeMonitoringEnabled);
  }

  /// setSubjectAreaChangeMonitoringEnabled:
  set subjectAreaChangeMonitoringEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setSubjectAreaChangeMonitoringEnabled_, value);
  }

  /// isLowLightBoostSupported
  bool get lowLightBoostSupported {
    return _objc_msgSend_13(this.pointer, _sel_isLowLightBoostSupported);
  }

  /// isLowLightBoostEnabled
  bool get lowLightBoostEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isLowLightBoostEnabled);
  }

  /// automaticallyEnablesLowLightBoostWhenAvailable
  bool get automaticallyEnablesLowLightBoostWhenAvailable {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticallyEnablesLowLightBoostWhenAvailable);
  }

  /// setAutomaticallyEnablesLowLightBoostWhenAvailable:
  set automaticallyEnablesLowLightBoostWhenAvailable(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setAutomaticallyEnablesLowLightBoostWhenAvailable_, value);
  }

  /// videoZoomFactor
  double get videoZoomFactor {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_videoZoomFactor)
        : _objc_msgSend_18(this.pointer, _sel_videoZoomFactor);
  }

  /// setVideoZoomFactor:
  set videoZoomFactor(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setVideoZoomFactor_, value);
  }

  /// rampToVideoZoomFactor:withRate:
  void rampToVideoZoomFactor_withRate_(double factor, double rate) {
    _objc_msgSend_1459(
        this.pointer, _sel_rampToVideoZoomFactor_withRate_, factor, rate);
  }

  /// isRampingVideoZoom
  bool get rampingVideoZoom {
    return _objc_msgSend_13(this.pointer, _sel_isRampingVideoZoom);
  }

  /// cancelVideoZoomRamp
  void cancelVideoZoomRamp() {
    _objc_msgSend_7(this.pointer, _sel_cancelVideoZoomRamp);
  }

  /// dualCameraSwitchOverVideoZoomFactor
  double get dualCameraSwitchOverVideoZoomFactor {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            this.pointer, _sel_dualCameraSwitchOverVideoZoomFactor)
        : _objc_msgSend_18(
            this.pointer, _sel_dualCameraSwitchOverVideoZoomFactor);
  }

  /// displayVideoZoomFactorMultiplier
  double get displayVideoZoomFactorMultiplier {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            this.pointer, _sel_displayVideoZoomFactorMultiplier)
        : _objc_msgSend_18(this.pointer, _sel_displayVideoZoomFactorMultiplier);
  }

  /// authorizationStatusForMediaType:
  static AVAuthorizationStatus authorizationStatusForMediaType_(
      objc.NSString mediaType) {
    final _ret = _objc_msgSend_1460(_class_AVCaptureDevice,
        _sel_authorizationStatusForMediaType_, mediaType.pointer);
    return AVAuthorizationStatus.fromValue(_ret);
  }

  /// requestAccessForMediaType:completionHandler:
  static void requestAccessForMediaType_completionHandler_(
      objc.NSString mediaType,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)> handler) {
    _objc_msgSend_434(
        _class_AVCaptureDevice,
        _sel_requestAccessForMediaType_completionHandler_,
        mediaType.pointer,
        handler.pointer);
  }

  /// transportControlsSupported
  bool get transportControlsSupported {
    return _objc_msgSend_13(this.pointer, _sel_transportControlsSupported);
  }

  /// transportControlsPlaybackMode
  AVCaptureDeviceTransportControlsPlaybackMode
      get transportControlsPlaybackMode {
    final _ret =
        _objc_msgSend_1461(this.pointer, _sel_transportControlsPlaybackMode);
    return AVCaptureDeviceTransportControlsPlaybackMode.fromValue(_ret);
  }

  /// transportControlsSpeed
  double get transportControlsSpeed {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_transportControlsSpeed)
        : _objc_msgSend_361(this.pointer, _sel_transportControlsSpeed);
  }

  /// setTransportControlsPlaybackMode:speed:
  void setTransportControlsPlaybackMode_speed_(
      AVCaptureDeviceTransportControlsPlaybackMode mode, double speed) {
    _objc_msgSend_1462(this.pointer,
        _sel_setTransportControlsPlaybackMode_speed_, mode.value, speed);
  }

  /// automaticallyAdjustsVideoHDREnabled
  bool get automaticallyAdjustsVideoHDREnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticallyAdjustsVideoHDREnabled);
  }

  /// setAutomaticallyAdjustsVideoHDREnabled:
  set automaticallyAdjustsVideoHDREnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutomaticallyAdjustsVideoHDREnabled_, value);
  }

  /// isVideoHDREnabled
  bool get videoHDREnabled {
    return _objc_msgSend_13(this.pointer, _sel_isVideoHDREnabled);
  }

  /// setVideoHDREnabled:
  set videoHDREnabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setVideoHDREnabled_, value);
  }

  /// activeColorSpace
  AVCaptureColorSpace get activeColorSpace {
    final _ret = _objc_msgSend_1463(this.pointer, _sel_activeColorSpace);
    return AVCaptureColorSpace.fromValue(_ret);
  }

  /// setActiveColorSpace:
  set activeColorSpace(AVCaptureColorSpace value) {
    return _objc_msgSend_1464(
        this.pointer, _sel_setActiveColorSpace_, value.value);
  }

  /// activeDepthDataFormat
  AVCaptureDeviceFormat? get activeDepthDataFormat {
    final _ret = _objc_msgSend_1465(this.pointer, _sel_activeDepthDataFormat);
    return _ret.address == 0
        ? null
        : AVCaptureDeviceFormat.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setActiveDepthDataFormat:
  set activeDepthDataFormat(AVCaptureDeviceFormat? value) {
    return _objc_msgSend_1466(this.pointer, _sel_setActiveDepthDataFormat_,
        value?.pointer ?? ffi.nullptr);
  }

  /// activeDepthDataMinFrameDuration
  void getActiveDepthDataMinFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_activeDepthDataMinFrameDuration)
        : stret.ref = _objc_msgSend_712(
            this.pointer, _sel_activeDepthDataMinFrameDuration);
  }

  /// setActiveDepthDataMinFrameDuration:
  set activeDepthDataMinFrameDuration(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setActiveDepthDataMinFrameDuration_, value);
  }

  /// minAvailableVideoZoomFactor
  double get minAvailableVideoZoomFactor {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_minAvailableVideoZoomFactor)
        : _objc_msgSend_18(this.pointer, _sel_minAvailableVideoZoomFactor);
  }

  /// maxAvailableVideoZoomFactor
  double get maxAvailableVideoZoomFactor {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_maxAvailableVideoZoomFactor)
        : _objc_msgSend_18(this.pointer, _sel_maxAvailableVideoZoomFactor);
  }

  /// isGeometricDistortionCorrectionSupported
  bool get geometricDistortionCorrectionSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isGeometricDistortionCorrectionSupported);
  }

  /// isGeometricDistortionCorrectionEnabled
  bool get geometricDistortionCorrectionEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isGeometricDistortionCorrectionEnabled);
  }

  /// setGeometricDistortionCorrectionEnabled:
  set geometricDistortionCorrectionEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setGeometricDistortionCorrectionEnabled_, value);
  }

  /// extrinsicMatrixFromDevice:toDevice:
  static objc.NSData? extrinsicMatrixFromDevice_toDevice_(
      AVCaptureDevice fromDevice, AVCaptureDevice toDevice) {
    final _ret = _objc_msgSend_1467(
        _class_AVCaptureDevice,
        _sel_extrinsicMatrixFromDevice_toDevice_,
        fromDevice.pointer,
        toDevice.pointer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// centerStageControlMode
  static AVCaptureCenterStageControlMode getCenterStageControlMode() {
    final _ret =
        _objc_msgSend_1468(_class_AVCaptureDevice, _sel_centerStageControlMode);
    return AVCaptureCenterStageControlMode.fromValue(_ret);
  }

  /// setCenterStageControlMode:
  static void setCenterStageControlMode(AVCaptureCenterStageControlMode value) {
    return _objc_msgSend_1469(
        _class_AVCaptureDevice, _sel_setCenterStageControlMode_, value.value);
  }

  /// isCenterStageEnabled
  static bool getCenterStageEnabled() {
    return _objc_msgSend_13(_class_AVCaptureDevice, _sel_isCenterStageEnabled);
  }

  /// setCenterStageEnabled:
  static void setCenterStageEnabled(bool value) {
    return _objc_msgSend_14(
        _class_AVCaptureDevice, _sel_setCenterStageEnabled_, value);
  }

  /// isCenterStageActive
  bool get centerStageActive {
    return _objc_msgSend_13(this.pointer, _sel_isCenterStageActive);
  }

  /// isCenterStageRectOfInterestSupported
  bool get centerStageRectOfInterestSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isCenterStageRectOfInterestSupported);
  }

  /// centerStageRectOfInterest
  void getCenterStageRectOfInterest(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_793Stret(
            stret, this.pointer, _sel_centerStageRectOfInterest)
        : stret.ref =
            _objc_msgSend_793(this.pointer, _sel_centerStageRectOfInterest);
  }

  /// setCenterStageRectOfInterest:
  set centerStageRectOfInterest(CGRect value) {
    return _objc_msgSend_794(
        this.pointer, _sel_setCenterStageRectOfInterest_, value);
  }

  /// isPortraitEffectEnabled
  static bool getPortraitEffectEnabled() {
    return _objc_msgSend_13(
        _class_AVCaptureDevice, _sel_isPortraitEffectEnabled);
  }

  /// isPortraitEffectActive
  bool get portraitEffectActive {
    return _objc_msgSend_13(this.pointer, _sel_isPortraitEffectActive);
  }

  /// reactionEffectsEnabled
  static bool getReactionEffectsEnabled() {
    return _objc_msgSend_13(
        _class_AVCaptureDevice, _sel_reactionEffectsEnabled);
  }

  /// reactionEffectGesturesEnabled
  static bool getReactionEffectGesturesEnabled() {
    return _objc_msgSend_13(
        _class_AVCaptureDevice, _sel_reactionEffectGesturesEnabled);
  }

  /// canPerformReactionEffects
  bool get canPerformReactionEffects {
    return _objc_msgSend_13(this.pointer, _sel_canPerformReactionEffects);
  }

  /// availableReactionTypes
  objc.NSSet get availableReactionTypes {
    final _ret = _objc_msgSend_1049(this.pointer, _sel_availableReactionTypes);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// performEffectForReaction:
  void performEffectForReaction_(objc.NSString reactionType) {
    _objc_msgSend_110(
        this.pointer, _sel_performEffectForReaction_, reactionType.pointer);
  }

  /// reactionEffectsInProgress
  objc.NSArray get reactionEffectsInProgress {
    final _ret = _objc_msgSend_33(this.pointer, _sel_reactionEffectsInProgress);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isContinuityCamera
  bool get continuityCamera {
    return _objc_msgSend_13(this.pointer, _sel_isContinuityCamera);
  }

  /// companionDeskViewCamera
  AVCaptureDevice? get companionDeskViewCamera {
    final _ret = _objc_msgSend_1427(this.pointer, _sel_companionDeskViewCamera);
    return _ret.address == 0
        ? null
        : AVCaptureDevice.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredMicrophoneMode
  static AVCaptureMicrophoneMode getPreferredMicrophoneMode() {
    final _ret = _objc_msgSend_1470(
        _class_AVCaptureDevice, _sel_preferredMicrophoneMode);
    return AVCaptureMicrophoneMode.fromValue(_ret);
  }

  /// activeMicrophoneMode
  static AVCaptureMicrophoneMode getActiveMicrophoneMode() {
    final _ret =
        _objc_msgSend_1470(_class_AVCaptureDevice, _sel_activeMicrophoneMode);
    return AVCaptureMicrophoneMode.fromValue(_ret);
  }

  /// showSystemUserInterface:
  static void showSystemUserInterface_(
      AVCaptureSystemUserInterface systemUserInterface) {
    _objc_msgSend_1471(_class_AVCaptureDevice, _sel_showSystemUserInterface_,
        systemUserInterface.value);
  }

  /// isStudioLightEnabled
  static bool getStudioLightEnabled() {
    return _objc_msgSend_13(_class_AVCaptureDevice, _sel_isStudioLightEnabled);
  }

  /// isStudioLightActive
  bool get studioLightActive {
    return _objc_msgSend_13(this.pointer, _sel_isStudioLightActive);
  }

  /// allocWithZone:
  static AVCaptureDevice allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCaptureDevice, _sel_allocWithZone_, zone);
    return AVCaptureDevice.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVCaptureDevice alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptureDevice, _sel_alloc);
    return AVCaptureDevice.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureDevice,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureDevice,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptureDevice, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCaptureDevice, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureDevice,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureDevice,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureDevice,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptureDevice, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureDevice, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureDevice = objc.getClass("AVCaptureDevice");
late final _sel_devices = objc.registerName("devices");
late final _sel_devicesWithMediaType_ =
    objc.registerName("devicesWithMediaType:");
late final _sel_defaultDeviceWithMediaType_ =
    objc.registerName("defaultDeviceWithMediaType:");
final _objc_msgSend_1416 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_deviceWithUniqueID_ = objc.registerName("deviceWithUniqueID:");
late final _sel_modelID = objc.registerName("modelID");
late final _sel_manufacturer = objc.registerName("manufacturer");
late final _sel_transportType = objc.registerName("transportType");
late final _sel_hasMediaType_ = objc.registerName("hasMediaType:");
late final _sel_lockForConfiguration_ =
    objc.registerName("lockForConfiguration:");
late final _sel_unlockForConfiguration =
    objc.registerName("unlockForConfiguration");
late final _sel_supportsAVCaptureSessionPreset_ =
    objc.registerName("supportsAVCaptureSessionPreset:");
late final _sel_isConnected = objc.registerName("isConnected");
late final _sel_isInUseByAnotherApplication =
    objc.registerName("isInUseByAnotherApplication");
late final _sel_linkedDevices = objc.registerName("linkedDevices");
late final _sel_formats = objc.registerName("formats");

/// AVCaptureDeviceFormat
class AVCaptureDeviceFormat extends objc.NSObject {
  AVCaptureDeviceFormat._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureDeviceFormat] that points to the same underlying object as [other].
  AVCaptureDeviceFormat.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureDeviceFormat] that wraps the given raw object pointer.
  AVCaptureDeviceFormat.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureDeviceFormat].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureDeviceFormat);
  }

  /// init
  AVCaptureDeviceFormat init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureDeviceFormat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCaptureDeviceFormat new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptureDeviceFormat, _sel_new);
    return AVCaptureDeviceFormat.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// mediaType
  objc.NSString get mediaType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_mediaType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// formatDescription
  ffi.Pointer<opaqueCMFormatDescription> get formatDescription {
    return _objc_msgSend_730(this.pointer, _sel_formatDescription);
  }

  /// videoSupportedFrameRateRanges
  objc.NSArray get videoSupportedFrameRateRanges {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_videoSupportedFrameRateRanges);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// videoFieldOfView
  double get videoFieldOfView {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_videoFieldOfView)
        : _objc_msgSend_361(this.pointer, _sel_videoFieldOfView);
  }

  /// isVideoBinned
  bool get videoBinned {
    return _objc_msgSend_13(this.pointer, _sel_isVideoBinned);
  }

  /// isVideoStabilizationModeSupported:
  bool isVideoStabilizationModeSupported_(
      AVCaptureVideoStabilizationMode videoStabilizationMode) {
    return _objc_msgSend_1417(this.pointer,
        _sel_isVideoStabilizationModeSupported_, videoStabilizationMode.value);
  }

  /// isVideoStabilizationSupported
  bool get videoStabilizationSupported {
    return _objc_msgSend_13(this.pointer, _sel_isVideoStabilizationSupported);
  }

  /// videoMaxZoomFactor
  double get videoMaxZoomFactor {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_videoMaxZoomFactor)
        : _objc_msgSend_18(this.pointer, _sel_videoMaxZoomFactor);
  }

  /// videoZoomFactorUpscaleThreshold
  double get videoZoomFactorUpscaleThreshold {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            this.pointer, _sel_videoZoomFactorUpscaleThreshold)
        : _objc_msgSend_18(this.pointer, _sel_videoZoomFactorUpscaleThreshold);
  }

  /// minExposureDuration
  void getMinExposureDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_minExposureDuration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_minExposureDuration);
  }

  /// maxExposureDuration
  void getMaxExposureDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_maxExposureDuration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_maxExposureDuration);
  }

  /// minISO
  double get minISO {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_minISO)
        : _objc_msgSend_361(this.pointer, _sel_minISO);
  }

  /// maxISO
  double get maxISO {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_maxISO)
        : _objc_msgSend_361(this.pointer, _sel_maxISO);
  }

  /// isGlobalToneMappingSupported
  bool get globalToneMappingSupported {
    return _objc_msgSend_13(this.pointer, _sel_isGlobalToneMappingSupported);
  }

  /// isVideoHDRSupported
  bool get videoHDRSupported {
    return _objc_msgSend_13(this.pointer, _sel_isVideoHDRSupported);
  }

  /// highResolutionStillImageDimensions
  void getHighResolutionStillImageDimensions(
      ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(
            stret, this.pointer, _sel_highResolutionStillImageDimensions)
        : stret.ref = _objc_msgSend_1418(
            this.pointer, _sel_highResolutionStillImageDimensions);
  }

  /// isHighPhotoQualitySupported
  bool get highPhotoQualitySupported {
    return _objc_msgSend_13(this.pointer, _sel_isHighPhotoQualitySupported);
  }

  /// isHighestPhotoQualitySupported
  bool get highestPhotoQualitySupported {
    return _objc_msgSend_13(this.pointer, _sel_isHighestPhotoQualitySupported);
  }

  /// autoFocusSystem
  AVCaptureAutoFocusSystem get autoFocusSystem {
    final _ret = _objc_msgSend_1419(this.pointer, _sel_autoFocusSystem);
    return AVCaptureAutoFocusSystem.fromValue(_ret);
  }

  /// supportedColorSpaces
  objc.NSArray get supportedColorSpaces {
    final _ret = _objc_msgSend_33(this.pointer, _sel_supportedColorSpaces);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// videoMinZoomFactorForDepthDataDelivery
  double get videoMinZoomFactorForDepthDataDelivery {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            this.pointer, _sel_videoMinZoomFactorForDepthDataDelivery)
        : _objc_msgSend_18(
            this.pointer, _sel_videoMinZoomFactorForDepthDataDelivery);
  }

  /// videoMaxZoomFactorForDepthDataDelivery
  double get videoMaxZoomFactorForDepthDataDelivery {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            this.pointer, _sel_videoMaxZoomFactorForDepthDataDelivery)
        : _objc_msgSend_18(
            this.pointer, _sel_videoMaxZoomFactorForDepthDataDelivery);
  }

  /// supportedVideoZoomFactorsForDepthDataDelivery
  objc.NSArray get supportedVideoZoomFactorsForDepthDataDelivery {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_supportedVideoZoomFactorsForDepthDataDelivery);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportedVideoZoomRangesForDepthDataDelivery
  objc.NSArray get supportedVideoZoomRangesForDepthDataDelivery {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_supportedVideoZoomRangesForDepthDataDelivery);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// zoomFactorsOutsideOfVideoZoomRangesForDepthDeliverySupported
  bool get zoomFactorsOutsideOfVideoZoomRangesForDepthDeliverySupported {
    return _objc_msgSend_13(this.pointer,
        _sel_zoomFactorsOutsideOfVideoZoomRangesForDepthDeliverySupported);
  }

  /// supportedDepthDataFormats
  objc.NSArray get supportedDepthDataFormats {
    final _ret = _objc_msgSend_33(this.pointer, _sel_supportedDepthDataFormats);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// unsupportedCaptureOutputClasses
  objc.NSArray get unsupportedCaptureOutputClasses {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_unsupportedCaptureOutputClasses);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportedMaxPhotoDimensions
  objc.NSArray get supportedMaxPhotoDimensions {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_supportedMaxPhotoDimensions);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// secondaryNativeResolutionZoomFactors
  objc.NSArray get secondaryNativeResolutionZoomFactors {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_secondaryNativeResolutionZoomFactors);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isPortraitEffectsMatteStillImageDeliverySupported
  bool get portraitEffectsMatteStillImageDeliverySupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isPortraitEffectsMatteStillImageDeliverySupported);
  }

  /// isMultiCamSupported
  bool get multiCamSupported {
    return _objc_msgSend_13(this.pointer, _sel_isMultiCamSupported);
  }

  /// geometricDistortionCorrectedVideoFieldOfView
  double get geometricDistortionCorrectedVideoFieldOfView {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(
            this.pointer, _sel_geometricDistortionCorrectedVideoFieldOfView)
        : _objc_msgSend_361(
            this.pointer, _sel_geometricDistortionCorrectedVideoFieldOfView);
  }

  /// isCenterStageSupported
  bool get centerStageSupported {
    return _objc_msgSend_13(this.pointer, _sel_isCenterStageSupported);
  }

  /// videoMinZoomFactorForCenterStage
  double get videoMinZoomFactorForCenterStage {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            this.pointer, _sel_videoMinZoomFactorForCenterStage)
        : _objc_msgSend_18(this.pointer, _sel_videoMinZoomFactorForCenterStage);
  }

  /// videoMaxZoomFactorForCenterStage
  double get videoMaxZoomFactorForCenterStage {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            this.pointer, _sel_videoMaxZoomFactorForCenterStage)
        : _objc_msgSend_18(this.pointer, _sel_videoMaxZoomFactorForCenterStage);
  }

  /// videoFrameRateRangeForCenterStage
  AVFrameRateRange? get videoFrameRateRangeForCenterStage {
    final _ret = _objc_msgSend_1420(
        this.pointer, _sel_videoFrameRateRangeForCenterStage);
    return _ret.address == 0
        ? null
        : AVFrameRateRange.castFromPointer(_ret, retain: true, release: true);
  }

  /// isPortraitEffectSupported
  bool get portraitEffectSupported {
    return _objc_msgSend_13(this.pointer, _sel_isPortraitEffectSupported);
  }

  /// videoFrameRateRangeForPortraitEffect
  AVFrameRateRange? get videoFrameRateRangeForPortraitEffect {
    final _ret = _objc_msgSend_1420(
        this.pointer, _sel_videoFrameRateRangeForPortraitEffect);
    return _ret.address == 0
        ? null
        : AVFrameRateRange.castFromPointer(_ret, retain: true, release: true);
  }

  /// isStudioLightSupported
  bool get studioLightSupported {
    return _objc_msgSend_13(this.pointer, _sel_isStudioLightSupported);
  }

  /// videoFrameRateRangeForStudioLight
  AVFrameRateRange? get videoFrameRateRangeForStudioLight {
    final _ret = _objc_msgSend_1420(
        this.pointer, _sel_videoFrameRateRangeForStudioLight);
    return _ret.address == 0
        ? null
        : AVFrameRateRange.castFromPointer(_ret, retain: true, release: true);
  }

  /// reactionEffectsSupported
  bool get reactionEffectsSupported {
    return _objc_msgSend_13(this.pointer, _sel_reactionEffectsSupported);
  }

  /// videoFrameRateRangeForReactionEffectsInProgress
  AVFrameRateRange? get videoFrameRateRangeForReactionEffectsInProgress {
    final _ret = _objc_msgSend_1420(
        this.pointer, _sel_videoFrameRateRangeForReactionEffectsInProgress);
    return _ret.address == 0
        ? null
        : AVFrameRateRange.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVCaptureDeviceFormat allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCaptureDeviceFormat, _sel_allocWithZone_, zone);
    return AVCaptureDeviceFormat.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCaptureDeviceFormat alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptureDeviceFormat, _sel_alloc);
    return AVCaptureDeviceFormat.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureDeviceFormat,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureDeviceFormat,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptureDeviceFormat, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCaptureDeviceFormat, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureDeviceFormat,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureDeviceFormat,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureDeviceFormat,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptureDeviceFormat, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCaptureDeviceFormat, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureDeviceFormat =
    objc.getClass("AVCaptureDeviceFormat");
late final _sel_videoSupportedFrameRateRanges =
    objc.registerName("videoSupportedFrameRateRanges");
late final _sel_videoFieldOfView = objc.registerName("videoFieldOfView");
late final _sel_isVideoBinned = objc.registerName("isVideoBinned");

enum AVCaptureVideoStabilizationMode {
  AVCaptureVideoStabilizationModeOff(0),
  AVCaptureVideoStabilizationModeStandard(1),
  AVCaptureVideoStabilizationModeCinematic(2),
  AVCaptureVideoStabilizationModeCinematicExtended(3),
  AVCaptureVideoStabilizationModePreviewOptimized(4),
  AVCaptureVideoStabilizationModeAuto(-1);

  final int value;
  const AVCaptureVideoStabilizationMode(this.value);

  static AVCaptureVideoStabilizationMode fromValue(int value) =>
      switch (value) {
        0 => AVCaptureVideoStabilizationModeOff,
        1 => AVCaptureVideoStabilizationModeStandard,
        2 => AVCaptureVideoStabilizationModeCinematic,
        3 => AVCaptureVideoStabilizationModeCinematicExtended,
        4 => AVCaptureVideoStabilizationModePreviewOptimized,
        -1 => AVCaptureVideoStabilizationModeAuto,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureVideoStabilizationMode: $value"),
      };
}

late final _sel_isVideoStabilizationModeSupported_ =
    objc.registerName("isVideoStabilizationModeSupported:");
final _objc_msgSend_1417 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isVideoStabilizationSupported =
    objc.registerName("isVideoStabilizationSupported");
late final _sel_videoMaxZoomFactor = objc.registerName("videoMaxZoomFactor");
late final _sel_videoZoomFactorUpscaleThreshold =
    objc.registerName("videoZoomFactorUpscaleThreshold");
late final _sel_minExposureDuration = objc.registerName("minExposureDuration");
late final _sel_maxExposureDuration = objc.registerName("maxExposureDuration");
late final _sel_minISO = objc.registerName("minISO");
late final _sel_maxISO = objc.registerName("maxISO");
late final _sel_isGlobalToneMappingSupported =
    objc.registerName("isGlobalToneMappingSupported");
late final _sel_isVideoHDRSupported = objc.registerName("isVideoHDRSupported");

final class CMVideoDimensions extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

late final _sel_highResolutionStillImageDimensions =
    objc.registerName("highResolutionStillImageDimensions");
final _objc_msgSend_1418 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CMVideoDimensions Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CMVideoDimensions Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1418Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CMVideoDimensions>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CMVideoDimensions>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isHighPhotoQualitySupported =
    objc.registerName("isHighPhotoQualitySupported");
late final _sel_isHighestPhotoQualitySupported =
    objc.registerName("isHighestPhotoQualitySupported");

enum AVCaptureAutoFocusSystem {
  AVCaptureAutoFocusSystemNone(0),
  AVCaptureAutoFocusSystemContrastDetection(1),
  AVCaptureAutoFocusSystemPhaseDetection(2);

  final int value;
  const AVCaptureAutoFocusSystem(this.value);

  static AVCaptureAutoFocusSystem fromValue(int value) => switch (value) {
        0 => AVCaptureAutoFocusSystemNone,
        1 => AVCaptureAutoFocusSystemContrastDetection,
        2 => AVCaptureAutoFocusSystemPhaseDetection,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureAutoFocusSystem: $value"),
      };
}

late final _sel_autoFocusSystem = objc.registerName("autoFocusSystem");
final _objc_msgSend_1419 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_supportedColorSpaces =
    objc.registerName("supportedColorSpaces");
late final _sel_videoMinZoomFactorForDepthDataDelivery =
    objc.registerName("videoMinZoomFactorForDepthDataDelivery");
late final _sel_videoMaxZoomFactorForDepthDataDelivery =
    objc.registerName("videoMaxZoomFactorForDepthDataDelivery");
late final _sel_supportedVideoZoomFactorsForDepthDataDelivery =
    objc.registerName("supportedVideoZoomFactorsForDepthDataDelivery");
late final _sel_supportedVideoZoomRangesForDepthDataDelivery =
    objc.registerName("supportedVideoZoomRangesForDepthDataDelivery");
late final _sel_zoomFactorsOutsideOfVideoZoomRangesForDepthDeliverySupported =
    objc.registerName(
        "zoomFactorsOutsideOfVideoZoomRangesForDepthDeliverySupported");
late final _sel_supportedDepthDataFormats =
    objc.registerName("supportedDepthDataFormats");
late final _sel_unsupportedCaptureOutputClasses =
    objc.registerName("unsupportedCaptureOutputClasses");
late final _sel_supportedMaxPhotoDimensions =
    objc.registerName("supportedMaxPhotoDimensions");
late final _sel_secondaryNativeResolutionZoomFactors =
    objc.registerName("secondaryNativeResolutionZoomFactors");
late final _sel_isPortraitEffectsMatteStillImageDeliverySupported =
    objc.registerName("isPortraitEffectsMatteStillImageDeliverySupported");
late final _sel_isMultiCamSupported = objc.registerName("isMultiCamSupported");
late final _sel_geometricDistortionCorrectedVideoFieldOfView =
    objc.registerName("geometricDistortionCorrectedVideoFieldOfView");
late final _sel_isCenterStageSupported =
    objc.registerName("isCenterStageSupported");
late final _sel_videoMinZoomFactorForCenterStage =
    objc.registerName("videoMinZoomFactorForCenterStage");
late final _sel_videoMaxZoomFactorForCenterStage =
    objc.registerName("videoMaxZoomFactorForCenterStage");

/// AVFrameRateRange
class AVFrameRateRange extends objc.NSObject {
  AVFrameRateRange._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVFrameRateRange] that points to the same underlying object as [other].
  AVFrameRateRange.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVFrameRateRange] that wraps the given raw object pointer.
  AVFrameRateRange.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVFrameRateRange].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVFrameRateRange);
  }

  /// init
  AVFrameRateRange init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVFrameRateRange.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVFrameRateRange new1() {
    final _ret = _objc_msgSend_19(_class_AVFrameRateRange, _sel_new);
    return AVFrameRateRange.castFromPointer(_ret, retain: false, release: true);
  }

  /// minFrameRate
  double get minFrameRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_minFrameRate)
        : _objc_msgSend_18(this.pointer, _sel_minFrameRate);
  }

  /// maxFrameRate
  double get maxFrameRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_maxFrameRate)
        : _objc_msgSend_18(this.pointer, _sel_maxFrameRate);
  }

  /// maxFrameDuration
  void getMaxFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_maxFrameDuration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_maxFrameDuration);
  }

  /// minFrameDuration
  void getMinFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_minFrameDuration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_minFrameDuration);
  }

  /// allocWithZone:
  static AVFrameRateRange allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVFrameRateRange, _sel_allocWithZone_, zone);
    return AVFrameRateRange.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVFrameRateRange alloc() {
    final _ret = _objc_msgSend_19(_class_AVFrameRateRange, _sel_alloc);
    return AVFrameRateRange.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVFrameRateRange,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVFrameRateRange,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVFrameRateRange, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVFrameRateRange, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVFrameRateRange,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVFrameRateRange,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVFrameRateRange,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVFrameRateRange, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVFrameRateRange, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVFrameRateRange = objc.getClass("AVFrameRateRange");
late final _sel_minFrameRate = objc.registerName("minFrameRate");
late final _sel_maxFrameRate = objc.registerName("maxFrameRate");
late final _sel_maxFrameDuration = objc.registerName("maxFrameDuration");
late final _sel_videoFrameRateRangeForCenterStage =
    objc.registerName("videoFrameRateRangeForCenterStage");
final _objc_msgSend_1420 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isPortraitEffectSupported =
    objc.registerName("isPortraitEffectSupported");
late final _sel_videoFrameRateRangeForPortraitEffect =
    objc.registerName("videoFrameRateRangeForPortraitEffect");
late final _sel_isStudioLightSupported =
    objc.registerName("isStudioLightSupported");
late final _sel_videoFrameRateRangeForStudioLight =
    objc.registerName("videoFrameRateRangeForStudioLight");
late final _sel_reactionEffectsSupported =
    objc.registerName("reactionEffectsSupported");
late final _sel_videoFrameRateRangeForReactionEffectsInProgress =
    objc.registerName("videoFrameRateRangeForReactionEffectsInProgress");
late final _sel_activeFormat = objc.registerName("activeFormat");
final _objc_msgSend_1421 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setActiveFormat_ = objc.registerName("setActiveFormat:");
final _objc_msgSend_1422 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_activeVideoMinFrameDuration =
    objc.registerName("activeVideoMinFrameDuration");
late final _sel_setActiveVideoMinFrameDuration_ =
    objc.registerName("setActiveVideoMinFrameDuration:");
late final _sel_activeVideoMaxFrameDuration =
    objc.registerName("activeVideoMaxFrameDuration");
late final _sel_setActiveVideoMaxFrameDuration_ =
    objc.registerName("setActiveVideoMaxFrameDuration:");
late final _sel_inputSources = objc.registerName("inputSources");

/// AVCaptureDeviceInputSource
class AVCaptureDeviceInputSource extends objc.NSObject {
  AVCaptureDeviceInputSource._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureDeviceInputSource] that points to the same underlying object as [other].
  AVCaptureDeviceInputSource.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureDeviceInputSource] that wraps the given raw object pointer.
  AVCaptureDeviceInputSource.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureDeviceInputSource].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureDeviceInputSource);
  }

  /// init
  AVCaptureDeviceInputSource init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureDeviceInputSource.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCaptureDeviceInputSource new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptureDeviceInputSource, _sel_new);
    return AVCaptureDeviceInputSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// inputSourceID
  objc.NSString get inputSourceID {
    final _ret = _objc_msgSend_11(this.pointer, _sel_inputSourceID);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedName
  objc.NSString get localizedName {
    final _ret = _objc_msgSend_11(this.pointer, _sel_localizedName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVCaptureDeviceInputSource allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCaptureDeviceInputSource, _sel_allocWithZone_, zone);
    return AVCaptureDeviceInputSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCaptureDeviceInputSource alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureDeviceInputSource, _sel_alloc);
    return AVCaptureDeviceInputSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureDeviceInputSource,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureDeviceInputSource,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVCaptureDeviceInputSource,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCaptureDeviceInputSource, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureDeviceInputSource,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureDeviceInputSource,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureDeviceInputSource,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptureDeviceInputSource, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCaptureDeviceInputSource, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureDeviceInputSource =
    objc.getClass("AVCaptureDeviceInputSource");
late final _sel_inputSourceID = objc.registerName("inputSourceID");
late final _sel_activeInputSource = objc.registerName("activeInputSource");
final _objc_msgSend_1423 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setActiveInputSource_ =
    objc.registerName("setActiveInputSource:");
final _objc_msgSend_1424 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum AVCaptureDevicePosition {
  AVCaptureDevicePositionUnspecified(0),
  AVCaptureDevicePositionBack(1),
  AVCaptureDevicePositionFront(2);

  final int value;
  const AVCaptureDevicePosition(this.value);

  static AVCaptureDevicePosition fromValue(int value) => switch (value) {
        0 => AVCaptureDevicePositionUnspecified,
        1 => AVCaptureDevicePositionBack,
        2 => AVCaptureDevicePositionFront,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureDevicePosition: $value"),
      };
}

final _objc_msgSend_1425 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_deviceType = objc.registerName("deviceType");
late final _sel_defaultDeviceWithDeviceType_mediaType_position_ =
    objc.registerName("defaultDeviceWithDeviceType:mediaType:position:");
final _objc_msgSend_1426 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_userPreferredCamera = objc.registerName("userPreferredCamera");
final _objc_msgSend_1427 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setUserPreferredCamera_ =
    objc.registerName("setUserPreferredCamera:");
final _objc_msgSend_1428 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_systemPreferredCamera =
    objc.registerName("systemPreferredCamera");

/// AVCaptureSystemPressureState
class AVCaptureSystemPressureState extends objc.NSObject {
  AVCaptureSystemPressureState._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureSystemPressureState] that points to the same underlying object as [other].
  AVCaptureSystemPressureState.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureSystemPressureState] that wraps the given raw object pointer.
  AVCaptureSystemPressureState.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureSystemPressureState].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureSystemPressureState);
  }

  /// init
  AVCaptureSystemPressureState init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureSystemPressureState.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCaptureSystemPressureState new1() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureSystemPressureState, _sel_new);
    return AVCaptureSystemPressureState.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// level
  objc.NSString get level {
    final _ret = _objc_msgSend_11(this.pointer, _sel_level);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// factors
  AVCaptureSystemPressureFactors get factors {
    final _ret = _objc_msgSend_1429(this.pointer, _sel_factors);
    return AVCaptureSystemPressureFactors.fromValue(_ret);
  }

  /// allocWithZone:
  static AVCaptureSystemPressureState allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCaptureSystemPressureState, _sel_allocWithZone_, zone);
    return AVCaptureSystemPressureState.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCaptureSystemPressureState alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureSystemPressureState, _sel_alloc);
    return AVCaptureSystemPressureState.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureSystemPressureState,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureSystemPressureState,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVCaptureSystemPressureState,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCaptureSystemPressureState, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureSystemPressureState,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureSystemPressureState,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureSystemPressureState,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVCaptureSystemPressureState,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCaptureSystemPressureState, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureSystemPressureState =
    objc.getClass("AVCaptureSystemPressureState");

enum AVCaptureSystemPressureFactors {
  AVCaptureSystemPressureFactorNone(0),
  AVCaptureSystemPressureFactorSystemTemperature(1),
  AVCaptureSystemPressureFactorPeakPower(2),
  AVCaptureSystemPressureFactorDepthModuleTemperature(4),
  AVCaptureSystemPressureFactorCameraTemperature(8);

  final int value;
  const AVCaptureSystemPressureFactors(this.value);

  static AVCaptureSystemPressureFactors fromValue(int value) => switch (value) {
        0 => AVCaptureSystemPressureFactorNone,
        1 => AVCaptureSystemPressureFactorSystemTemperature,
        2 => AVCaptureSystemPressureFactorPeakPower,
        4 => AVCaptureSystemPressureFactorDepthModuleTemperature,
        8 => AVCaptureSystemPressureFactorCameraTemperature,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureSystemPressureFactors: $value"),
      };
}

late final _sel_factors = objc.registerName("factors");
final _objc_msgSend_1429 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_systemPressureState = objc.registerName("systemPressureState");
final _objc_msgSend_1430 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isVirtualDevice = objc.registerName("isVirtualDevice");
late final _sel_constituentDevices = objc.registerName("constituentDevices");
late final _sel_virtualDeviceSwitchOverVideoZoomFactors =
    objc.registerName("virtualDeviceSwitchOverVideoZoomFactors");

enum AVCapturePrimaryConstituentDeviceSwitchingBehavior {
  AVCapturePrimaryConstituentDeviceSwitchingBehaviorUnsupported(0),
  AVCapturePrimaryConstituentDeviceSwitchingBehaviorAuto(1),
  AVCapturePrimaryConstituentDeviceSwitchingBehaviorRestricted(2),
  AVCapturePrimaryConstituentDeviceSwitchingBehaviorLocked(3);

  final int value;
  const AVCapturePrimaryConstituentDeviceSwitchingBehavior(this.value);

  static AVCapturePrimaryConstituentDeviceSwitchingBehavior fromValue(
          int value) =>
      switch (value) {
        0 => AVCapturePrimaryConstituentDeviceSwitchingBehaviorUnsupported,
        1 => AVCapturePrimaryConstituentDeviceSwitchingBehaviorAuto,
        2 => AVCapturePrimaryConstituentDeviceSwitchingBehaviorRestricted,
        3 => AVCapturePrimaryConstituentDeviceSwitchingBehaviorLocked,
        _ => throw ArgumentError(
            "Unknown value for AVCapturePrimaryConstituentDeviceSwitchingBehavior: $value"),
      };
}

enum AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions {
  AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionNone(0),
  AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionVideoZoomChanged(
      1),
  AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionFocusModeChanged(
      2),
  AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionExposureModeChanged(
      4);

  final int value;
  const AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions(
      this.value);

  static AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions
      fromValue(int value) => switch (value) {
            0 =>
              AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionNone,
            1 =>
              AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionVideoZoomChanged,
            2 =>
              AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionFocusModeChanged,
            4 =>
              AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditionExposureModeChanged,
            _ => throw ArgumentError(
                "Unknown value for AVCapturePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions: $value"),
          };
}

late final _sel_setPrimaryConstituentDeviceSwitchingBehavior_restrictedSwitchingBehaviorConditions_ =
    objc.registerName(
        "setPrimaryConstituentDeviceSwitchingBehavior:restrictedSwitchingBehaviorConditions:");
final _objc_msgSend_1431 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_primaryConstituentDeviceSwitchingBehavior =
    objc.registerName("primaryConstituentDeviceSwitchingBehavior");
final _objc_msgSend_1432 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_primaryConstituentDeviceRestrictedSwitchingBehaviorConditions =
    objc.registerName(
        "primaryConstituentDeviceRestrictedSwitchingBehaviorConditions");
final _objc_msgSend_1433 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_activePrimaryConstituentDeviceSwitchingBehavior =
    objc.registerName("activePrimaryConstituentDeviceSwitchingBehavior");
late final _sel_activePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions =
    objc.registerName(
        "activePrimaryConstituentDeviceRestrictedSwitchingBehaviorConditions");
late final _sel_activePrimaryConstituentDevice =
    objc.registerName("activePrimaryConstituentDevice");
late final _sel_supportedFallbackPrimaryConstituentDevices =
    objc.registerName("supportedFallbackPrimaryConstituentDevices");
late final _sel_fallbackPrimaryConstituentDevices =
    objc.registerName("fallbackPrimaryConstituentDevices");
late final _sel_setFallbackPrimaryConstituentDevices_ =
    objc.registerName("setFallbackPrimaryConstituentDevices:");
late final _sel_hasFlash = objc.registerName("hasFlash");
late final _sel_isFlashAvailable = objc.registerName("isFlashAvailable");
late final _sel_isFlashActive = objc.registerName("isFlashActive");

enum AVCaptureFlashMode {
  AVCaptureFlashModeOff(0),
  AVCaptureFlashModeOn(1),
  AVCaptureFlashModeAuto(2);

  final int value;
  const AVCaptureFlashMode(this.value);

  static AVCaptureFlashMode fromValue(int value) => switch (value) {
        0 => AVCaptureFlashModeOff,
        1 => AVCaptureFlashModeOn,
        2 => AVCaptureFlashModeAuto,
        _ =>
          throw ArgumentError("Unknown value for AVCaptureFlashMode: $value"),
      };
}

late final _sel_isFlashModeSupported_ =
    objc.registerName("isFlashModeSupported:");
final _objc_msgSend_1434 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_flashMode = objc.registerName("flashMode");
final _objc_msgSend_1435 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFlashMode_ = objc.registerName("setFlashMode:");
final _objc_msgSend_1436 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_hasTorch = objc.registerName("hasTorch");
late final _sel_isTorchAvailable = objc.registerName("isTorchAvailable");
late final _sel_isTorchActive = objc.registerName("isTorchActive");
late final _sel_torchLevel = objc.registerName("torchLevel");

enum AVCaptureTorchMode {
  AVCaptureTorchModeOff(0),
  AVCaptureTorchModeOn(1),
  AVCaptureTorchModeAuto(2);

  final int value;
  const AVCaptureTorchMode(this.value);

  static AVCaptureTorchMode fromValue(int value) => switch (value) {
        0 => AVCaptureTorchModeOff,
        1 => AVCaptureTorchModeOn,
        2 => AVCaptureTorchModeAuto,
        _ =>
          throw ArgumentError("Unknown value for AVCaptureTorchMode: $value"),
      };
}

late final _sel_isTorchModeSupported_ =
    objc.registerName("isTorchModeSupported:");
final _objc_msgSend_1437 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_torchMode = objc.registerName("torchMode");
final _objc_msgSend_1438 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTorchMode_ = objc.registerName("setTorchMode:");
final _objc_msgSend_1439 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setTorchModeOnWithLevel_error_ =
    objc.registerName("setTorchModeOnWithLevel:error:");

enum AVCaptureFocusMode {
  AVCaptureFocusModeLocked(0),
  AVCaptureFocusModeAutoFocus(1),
  AVCaptureFocusModeContinuousAutoFocus(2);

  final int value;
  const AVCaptureFocusMode(this.value);

  static AVCaptureFocusMode fromValue(int value) => switch (value) {
        0 => AVCaptureFocusModeLocked,
        1 => AVCaptureFocusModeAutoFocus,
        2 => AVCaptureFocusModeContinuousAutoFocus,
        _ =>
          throw ArgumentError("Unknown value for AVCaptureFocusMode: $value"),
      };
}

late final _sel_isFocusModeSupported_ =
    objc.registerName("isFocusModeSupported:");
final _objc_msgSend_1440 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isLockingFocusWithCustomLensPositionSupported =
    objc.registerName("isLockingFocusWithCustomLensPositionSupported");
late final _sel_focusMode = objc.registerName("focusMode");
final _objc_msgSend_1441 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFocusMode_ = objc.registerName("setFocusMode:");
final _objc_msgSend_1442 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isFocusPointOfInterestSupported =
    objc.registerName("isFocusPointOfInterestSupported");
late final _sel_focusPointOfInterest =
    objc.registerName("focusPointOfInterest");
late final _sel_setFocusPointOfInterest_ =
    objc.registerName("setFocusPointOfInterest:");
late final _sel_isAdjustingFocus = objc.registerName("isAdjustingFocus");
late final _sel_isAutoFocusRangeRestrictionSupported =
    objc.registerName("isAutoFocusRangeRestrictionSupported");

enum AVCaptureAutoFocusRangeRestriction {
  AVCaptureAutoFocusRangeRestrictionNone(0),
  AVCaptureAutoFocusRangeRestrictionNear(1),
  AVCaptureAutoFocusRangeRestrictionFar(2);

  final int value;
  const AVCaptureAutoFocusRangeRestriction(this.value);

  static AVCaptureAutoFocusRangeRestriction fromValue(int value) =>
      switch (value) {
        0 => AVCaptureAutoFocusRangeRestrictionNone,
        1 => AVCaptureAutoFocusRangeRestrictionNear,
        2 => AVCaptureAutoFocusRangeRestrictionFar,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureAutoFocusRangeRestriction: $value"),
      };
}

late final _sel_autoFocusRangeRestriction =
    objc.registerName("autoFocusRangeRestriction");
final _objc_msgSend_1443 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAutoFocusRangeRestriction_ =
    objc.registerName("setAutoFocusRangeRestriction:");
final _objc_msgSend_1444 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isSmoothAutoFocusSupported =
    objc.registerName("isSmoothAutoFocusSupported");
late final _sel_isSmoothAutoFocusEnabled =
    objc.registerName("isSmoothAutoFocusEnabled");
late final _sel_setSmoothAutoFocusEnabled_ =
    objc.registerName("setSmoothAutoFocusEnabled:");
late final _sel_automaticallyAdjustsFaceDrivenAutoFocusEnabled =
    objc.registerName("automaticallyAdjustsFaceDrivenAutoFocusEnabled");
late final _sel_setAutomaticallyAdjustsFaceDrivenAutoFocusEnabled_ =
    objc.registerName("setAutomaticallyAdjustsFaceDrivenAutoFocusEnabled:");
late final _sel_isFaceDrivenAutoFocusEnabled =
    objc.registerName("isFaceDrivenAutoFocusEnabled");
late final _sel_setFaceDrivenAutoFocusEnabled_ =
    objc.registerName("setFaceDrivenAutoFocusEnabled:");
late final _sel_lensPosition = objc.registerName("lensPosition");
late final _sel_setFocusModeLockedWithLensPosition_completionHandler_ =
    objc.registerName("setFocusModeLockedWithLensPosition:completionHandler:");
final _objc_msgSend_1445 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Float,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_minimumFocusDistance =
    objc.registerName("minimumFocusDistance");

enum AVCaptureExposureMode {
  AVCaptureExposureModeLocked(0),
  AVCaptureExposureModeAutoExpose(1),
  AVCaptureExposureModeContinuousAutoExposure(2),
  AVCaptureExposureModeCustom(3);

  final int value;
  const AVCaptureExposureMode(this.value);

  static AVCaptureExposureMode fromValue(int value) => switch (value) {
        0 => AVCaptureExposureModeLocked,
        1 => AVCaptureExposureModeAutoExpose,
        2 => AVCaptureExposureModeContinuousAutoExposure,
        3 => AVCaptureExposureModeCustom,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureExposureMode: $value"),
      };
}

late final _sel_isExposureModeSupported_ =
    objc.registerName("isExposureModeSupported:");
final _objc_msgSend_1446 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_exposureMode = objc.registerName("exposureMode");
final _objc_msgSend_1447 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setExposureMode_ = objc.registerName("setExposureMode:");
final _objc_msgSend_1448 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isExposurePointOfInterestSupported =
    objc.registerName("isExposurePointOfInterestSupported");
late final _sel_exposurePointOfInterest =
    objc.registerName("exposurePointOfInterest");
late final _sel_setExposurePointOfInterest_ =
    objc.registerName("setExposurePointOfInterest:");
late final _sel_automaticallyAdjustsFaceDrivenAutoExposureEnabled =
    objc.registerName("automaticallyAdjustsFaceDrivenAutoExposureEnabled");
late final _sel_setAutomaticallyAdjustsFaceDrivenAutoExposureEnabled_ =
    objc.registerName("setAutomaticallyAdjustsFaceDrivenAutoExposureEnabled:");
late final _sel_isFaceDrivenAutoExposureEnabled =
    objc.registerName("isFaceDrivenAutoExposureEnabled");
late final _sel_setFaceDrivenAutoExposureEnabled_ =
    objc.registerName("setFaceDrivenAutoExposureEnabled:");
late final _sel_activeMaxExposureDuration =
    objc.registerName("activeMaxExposureDuration");
late final _sel_setActiveMaxExposureDuration_ =
    objc.registerName("setActiveMaxExposureDuration:");
late final _sel_isAdjustingExposure = objc.registerName("isAdjustingExposure");
late final _sel_lensAperture = objc.registerName("lensAperture");
late final _sel_exposureDuration = objc.registerName("exposureDuration");
late final _sel_ISO = objc.registerName("ISO");
late final _sel_setExposureModeCustomWithDuration_ISO_completionHandler_ = objc
    .registerName("setExposureModeCustomWithDuration:ISO:completionHandler:");
final _objc_msgSend_1449 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CMTime,
                ffi.Float,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CMTime,
            double,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_exposureTargetOffset =
    objc.registerName("exposureTargetOffset");
late final _sel_exposureTargetBias = objc.registerName("exposureTargetBias");
late final _sel_minExposureTargetBias =
    objc.registerName("minExposureTargetBias");
late final _sel_maxExposureTargetBias =
    objc.registerName("maxExposureTargetBias");
late final _sel_setExposureTargetBias_completionHandler_ =
    objc.registerName("setExposureTargetBias:completionHandler:");
late final _sel_isGlobalToneMappingEnabled =
    objc.registerName("isGlobalToneMappingEnabled");
late final _sel_setGlobalToneMappingEnabled_ =
    objc.registerName("setGlobalToneMappingEnabled:");

enum AVCaptureWhiteBalanceMode {
  AVCaptureWhiteBalanceModeLocked(0),
  AVCaptureWhiteBalanceModeAutoWhiteBalance(1),
  AVCaptureWhiteBalanceModeContinuousAutoWhiteBalance(2);

  final int value;
  const AVCaptureWhiteBalanceMode(this.value);

  static AVCaptureWhiteBalanceMode fromValue(int value) => switch (value) {
        0 => AVCaptureWhiteBalanceModeLocked,
        1 => AVCaptureWhiteBalanceModeAutoWhiteBalance,
        2 => AVCaptureWhiteBalanceModeContinuousAutoWhiteBalance,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureWhiteBalanceMode: $value"),
      };
}

late final _sel_isWhiteBalanceModeSupported_ =
    objc.registerName("isWhiteBalanceModeSupported:");
final _objc_msgSend_1450 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isLockingWhiteBalanceWithCustomDeviceGainsSupported =
    objc.registerName("isLockingWhiteBalanceWithCustomDeviceGainsSupported");
late final _sel_whiteBalanceMode = objc.registerName("whiteBalanceMode");
final _objc_msgSend_1451 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setWhiteBalanceMode_ =
    objc.registerName("setWhiteBalanceMode:");
final _objc_msgSend_1452 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isAdjustingWhiteBalance =
    objc.registerName("isAdjustingWhiteBalance");

final class AVCaptureWhiteBalanceGains extends ffi.Struct {
  @ffi.Float()
  external double redGain;

  @ffi.Float()
  external double greenGain;

  @ffi.Float()
  external double blueGain;
}

late final _sel_deviceWhiteBalanceGains =
    objc.registerName("deviceWhiteBalanceGains");
final _objc_msgSend_1453 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVCaptureWhiteBalanceGains Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        AVCaptureWhiteBalanceGains Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1453Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVCaptureWhiteBalanceGains>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<AVCaptureWhiteBalanceGains>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_grayWorldDeviceWhiteBalanceGains =
    objc.registerName("grayWorldDeviceWhiteBalanceGains");
late final _sel_maxWhiteBalanceGain = objc.registerName("maxWhiteBalanceGain");
late final _sel_setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains_completionHandler_ =
    objc.registerName(
        "setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:completionHandler:");
final _objc_msgSend_1454 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AVCaptureWhiteBalanceGains,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AVCaptureWhiteBalanceGains,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

final class AVCaptureWhiteBalanceChromaticityValues extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

late final _sel_chromaticityValuesForDeviceWhiteBalanceGains_ =
    objc.registerName("chromaticityValuesForDeviceWhiteBalanceGains:");
final _objc_msgSend_1455 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVCaptureWhiteBalanceChromaticityValues Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AVCaptureWhiteBalanceGains)>>()
    .asFunction<
        AVCaptureWhiteBalanceChromaticityValues Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AVCaptureWhiteBalanceGains)>();
final _objc_msgSend_1455Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVCaptureWhiteBalanceChromaticityValues>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AVCaptureWhiteBalanceGains)>>()
    .asFunction<
        void Function(
            ffi.Pointer<AVCaptureWhiteBalanceChromaticityValues>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AVCaptureWhiteBalanceGains)>();
late final _sel_deviceWhiteBalanceGainsForChromaticityValues_ =
    objc.registerName("deviceWhiteBalanceGainsForChromaticityValues:");
final _objc_msgSend_1456 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVCaptureWhiteBalanceGains Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AVCaptureWhiteBalanceChromaticityValues)>>()
    .asFunction<
        AVCaptureWhiteBalanceGains Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AVCaptureWhiteBalanceChromaticityValues)>();
final _objc_msgSend_1456Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVCaptureWhiteBalanceGains>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AVCaptureWhiteBalanceChromaticityValues)>>()
    .asFunction<
        void Function(
            ffi.Pointer<AVCaptureWhiteBalanceGains>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AVCaptureWhiteBalanceChromaticityValues)>();

final class AVCaptureWhiteBalanceTemperatureAndTintValues extends ffi.Struct {
  @ffi.Float()
  external double temperature;

  @ffi.Float()
  external double tint;
}

late final _sel_temperatureAndTintValuesForDeviceWhiteBalanceGains_ =
    objc.registerName("temperatureAndTintValuesForDeviceWhiteBalanceGains:");
final _objc_msgSend_1457 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVCaptureWhiteBalanceTemperatureAndTintValues Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AVCaptureWhiteBalanceGains)>>()
    .asFunction<
        AVCaptureWhiteBalanceTemperatureAndTintValues Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AVCaptureWhiteBalanceGains)>();
final _objc_msgSend_1457Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVCaptureWhiteBalanceTemperatureAndTintValues>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AVCaptureWhiteBalanceGains)>>()
    .asFunction<
        void Function(
            ffi.Pointer<AVCaptureWhiteBalanceTemperatureAndTintValues>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AVCaptureWhiteBalanceGains)>();
late final _sel_deviceWhiteBalanceGainsForTemperatureAndTintValues_ =
    objc.registerName("deviceWhiteBalanceGainsForTemperatureAndTintValues:");
final _objc_msgSend_1458 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            AVCaptureWhiteBalanceGains Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AVCaptureWhiteBalanceTemperatureAndTintValues)>>()
    .asFunction<
        AVCaptureWhiteBalanceGains Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AVCaptureWhiteBalanceTemperatureAndTintValues)>();
final _objc_msgSend_1458Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<AVCaptureWhiteBalanceGains>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                AVCaptureWhiteBalanceTemperatureAndTintValues)>>()
    .asFunction<
        void Function(
            ffi.Pointer<AVCaptureWhiteBalanceGains>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            AVCaptureWhiteBalanceTemperatureAndTintValues)>();
late final _sel_isSubjectAreaChangeMonitoringEnabled =
    objc.registerName("isSubjectAreaChangeMonitoringEnabled");
late final _sel_setSubjectAreaChangeMonitoringEnabled_ =
    objc.registerName("setSubjectAreaChangeMonitoringEnabled:");
late final _sel_isLowLightBoostSupported =
    objc.registerName("isLowLightBoostSupported");
late final _sel_isLowLightBoostEnabled =
    objc.registerName("isLowLightBoostEnabled");
late final _sel_automaticallyEnablesLowLightBoostWhenAvailable =
    objc.registerName("automaticallyEnablesLowLightBoostWhenAvailable");
late final _sel_setAutomaticallyEnablesLowLightBoostWhenAvailable_ =
    objc.registerName("setAutomaticallyEnablesLowLightBoostWhenAvailable:");
late final _sel_videoZoomFactor = objc.registerName("videoZoomFactor");
late final _sel_setVideoZoomFactor_ = objc.registerName("setVideoZoomFactor:");
late final _sel_rampToVideoZoomFactor_withRate_ =
    objc.registerName("rampToVideoZoomFactor:withRate:");
final _objc_msgSend_1459 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double, ffi.Float)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double)>();
late final _sel_isRampingVideoZoom = objc.registerName("isRampingVideoZoom");
late final _sel_cancelVideoZoomRamp = objc.registerName("cancelVideoZoomRamp");
late final _sel_dualCameraSwitchOverVideoZoomFactor =
    objc.registerName("dualCameraSwitchOverVideoZoomFactor");
late final _sel_displayVideoZoomFactorMultiplier =
    objc.registerName("displayVideoZoomFactorMultiplier");

enum AVAuthorizationStatus {
  AVAuthorizationStatusNotDetermined(0),
  AVAuthorizationStatusRestricted(1),
  AVAuthorizationStatusDenied(2),
  AVAuthorizationStatusAuthorized(3);

  final int value;
  const AVAuthorizationStatus(this.value);

  static AVAuthorizationStatus fromValue(int value) => switch (value) {
        0 => AVAuthorizationStatusNotDetermined,
        1 => AVAuthorizationStatusRestricted,
        2 => AVAuthorizationStatusDenied,
        3 => AVAuthorizationStatusAuthorized,
        _ => throw ArgumentError(
            "Unknown value for AVAuthorizationStatus: $value"),
      };
}

late final _sel_authorizationStatusForMediaType_ =
    objc.registerName("authorizationStatusForMediaType:");
final _objc_msgSend_1460 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_requestAccessForMediaType_completionHandler_ =
    objc.registerName("requestAccessForMediaType:completionHandler:");
late final _sel_transportControlsSupported =
    objc.registerName("transportControlsSupported");

enum AVCaptureDeviceTransportControlsPlaybackMode {
  AVCaptureDeviceTransportControlsNotPlayingMode(0),
  AVCaptureDeviceTransportControlsPlayingMode(1);

  final int value;
  const AVCaptureDeviceTransportControlsPlaybackMode(this.value);

  static AVCaptureDeviceTransportControlsPlaybackMode fromValue(int value) =>
      switch (value) {
        0 => AVCaptureDeviceTransportControlsNotPlayingMode,
        1 => AVCaptureDeviceTransportControlsPlayingMode,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureDeviceTransportControlsPlaybackMode: $value"),
      };
}

late final _sel_transportControlsPlaybackMode =
    objc.registerName("transportControlsPlaybackMode");
final _objc_msgSend_1461 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_transportControlsSpeed =
    objc.registerName("transportControlsSpeed");
late final _sel_setTransportControlsPlaybackMode_speed_ =
    objc.registerName("setTransportControlsPlaybackMode:speed:");
final _objc_msgSend_1462 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, ffi.Float)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, double)>();
late final _sel_automaticallyAdjustsVideoHDREnabled =
    objc.registerName("automaticallyAdjustsVideoHDREnabled");
late final _sel_setAutomaticallyAdjustsVideoHDREnabled_ =
    objc.registerName("setAutomaticallyAdjustsVideoHDREnabled:");
late final _sel_isVideoHDREnabled = objc.registerName("isVideoHDREnabled");
late final _sel_setVideoHDREnabled_ = objc.registerName("setVideoHDREnabled:");

enum AVCaptureColorSpace {
  AVCaptureColorSpace_sRGB(0),
  AVCaptureColorSpace_P3_D65(1),
  AVCaptureColorSpace_HLG_BT2020(2),
  AVCaptureColorSpace_AppleLog(3);

  final int value;
  const AVCaptureColorSpace(this.value);

  static AVCaptureColorSpace fromValue(int value) => switch (value) {
        0 => AVCaptureColorSpace_sRGB,
        1 => AVCaptureColorSpace_P3_D65,
        2 => AVCaptureColorSpace_HLG_BT2020,
        3 => AVCaptureColorSpace_AppleLog,
        _ =>
          throw ArgumentError("Unknown value for AVCaptureColorSpace: $value"),
      };
}

late final _sel_activeColorSpace = objc.registerName("activeColorSpace");
final _objc_msgSend_1463 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setActiveColorSpace_ =
    objc.registerName("setActiveColorSpace:");
final _objc_msgSend_1464 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_activeDepthDataFormat =
    objc.registerName("activeDepthDataFormat");
final _objc_msgSend_1465 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setActiveDepthDataFormat_ =
    objc.registerName("setActiveDepthDataFormat:");
final _objc_msgSend_1466 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_activeDepthDataMinFrameDuration =
    objc.registerName("activeDepthDataMinFrameDuration");
late final _sel_setActiveDepthDataMinFrameDuration_ =
    objc.registerName("setActiveDepthDataMinFrameDuration:");
late final _sel_minAvailableVideoZoomFactor =
    objc.registerName("minAvailableVideoZoomFactor");
late final _sel_maxAvailableVideoZoomFactor =
    objc.registerName("maxAvailableVideoZoomFactor");
late final _sel_isGeometricDistortionCorrectionSupported =
    objc.registerName("isGeometricDistortionCorrectionSupported");
late final _sel_isGeometricDistortionCorrectionEnabled =
    objc.registerName("isGeometricDistortionCorrectionEnabled");
late final _sel_setGeometricDistortionCorrectionEnabled_ =
    objc.registerName("setGeometricDistortionCorrectionEnabled:");
late final _sel_extrinsicMatrixFromDevice_toDevice_ =
    objc.registerName("extrinsicMatrixFromDevice:toDevice:");
final _objc_msgSend_1467 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

enum AVCaptureCenterStageControlMode {
  AVCaptureCenterStageControlModeUser(0),
  AVCaptureCenterStageControlModeApp(1),
  AVCaptureCenterStageControlModeCooperative(2);

  final int value;
  const AVCaptureCenterStageControlMode(this.value);

  static AVCaptureCenterStageControlMode fromValue(int value) =>
      switch (value) {
        0 => AVCaptureCenterStageControlModeUser,
        1 => AVCaptureCenterStageControlModeApp,
        2 => AVCaptureCenterStageControlModeCooperative,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureCenterStageControlMode: $value"),
      };
}

late final _sel_centerStageControlMode =
    objc.registerName("centerStageControlMode");
final _objc_msgSend_1468 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCenterStageControlMode_ =
    objc.registerName("setCenterStageControlMode:");
final _objc_msgSend_1469 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isCenterStageEnabled =
    objc.registerName("isCenterStageEnabled");
late final _sel_setCenterStageEnabled_ =
    objc.registerName("setCenterStageEnabled:");
late final _sel_isCenterStageActive = objc.registerName("isCenterStageActive");
late final _sel_isCenterStageRectOfInterestSupported =
    objc.registerName("isCenterStageRectOfInterestSupported");
late final _sel_centerStageRectOfInterest =
    objc.registerName("centerStageRectOfInterest");
late final _sel_setCenterStageRectOfInterest_ =
    objc.registerName("setCenterStageRectOfInterest:");
late final _sel_isPortraitEffectEnabled =
    objc.registerName("isPortraitEffectEnabled");
late final _sel_isPortraitEffectActive =
    objc.registerName("isPortraitEffectActive");
late final _sel_reactionEffectsEnabled =
    objc.registerName("reactionEffectsEnabled");
late final _sel_reactionEffectGesturesEnabled =
    objc.registerName("reactionEffectGesturesEnabled");
late final _sel_canPerformReactionEffects =
    objc.registerName("canPerformReactionEffects");
late final _sel_availableReactionTypes =
    objc.registerName("availableReactionTypes");
late final _sel_performEffectForReaction_ =
    objc.registerName("performEffectForReaction:");
late final _sel_reactionEffectsInProgress =
    objc.registerName("reactionEffectsInProgress");
late final _sel_isContinuityCamera = objc.registerName("isContinuityCamera");
late final _sel_companionDeskViewCamera =
    objc.registerName("companionDeskViewCamera");

enum AVCaptureMicrophoneMode {
  AVCaptureMicrophoneModeStandard(0),
  AVCaptureMicrophoneModeWideSpectrum(1),
  AVCaptureMicrophoneModeVoiceIsolation(2);

  final int value;
  const AVCaptureMicrophoneMode(this.value);

  static AVCaptureMicrophoneMode fromValue(int value) => switch (value) {
        0 => AVCaptureMicrophoneModeStandard,
        1 => AVCaptureMicrophoneModeWideSpectrum,
        2 => AVCaptureMicrophoneModeVoiceIsolation,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureMicrophoneMode: $value"),
      };
}

late final _sel_preferredMicrophoneMode =
    objc.registerName("preferredMicrophoneMode");
final _objc_msgSend_1470 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_activeMicrophoneMode =
    objc.registerName("activeMicrophoneMode");

enum AVCaptureSystemUserInterface {
  AVCaptureSystemUserInterfaceVideoEffects(1),
  AVCaptureSystemUserInterfaceMicrophoneModes(2);

  final int value;
  const AVCaptureSystemUserInterface(this.value);

  static AVCaptureSystemUserInterface fromValue(int value) => switch (value) {
        1 => AVCaptureSystemUserInterfaceVideoEffects,
        2 => AVCaptureSystemUserInterfaceMicrophoneModes,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureSystemUserInterface: $value"),
      };
}

late final _sel_showSystemUserInterface_ =
    objc.registerName("showSystemUserInterface:");
final _objc_msgSend_1471 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isStudioLightEnabled =
    objc.registerName("isStudioLightEnabled");
late final _sel_isStudioLightActive = objc.registerName("isStudioLightActive");

/// AVMetadataMachineReadableCodeObject
class AVMetadataMachineReadableCodeObject extends AVMetadataObject {
  AVMetadataMachineReadableCodeObject._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMetadataMachineReadableCodeObject] that points to the same underlying object as [other].
  AVMetadataMachineReadableCodeObject.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMetadataMachineReadableCodeObject] that wraps the given raw object pointer.
  AVMetadataMachineReadableCodeObject.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMetadataMachineReadableCodeObject].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVMetadataMachineReadableCodeObject);
  }

  /// corners
  objc.NSArray get corners {
    final _ret = _objc_msgSend_33(this.pointer, _sel_corners);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// stringValue
  objc.NSString? get stringValue {
    final _ret = _objc_msgSend_20(this.pointer, _sel_stringValue);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// descriptor
  CIBarcodeDescriptor? get descriptor {
    final _ret = _objc_msgSend_1198(this.pointer, _sel_descriptor);
    return _ret.address == 0
        ? null
        : CIBarcodeDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// init
  AVMetadataMachineReadableCodeObject init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMetadataMachineReadableCodeObject.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVMetadataMachineReadableCodeObject new1() {
    final _ret =
        _objc_msgSend_19(_class_AVMetadataMachineReadableCodeObject, _sel_new);
    return AVMetadataMachineReadableCodeObject.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVMetadataMachineReadableCodeObject allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVMetadataMachineReadableCodeObject, _sel_allocWithZone_, zone);
    return AVMetadataMachineReadableCodeObject.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVMetadataMachineReadableCodeObject alloc() {
    final _ret = _objc_msgSend_19(
        _class_AVMetadataMachineReadableCodeObject, _sel_alloc);
    return AVMetadataMachineReadableCodeObject.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMetadataMachineReadableCodeObject,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMetadataMachineReadableCodeObject,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVMetadataMachineReadableCodeObject,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVMetadataMachineReadableCodeObject, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMetadataMachineReadableCodeObject,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMetadataMachineReadableCodeObject,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMetadataMachineReadableCodeObject,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVMetadataMachineReadableCodeObject,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_AVMetadataMachineReadableCodeObject,
        _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMetadataMachineReadableCodeObject =
    objc.getClass("AVMetadataMachineReadableCodeObject");
late final _sel_corners = objc.registerName("corners");

/// AVMetadataObject
class AVMetadataObject extends objc.NSObject {
  AVMetadataObject._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVMetadataObject] that points to the same underlying object as [other].
  AVMetadataObject.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVMetadataObject] that wraps the given raw object pointer.
  AVMetadataObject.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVMetadataObject].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVMetadataObject);
  }

  /// init
  AVMetadataObject init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVMetadataObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVMetadataObject new1() {
    final _ret = _objc_msgSend_19(_class_AVMetadataObject, _sel_new);
    return AVMetadataObject.castFromPointer(_ret, retain: false, release: true);
  }

  /// time
  void getTime(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_time)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_time);
  }

  /// duration
  void getDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_duration)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_duration);
  }

  /// bounds
  void getBounds(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_793Stret(stret, this.pointer, _sel_bounds)
        : stret.ref = _objc_msgSend_793(this.pointer, _sel_bounds);
  }

  /// type
  objc.NSString get type {
    final _ret = _objc_msgSend_11(this.pointer, _sel_type);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVMetadataObject allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVMetadataObject, _sel_allocWithZone_, zone);
    return AVMetadataObject.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVMetadataObject alloc() {
    final _ret = _objc_msgSend_19(_class_AVMetadataObject, _sel_alloc);
    return AVMetadataObject.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVMetadataObject,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVMetadataObject,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVMetadataObject, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVMetadataObject, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVMetadataObject,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVMetadataObject,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVMetadataObject,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVMetadataObject, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVMetadataObject, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVMetadataObject = objc.getClass("AVMetadataObject");

/// AVCapturePhotoOutput
class AVCapturePhotoOutput extends AVCaptureOutput {
  AVCapturePhotoOutput._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCapturePhotoOutput] that points to the same underlying object as [other].
  AVCapturePhotoOutput.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCapturePhotoOutput] that wraps the given raw object pointer.
  AVCapturePhotoOutput.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCapturePhotoOutput].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCapturePhotoOutput);
  }

  /// init
  AVCapturePhotoOutput init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCapturePhotoOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCapturePhotoOutput new1() {
    final _ret = _objc_msgSend_19(_class_AVCapturePhotoOutput, _sel_new);
    return AVCapturePhotoOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// capturePhotoWithSettings:delegate:
  void capturePhotoWithSettings_delegate_(
      AVCapturePhotoSettings settings, objc.ObjCObjectBase delegate) {
    _objc_msgSend_1478(this.pointer, _sel_capturePhotoWithSettings_delegate_,
        settings.pointer, delegate.pointer);
  }

  /// preparedPhotoSettingsArray
  objc.NSArray get preparedPhotoSettingsArray {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_preparedPhotoSettingsArray);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPreparedPhotoSettingsArray:completionHandler:
  void setPreparedPhotoSettingsArray_completionHandler_(
      objc.NSArray preparedPhotoSettingsArray,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>?
          completionHandler) {
    _objc_msgSend_1479(
        this.pointer,
        _sel_setPreparedPhotoSettingsArray_completionHandler_,
        preparedPhotoSettingsArray.pointer,
        completionHandler?.pointer ?? ffi.nullptr);
  }

  /// availablePhotoPixelFormatTypes
  objc.NSArray get availablePhotoPixelFormatTypes {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_availablePhotoPixelFormatTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// availablePhotoCodecTypes
  objc.NSArray get availablePhotoCodecTypes {
    final _ret = _objc_msgSend_33(this.pointer, _sel_availablePhotoCodecTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isAppleProRAWSupported
  bool get appleProRAWSupported {
    return _objc_msgSend_13(this.pointer, _sel_isAppleProRAWSupported);
  }

  /// isAppleProRAWEnabled
  bool get appleProRAWEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isAppleProRAWEnabled);
  }

  /// setAppleProRAWEnabled:
  set appleProRAWEnabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setAppleProRAWEnabled_, value);
  }

  /// isBayerRAWPixelFormat:
  static bool isBayerRAWPixelFormat_(int pixelFormat) {
    return _objc_msgSend_648(
        _class_AVCapturePhotoOutput, _sel_isBayerRAWPixelFormat_, pixelFormat);
  }

  /// isAppleProRAWPixelFormat:
  static bool isAppleProRAWPixelFormat_(int pixelFormat) {
    return _objc_msgSend_648(_class_AVCapturePhotoOutput,
        _sel_isAppleProRAWPixelFormat_, pixelFormat);
  }

  /// availableRawPhotoPixelFormatTypes
  objc.NSArray get availableRawPhotoPixelFormatTypes {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_availableRawPhotoPixelFormatTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// availablePhotoFileTypes
  objc.NSArray get availablePhotoFileTypes {
    final _ret = _objc_msgSend_33(this.pointer, _sel_availablePhotoFileTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableRawPhotoFileTypes
  objc.NSArray get availableRawPhotoFileTypes {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_availableRawPhotoFileTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportedPhotoPixelFormatTypesForFileType:
  objc.NSArray supportedPhotoPixelFormatTypesForFileType_(
      objc.NSString fileType) {
    final _ret = _objc_msgSend_390(this.pointer,
        _sel_supportedPhotoPixelFormatTypesForFileType_, fileType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportedPhotoCodecTypesForFileType:
  objc.NSArray supportedPhotoCodecTypesForFileType_(objc.NSString fileType) {
    final _ret = _objc_msgSend_390(this.pointer,
        _sel_supportedPhotoCodecTypesForFileType_, fileType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportedRawPhotoPixelFormatTypesForFileType:
  objc.NSArray supportedRawPhotoPixelFormatTypesForFileType_(
      objc.NSString fileType) {
    final _ret = _objc_msgSend_390(this.pointer,
        _sel_supportedRawPhotoPixelFormatTypesForFileType_, fileType.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// maxPhotoQualityPrioritization
  AVCapturePhotoQualityPrioritization get maxPhotoQualityPrioritization {
    final _ret =
        _objc_msgSend_1475(this.pointer, _sel_maxPhotoQualityPrioritization);
    return AVCapturePhotoQualityPrioritization.fromValue(_ret);
  }

  /// setMaxPhotoQualityPrioritization:
  set maxPhotoQualityPrioritization(AVCapturePhotoQualityPrioritization value) {
    return _objc_msgSend_1476(
        this.pointer, _sel_setMaxPhotoQualityPrioritization_, value.value);
  }

  /// isFastCapturePrioritizationSupported
  bool get fastCapturePrioritizationSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isFastCapturePrioritizationSupported);
  }

  /// setFastCapturePrioritizationSupported:
  set fastCapturePrioritizationSupported(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setFastCapturePrioritizationSupported_, value);
  }

  /// isFastCapturePrioritizationEnabled
  bool get fastCapturePrioritizationEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isFastCapturePrioritizationEnabled);
  }

  /// setFastCapturePrioritizationEnabled:
  set fastCapturePrioritizationEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setFastCapturePrioritizationEnabled_, value);
  }

  /// isAutoDeferredPhotoDeliverySupported
  bool get autoDeferredPhotoDeliverySupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isAutoDeferredPhotoDeliverySupported);
  }

  /// isAutoDeferredPhotoDeliveryEnabled
  bool get autoDeferredPhotoDeliveryEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isAutoDeferredPhotoDeliveryEnabled);
  }

  /// setAutoDeferredPhotoDeliveryEnabled:
  set autoDeferredPhotoDeliveryEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutoDeferredPhotoDeliveryEnabled_, value);
  }

  /// isStillImageStabilizationSupported
  bool get stillImageStabilizationSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isStillImageStabilizationSupported);
  }

  /// isStillImageStabilizationScene
  bool get isStillImageStabilizationScene {
    return _objc_msgSend_13(this.pointer, _sel_isStillImageStabilizationScene);
  }

  /// isVirtualDeviceFusionSupported
  bool get virtualDeviceFusionSupported {
    return _objc_msgSend_13(this.pointer, _sel_isVirtualDeviceFusionSupported);
  }

  /// isDualCameraFusionSupported
  bool get dualCameraFusionSupported {
    return _objc_msgSend_13(this.pointer, _sel_isDualCameraFusionSupported);
  }

  /// isVirtualDeviceConstituentPhotoDeliverySupported
  bool get virtualDeviceConstituentPhotoDeliverySupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isVirtualDeviceConstituentPhotoDeliverySupported);
  }

  /// isDualCameraDualPhotoDeliverySupported
  bool get dualCameraDualPhotoDeliverySupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isDualCameraDualPhotoDeliverySupported);
  }

  /// isVirtualDeviceConstituentPhotoDeliveryEnabled
  bool get virtualDeviceConstituentPhotoDeliveryEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isVirtualDeviceConstituentPhotoDeliveryEnabled);
  }

  /// setVirtualDeviceConstituentPhotoDeliveryEnabled:
  set virtualDeviceConstituentPhotoDeliveryEnabled(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setVirtualDeviceConstituentPhotoDeliveryEnabled_, value);
  }

  /// isDualCameraDualPhotoDeliveryEnabled
  bool get dualCameraDualPhotoDeliveryEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isDualCameraDualPhotoDeliveryEnabled);
  }

  /// setDualCameraDualPhotoDeliveryEnabled:
  set dualCameraDualPhotoDeliveryEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setDualCameraDualPhotoDeliveryEnabled_, value);
  }

  /// isCameraCalibrationDataDeliverySupported
  bool get cameraCalibrationDataDeliverySupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isCameraCalibrationDataDeliverySupported);
  }

  /// supportedFlashModes
  objc.NSArray get supportedFlashModes {
    final _ret = _objc_msgSend_33(this.pointer, _sel_supportedFlashModes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isAutoRedEyeReductionSupported
  bool get autoRedEyeReductionSupported {
    return _objc_msgSend_13(this.pointer, _sel_isAutoRedEyeReductionSupported);
  }

  /// isFlashScene
  bool get isFlashScene {
    return _objc_msgSend_13(this.pointer, _sel_isFlashScene);
  }

  /// photoSettingsForSceneMonitoring
  AVCapturePhotoSettings? get photoSettingsForSceneMonitoring {
    final _ret =
        _objc_msgSend_1480(this.pointer, _sel_photoSettingsForSceneMonitoring);
    return _ret.address == 0
        ? null
        : AVCapturePhotoSettings.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setPhotoSettingsForSceneMonitoring:
  set photoSettingsForSceneMonitoring(AVCapturePhotoSettings? value) {
    return _objc_msgSend_1481(
        this.pointer,
        _sel_setPhotoSettingsForSceneMonitoring_,
        value?.pointer ?? ffi.nullptr);
  }

  /// isHighResolutionCaptureEnabled
  bool get highResolutionCaptureEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isHighResolutionCaptureEnabled);
  }

  /// setHighResolutionCaptureEnabled:
  set highResolutionCaptureEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setHighResolutionCaptureEnabled_, value);
  }

  /// maxPhotoDimensions
  void getMaxPhotoDimensions(ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(stret, this.pointer, _sel_maxPhotoDimensions)
        : stret.ref = _objc_msgSend_1418(this.pointer, _sel_maxPhotoDimensions);
  }

  /// setMaxPhotoDimensions:
  set maxPhotoDimensions(CMVideoDimensions value) {
    return _objc_msgSend_1477(this.pointer, _sel_setMaxPhotoDimensions_, value);
  }

  /// maxBracketedCapturePhotoCount
  int get maxBracketedCapturePhotoCount {
    return _objc_msgSend_57(this.pointer, _sel_maxBracketedCapturePhotoCount);
  }

  /// isLensStabilizationDuringBracketedCaptureSupported
  bool get lensStabilizationDuringBracketedCaptureSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isLensStabilizationDuringBracketedCaptureSupported);
  }

  /// isLivePhotoCaptureSupported
  bool get livePhotoCaptureSupported {
    return _objc_msgSend_13(this.pointer, _sel_isLivePhotoCaptureSupported);
  }

  /// isLivePhotoCaptureEnabled
  bool get livePhotoCaptureEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isLivePhotoCaptureEnabled);
  }

  /// setLivePhotoCaptureEnabled:
  set livePhotoCaptureEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setLivePhotoCaptureEnabled_, value);
  }

  /// isLivePhotoCaptureSuspended
  bool get livePhotoCaptureSuspended {
    return _objc_msgSend_13(this.pointer, _sel_isLivePhotoCaptureSuspended);
  }

  /// setLivePhotoCaptureSuspended:
  set livePhotoCaptureSuspended(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setLivePhotoCaptureSuspended_, value);
  }

  /// preservesLivePhotoCaptureSuspendedOnSessionStop
  bool get preservesLivePhotoCaptureSuspendedOnSessionStop {
    return _objc_msgSend_13(
        this.pointer, _sel_preservesLivePhotoCaptureSuspendedOnSessionStop);
  }

  /// setPreservesLivePhotoCaptureSuspendedOnSessionStop:
  set preservesLivePhotoCaptureSuspendedOnSessionStop(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setPreservesLivePhotoCaptureSuspendedOnSessionStop_, value);
  }

  /// isLivePhotoAutoTrimmingEnabled
  bool get livePhotoAutoTrimmingEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isLivePhotoAutoTrimmingEnabled);
  }

  /// setLivePhotoAutoTrimmingEnabled:
  set livePhotoAutoTrimmingEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setLivePhotoAutoTrimmingEnabled_, value);
  }

  /// availableLivePhotoVideoCodecTypes
  objc.NSArray get availableLivePhotoVideoCodecTypes {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_availableLivePhotoVideoCodecTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// JPEGPhotoDataRepresentationForJPEGSampleBuffer:previewPhotoSampleBuffer:
  static objc.NSData?
      JPEGPhotoDataRepresentationForJPEGSampleBuffer_previewPhotoSampleBuffer_(
          ffi.Pointer<opaqueCMSampleBuffer> JPEGSampleBuffer,
          ffi.Pointer<opaqueCMSampleBuffer> previewPhotoSampleBuffer) {
    final _ret = _objc_msgSend_1482(
        _class_AVCapturePhotoOutput,
        _sel_JPEGPhotoDataRepresentationForJPEGSampleBuffer_previewPhotoSampleBuffer_,
        JPEGSampleBuffer,
        previewPhotoSampleBuffer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// DNGPhotoDataRepresentationForRawSampleBuffer:previewPhotoSampleBuffer:
  static objc.NSData?
      DNGPhotoDataRepresentationForRawSampleBuffer_previewPhotoSampleBuffer_(
          ffi.Pointer<opaqueCMSampleBuffer> rawSampleBuffer,
          ffi.Pointer<opaqueCMSampleBuffer> previewPhotoSampleBuffer) {
    final _ret = _objc_msgSend_1482(
        _class_AVCapturePhotoOutput,
        _sel_DNGPhotoDataRepresentationForRawSampleBuffer_previewPhotoSampleBuffer_,
        rawSampleBuffer,
        previewPhotoSampleBuffer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// isContentAwareDistortionCorrectionSupported
  bool get contentAwareDistortionCorrectionSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isContentAwareDistortionCorrectionSupported);
  }

  /// isContentAwareDistortionCorrectionEnabled
  bool get contentAwareDistortionCorrectionEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isContentAwareDistortionCorrectionEnabled);
  }

  /// setContentAwareDistortionCorrectionEnabled:
  set contentAwareDistortionCorrectionEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setContentAwareDistortionCorrectionEnabled_, value);
  }

  /// isZeroShutterLagSupported
  bool get zeroShutterLagSupported {
    return _objc_msgSend_13(this.pointer, _sel_isZeroShutterLagSupported);
  }

  /// isZeroShutterLagEnabled
  bool get zeroShutterLagEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isZeroShutterLagEnabled);
  }

  /// setZeroShutterLagEnabled:
  set zeroShutterLagEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setZeroShutterLagEnabled_, value);
  }

  /// isResponsiveCaptureSupported
  bool get responsiveCaptureSupported {
    return _objc_msgSend_13(this.pointer, _sel_isResponsiveCaptureSupported);
  }

  /// isResponsiveCaptureEnabled
  bool get responsiveCaptureEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isResponsiveCaptureEnabled);
  }

  /// setResponsiveCaptureEnabled:
  set responsiveCaptureEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setResponsiveCaptureEnabled_, value);
  }

  /// captureReadiness
  AVCapturePhotoOutputCaptureReadiness get captureReadiness {
    final _ret = _objc_msgSend_1483(this.pointer, _sel_captureReadiness);
    return AVCapturePhotoOutputCaptureReadiness.fromValue(_ret);
  }

  /// isDepthDataDeliverySupported
  bool get depthDataDeliverySupported {
    return _objc_msgSend_13(this.pointer, _sel_isDepthDataDeliverySupported);
  }

  /// isDepthDataDeliveryEnabled
  bool get depthDataDeliveryEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isDepthDataDeliveryEnabled);
  }

  /// setDepthDataDeliveryEnabled:
  set depthDataDeliveryEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setDepthDataDeliveryEnabled_, value);
  }

  /// isPortraitEffectsMatteDeliverySupported
  bool get portraitEffectsMatteDeliverySupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isPortraitEffectsMatteDeliverySupported);
  }

  /// isPortraitEffectsMatteDeliveryEnabled
  bool get portraitEffectsMatteDeliveryEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isPortraitEffectsMatteDeliveryEnabled);
  }

  /// setPortraitEffectsMatteDeliveryEnabled:
  set portraitEffectsMatteDeliveryEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setPortraitEffectsMatteDeliveryEnabled_, value);
  }

  /// availableSemanticSegmentationMatteTypes
  objc.NSArray get availableSemanticSegmentationMatteTypes {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_availableSemanticSegmentationMatteTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// enabledSemanticSegmentationMatteTypes
  objc.NSArray get enabledSemanticSegmentationMatteTypes {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_enabledSemanticSegmentationMatteTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setEnabledSemanticSegmentationMatteTypes:
  set enabledSemanticSegmentationMatteTypes(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer,
        _sel_setEnabledSemanticSegmentationMatteTypes_, value.pointer);
  }

  /// allocWithZone:
  static AVCapturePhotoOutput allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCapturePhotoOutput, _sel_allocWithZone_, zone);
    return AVCapturePhotoOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCapturePhotoOutput alloc() {
    final _ret = _objc_msgSend_19(_class_AVCapturePhotoOutput, _sel_alloc);
    return AVCapturePhotoOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCapturePhotoOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCapturePhotoOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCapturePhotoOutput, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCapturePhotoOutput, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCapturePhotoOutput,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCapturePhotoOutput,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCapturePhotoOutput,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCapturePhotoOutput, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCapturePhotoOutput, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCapturePhotoOutput = objc.getClass("AVCapturePhotoOutput");

/// AVCapturePhotoSettings
class AVCapturePhotoSettings extends objc.NSObject {
  AVCapturePhotoSettings._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCapturePhotoSettings] that points to the same underlying object as [other].
  AVCapturePhotoSettings.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCapturePhotoSettings] that wraps the given raw object pointer.
  AVCapturePhotoSettings.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCapturePhotoSettings].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCapturePhotoSettings);
  }

  /// photoSettings
  static AVCapturePhotoSettings photoSettings() {
    final _ret =
        _objc_msgSend_19(_class_AVCapturePhotoSettings, _sel_photoSettings);
    return AVCapturePhotoSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// photoSettingsWithFormat:
  static AVCapturePhotoSettings photoSettingsWithFormat_(
      objc.NSDictionary? format) {
    final _ret = _objc_msgSend_938(_class_AVCapturePhotoSettings,
        _sel_photoSettingsWithFormat_, format?.pointer ?? ffi.nullptr);
    return AVCapturePhotoSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// photoSettingsWithRawPixelFormatType:
  static AVCapturePhotoSettings photoSettingsWithRawPixelFormatType_(
      int rawPixelFormatType) {
    final _ret = _objc_msgSend_914(_class_AVCapturePhotoSettings,
        _sel_photoSettingsWithRawPixelFormatType_, rawPixelFormatType);
    return AVCapturePhotoSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// photoSettingsWithRawPixelFormatType:processedFormat:
  static AVCapturePhotoSettings
      photoSettingsWithRawPixelFormatType_processedFormat_(
          int rawPixelFormatType, objc.NSDictionary? processedFormat) {
    final _ret = _objc_msgSend_1472(
        _class_AVCapturePhotoSettings,
        _sel_photoSettingsWithRawPixelFormatType_processedFormat_,
        rawPixelFormatType,
        processedFormat?.pointer ?? ffi.nullptr);
    return AVCapturePhotoSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// photoSettingsWithRawPixelFormatType:rawFileType:processedFormat:processedFileType:
  static AVCapturePhotoSettings
      photoSettingsWithRawPixelFormatType_rawFileType_processedFormat_processedFileType_(
          int rawPixelFormatType,
          objc.NSString? rawFileType,
          objc.NSDictionary? processedFormat,
          objc.NSString? processedFileType) {
    final _ret = _objc_msgSend_1473(
        _class_AVCapturePhotoSettings,
        _sel_photoSettingsWithRawPixelFormatType_rawFileType_processedFormat_processedFileType_,
        rawPixelFormatType,
        rawFileType?.pointer ?? ffi.nullptr,
        processedFormat?.pointer ?? ffi.nullptr,
        processedFileType?.pointer ?? ffi.nullptr);
    return AVCapturePhotoSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// photoSettingsFromPhotoSettings:
  static AVCapturePhotoSettings photoSettingsFromPhotoSettings_(
      AVCapturePhotoSettings photoSettings) {
    final _ret = _objc_msgSend_1474(_class_AVCapturePhotoSettings,
        _sel_photoSettingsFromPhotoSettings_, photoSettings.pointer);
    return AVCapturePhotoSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// uniqueID
  int get uniqueID {
    return _objc_msgSend_9(this.pointer, _sel_uniqueID);
  }

  /// format
  objc.NSDictionary? get format {
    final _ret = _objc_msgSend_84(this.pointer, _sel_format);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// processedFileType
  objc.NSString? get processedFileType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_processedFileType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// rawPhotoPixelFormatType
  int get rawPhotoPixelFormatType {
    return _objc_msgSend_647(this.pointer, _sel_rawPhotoPixelFormatType);
  }

  /// rawFileType
  objc.NSString? get rawFileType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_rawFileType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// flashMode
  AVCaptureFlashMode get flashMode {
    final _ret = _objc_msgSend_1435(this.pointer, _sel_flashMode);
    return AVCaptureFlashMode.fromValue(_ret);
  }

  /// setFlashMode:
  set flashMode(AVCaptureFlashMode value) {
    return _objc_msgSend_1436(this.pointer, _sel_setFlashMode_, value.value);
  }

  /// isAutoRedEyeReductionEnabled
  bool get autoRedEyeReductionEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isAutoRedEyeReductionEnabled);
  }

  /// setAutoRedEyeReductionEnabled:
  set autoRedEyeReductionEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutoRedEyeReductionEnabled_, value);
  }

  /// photoQualityPrioritization
  AVCapturePhotoQualityPrioritization get photoQualityPrioritization {
    final _ret =
        _objc_msgSend_1475(this.pointer, _sel_photoQualityPrioritization);
    return AVCapturePhotoQualityPrioritization.fromValue(_ret);
  }

  /// setPhotoQualityPrioritization:
  set photoQualityPrioritization(AVCapturePhotoQualityPrioritization value) {
    return _objc_msgSend_1476(
        this.pointer, _sel_setPhotoQualityPrioritization_, value.value);
  }

  /// isAutoStillImageStabilizationEnabled
  bool get autoStillImageStabilizationEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isAutoStillImageStabilizationEnabled);
  }

  /// setAutoStillImageStabilizationEnabled:
  set autoStillImageStabilizationEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutoStillImageStabilizationEnabled_, value);
  }

  /// isAutoVirtualDeviceFusionEnabled
  bool get autoVirtualDeviceFusionEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isAutoVirtualDeviceFusionEnabled);
  }

  /// setAutoVirtualDeviceFusionEnabled:
  set autoVirtualDeviceFusionEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutoVirtualDeviceFusionEnabled_, value);
  }

  /// isAutoDualCameraFusionEnabled
  bool get autoDualCameraFusionEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isAutoDualCameraFusionEnabled);
  }

  /// setAutoDualCameraFusionEnabled:
  set autoDualCameraFusionEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutoDualCameraFusionEnabled_, value);
  }

  /// virtualDeviceConstituentPhotoDeliveryEnabledDevices
  objc.NSArray get virtualDeviceConstituentPhotoDeliveryEnabledDevices {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_virtualDeviceConstituentPhotoDeliveryEnabledDevices);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVirtualDeviceConstituentPhotoDeliveryEnabledDevices:
  set virtualDeviceConstituentPhotoDeliveryEnabledDevices(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer,
        _sel_setVirtualDeviceConstituentPhotoDeliveryEnabledDevices_,
        value.pointer);
  }

  /// isDualCameraDualPhotoDeliveryEnabled
  bool get dualCameraDualPhotoDeliveryEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isDualCameraDualPhotoDeliveryEnabled);
  }

  /// setDualCameraDualPhotoDeliveryEnabled:
  set dualCameraDualPhotoDeliveryEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setDualCameraDualPhotoDeliveryEnabled_, value);
  }

  /// isHighResolutionPhotoEnabled
  bool get highResolutionPhotoEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isHighResolutionPhotoEnabled);
  }

  /// setHighResolutionPhotoEnabled:
  set highResolutionPhotoEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setHighResolutionPhotoEnabled_, value);
  }

  /// maxPhotoDimensions
  void getMaxPhotoDimensions(ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(stret, this.pointer, _sel_maxPhotoDimensions)
        : stret.ref = _objc_msgSend_1418(this.pointer, _sel_maxPhotoDimensions);
  }

  /// setMaxPhotoDimensions:
  set maxPhotoDimensions(CMVideoDimensions value) {
    return _objc_msgSend_1477(this.pointer, _sel_setMaxPhotoDimensions_, value);
  }

  /// isDepthDataDeliveryEnabled
  bool get depthDataDeliveryEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isDepthDataDeliveryEnabled);
  }

  /// setDepthDataDeliveryEnabled:
  set depthDataDeliveryEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setDepthDataDeliveryEnabled_, value);
  }

  /// embedsDepthDataInPhoto
  bool get embedsDepthDataInPhoto {
    return _objc_msgSend_13(this.pointer, _sel_embedsDepthDataInPhoto);
  }

  /// setEmbedsDepthDataInPhoto:
  set embedsDepthDataInPhoto(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setEmbedsDepthDataInPhoto_, value);
  }

  /// isDepthDataFiltered
  bool get depthDataFiltered {
    return _objc_msgSend_13(this.pointer, _sel_isDepthDataFiltered);
  }

  /// setDepthDataFiltered:
  set depthDataFiltered(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setDepthDataFiltered_, value);
  }

  /// isCameraCalibrationDataDeliveryEnabled
  bool get cameraCalibrationDataDeliveryEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isCameraCalibrationDataDeliveryEnabled);
  }

  /// setCameraCalibrationDataDeliveryEnabled:
  set cameraCalibrationDataDeliveryEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setCameraCalibrationDataDeliveryEnabled_, value);
  }

  /// isPortraitEffectsMatteDeliveryEnabled
  bool get portraitEffectsMatteDeliveryEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isPortraitEffectsMatteDeliveryEnabled);
  }

  /// setPortraitEffectsMatteDeliveryEnabled:
  set portraitEffectsMatteDeliveryEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setPortraitEffectsMatteDeliveryEnabled_, value);
  }

  /// embedsPortraitEffectsMatteInPhoto
  bool get embedsPortraitEffectsMatteInPhoto {
    return _objc_msgSend_13(
        this.pointer, _sel_embedsPortraitEffectsMatteInPhoto);
  }

  /// setEmbedsPortraitEffectsMatteInPhoto:
  set embedsPortraitEffectsMatteInPhoto(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setEmbedsPortraitEffectsMatteInPhoto_, value);
  }

  /// enabledSemanticSegmentationMatteTypes
  objc.NSArray get enabledSemanticSegmentationMatteTypes {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_enabledSemanticSegmentationMatteTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setEnabledSemanticSegmentationMatteTypes:
  set enabledSemanticSegmentationMatteTypes(objc.NSArray value) {
    return _objc_msgSend_173(this.pointer,
        _sel_setEnabledSemanticSegmentationMatteTypes_, value.pointer);
  }

  /// embedsSemanticSegmentationMattesInPhoto
  bool get embedsSemanticSegmentationMattesInPhoto {
    return _objc_msgSend_13(
        this.pointer, _sel_embedsSemanticSegmentationMattesInPhoto);
  }

  /// setEmbedsSemanticSegmentationMattesInPhoto:
  set embedsSemanticSegmentationMattesInPhoto(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setEmbedsSemanticSegmentationMattesInPhoto_, value);
  }

  /// metadata
  objc.NSDictionary get metadata {
    final _ret = _objc_msgSend_123(this.pointer, _sel_metadata);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMetadata:
  set metadata(objc.NSDictionary value) {
    return _objc_msgSend_124(this.pointer, _sel_setMetadata_, value.pointer);
  }

  /// livePhotoMovieFileURL
  objc.NSURL? get livePhotoMovieFileURL {
    final _ret = _objc_msgSend_24(this.pointer, _sel_livePhotoMovieFileURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLivePhotoMovieFileURL:
  set livePhotoMovieFileURL(objc.NSURL? value) {
    return _objc_msgSend_25(this.pointer, _sel_setLivePhotoMovieFileURL_,
        value?.pointer ?? ffi.nullptr);
  }

  /// livePhotoVideoCodecType
  objc.NSString get livePhotoVideoCodecType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_livePhotoVideoCodecType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLivePhotoVideoCodecType:
  set livePhotoVideoCodecType(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setLivePhotoVideoCodecType_, value.pointer);
  }

  /// livePhotoMovieMetadata
  objc.NSArray get livePhotoMovieMetadata {
    final _ret = _objc_msgSend_33(this.pointer, _sel_livePhotoMovieMetadata);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLivePhotoMovieMetadata:
  set livePhotoMovieMetadata(objc.NSArray value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setLivePhotoMovieMetadata_, value.pointer);
  }

  /// availablePreviewPhotoPixelFormatTypes
  objc.NSArray get availablePreviewPhotoPixelFormatTypes {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_availablePreviewPhotoPixelFormatTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// previewPhotoFormat
  objc.NSDictionary? get previewPhotoFormat {
    final _ret = _objc_msgSend_84(this.pointer, _sel_previewPhotoFormat);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPreviewPhotoFormat:
  set previewPhotoFormat(objc.NSDictionary? value) {
    return _objc_msgSend_189(this.pointer, _sel_setPreviewPhotoFormat_,
        value?.pointer ?? ffi.nullptr);
  }

  /// availableEmbeddedThumbnailPhotoCodecTypes
  objc.NSArray get availableEmbeddedThumbnailPhotoCodecTypes {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_availableEmbeddedThumbnailPhotoCodecTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// embeddedThumbnailPhotoFormat
  objc.NSDictionary? get embeddedThumbnailPhotoFormat {
    final _ret =
        _objc_msgSend_84(this.pointer, _sel_embeddedThumbnailPhotoFormat);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setEmbeddedThumbnailPhotoFormat:
  set embeddedThumbnailPhotoFormat(objc.NSDictionary? value) {
    return _objc_msgSend_189(this.pointer,
        _sel_setEmbeddedThumbnailPhotoFormat_, value?.pointer ?? ffi.nullptr);
  }

  /// availableRawEmbeddedThumbnailPhotoCodecTypes
  objc.NSArray get availableRawEmbeddedThumbnailPhotoCodecTypes {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_availableRawEmbeddedThumbnailPhotoCodecTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// rawEmbeddedThumbnailPhotoFormat
  objc.NSDictionary? get rawEmbeddedThumbnailPhotoFormat {
    final _ret =
        _objc_msgSend_84(this.pointer, _sel_rawEmbeddedThumbnailPhotoFormat);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRawEmbeddedThumbnailPhotoFormat:
  set rawEmbeddedThumbnailPhotoFormat(objc.NSDictionary? value) {
    return _objc_msgSend_189(
        this.pointer,
        _sel_setRawEmbeddedThumbnailPhotoFormat_,
        value?.pointer ?? ffi.nullptr);
  }

  /// isAutoContentAwareDistortionCorrectionEnabled
  bool get autoContentAwareDistortionCorrectionEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isAutoContentAwareDistortionCorrectionEnabled);
  }

  /// setAutoContentAwareDistortionCorrectionEnabled:
  set autoContentAwareDistortionCorrectionEnabled(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setAutoContentAwareDistortionCorrectionEnabled_, value);
  }

  /// init
  AVCapturePhotoSettings init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCapturePhotoSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCapturePhotoSettings new1() {
    final _ret = _objc_msgSend_19(_class_AVCapturePhotoSettings, _sel_new);
    return AVCapturePhotoSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVCapturePhotoSettings allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCapturePhotoSettings, _sel_allocWithZone_, zone);
    return AVCapturePhotoSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCapturePhotoSettings alloc() {
    final _ret = _objc_msgSend_19(_class_AVCapturePhotoSettings, _sel_alloc);
    return AVCapturePhotoSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCapturePhotoSettings,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCapturePhotoSettings,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCapturePhotoSettings, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCapturePhotoSettings, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCapturePhotoSettings,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCapturePhotoSettings,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCapturePhotoSettings,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCapturePhotoSettings, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCapturePhotoSettings, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCapturePhotoSettings =
    objc.getClass("AVCapturePhotoSettings");
late final _sel_photoSettings = objc.registerName("photoSettings");
late final _sel_photoSettingsWithFormat_ =
    objc.registerName("photoSettingsWithFormat:");
late final _sel_photoSettingsWithRawPixelFormatType_ =
    objc.registerName("photoSettingsWithRawPixelFormatType:");
late final _sel_photoSettingsWithRawPixelFormatType_processedFormat_ =
    objc.registerName("photoSettingsWithRawPixelFormatType:processedFormat:");
final _objc_msgSend_1472 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_photoSettingsWithRawPixelFormatType_rawFileType_processedFormat_processedFileType_ =
    objc.registerName(
        "photoSettingsWithRawPixelFormatType:rawFileType:processedFormat:processedFileType:");
final _objc_msgSend_1473 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_photoSettingsFromPhotoSettings_ =
    objc.registerName("photoSettingsFromPhotoSettings:");
final _objc_msgSend_1474 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_processedFileType = objc.registerName("processedFileType");
late final _sel_rawPhotoPixelFormatType =
    objc.registerName("rawPhotoPixelFormatType");
late final _sel_rawFileType = objc.registerName("rawFileType");
late final _sel_isAutoRedEyeReductionEnabled =
    objc.registerName("isAutoRedEyeReductionEnabled");
late final _sel_setAutoRedEyeReductionEnabled_ =
    objc.registerName("setAutoRedEyeReductionEnabled:");

enum AVCapturePhotoQualityPrioritization {
  AVCapturePhotoQualityPrioritizationSpeed(1),
  AVCapturePhotoQualityPrioritizationBalanced(2),
  AVCapturePhotoQualityPrioritizationQuality(3);

  final int value;
  const AVCapturePhotoQualityPrioritization(this.value);

  static AVCapturePhotoQualityPrioritization fromValue(int value) =>
      switch (value) {
        1 => AVCapturePhotoQualityPrioritizationSpeed,
        2 => AVCapturePhotoQualityPrioritizationBalanced,
        3 => AVCapturePhotoQualityPrioritizationQuality,
        _ => throw ArgumentError(
            "Unknown value for AVCapturePhotoQualityPrioritization: $value"),
      };
}

late final _sel_photoQualityPrioritization =
    objc.registerName("photoQualityPrioritization");
final _objc_msgSend_1475 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPhotoQualityPrioritization_ =
    objc.registerName("setPhotoQualityPrioritization:");
final _objc_msgSend_1476 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isAutoStillImageStabilizationEnabled =
    objc.registerName("isAutoStillImageStabilizationEnabled");
late final _sel_setAutoStillImageStabilizationEnabled_ =
    objc.registerName("setAutoStillImageStabilizationEnabled:");
late final _sel_isAutoVirtualDeviceFusionEnabled =
    objc.registerName("isAutoVirtualDeviceFusionEnabled");
late final _sel_setAutoVirtualDeviceFusionEnabled_ =
    objc.registerName("setAutoVirtualDeviceFusionEnabled:");
late final _sel_isAutoDualCameraFusionEnabled =
    objc.registerName("isAutoDualCameraFusionEnabled");
late final _sel_setAutoDualCameraFusionEnabled_ =
    objc.registerName("setAutoDualCameraFusionEnabled:");
late final _sel_virtualDeviceConstituentPhotoDeliveryEnabledDevices =
    objc.registerName("virtualDeviceConstituentPhotoDeliveryEnabledDevices");
late final _sel_setVirtualDeviceConstituentPhotoDeliveryEnabledDevices_ = objc
    .registerName("setVirtualDeviceConstituentPhotoDeliveryEnabledDevices:");
late final _sel_isDualCameraDualPhotoDeliveryEnabled =
    objc.registerName("isDualCameraDualPhotoDeliveryEnabled");
late final _sel_setDualCameraDualPhotoDeliveryEnabled_ =
    objc.registerName("setDualCameraDualPhotoDeliveryEnabled:");
late final _sel_isHighResolutionPhotoEnabled =
    objc.registerName("isHighResolutionPhotoEnabled");
late final _sel_setHighResolutionPhotoEnabled_ =
    objc.registerName("setHighResolutionPhotoEnabled:");
late final _sel_maxPhotoDimensions = objc.registerName("maxPhotoDimensions");
late final _sel_setMaxPhotoDimensions_ =
    objc.registerName("setMaxPhotoDimensions:");
final _objc_msgSend_1477 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CMVideoDimensions)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CMVideoDimensions)>();
late final _sel_isDepthDataDeliveryEnabled =
    objc.registerName("isDepthDataDeliveryEnabled");
late final _sel_setDepthDataDeliveryEnabled_ =
    objc.registerName("setDepthDataDeliveryEnabled:");
late final _sel_embedsDepthDataInPhoto =
    objc.registerName("embedsDepthDataInPhoto");
late final _sel_setEmbedsDepthDataInPhoto_ =
    objc.registerName("setEmbedsDepthDataInPhoto:");
late final _sel_setDepthDataFiltered_ =
    objc.registerName("setDepthDataFiltered:");
late final _sel_isCameraCalibrationDataDeliveryEnabled =
    objc.registerName("isCameraCalibrationDataDeliveryEnabled");
late final _sel_setCameraCalibrationDataDeliveryEnabled_ =
    objc.registerName("setCameraCalibrationDataDeliveryEnabled:");
late final _sel_isPortraitEffectsMatteDeliveryEnabled =
    objc.registerName("isPortraitEffectsMatteDeliveryEnabled");
late final _sel_setPortraitEffectsMatteDeliveryEnabled_ =
    objc.registerName("setPortraitEffectsMatteDeliveryEnabled:");
late final _sel_embedsPortraitEffectsMatteInPhoto =
    objc.registerName("embedsPortraitEffectsMatteInPhoto");
late final _sel_setEmbedsPortraitEffectsMatteInPhoto_ =
    objc.registerName("setEmbedsPortraitEffectsMatteInPhoto:");
late final _sel_enabledSemanticSegmentationMatteTypes =
    objc.registerName("enabledSemanticSegmentationMatteTypes");
late final _sel_setEnabledSemanticSegmentationMatteTypes_ =
    objc.registerName("setEnabledSemanticSegmentationMatteTypes:");
late final _sel_embedsSemanticSegmentationMattesInPhoto =
    objc.registerName("embedsSemanticSegmentationMattesInPhoto");
late final _sel_setEmbedsSemanticSegmentationMattesInPhoto_ =
    objc.registerName("setEmbedsSemanticSegmentationMattesInPhoto:");
late final _sel_livePhotoMovieFileURL =
    objc.registerName("livePhotoMovieFileURL");
late final _sel_setLivePhotoMovieFileURL_ =
    objc.registerName("setLivePhotoMovieFileURL:");
late final _sel_livePhotoVideoCodecType =
    objc.registerName("livePhotoVideoCodecType");
late final _sel_setLivePhotoVideoCodecType_ =
    objc.registerName("setLivePhotoVideoCodecType:");
late final _sel_livePhotoMovieMetadata =
    objc.registerName("livePhotoMovieMetadata");
late final _sel_setLivePhotoMovieMetadata_ =
    objc.registerName("setLivePhotoMovieMetadata:");
late final _sel_availablePreviewPhotoPixelFormatTypes =
    objc.registerName("availablePreviewPhotoPixelFormatTypes");
late final _sel_previewPhotoFormat = objc.registerName("previewPhotoFormat");
late final _sel_setPreviewPhotoFormat_ =
    objc.registerName("setPreviewPhotoFormat:");
late final _sel_availableEmbeddedThumbnailPhotoCodecTypes =
    objc.registerName("availableEmbeddedThumbnailPhotoCodecTypes");
late final _sel_embeddedThumbnailPhotoFormat =
    objc.registerName("embeddedThumbnailPhotoFormat");
late final _sel_setEmbeddedThumbnailPhotoFormat_ =
    objc.registerName("setEmbeddedThumbnailPhotoFormat:");
late final _sel_availableRawEmbeddedThumbnailPhotoCodecTypes =
    objc.registerName("availableRawEmbeddedThumbnailPhotoCodecTypes");
late final _sel_rawEmbeddedThumbnailPhotoFormat =
    objc.registerName("rawEmbeddedThumbnailPhotoFormat");
late final _sel_setRawEmbeddedThumbnailPhotoFormat_ =
    objc.registerName("setRawEmbeddedThumbnailPhotoFormat:");
late final _sel_isAutoContentAwareDistortionCorrectionEnabled =
    objc.registerName("isAutoContentAwareDistortionCorrectionEnabled");
late final _sel_setAutoContentAwareDistortionCorrectionEnabled_ =
    objc.registerName("setAutoContentAwareDistortionCorrectionEnabled:");
late final _sel_capturePhotoWithSettings_delegate_ =
    objc.registerName("capturePhotoWithSettings:delegate:");
final _objc_msgSend_1478 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_preparedPhotoSettingsArray =
    objc.registerName("preparedPhotoSettingsArray");
late final _sel_setPreparedPhotoSettingsArray_completionHandler_ =
    objc.registerName("setPreparedPhotoSettingsArray:completionHandler:");
final _objc_msgSend_1479 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_availablePhotoPixelFormatTypes =
    objc.registerName("availablePhotoPixelFormatTypes");
late final _sel_availablePhotoCodecTypes =
    objc.registerName("availablePhotoCodecTypes");
late final _sel_isAppleProRAWSupported =
    objc.registerName("isAppleProRAWSupported");
late final _sel_isAppleProRAWEnabled =
    objc.registerName("isAppleProRAWEnabled");
late final _sel_setAppleProRAWEnabled_ =
    objc.registerName("setAppleProRAWEnabled:");
late final _sel_isBayerRAWPixelFormat_ =
    objc.registerName("isBayerRAWPixelFormat:");
late final _sel_isAppleProRAWPixelFormat_ =
    objc.registerName("isAppleProRAWPixelFormat:");
late final _sel_availableRawPhotoPixelFormatTypes =
    objc.registerName("availableRawPhotoPixelFormatTypes");
late final _sel_availablePhotoFileTypes =
    objc.registerName("availablePhotoFileTypes");
late final _sel_availableRawPhotoFileTypes =
    objc.registerName("availableRawPhotoFileTypes");
late final _sel_supportedPhotoPixelFormatTypesForFileType_ =
    objc.registerName("supportedPhotoPixelFormatTypesForFileType:");
late final _sel_supportedPhotoCodecTypesForFileType_ =
    objc.registerName("supportedPhotoCodecTypesForFileType:");
late final _sel_supportedRawPhotoPixelFormatTypesForFileType_ =
    objc.registerName("supportedRawPhotoPixelFormatTypesForFileType:");
late final _sel_maxPhotoQualityPrioritization =
    objc.registerName("maxPhotoQualityPrioritization");
late final _sel_setMaxPhotoQualityPrioritization_ =
    objc.registerName("setMaxPhotoQualityPrioritization:");
late final _sel_isFastCapturePrioritizationSupported =
    objc.registerName("isFastCapturePrioritizationSupported");
late final _sel_setFastCapturePrioritizationSupported_ =
    objc.registerName("setFastCapturePrioritizationSupported:");
late final _sel_isFastCapturePrioritizationEnabled =
    objc.registerName("isFastCapturePrioritizationEnabled");
late final _sel_setFastCapturePrioritizationEnabled_ =
    objc.registerName("setFastCapturePrioritizationEnabled:");
late final _sel_isAutoDeferredPhotoDeliverySupported =
    objc.registerName("isAutoDeferredPhotoDeliverySupported");
late final _sel_isAutoDeferredPhotoDeliveryEnabled =
    objc.registerName("isAutoDeferredPhotoDeliveryEnabled");
late final _sel_setAutoDeferredPhotoDeliveryEnabled_ =
    objc.registerName("setAutoDeferredPhotoDeliveryEnabled:");
late final _sel_isStillImageStabilizationSupported =
    objc.registerName("isStillImageStabilizationSupported");
late final _sel_isStillImageStabilizationScene =
    objc.registerName("isStillImageStabilizationScene");
late final _sel_isVirtualDeviceFusionSupported =
    objc.registerName("isVirtualDeviceFusionSupported");
late final _sel_isDualCameraFusionSupported =
    objc.registerName("isDualCameraFusionSupported");
late final _sel_isVirtualDeviceConstituentPhotoDeliverySupported =
    objc.registerName("isVirtualDeviceConstituentPhotoDeliverySupported");
late final _sel_isDualCameraDualPhotoDeliverySupported =
    objc.registerName("isDualCameraDualPhotoDeliverySupported");
late final _sel_isVirtualDeviceConstituentPhotoDeliveryEnabled =
    objc.registerName("isVirtualDeviceConstituentPhotoDeliveryEnabled");
late final _sel_setVirtualDeviceConstituentPhotoDeliveryEnabled_ =
    objc.registerName("setVirtualDeviceConstituentPhotoDeliveryEnabled:");
late final _sel_isCameraCalibrationDataDeliverySupported =
    objc.registerName("isCameraCalibrationDataDeliverySupported");
late final _sel_supportedFlashModes = objc.registerName("supportedFlashModes");
late final _sel_isAutoRedEyeReductionSupported =
    objc.registerName("isAutoRedEyeReductionSupported");
late final _sel_isFlashScene = objc.registerName("isFlashScene");
late final _sel_photoSettingsForSceneMonitoring =
    objc.registerName("photoSettingsForSceneMonitoring");
final _objc_msgSend_1480 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPhotoSettingsForSceneMonitoring_ =
    objc.registerName("setPhotoSettingsForSceneMonitoring:");
final _objc_msgSend_1481 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isHighResolutionCaptureEnabled =
    objc.registerName("isHighResolutionCaptureEnabled");
late final _sel_setHighResolutionCaptureEnabled_ =
    objc.registerName("setHighResolutionCaptureEnabled:");
late final _sel_maxBracketedCapturePhotoCount =
    objc.registerName("maxBracketedCapturePhotoCount");
late final _sel_isLensStabilizationDuringBracketedCaptureSupported =
    objc.registerName("isLensStabilizationDuringBracketedCaptureSupported");
late final _sel_isLivePhotoCaptureSupported =
    objc.registerName("isLivePhotoCaptureSupported");
late final _sel_isLivePhotoCaptureEnabled =
    objc.registerName("isLivePhotoCaptureEnabled");
late final _sel_setLivePhotoCaptureEnabled_ =
    objc.registerName("setLivePhotoCaptureEnabled:");
late final _sel_isLivePhotoCaptureSuspended =
    objc.registerName("isLivePhotoCaptureSuspended");
late final _sel_setLivePhotoCaptureSuspended_ =
    objc.registerName("setLivePhotoCaptureSuspended:");
late final _sel_preservesLivePhotoCaptureSuspendedOnSessionStop =
    objc.registerName("preservesLivePhotoCaptureSuspendedOnSessionStop");
late final _sel_setPreservesLivePhotoCaptureSuspendedOnSessionStop_ =
    objc.registerName("setPreservesLivePhotoCaptureSuspendedOnSessionStop:");
late final _sel_isLivePhotoAutoTrimmingEnabled =
    objc.registerName("isLivePhotoAutoTrimmingEnabled");
late final _sel_setLivePhotoAutoTrimmingEnabled_ =
    objc.registerName("setLivePhotoAutoTrimmingEnabled:");
late final _sel_availableLivePhotoVideoCodecTypes =
    objc.registerName("availableLivePhotoVideoCodecTypes");
late final _sel_JPEGPhotoDataRepresentationForJPEGSampleBuffer_previewPhotoSampleBuffer_ =
    objc.registerName(
        "JPEGPhotoDataRepresentationForJPEGSampleBuffer:previewPhotoSampleBuffer:");
final _objc_msgSend_1482 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<opaqueCMSampleBuffer>,
                ffi.Pointer<opaqueCMSampleBuffer>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<opaqueCMSampleBuffer>,
            ffi.Pointer<opaqueCMSampleBuffer>)>();
late final _sel_DNGPhotoDataRepresentationForRawSampleBuffer_previewPhotoSampleBuffer_ =
    objc.registerName(
        "DNGPhotoDataRepresentationForRawSampleBuffer:previewPhotoSampleBuffer:");
late final _sel_isContentAwareDistortionCorrectionSupported =
    objc.registerName("isContentAwareDistortionCorrectionSupported");
late final _sel_isContentAwareDistortionCorrectionEnabled =
    objc.registerName("isContentAwareDistortionCorrectionEnabled");
late final _sel_setContentAwareDistortionCorrectionEnabled_ =
    objc.registerName("setContentAwareDistortionCorrectionEnabled:");
late final _sel_isZeroShutterLagSupported =
    objc.registerName("isZeroShutterLagSupported");
late final _sel_isZeroShutterLagEnabled =
    objc.registerName("isZeroShutterLagEnabled");
late final _sel_setZeroShutterLagEnabled_ =
    objc.registerName("setZeroShutterLagEnabled:");
late final _sel_isResponsiveCaptureSupported =
    objc.registerName("isResponsiveCaptureSupported");
late final _sel_isResponsiveCaptureEnabled =
    objc.registerName("isResponsiveCaptureEnabled");
late final _sel_setResponsiveCaptureEnabled_ =
    objc.registerName("setResponsiveCaptureEnabled:");

enum AVCapturePhotoOutputCaptureReadiness {
  AVCapturePhotoOutputCaptureReadinessSessionNotRunning(0),
  AVCapturePhotoOutputCaptureReadinessReady(1),
  AVCapturePhotoOutputCaptureReadinessNotReadyMomentarily(2),
  AVCapturePhotoOutputCaptureReadinessNotReadyWaitingForCapture(3),
  AVCapturePhotoOutputCaptureReadinessNotReadyWaitingForProcessing(4);

  final int value;
  const AVCapturePhotoOutputCaptureReadiness(this.value);

  static AVCapturePhotoOutputCaptureReadiness fromValue(int value) =>
      switch (value) {
        0 => AVCapturePhotoOutputCaptureReadinessSessionNotRunning,
        1 => AVCapturePhotoOutputCaptureReadinessReady,
        2 => AVCapturePhotoOutputCaptureReadinessNotReadyMomentarily,
        3 => AVCapturePhotoOutputCaptureReadinessNotReadyWaitingForCapture,
        4 => AVCapturePhotoOutputCaptureReadinessNotReadyWaitingForProcessing,
        _ => throw ArgumentError(
            "Unknown value for AVCapturePhotoOutputCaptureReadiness: $value"),
      };
}

late final _sel_captureReadiness = objc.registerName("captureReadiness");
final _objc_msgSend_1483 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isDepthDataDeliverySupported =
    objc.registerName("isDepthDataDeliverySupported");
late final _sel_isPortraitEffectsMatteDeliverySupported =
    objc.registerName("isPortraitEffectsMatteDeliverySupported");
late final _sel_availableSemanticSegmentationMatteTypes =
    objc.registerName("availableSemanticSegmentationMatteTypes");

/// AVCaptureOutput
class AVCaptureOutput extends objc.NSObject {
  AVCaptureOutput._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureOutput] that points to the same underlying object as [other].
  AVCaptureOutput.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureOutput] that wraps the given raw object pointer.
  AVCaptureOutput.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureOutput].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureOutput);
  }

  /// init
  AVCaptureOutput init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureOutput.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVCaptureOutput new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptureOutput, _sel_new);
    return AVCaptureOutput.castFromPointer(_ret, retain: false, release: true);
  }

  /// connections
  objc.NSArray get connections {
    final _ret = _objc_msgSend_33(this.pointer, _sel_connections);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// connectionWithMediaType:
  AVCaptureConnection? connectionWithMediaType_(objc.NSString mediaType) {
    final _ret = _objc_msgSend_1510(
        this.pointer, _sel_connectionWithMediaType_, mediaType.pointer);
    return _ret.address == 0
        ? null
        : AVCaptureConnection.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// transformedMetadataObjectForMetadataObject:connection:
  AVMetadataObject? transformedMetadataObjectForMetadataObject_connection_(
      AVMetadataObject metadataObject, AVCaptureConnection connection) {
    final _ret = _objc_msgSend_1511(
        this.pointer,
        _sel_transformedMetadataObjectForMetadataObject_connection_,
        metadataObject.pointer,
        connection.pointer);
    return _ret.address == 0
        ? null
        : AVMetadataObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// metadataOutputRectOfInterestForRect:
  void metadataOutputRectOfInterestForRect_(
      ffi.Pointer<CGRect> stret, CGRect rectInOutputCoordinates) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1498Stret(stret, this.pointer,
            _sel_metadataOutputRectOfInterestForRect_, rectInOutputCoordinates)
        : stret.ref = _objc_msgSend_1498(this.pointer,
            _sel_metadataOutputRectOfInterestForRect_, rectInOutputCoordinates);
  }

  /// rectForMetadataOutputRectOfInterest:
  void rectForMetadataOutputRectOfInterest_(
      ffi.Pointer<CGRect> stret, CGRect rectInMetadataOutputCoordinates) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1498Stret(
            stret,
            this.pointer,
            _sel_rectForMetadataOutputRectOfInterest_,
            rectInMetadataOutputCoordinates)
        : stret.ref = _objc_msgSend_1498(
            this.pointer,
            _sel_rectForMetadataOutputRectOfInterest_,
            rectInMetadataOutputCoordinates);
  }

  /// allocWithZone:
  static AVCaptureOutput allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCaptureOutput, _sel_allocWithZone_, zone);
    return AVCaptureOutput.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVCaptureOutput alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptureOutput, _sel_alloc);
    return AVCaptureOutput.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptureOutput, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCaptureOutput, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureOutput,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureOutput,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureOutput,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptureOutput, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureOutput, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureOutput = objc.getClass("AVCaptureOutput");
late final _sel_connections = objc.registerName("connections");

/// AVCaptureConnection
class AVCaptureConnection extends objc.NSObject {
  AVCaptureConnection._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureConnection] that points to the same underlying object as [other].
  AVCaptureConnection.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureConnection] that wraps the given raw object pointer.
  AVCaptureConnection.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureConnection].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureConnection);
  }

  /// init
  AVCaptureConnection init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureConnection.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCaptureConnection new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptureConnection, _sel_new);
    return AVCaptureConnection.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// connectionWithInputPorts:output:
  static AVCaptureConnection connectionWithInputPorts_output_(
      objc.NSArray ports, AVCaptureOutput output) {
    final _ret = _objc_msgSend_1484(_class_AVCaptureConnection,
        _sel_connectionWithInputPorts_output_, ports.pointer, output.pointer);
    return AVCaptureConnection.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// connectionWithInputPort:videoPreviewLayer:
  static AVCaptureConnection connectionWithInputPort_videoPreviewLayer_(
      AVCaptureInputPort port, AVCaptureVideoPreviewLayer layer) {
    final _ret = _objc_msgSend_1502(
        _class_AVCaptureConnection,
        _sel_connectionWithInputPort_videoPreviewLayer_,
        port.pointer,
        layer.pointer);
    return AVCaptureConnection.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithInputPorts:output:
  AVCaptureConnection initWithInputPorts_output_(
      objc.NSArray ports, AVCaptureOutput output) {
    final _ret = _objc_msgSend_1484(this.pointer,
        _sel_initWithInputPorts_output_, ports.pointer, output.pointer);
    return AVCaptureConnection.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithInputPort:videoPreviewLayer:
  AVCaptureConnection initWithInputPort_videoPreviewLayer_(
      AVCaptureInputPort port, AVCaptureVideoPreviewLayer layer) {
    final _ret = _objc_msgSend_1502(this.pointer,
        _sel_initWithInputPort_videoPreviewLayer_, port.pointer, layer.pointer);
    return AVCaptureConnection.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// inputPorts
  objc.NSArray get inputPorts {
    final _ret = _objc_msgSend_33(this.pointer, _sel_inputPorts);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// output
  AVCaptureOutput? get output {
    final _ret = _objc_msgSend_1503(this.pointer, _sel_output);
    return _ret.address == 0
        ? null
        : AVCaptureOutput.castFromPointer(_ret, retain: true, release: true);
  }

  /// videoPreviewLayer
  AVCaptureVideoPreviewLayer? get videoPreviewLayer {
    final _ret = _objc_msgSend_1504(this.pointer, _sel_videoPreviewLayer);
    return _ret.address == 0
        ? null
        : AVCaptureVideoPreviewLayer.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// isEnabled
  bool get enabled {
    return _objc_msgSend_13(this.pointer, _sel_isEnabled);
  }

  /// setEnabled:
  set enabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setEnabled_, value);
  }

  /// isActive
  bool get active {
    return _objc_msgSend_13(this.pointer, _sel_isActive);
  }

  /// audioChannels
  objc.NSArray get audioChannels {
    final _ret = _objc_msgSend_33(this.pointer, _sel_audioChannels);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isVideoMirroringSupported
  bool get supportsVideoMirroring {
    return _objc_msgSend_13(this.pointer, _sel_isVideoMirroringSupported);
  }

  /// isVideoMirrored
  bool get videoMirrored {
    return _objc_msgSend_13(this.pointer, _sel_isVideoMirrored);
  }

  /// setVideoMirrored:
  set videoMirrored(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setVideoMirrored_, value);
  }

  /// automaticallyAdjustsVideoMirroring
  bool get automaticallyAdjustsVideoMirroring {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticallyAdjustsVideoMirroring);
  }

  /// setAutomaticallyAdjustsVideoMirroring:
  set automaticallyAdjustsVideoMirroring(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutomaticallyAdjustsVideoMirroring_, value);
  }

  /// isVideoRotationAngleSupported:
  bool isVideoRotationAngleSupported_(double videoRotationAngle) {
    return _objc_msgSend_1505(
        this.pointer, _sel_isVideoRotationAngleSupported_, videoRotationAngle);
  }

  /// videoRotationAngle
  double get videoRotationAngle {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_videoRotationAngle)
        : _objc_msgSend_18(this.pointer, _sel_videoRotationAngle);
  }

  /// setVideoRotationAngle:
  set videoRotationAngle(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setVideoRotationAngle_, value);
  }

  /// isVideoOrientationSupported
  bool get supportsVideoOrientation {
    return _objc_msgSend_13(this.pointer, _sel_isVideoOrientationSupported);
  }

  /// videoOrientation
  AVCaptureVideoOrientation get videoOrientation {
    final _ret = _objc_msgSend_1500(this.pointer, _sel_videoOrientation);
    return AVCaptureVideoOrientation.fromValue(_ret);
  }

  /// setVideoOrientation:
  set videoOrientation(AVCaptureVideoOrientation value) {
    return _objc_msgSend_1501(
        this.pointer, _sel_setVideoOrientation_, value.value);
  }

  /// isVideoFieldModeSupported
  bool get supportsVideoFieldMode {
    return _objc_msgSend_13(this.pointer, _sel_isVideoFieldModeSupported);
  }

  /// videoFieldMode
  AVVideoFieldMode get videoFieldMode {
    final _ret = _objc_msgSend_1506(this.pointer, _sel_videoFieldMode);
    return AVVideoFieldMode.fromValue(_ret);
  }

  /// setVideoFieldMode:
  set videoFieldMode(AVVideoFieldMode value) {
    return _objc_msgSend_1507(
        this.pointer, _sel_setVideoFieldMode_, value.value);
  }

  /// isVideoMinFrameDurationSupported
  bool get supportsVideoMinFrameDuration {
    return _objc_msgSend_13(
        this.pointer, _sel_isVideoMinFrameDurationSupported);
  }

  /// videoMinFrameDuration
  void getVideoMinFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_videoMinFrameDuration)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_videoMinFrameDuration);
  }

  /// setVideoMinFrameDuration:
  set videoMinFrameDuration(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setVideoMinFrameDuration_, value);
  }

  /// isVideoMaxFrameDurationSupported
  bool get supportsVideoMaxFrameDuration {
    return _objc_msgSend_13(
        this.pointer, _sel_isVideoMaxFrameDurationSupported);
  }

  /// videoMaxFrameDuration
  void getVideoMaxFrameDuration(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(
            stret, this.pointer, _sel_videoMaxFrameDuration)
        : stret.ref =
            _objc_msgSend_712(this.pointer, _sel_videoMaxFrameDuration);
  }

  /// setVideoMaxFrameDuration:
  set videoMaxFrameDuration(CMTime value) {
    return _objc_msgSend_1026(
        this.pointer, _sel_setVideoMaxFrameDuration_, value);
  }

  /// videoMaxScaleAndCropFactor
  double get videoMaxScaleAndCropFactor {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_videoMaxScaleAndCropFactor)
        : _objc_msgSend_18(this.pointer, _sel_videoMaxScaleAndCropFactor);
  }

  /// videoScaleAndCropFactor
  double get videoScaleAndCropFactor {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_videoScaleAndCropFactor)
        : _objc_msgSend_18(this.pointer, _sel_videoScaleAndCropFactor);
  }

  /// setVideoScaleAndCropFactor:
  set videoScaleAndCropFactor(double value) {
    return _objc_msgSend_226(
        this.pointer, _sel_setVideoScaleAndCropFactor_, value);
  }

  /// preferredVideoStabilizationMode
  AVCaptureVideoStabilizationMode get preferredVideoStabilizationMode {
    final _ret =
        _objc_msgSend_1508(this.pointer, _sel_preferredVideoStabilizationMode);
    return AVCaptureVideoStabilizationMode.fromValue(_ret);
  }

  /// setPreferredVideoStabilizationMode:
  set preferredVideoStabilizationMode(AVCaptureVideoStabilizationMode value) {
    return _objc_msgSend_1509(
        this.pointer, _sel_setPreferredVideoStabilizationMode_, value.value);
  }

  /// activeVideoStabilizationMode
  AVCaptureVideoStabilizationMode get activeVideoStabilizationMode {
    final _ret =
        _objc_msgSend_1508(this.pointer, _sel_activeVideoStabilizationMode);
    return AVCaptureVideoStabilizationMode.fromValue(_ret);
  }

  /// isVideoStabilizationSupported
  bool get supportsVideoStabilization {
    return _objc_msgSend_13(this.pointer, _sel_isVideoStabilizationSupported);
  }

  /// isVideoStabilizationEnabled
  bool get videoStabilizationEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isVideoStabilizationEnabled);
  }

  /// enablesVideoStabilizationWhenAvailable
  bool get enablesVideoStabilizationWhenAvailable {
    return _objc_msgSend_13(
        this.pointer, _sel_enablesVideoStabilizationWhenAvailable);
  }

  /// setEnablesVideoStabilizationWhenAvailable:
  set enablesVideoStabilizationWhenAvailable(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setEnablesVideoStabilizationWhenAvailable_, value);
  }

  /// isCameraIntrinsicMatrixDeliverySupported
  bool get cameraIntrinsicMatrixDeliverySupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isCameraIntrinsicMatrixDeliverySupported);
  }

  /// isCameraIntrinsicMatrixDeliveryEnabled
  bool get cameraIntrinsicMatrixDeliveryEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isCameraIntrinsicMatrixDeliveryEnabled);
  }

  /// setCameraIntrinsicMatrixDeliveryEnabled:
  set cameraIntrinsicMatrixDeliveryEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setCameraIntrinsicMatrixDeliveryEnabled_, value);
  }

  /// allocWithZone:
  static AVCaptureConnection allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCaptureConnection, _sel_allocWithZone_, zone);
    return AVCaptureConnection.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCaptureConnection alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptureConnection, _sel_alloc);
    return AVCaptureConnection.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureConnection,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureConnection,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptureConnection, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCaptureConnection, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureConnection,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureConnection,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureConnection,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptureConnection, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCaptureConnection, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureConnection = objc.getClass("AVCaptureConnection");
late final _sel_connectionWithInputPorts_output_ =
    objc.registerName("connectionWithInputPorts:output:");
final _objc_msgSend_1484 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// AVCaptureInputPort
class AVCaptureInputPort extends objc.NSObject {
  AVCaptureInputPort._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureInputPort] that points to the same underlying object as [other].
  AVCaptureInputPort.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureInputPort] that wraps the given raw object pointer.
  AVCaptureInputPort.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureInputPort].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureInputPort);
  }

  /// init
  AVCaptureInputPort init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureInputPort.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCaptureInputPort new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptureInputPort, _sel_new);
    return AVCaptureInputPort.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// input
  AVCaptureInput get input {
    final _ret = _objc_msgSend_1485(this.pointer, _sel_input);
    return AVCaptureInput.castFromPointer(_ret, retain: true, release: true);
  }

  /// mediaType
  objc.NSString get mediaType {
    final _ret = _objc_msgSend_11(this.pointer, _sel_mediaType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// formatDescription
  ffi.Pointer<opaqueCMFormatDescription> get formatDescription {
    return _objc_msgSend_730(this.pointer, _sel_formatDescription);
  }

  /// isEnabled
  bool get enabled {
    return _objc_msgSend_13(this.pointer, _sel_isEnabled);
  }

  /// setEnabled:
  set enabled(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setEnabled_, value);
  }

  /// clock
  ffi.Pointer<OpaqueCMClock> get clock {
    return _objc_msgSend_1275(this.pointer, _sel_clock);
  }

  /// sourceDeviceType
  objc.NSString? get sourceDeviceType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_sourceDeviceType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceDevicePosition
  AVCaptureDevicePosition get sourceDevicePosition {
    final _ret = _objc_msgSend_1425(this.pointer, _sel_sourceDevicePosition);
    return AVCaptureDevicePosition.fromValue(_ret);
  }

  /// allocWithZone:
  static AVCaptureInputPort allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCaptureInputPort, _sel_allocWithZone_, zone);
    return AVCaptureInputPort.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCaptureInputPort alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptureInputPort, _sel_alloc);
    return AVCaptureInputPort.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureInputPort,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureInputPort,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptureInputPort, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCaptureInputPort, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureInputPort,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureInputPort,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureInputPort,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptureInputPort, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCaptureInputPort, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureInputPort = objc.getClass("AVCaptureInputPort");

/// AVCaptureInput
class AVCaptureInput extends objc.NSObject {
  AVCaptureInput._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureInput] that points to the same underlying object as [other].
  AVCaptureInput.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureInput] that wraps the given raw object pointer.
  AVCaptureInput.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureInput].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureInput);
  }

  /// init
  AVCaptureInput init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureInput.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVCaptureInput new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptureInput, _sel_new);
    return AVCaptureInput.castFromPointer(_ret, retain: false, release: true);
  }

  /// ports
  objc.NSArray get ports {
    final _ret = _objc_msgSend_33(this.pointer, _sel_ports);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static AVCaptureInput allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCaptureInput, _sel_allocWithZone_, zone);
    return AVCaptureInput.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVCaptureInput alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptureInput, _sel_alloc);
    return AVCaptureInput.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureInput,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureInput,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptureInput, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCaptureInput, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureInput,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureInput,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureInput,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptureInput, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureInput, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureInput = objc.getClass("AVCaptureInput");
late final _sel_ports = objc.registerName("ports");
late final _sel_input = objc.registerName("input");
final _objc_msgSend_1485 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_clock = objc.registerName("clock");
late final _sel_sourceDeviceType = objc.registerName("sourceDeviceType");
late final _sel_sourceDevicePosition =
    objc.registerName("sourceDevicePosition");

/// AVCaptureVideoPreviewLayer
class AVCaptureVideoPreviewLayer extends CALayer {
  AVCaptureVideoPreviewLayer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureVideoPreviewLayer] that points to the same underlying object as [other].
  AVCaptureVideoPreviewLayer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureVideoPreviewLayer] that wraps the given raw object pointer.
  AVCaptureVideoPreviewLayer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureVideoPreviewLayer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureVideoPreviewLayer);
  }

  /// layerWithSession:
  static AVCaptureVideoPreviewLayer layerWithSession_(
      AVCaptureSession session) {
    final _ret = _objc_msgSend_1492(_class_AVCaptureVideoPreviewLayer,
        _sel_layerWithSession_, session.pointer);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithSession:
  AVCaptureVideoPreviewLayer initWithSession_(AVCaptureSession session) {
    final _ret = _objc_msgSend_1492(
        this.pointer, _sel_initWithSession_, session.pointer);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// layerWithSessionWithNoConnection:
  static AVCaptureVideoPreviewLayer layerWithSessionWithNoConnection_(
      AVCaptureSession session) {
    final _ret = _objc_msgSend_1492(_class_AVCaptureVideoPreviewLayer,
        _sel_layerWithSessionWithNoConnection_, session.pointer);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithSessionWithNoConnection:
  AVCaptureVideoPreviewLayer initWithSessionWithNoConnection_(
      AVCaptureSession session) {
    final _ret = _objc_msgSend_1492(
        this.pointer, _sel_initWithSessionWithNoConnection_, session.pointer);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// session
  AVCaptureSession? get session {
    final _ret = _objc_msgSend_1493(this.pointer, _sel_session);
    return _ret.address == 0
        ? null
        : AVCaptureSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSession:
  set session(AVCaptureSession? value) {
    return _objc_msgSend_1494(
        this.pointer, _sel_setSession_, value?.pointer ?? ffi.nullptr);
  }

  /// setSessionWithNoConnection:
  void setSessionWithNoConnection_(AVCaptureSession session) {
    _objc_msgSend_1495(
        this.pointer, _sel_setSessionWithNoConnection_, session.pointer);
  }

  /// connection
  AVCaptureConnection? get connection {
    final _ret = _objc_msgSend_1496(this.pointer, _sel_connection);
    return _ret.address == 0
        ? null
        : AVCaptureConnection.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// videoGravity
  objc.NSString get videoGravity {
    final _ret = _objc_msgSend_11(this.pointer, _sel_videoGravity);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVideoGravity:
  set videoGravity(objc.NSString value) {
    return _objc_msgSend_12(this.pointer, _sel_setVideoGravity_, value.pointer);
  }

  /// isPreviewing
  bool get previewing {
    return _objc_msgSend_13(this.pointer, _sel_isPreviewing);
  }

  /// captureDevicePointOfInterestForPoint:
  void captureDevicePointOfInterestForPoint_(
      ffi.Pointer<CGPoint> stret, CGPoint pointInLayer) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1497Stret(stret, this.pointer,
            _sel_captureDevicePointOfInterestForPoint_, pointInLayer)
        : stret.ref = _objc_msgSend_1497(this.pointer,
            _sel_captureDevicePointOfInterestForPoint_, pointInLayer);
  }

  /// pointForCaptureDevicePointOfInterest:
  void pointForCaptureDevicePointOfInterest_(
      ffi.Pointer<CGPoint> stret, CGPoint captureDevicePointOfInterest) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1497Stret(
            stret,
            this.pointer,
            _sel_pointForCaptureDevicePointOfInterest_,
            captureDevicePointOfInterest)
        : stret.ref = _objc_msgSend_1497(
            this.pointer,
            _sel_pointForCaptureDevicePointOfInterest_,
            captureDevicePointOfInterest);
  }

  /// metadataOutputRectOfInterestForRect:
  void metadataOutputRectOfInterestForRect_(
      ffi.Pointer<CGRect> stret, CGRect rectInLayerCoordinates) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1498Stret(stret, this.pointer,
            _sel_metadataOutputRectOfInterestForRect_, rectInLayerCoordinates)
        : stret.ref = _objc_msgSend_1498(this.pointer,
            _sel_metadataOutputRectOfInterestForRect_, rectInLayerCoordinates);
  }

  /// rectForMetadataOutputRectOfInterest:
  void rectForMetadataOutputRectOfInterest_(
      ffi.Pointer<CGRect> stret, CGRect rectInMetadataOutputCoordinates) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1498Stret(
            stret,
            this.pointer,
            _sel_rectForMetadataOutputRectOfInterest_,
            rectInMetadataOutputCoordinates)
        : stret.ref = _objc_msgSend_1498(
            this.pointer,
            _sel_rectForMetadataOutputRectOfInterest_,
            rectInMetadataOutputCoordinates);
  }

  /// transformedMetadataObjectForMetadataObject:
  AVMetadataObject? transformedMetadataObjectForMetadataObject_(
      AVMetadataObject metadataObject) {
    final _ret = _objc_msgSend_1499(
        this.pointer,
        _sel_transformedMetadataObjectForMetadataObject_,
        metadataObject.pointer);
    return _ret.address == 0
        ? null
        : AVMetadataObject.castFromPointer(_ret, retain: true, release: true);
  }

  /// isOrientationSupported
  bool get orientationSupported {
    return _objc_msgSend_13(this.pointer, _sel_isOrientationSupported);
  }

  /// orientation
  AVCaptureVideoOrientation get orientation {
    final _ret = _objc_msgSend_1500(this.pointer, _sel_orientation);
    return AVCaptureVideoOrientation.fromValue(_ret);
  }

  /// setOrientation:
  set orientation(AVCaptureVideoOrientation value) {
    return _objc_msgSend_1501(this.pointer, _sel_setOrientation_, value.value);
  }

  /// isMirroringSupported
  bool get mirroringSupported {
    return _objc_msgSend_13(this.pointer, _sel_isMirroringSupported);
  }

  /// automaticallyAdjustsMirroring
  bool get automaticallyAdjustsMirroring {
    return _objc_msgSend_13(this.pointer, _sel_automaticallyAdjustsMirroring);
  }

  /// setAutomaticallyAdjustsMirroring:
  set automaticallyAdjustsMirroring(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setAutomaticallyAdjustsMirroring_, value);
  }

  /// isMirrored
  bool get mirrored {
    return _objc_msgSend_13(this.pointer, _sel_isMirrored);
  }

  /// setMirrored:
  set mirrored(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setMirrored_, value);
  }

  /// layer
  static AVCaptureVideoPreviewLayer layer() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureVideoPreviewLayer, _sel_layer);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  AVCaptureVideoPreviewLayer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithLayer:
  AVCaptureVideoPreviewLayer initWithLayer_(objc.ObjCObjectBase layer) {
    final _ret =
        _objc_msgSend_616(this.pointer, _sel_initWithLayer_, layer.pointer);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// presentationLayer
  AVCaptureVideoPreviewLayer? presentationLayer() {
    final _ret = _objc_msgSend_85(this.pointer, _sel_presentationLayer);
    return _ret.address == 0
        ? null
        : AVCaptureVideoPreviewLayer.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// modelLayer
  AVCaptureVideoPreviewLayer modelLayer() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_modelLayer);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// defaultValueForKey:
  static objc.ObjCObjectBase? defaultValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_35(_class_AVCaptureVideoPreviewLayer,
        _sel_defaultValueForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// needsDisplayForKey:
  static bool needsDisplayForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureVideoPreviewLayer,
        _sel_needsDisplayForKey_, key.pointer);
  }

  /// cornerCurveExpansionFactor:
  static double cornerCurveExpansionFactor_(objc.NSString curve) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_90Fpret(_class_AVCaptureVideoPreviewLayer,
            _sel_cornerCurveExpansionFactor_, curve.pointer)
        : _objc_msgSend_90(_class_AVCaptureVideoPreviewLayer,
            _sel_cornerCurveExpansionFactor_, curve.pointer);
  }

  /// defaultActionForKey:
  static objc.ObjCObjectBase? defaultActionForKey_(objc.NSString event) {
    final _ret = _objc_msgSend_35(_class_AVCaptureVideoPreviewLayer,
        _sel_defaultActionForKey_, event.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// layerWithRemoteClientId:
  static CALayer layerWithRemoteClientId_(int client_id) {
    final _ret = _objc_msgSend_838(_class_AVCaptureVideoPreviewLayer,
        _sel_layerWithRemoteClientId_, client_id);
    return CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVCaptureVideoPreviewLayer new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptureVideoPreviewLayer, _sel_new);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVCaptureVideoPreviewLayer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCaptureVideoPreviewLayer, _sel_allocWithZone_, zone);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCaptureVideoPreviewLayer alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureVideoPreviewLayer, _sel_alloc);
    return AVCaptureVideoPreviewLayer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureVideoPreviewLayer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureVideoPreviewLayer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVCaptureVideoPreviewLayer,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCaptureVideoPreviewLayer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureVideoPreviewLayer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureVideoPreviewLayer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureVideoPreviewLayer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptureVideoPreviewLayer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCaptureVideoPreviewLayer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureVideoPreviewLayer =
    objc.getClass("AVCaptureVideoPreviewLayer");

/// AVCaptureSession
class AVCaptureSession extends objc.NSObject {
  AVCaptureSession._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureSession] that points to the same underlying object as [other].
  AVCaptureSession.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureSession] that wraps the given raw object pointer.
  AVCaptureSession.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureSession].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureSession);
  }

  /// canSetSessionPreset:
  bool canSetSessionPreset_(objc.NSString preset) {
    return _objc_msgSend_31(
        this.pointer, _sel_canSetSessionPreset_, preset.pointer);
  }

  /// sessionPreset
  objc.NSString get sessionPreset {
    final _ret = _objc_msgSend_11(this.pointer, _sel_sessionPreset);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSessionPreset:
  set sessionPreset(objc.NSString value) {
    return _objc_msgSend_12(
        this.pointer, _sel_setSessionPreset_, value.pointer);
  }

  /// inputs
  objc.NSArray get inputs {
    final _ret = _objc_msgSend_33(this.pointer, _sel_inputs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// canAddInput:
  bool canAddInput_(AVCaptureInput input) {
    return _objc_msgSend_1486(this.pointer, _sel_canAddInput_, input.pointer);
  }

  /// addInput:
  void addInput_(AVCaptureInput input) {
    _objc_msgSend_1487(this.pointer, _sel_addInput_, input.pointer);
  }

  /// removeInput:
  void removeInput_(AVCaptureInput input) {
    _objc_msgSend_1487(this.pointer, _sel_removeInput_, input.pointer);
  }

  /// outputs
  objc.NSArray get outputs {
    final _ret = _objc_msgSend_33(this.pointer, _sel_outputs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// canAddOutput:
  bool canAddOutput_(AVCaptureOutput output) {
    return _objc_msgSend_1488(this.pointer, _sel_canAddOutput_, output.pointer);
  }

  /// addOutput:
  void addOutput_(AVCaptureOutput output) {
    _objc_msgSend_1489(this.pointer, _sel_addOutput_, output.pointer);
  }

  /// removeOutput:
  void removeOutput_(AVCaptureOutput output) {
    _objc_msgSend_1489(this.pointer, _sel_removeOutput_, output.pointer);
  }

  /// addInputWithNoConnections:
  void addInputWithNoConnections_(AVCaptureInput input) {
    _objc_msgSend_1487(
        this.pointer, _sel_addInputWithNoConnections_, input.pointer);
  }

  /// addOutputWithNoConnections:
  void addOutputWithNoConnections_(AVCaptureOutput output) {
    _objc_msgSend_1489(
        this.pointer, _sel_addOutputWithNoConnections_, output.pointer);
  }

  /// connections
  objc.NSArray get connections {
    final _ret = _objc_msgSend_33(this.pointer, _sel_connections);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// canAddConnection:
  bool canAddConnection_(AVCaptureConnection connection) {
    return _objc_msgSend_1490(
        this.pointer, _sel_canAddConnection_, connection.pointer);
  }

  /// addConnection:
  void addConnection_(AVCaptureConnection connection) {
    _objc_msgSend_1491(this.pointer, _sel_addConnection_, connection.pointer);
  }

  /// removeConnection:
  void removeConnection_(AVCaptureConnection connection) {
    _objc_msgSend_1491(
        this.pointer, _sel_removeConnection_, connection.pointer);
  }

  /// beginConfiguration
  void beginConfiguration() {
    _objc_msgSend_7(this.pointer, _sel_beginConfiguration);
  }

  /// commitConfiguration
  void commitConfiguration() {
    _objc_msgSend_7(this.pointer, _sel_commitConfiguration);
  }

  /// isRunning
  bool get running {
    return _objc_msgSend_13(this.pointer, _sel_isRunning);
  }

  /// isInterrupted
  bool get interrupted {
    return _objc_msgSend_13(this.pointer, _sel_isInterrupted);
  }

  /// isMultitaskingCameraAccessSupported
  bool get multitaskingCameraAccessSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isMultitaskingCameraAccessSupported);
  }

  /// isMultitaskingCameraAccessEnabled
  bool get multitaskingCameraAccessEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isMultitaskingCameraAccessEnabled);
  }

  /// setMultitaskingCameraAccessEnabled:
  set multitaskingCameraAccessEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setMultitaskingCameraAccessEnabled_, value);
  }

  /// usesApplicationAudioSession
  bool get usesApplicationAudioSession {
    return _objc_msgSend_13(this.pointer, _sel_usesApplicationAudioSession);
  }

  /// setUsesApplicationAudioSession:
  set usesApplicationAudioSession(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setUsesApplicationAudioSession_, value);
  }

  /// automaticallyConfiguresApplicationAudioSession
  bool get automaticallyConfiguresApplicationAudioSession {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticallyConfiguresApplicationAudioSession);
  }

  /// setAutomaticallyConfiguresApplicationAudioSession:
  set automaticallyConfiguresApplicationAudioSession(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setAutomaticallyConfiguresApplicationAudioSession_, value);
  }

  /// automaticallyConfiguresCaptureDeviceForWideColor
  bool get automaticallyConfiguresCaptureDeviceForWideColor {
    return _objc_msgSend_13(
        this.pointer, _sel_automaticallyConfiguresCaptureDeviceForWideColor);
  }

  /// setAutomaticallyConfiguresCaptureDeviceForWideColor:
  set automaticallyConfiguresCaptureDeviceForWideColor(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setAutomaticallyConfiguresCaptureDeviceForWideColor_, value);
  }

  /// startRunning
  void startRunning() {
    _objc_msgSend_7(this.pointer, _sel_startRunning);
  }

  /// stopRunning
  void stopRunning() {
    _objc_msgSend_7(this.pointer, _sel_stopRunning);
  }

  /// synchronizationClock
  ffi.Pointer<OpaqueCMClock> get synchronizationClock {
    return _objc_msgSend_1275(this.pointer, _sel_synchronizationClock);
  }

  /// masterClock
  ffi.Pointer<OpaqueCMClock> get masterClock {
    return _objc_msgSend_1275(this.pointer, _sel_masterClock);
  }

  /// hardwareCost
  double get hardwareCost {
    return objc.useMsgSendVariants
        ? _objc_msgSend_361Fpret(this.pointer, _sel_hardwareCost)
        : _objc_msgSend_361(this.pointer, _sel_hardwareCost);
  }

  /// init
  AVCaptureSession init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVCaptureSession new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptureSession, _sel_new);
    return AVCaptureSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static AVCaptureSession allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCaptureSession, _sel_allocWithZone_, zone);
    return AVCaptureSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVCaptureSession alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptureSession, _sel_alloc);
    return AVCaptureSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureSession,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureSession,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptureSession, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCaptureSession, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureSession,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureSession,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureSession,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptureSession, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureSession, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureSession = objc.getClass("AVCaptureSession");
late final _sel_canSetSessionPreset_ =
    objc.registerName("canSetSessionPreset:");
late final _sel_sessionPreset = objc.registerName("sessionPreset");
late final _sel_setSessionPreset_ = objc.registerName("setSessionPreset:");
final _objc_msgSend_1486 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1487 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeInput_ = objc.registerName("removeInput:");
late final _sel_canAddOutput_ = objc.registerName("canAddOutput:");
final _objc_msgSend_1488 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1489 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addInputWithNoConnections_ =
    objc.registerName("addInputWithNoConnections:");
late final _sel_addOutputWithNoConnections_ =
    objc.registerName("addOutputWithNoConnections:");
late final _sel_canAddConnection_ = objc.registerName("canAddConnection:");
final _objc_msgSend_1490 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addConnection_ = objc.registerName("addConnection:");
final _objc_msgSend_1491 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeConnection_ = objc.registerName("removeConnection:");
late final _sel_beginConfiguration = objc.registerName("beginConfiguration");
late final _sel_commitConfiguration = objc.registerName("commitConfiguration");
late final _sel_isInterrupted = objc.registerName("isInterrupted");
late final _sel_isMultitaskingCameraAccessSupported =
    objc.registerName("isMultitaskingCameraAccessSupported");
late final _sel_isMultitaskingCameraAccessEnabled =
    objc.registerName("isMultitaskingCameraAccessEnabled");
late final _sel_setMultitaskingCameraAccessEnabled_ =
    objc.registerName("setMultitaskingCameraAccessEnabled:");
late final _sel_usesApplicationAudioSession =
    objc.registerName("usesApplicationAudioSession");
late final _sel_setUsesApplicationAudioSession_ =
    objc.registerName("setUsesApplicationAudioSession:");
late final _sel_automaticallyConfiguresApplicationAudioSession =
    objc.registerName("automaticallyConfiguresApplicationAudioSession");
late final _sel_setAutomaticallyConfiguresApplicationAudioSession_ =
    objc.registerName("setAutomaticallyConfiguresApplicationAudioSession:");
late final _sel_automaticallyConfiguresCaptureDeviceForWideColor =
    objc.registerName("automaticallyConfiguresCaptureDeviceForWideColor");
late final _sel_setAutomaticallyConfiguresCaptureDeviceForWideColor_ =
    objc.registerName("setAutomaticallyConfiguresCaptureDeviceForWideColor:");
late final _sel_startRunning = objc.registerName("startRunning");
late final _sel_stopRunning = objc.registerName("stopRunning");
late final _sel_synchronizationClock =
    objc.registerName("synchronizationClock");
late final _sel_hardwareCost = objc.registerName("hardwareCost");
late final _sel_layerWithSession_ = objc.registerName("layerWithSession:");
final _objc_msgSend_1492 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithSession_ = objc.registerName("initWithSession:");
late final _sel_layerWithSessionWithNoConnection_ =
    objc.registerName("layerWithSessionWithNoConnection:");
late final _sel_initWithSessionWithNoConnection_ =
    objc.registerName("initWithSessionWithNoConnection:");
late final _sel_session = objc.registerName("session");
final _objc_msgSend_1493 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setSession_ = objc.registerName("setSession:");
final _objc_msgSend_1494 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setSessionWithNoConnection_ =
    objc.registerName("setSessionWithNoConnection:");
final _objc_msgSend_1495 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_connection = objc.registerName("connection");
final _objc_msgSend_1496 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isPreviewing = objc.registerName("isPreviewing");
late final _sel_captureDevicePointOfInterestForPoint_ =
    objc.registerName("captureDevicePointOfInterestForPoint:");
final _objc_msgSend_1497 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint)>>()
    .asFunction<
        CGPoint Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
final _objc_msgSend_1497Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint)>>()
    .asFunction<
        void Function(ffi.Pointer<CGPoint>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
late final _sel_pointForCaptureDevicePointOfInterest_ =
    objc.registerName("pointForCaptureDevicePointOfInterest:");
late final _sel_metadataOutputRectOfInterestForRect_ =
    objc.registerName("metadataOutputRectOfInterestForRect:");
final _objc_msgSend_1498 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGRect Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect)>>()
    .asFunction<
        CGRect Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
final _objc_msgSend_1498Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<CGRect>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect)>>()
    .asFunction<
        void Function(ffi.Pointer<CGRect>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_rectForMetadataOutputRectOfInterest_ =
    objc.registerName("rectForMetadataOutputRectOfInterest:");
late final _sel_transformedMetadataObjectForMetadataObject_ =
    objc.registerName("transformedMetadataObjectForMetadataObject:");
final _objc_msgSend_1499 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isOrientationSupported =
    objc.registerName("isOrientationSupported");

enum AVCaptureVideoOrientation {
  AVCaptureVideoOrientationPortrait(1),
  AVCaptureVideoOrientationPortraitUpsideDown(2),
  AVCaptureVideoOrientationLandscapeRight(3),
  AVCaptureVideoOrientationLandscapeLeft(4);

  final int value;
  const AVCaptureVideoOrientation(this.value);

  static AVCaptureVideoOrientation fromValue(int value) => switch (value) {
        1 => AVCaptureVideoOrientationPortrait,
        2 => AVCaptureVideoOrientationPortraitUpsideDown,
        3 => AVCaptureVideoOrientationLandscapeRight,
        4 => AVCaptureVideoOrientationLandscapeLeft,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureVideoOrientation: $value"),
      };
}

final _objc_msgSend_1500 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setOrientation_ = objc.registerName("setOrientation:");
final _objc_msgSend_1501 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isMirroringSupported =
    objc.registerName("isMirroringSupported");
late final _sel_automaticallyAdjustsMirroring =
    objc.registerName("automaticallyAdjustsMirroring");
late final _sel_setAutomaticallyAdjustsMirroring_ =
    objc.registerName("setAutomaticallyAdjustsMirroring:");
late final _sel_isMirrored = objc.registerName("isMirrored");
late final _sel_setMirrored_ = objc.registerName("setMirrored:");
late final _sel_connectionWithInputPort_videoPreviewLayer_ =
    objc.registerName("connectionWithInputPort:videoPreviewLayer:");
final _objc_msgSend_1502 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithInputPorts_output_ =
    objc.registerName("initWithInputPorts:output:");
late final _sel_initWithInputPort_videoPreviewLayer_ =
    objc.registerName("initWithInputPort:videoPreviewLayer:");
late final _sel_inputPorts = objc.registerName("inputPorts");
late final _sel_output = objc.registerName("output");
final _objc_msgSend_1503 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_videoPreviewLayer = objc.registerName("videoPreviewLayer");
final _objc_msgSend_1504 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isActive = objc.registerName("isActive");
late final _sel_audioChannels = objc.registerName("audioChannels");
late final _sel_isVideoMirroringSupported =
    objc.registerName("isVideoMirroringSupported");
late final _sel_isVideoMirrored = objc.registerName("isVideoMirrored");
late final _sel_setVideoMirrored_ = objc.registerName("setVideoMirrored:");
late final _sel_automaticallyAdjustsVideoMirroring =
    objc.registerName("automaticallyAdjustsVideoMirroring");
late final _sel_setAutomaticallyAdjustsVideoMirroring_ =
    objc.registerName("setAutomaticallyAdjustsVideoMirroring:");
late final _sel_isVideoRotationAngleSupported_ =
    objc.registerName("isVideoRotationAngleSupported:");
final _objc_msgSend_1505 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_videoRotationAngle = objc.registerName("videoRotationAngle");
late final _sel_setVideoRotationAngle_ =
    objc.registerName("setVideoRotationAngle:");
late final _sel_isVideoOrientationSupported =
    objc.registerName("isVideoOrientationSupported");
late final _sel_videoOrientation = objc.registerName("videoOrientation");
late final _sel_setVideoOrientation_ =
    objc.registerName("setVideoOrientation:");
late final _sel_isVideoFieldModeSupported =
    objc.registerName("isVideoFieldModeSupported");

enum AVVideoFieldMode {
  AVVideoFieldModeBoth(0),
  AVVideoFieldModeTopOnly(1),
  AVVideoFieldModeBottomOnly(2),
  AVVideoFieldModeDeinterlace(3);

  final int value;
  const AVVideoFieldMode(this.value);

  static AVVideoFieldMode fromValue(int value) => switch (value) {
        0 => AVVideoFieldModeBoth,
        1 => AVVideoFieldModeTopOnly,
        2 => AVVideoFieldModeBottomOnly,
        3 => AVVideoFieldModeDeinterlace,
        _ => throw ArgumentError("Unknown value for AVVideoFieldMode: $value"),
      };
}

late final _sel_videoFieldMode = objc.registerName("videoFieldMode");
final _objc_msgSend_1506 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVideoFieldMode_ = objc.registerName("setVideoFieldMode:");
final _objc_msgSend_1507 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isVideoMinFrameDurationSupported =
    objc.registerName("isVideoMinFrameDurationSupported");
late final _sel_videoMinFrameDuration =
    objc.registerName("videoMinFrameDuration");
late final _sel_setVideoMinFrameDuration_ =
    objc.registerName("setVideoMinFrameDuration:");
late final _sel_isVideoMaxFrameDurationSupported =
    objc.registerName("isVideoMaxFrameDurationSupported");
late final _sel_videoMaxFrameDuration =
    objc.registerName("videoMaxFrameDuration");
late final _sel_setVideoMaxFrameDuration_ =
    objc.registerName("setVideoMaxFrameDuration:");
late final _sel_videoMaxScaleAndCropFactor =
    objc.registerName("videoMaxScaleAndCropFactor");
late final _sel_videoScaleAndCropFactor =
    objc.registerName("videoScaleAndCropFactor");
late final _sel_setVideoScaleAndCropFactor_ =
    objc.registerName("setVideoScaleAndCropFactor:");
late final _sel_preferredVideoStabilizationMode =
    objc.registerName("preferredVideoStabilizationMode");
final _objc_msgSend_1508 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPreferredVideoStabilizationMode_ =
    objc.registerName("setPreferredVideoStabilizationMode:");
final _objc_msgSend_1509 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_activeVideoStabilizationMode =
    objc.registerName("activeVideoStabilizationMode");
late final _sel_isVideoStabilizationEnabled =
    objc.registerName("isVideoStabilizationEnabled");
late final _sel_enablesVideoStabilizationWhenAvailable =
    objc.registerName("enablesVideoStabilizationWhenAvailable");
late final _sel_setEnablesVideoStabilizationWhenAvailable_ =
    objc.registerName("setEnablesVideoStabilizationWhenAvailable:");
late final _sel_isCameraIntrinsicMatrixDeliverySupported =
    objc.registerName("isCameraIntrinsicMatrixDeliverySupported");
late final _sel_isCameraIntrinsicMatrixDeliveryEnabled =
    objc.registerName("isCameraIntrinsicMatrixDeliveryEnabled");
late final _sel_setCameraIntrinsicMatrixDeliveryEnabled_ =
    objc.registerName("setCameraIntrinsicMatrixDeliveryEnabled:");
late final _sel_connectionWithMediaType_ =
    objc.registerName("connectionWithMediaType:");
final _objc_msgSend_1510 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_transformedMetadataObjectForMetadataObject_connection_ =
    objc.registerName("transformedMetadataObjectForMetadataObject:connection:");
final _objc_msgSend_1511 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// AVCapturePhoto
class AVCapturePhoto extends objc.NSObject {
  AVCapturePhoto._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCapturePhoto] that points to the same underlying object as [other].
  AVCapturePhoto.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCapturePhoto] that wraps the given raw object pointer.
  AVCapturePhoto.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCapturePhoto].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCapturePhoto);
  }

  /// init
  AVCapturePhoto init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCapturePhoto.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static AVCapturePhoto new1() {
    final _ret = _objc_msgSend_19(_class_AVCapturePhoto, _sel_new);
    return AVCapturePhoto.castFromPointer(_ret, retain: false, release: true);
  }

  /// timestamp
  void getTimestamp(ffi.Pointer<CMTime> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_712Stret(stret, this.pointer, _sel_timestamp)
        : stret.ref = _objc_msgSend_712(this.pointer, _sel_timestamp);
  }

  /// isRawPhoto
  bool get rawPhoto {
    return _objc_msgSend_13(this.pointer, _sel_isRawPhoto);
  }

  /// pixelBuffer
  ffi.Pointer<__CVBuffer> get pixelBuffer {
    return _objc_msgSend_909(this.pointer, _sel_pixelBuffer);
  }

  /// previewPixelBuffer
  ffi.Pointer<__CVBuffer> get previewPixelBuffer {
    return _objc_msgSend_909(this.pointer, _sel_previewPixelBuffer);
  }

  /// embeddedThumbnailPhotoFormat
  objc.NSDictionary? get embeddedThumbnailPhotoFormat {
    final _ret =
        _objc_msgSend_84(this.pointer, _sel_embeddedThumbnailPhotoFormat);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// depthData
  AVDepthData? get depthData {
    final _ret = _objc_msgSend_921(this.pointer, _sel_depthData);
    return _ret.address == 0
        ? null
        : AVDepthData.castFromPointer(_ret, retain: true, release: true);
  }

  /// portraitEffectsMatte
  AVPortraitEffectsMatte? get portraitEffectsMatte {
    final _ret = _objc_msgSend_924(this.pointer, _sel_portraitEffectsMatte);
    return _ret.address == 0
        ? null
        : AVPortraitEffectsMatte.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// semanticSegmentationMatteForType:
  AVSemanticSegmentationMatte? semanticSegmentationMatteForType_(
      objc.NSString semanticSegmentationMatteType) {
    final _ret = _objc_msgSend_1512(
        this.pointer,
        _sel_semanticSegmentationMatteForType_,
        semanticSegmentationMatteType.pointer);
    return _ret.address == 0
        ? null
        : AVSemanticSegmentationMatte.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// metadata
  objc.NSDictionary get metadata {
    final _ret = _objc_msgSend_123(this.pointer, _sel_metadata);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// cameraCalibrationData
  AVCameraCalibrationData? get cameraCalibrationData {
    final _ret = _objc_msgSend_920(this.pointer, _sel_cameraCalibrationData);
    return _ret.address == 0
        ? null
        : AVCameraCalibrationData.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// resolvedSettings
  AVCaptureResolvedPhotoSettings get resolvedSettings {
    final _ret = _objc_msgSend_1514(this.pointer, _sel_resolvedSettings);
    return AVCaptureResolvedPhotoSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// photoCount
  int get photoCount {
    return _objc_msgSend_125(this.pointer, _sel_photoCount);
  }

  /// sourceDeviceType
  objc.NSString? get sourceDeviceType {
    final _ret = _objc_msgSend_20(this.pointer, _sel_sourceDeviceType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileDataRepresentation
  objc.NSData? fileDataRepresentation() {
    final _ret = _objc_msgSend_337(this.pointer, _sel_fileDataRepresentation);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileDataRepresentationWithCustomizer:
  objc.NSData? fileDataRepresentationWithCustomizer_(
      objc.ObjCObjectBase customizer) {
    final _ret = _objc_msgSend_1515(this.pointer,
        _sel_fileDataRepresentationWithCustomizer_, customizer.pointer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// fileDataRepresentationWithReplacementMetadata:replacementEmbeddedThumbnailPhotoFormat:replacementEmbeddedThumbnailPixelBuffer:replacementDepthData:
  objc.NSData?
      fileDataRepresentationWithReplacementMetadata_replacementEmbeddedThumbnailPhotoFormat_replacementEmbeddedThumbnailPixelBuffer_replacementDepthData_(
          objc.NSDictionary? replacementMetadata,
          objc.NSDictionary? replacementEmbeddedThumbnailPhotoFormat,
          ffi.Pointer<__CVBuffer> replacementEmbeddedThumbnailPixelBuffer,
          AVDepthData? replacementDepthData) {
    final _ret = _objc_msgSend_1516(
        this.pointer,
        _sel_fileDataRepresentationWithReplacementMetadata_replacementEmbeddedThumbnailPhotoFormat_replacementEmbeddedThumbnailPixelBuffer_replacementDepthData_,
        replacementMetadata?.pointer ?? ffi.nullptr,
        replacementEmbeddedThumbnailPhotoFormat?.pointer ?? ffi.nullptr,
        replacementEmbeddedThumbnailPixelBuffer,
        replacementDepthData?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// CGImageRepresentation
  ffi.Pointer<CGImage> CGImageRepresentation() {
    return _objc_msgSend_910(this.pointer, _sel_CGImageRepresentation);
  }

  /// previewCGImageRepresentation
  ffi.Pointer<CGImage> previewCGImageRepresentation() {
    return _objc_msgSend_910(this.pointer, _sel_previewCGImageRepresentation);
  }

  /// bracketSettings
  AVCaptureBracketedStillImageSettings? get bracketSettings {
    final _ret = _objc_msgSend_1517(this.pointer, _sel_bracketSettings);
    return _ret.address == 0
        ? null
        : AVCaptureBracketedStillImageSettings.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// sequenceCount
  int get sequenceCount {
    return _objc_msgSend_125(this.pointer, _sel_sequenceCount);
  }

  /// lensStabilizationStatus
  AVCaptureLensStabilizationStatus get lensStabilizationStatus {
    final _ret = _objc_msgSend_1518(this.pointer, _sel_lensStabilizationStatus);
    return AVCaptureLensStabilizationStatus.fromValue(_ret);
  }

  /// allocWithZone:
  static AVCapturePhoto allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_AVCapturePhoto, _sel_allocWithZone_, zone);
    return AVCapturePhoto.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static AVCapturePhoto alloc() {
    final _ret = _objc_msgSend_19(_class_AVCapturePhoto, _sel_alloc);
    return AVCapturePhoto.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCapturePhoto,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCapturePhoto,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCapturePhoto, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_AVCapturePhoto, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCapturePhoto,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCapturePhoto,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCapturePhoto,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCapturePhoto, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_AVCapturePhoto, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCapturePhoto = objc.getClass("AVCapturePhoto");
late final _sel_timestamp = objc.registerName("timestamp");
late final _sel_isRawPhoto = objc.registerName("isRawPhoto");
late final _sel_previewPixelBuffer = objc.registerName("previewPixelBuffer");
late final _sel_semanticSegmentationMatteForType_ =
    objc.registerName("semanticSegmentationMatteForType:");
final _objc_msgSend_1512 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// AVCaptureResolvedPhotoSettings
class AVCaptureResolvedPhotoSettings extends objc.NSObject {
  AVCaptureResolvedPhotoSettings._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureResolvedPhotoSettings] that points to the same underlying object as [other].
  AVCaptureResolvedPhotoSettings.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureResolvedPhotoSettings] that wraps the given raw object pointer.
  AVCaptureResolvedPhotoSettings.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureResolvedPhotoSettings].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVCaptureResolvedPhotoSettings);
  }

  /// init
  AVCaptureResolvedPhotoSettings init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureResolvedPhotoSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCaptureResolvedPhotoSettings new1() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureResolvedPhotoSettings, _sel_new);
    return AVCaptureResolvedPhotoSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// uniqueID
  int get uniqueID {
    return _objc_msgSend_9(this.pointer, _sel_uniqueID);
  }

  /// photoDimensions
  void getPhotoDimensions(ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(stret, this.pointer, _sel_photoDimensions)
        : stret.ref = _objc_msgSend_1418(this.pointer, _sel_photoDimensions);
  }

  /// rawPhotoDimensions
  void getRawPhotoDimensions(ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(stret, this.pointer, _sel_rawPhotoDimensions)
        : stret.ref = _objc_msgSend_1418(this.pointer, _sel_rawPhotoDimensions);
  }

  /// previewDimensions
  void getPreviewDimensions(ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(stret, this.pointer, _sel_previewDimensions)
        : stret.ref = _objc_msgSend_1418(this.pointer, _sel_previewDimensions);
  }

  /// embeddedThumbnailDimensions
  void getEmbeddedThumbnailDimensions(ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(
            stret, this.pointer, _sel_embeddedThumbnailDimensions)
        : stret.ref =
            _objc_msgSend_1418(this.pointer, _sel_embeddedThumbnailDimensions);
  }

  /// rawEmbeddedThumbnailDimensions
  void getRawEmbeddedThumbnailDimensions(ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(
            stret, this.pointer, _sel_rawEmbeddedThumbnailDimensions)
        : stret.ref = _objc_msgSend_1418(
            this.pointer, _sel_rawEmbeddedThumbnailDimensions);
  }

  /// portraitEffectsMatteDimensions
  void getPortraitEffectsMatteDimensions(ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(
            stret, this.pointer, _sel_portraitEffectsMatteDimensions)
        : stret.ref = _objc_msgSend_1418(
            this.pointer, _sel_portraitEffectsMatteDimensions);
  }

  /// dimensionsForSemanticSegmentationMatteOfType:
  void dimensionsForSemanticSegmentationMatteOfType_(
      ffi.Pointer<CMVideoDimensions> stret,
      objc.NSString semanticSegmentationMatteType) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1513Stret(
            stret,
            this.pointer,
            _sel_dimensionsForSemanticSegmentationMatteOfType_,
            semanticSegmentationMatteType.pointer)
        : stret.ref = _objc_msgSend_1513(
            this.pointer,
            _sel_dimensionsForSemanticSegmentationMatteOfType_,
            semanticSegmentationMatteType.pointer);
  }

  /// livePhotoMovieDimensions
  void getLivePhotoMovieDimensions(ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(
            stret, this.pointer, _sel_livePhotoMovieDimensions)
        : stret.ref =
            _objc_msgSend_1418(this.pointer, _sel_livePhotoMovieDimensions);
  }

  /// isFlashEnabled
  bool get flashEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isFlashEnabled);
  }

  /// isRedEyeReductionEnabled
  bool get redEyeReductionEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isRedEyeReductionEnabled);
  }

  /// deferredPhotoProxyDimensions
  void getDeferredPhotoProxyDimensions(ffi.Pointer<CMVideoDimensions> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_1418Stret(
            stret, this.pointer, _sel_deferredPhotoProxyDimensions)
        : stret.ref =
            _objc_msgSend_1418(this.pointer, _sel_deferredPhotoProxyDimensions);
  }

  /// isStillImageStabilizationEnabled
  bool get stillImageStabilizationEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isStillImageStabilizationEnabled);
  }

  /// isVirtualDeviceFusionEnabled
  bool get virtualDeviceFusionEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isVirtualDeviceFusionEnabled);
  }

  /// isDualCameraFusionEnabled
  bool get dualCameraFusionEnabled {
    return _objc_msgSend_13(this.pointer, _sel_isDualCameraFusionEnabled);
  }

  /// expectedPhotoCount
  int get expectedPhotoCount {
    return _objc_msgSend_57(this.pointer, _sel_expectedPhotoCount);
  }

  /// photoProcessingTimeRange
  void getPhotoProcessingTimeRange(ffi.Pointer<CMTimeRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_719Stret(
            stret, this.pointer, _sel_photoProcessingTimeRange)
        : stret.ref =
            _objc_msgSend_719(this.pointer, _sel_photoProcessingTimeRange);
  }

  /// isContentAwareDistortionCorrectionEnabled
  bool get contentAwareDistortionCorrectionEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isContentAwareDistortionCorrectionEnabled);
  }

  /// isFastCapturePrioritizationEnabled
  bool get fastCapturePrioritizationEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isFastCapturePrioritizationEnabled);
  }

  /// allocWithZone:
  static AVCaptureResolvedPhotoSettings allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCaptureResolvedPhotoSettings, _sel_allocWithZone_, zone);
    return AVCaptureResolvedPhotoSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCaptureResolvedPhotoSettings alloc() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureResolvedPhotoSettings, _sel_alloc);
    return AVCaptureResolvedPhotoSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureResolvedPhotoSettings,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureResolvedPhotoSettings,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVCaptureResolvedPhotoSettings,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCaptureResolvedPhotoSettings, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureResolvedPhotoSettings,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureResolvedPhotoSettings,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureResolvedPhotoSettings,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVCaptureResolvedPhotoSettings,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCaptureResolvedPhotoSettings, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureResolvedPhotoSettings =
    objc.getClass("AVCaptureResolvedPhotoSettings");
late final _sel_photoDimensions = objc.registerName("photoDimensions");
late final _sel_rawPhotoDimensions = objc.registerName("rawPhotoDimensions");
late final _sel_previewDimensions = objc.registerName("previewDimensions");
late final _sel_embeddedThumbnailDimensions =
    objc.registerName("embeddedThumbnailDimensions");
late final _sel_rawEmbeddedThumbnailDimensions =
    objc.registerName("rawEmbeddedThumbnailDimensions");
late final _sel_portraitEffectsMatteDimensions =
    objc.registerName("portraitEffectsMatteDimensions");
late final _sel_dimensionsForSemanticSegmentationMatteOfType_ =
    objc.registerName("dimensionsForSemanticSegmentationMatteOfType:");
final _objc_msgSend_1513 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CMVideoDimensions Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        CMVideoDimensions Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1513Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CMVideoDimensions>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CMVideoDimensions>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_livePhotoMovieDimensions =
    objc.registerName("livePhotoMovieDimensions");
late final _sel_isFlashEnabled = objc.registerName("isFlashEnabled");
late final _sel_isRedEyeReductionEnabled =
    objc.registerName("isRedEyeReductionEnabled");
late final _sel_deferredPhotoProxyDimensions =
    objc.registerName("deferredPhotoProxyDimensions");
late final _sel_isStillImageStabilizationEnabled =
    objc.registerName("isStillImageStabilizationEnabled");
late final _sel_isVirtualDeviceFusionEnabled =
    objc.registerName("isVirtualDeviceFusionEnabled");
late final _sel_isDualCameraFusionEnabled =
    objc.registerName("isDualCameraFusionEnabled");
late final _sel_expectedPhotoCount = objc.registerName("expectedPhotoCount");
late final _sel_photoProcessingTimeRange =
    objc.registerName("photoProcessingTimeRange");
late final _sel_resolvedSettings = objc.registerName("resolvedSettings");
final _objc_msgSend_1514 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_photoCount = objc.registerName("photoCount");
late final _sel_fileDataRepresentation =
    objc.registerName("fileDataRepresentation");
late final _sel_fileDataRepresentationWithCustomizer_ =
    objc.registerName("fileDataRepresentationWithCustomizer:");
final _objc_msgSend_1515 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileDataRepresentationWithReplacementMetadata_replacementEmbeddedThumbnailPhotoFormat_replacementEmbeddedThumbnailPixelBuffer_replacementDepthData_ =
    objc.registerName(
        "fileDataRepresentationWithReplacementMetadata:replacementEmbeddedThumbnailPhotoFormat:replacementEmbeddedThumbnailPixelBuffer:replacementDepthData:");
final _objc_msgSend_1516 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__CVBuffer>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__CVBuffer>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_CGImageRepresentation =
    objc.registerName("CGImageRepresentation");
late final _sel_previewCGImageRepresentation =
    objc.registerName("previewCGImageRepresentation");

/// AVCaptureBracketedStillImageSettings
class AVCaptureBracketedStillImageSettings extends objc.NSObject {
  AVCaptureBracketedStillImageSettings._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureBracketedStillImageSettings] that points to the same underlying object as [other].
  AVCaptureBracketedStillImageSettings.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureBracketedStillImageSettings] that wraps the given raw object pointer.
  AVCaptureBracketedStillImageSettings.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureBracketedStillImageSettings].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVCaptureBracketedStillImageSettings);
  }

  /// init
  AVCaptureBracketedStillImageSettings init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureBracketedStillImageSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCaptureBracketedStillImageSettings new1() {
    final _ret =
        _objc_msgSend_19(_class_AVCaptureBracketedStillImageSettings, _sel_new);
    return AVCaptureBracketedStillImageSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVCaptureBracketedStillImageSettings allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCaptureBracketedStillImageSettings, _sel_allocWithZone_, zone);
    return AVCaptureBracketedStillImageSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCaptureBracketedStillImageSettings alloc() {
    final _ret = _objc_msgSend_19(
        _class_AVCaptureBracketedStillImageSettings, _sel_alloc);
    return AVCaptureBracketedStillImageSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureBracketedStillImageSettings,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureBracketedStillImageSettings,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_AVCaptureBracketedStillImageSettings,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCaptureBracketedStillImageSettings, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureBracketedStillImageSettings,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureBracketedStillImageSettings,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureBracketedStillImageSettings,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_AVCaptureBracketedStillImageSettings,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_AVCaptureBracketedStillImageSettings,
        _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureBracketedStillImageSettings =
    objc.getClass("AVCaptureBracketedStillImageSettings");
late final _sel_bracketSettings = objc.registerName("bracketSettings");
final _objc_msgSend_1517 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sequenceCount = objc.registerName("sequenceCount");

enum AVCaptureLensStabilizationStatus {
  AVCaptureLensStabilizationStatusUnsupported(0),
  AVCaptureLensStabilizationStatusOff(1),
  AVCaptureLensStabilizationStatusActive(2),
  AVCaptureLensStabilizationStatusOutOfRange(3),
  AVCaptureLensStabilizationStatusUnavailable(4);

  final int value;
  const AVCaptureLensStabilizationStatus(this.value);

  static AVCaptureLensStabilizationStatus fromValue(int value) =>
      switch (value) {
        0 => AVCaptureLensStabilizationStatusUnsupported,
        1 => AVCaptureLensStabilizationStatusOff,
        2 => AVCaptureLensStabilizationStatusActive,
        3 => AVCaptureLensStabilizationStatusOutOfRange,
        4 => AVCaptureLensStabilizationStatusUnavailable,
        _ => throw ArgumentError(
            "Unknown value for AVCaptureLensStabilizationStatus: $value"),
      };
}

late final _sel_lensStabilizationStatus =
    objc.registerName("lensStabilizationStatus");
final _objc_msgSend_1518 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// AVCaptureStillImageOutput
class AVCaptureStillImageOutput extends AVCaptureOutput {
  AVCaptureStillImageOutput._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVCaptureStillImageOutput] that points to the same underlying object as [other].
  AVCaptureStillImageOutput.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVCaptureStillImageOutput] that wraps the given raw object pointer.
  AVCaptureStillImageOutput.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVCaptureStillImageOutput].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVCaptureStillImageOutput);
  }

  /// init
  AVCaptureStillImageOutput init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVCaptureStillImageOutput.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVCaptureStillImageOutput new1() {
    final _ret = _objc_msgSend_19(_class_AVCaptureStillImageOutput, _sel_new);
    return AVCaptureStillImageOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// outputSettings
  objc.NSDictionary get outputSettings {
    final _ret = _objc_msgSend_123(this.pointer, _sel_outputSettings);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setOutputSettings:
  set outputSettings(objc.NSDictionary value) {
    return _objc_msgSend_124(
        this.pointer, _sel_setOutputSettings_, value.pointer);
  }

  /// availableImageDataCVPixelFormatTypes
  objc.NSArray get availableImageDataCVPixelFormatTypes {
    final _ret = _objc_msgSend_33(
        this.pointer, _sel_availableImageDataCVPixelFormatTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// availableImageDataCodecTypes
  objc.NSArray get availableImageDataCodecTypes {
    final _ret =
        _objc_msgSend_33(this.pointer, _sel_availableImageDataCodecTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// isStillImageStabilizationSupported
  bool get stillImageStabilizationSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isStillImageStabilizationSupported);
  }

  /// automaticallyEnablesStillImageStabilizationWhenAvailable
  bool get automaticallyEnablesStillImageStabilizationWhenAvailable {
    return _objc_msgSend_13(this.pointer,
        _sel_automaticallyEnablesStillImageStabilizationWhenAvailable);
  }

  /// setAutomaticallyEnablesStillImageStabilizationWhenAvailable:
  set automaticallyEnablesStillImageStabilizationWhenAvailable(bool value) {
    return _objc_msgSend_14(
        this.pointer,
        _sel_setAutomaticallyEnablesStillImageStabilizationWhenAvailable_,
        value);
  }

  /// isStillImageStabilizationActive
  bool get stillImageStabilizationActive {
    return _objc_msgSend_13(this.pointer, _sel_isStillImageStabilizationActive);
  }

  /// isHighResolutionStillImageOutputEnabled
  bool get highResolutionStillImageOutputEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isHighResolutionStillImageOutputEnabled);
  }

  /// setHighResolutionStillImageOutputEnabled:
  set highResolutionStillImageOutputEnabled(bool value) {
    return _objc_msgSend_14(
        this.pointer, _sel_setHighResolutionStillImageOutputEnabled_, value);
  }

  /// isCapturingStillImage
  bool get capturingStillImage {
    return _objc_msgSend_13(this.pointer, _sel_isCapturingStillImage);
  }

  /// captureStillImageAsynchronouslyFromConnection:completionHandler:
  void captureStillImageAsynchronouslyFromConnection_completionHandler_(
      AVCaptureConnection connection,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>,
                  ffi.Pointer<objc.ObjCObject>)>
          handler) {
    _objc_msgSend_1519(
        this.pointer,
        _sel_captureStillImageAsynchronouslyFromConnection_completionHandler_,
        connection.pointer,
        handler.pointer);
  }

  /// jpegStillImageNSDataRepresentation:
  static objc.NSData? jpegStillImageNSDataRepresentation_(
      ffi.Pointer<opaqueCMSampleBuffer> jpegSampleBuffer) {
    final _ret = _objc_msgSend_1520(_class_AVCaptureStillImageOutput,
        _sel_jpegStillImageNSDataRepresentation_, jpegSampleBuffer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// maxBracketedCaptureStillImageCount
  int get maxBracketedCaptureStillImageCount {
    return _objc_msgSend_57(
        this.pointer, _sel_maxBracketedCaptureStillImageCount);
  }

  /// isLensStabilizationDuringBracketedCaptureSupported
  bool get lensStabilizationDuringBracketedCaptureSupported {
    return _objc_msgSend_13(
        this.pointer, _sel_isLensStabilizationDuringBracketedCaptureSupported);
  }

  /// isLensStabilizationDuringBracketedCaptureEnabled
  bool get lensStabilizationDuringBracketedCaptureEnabled {
    return _objc_msgSend_13(
        this.pointer, _sel_isLensStabilizationDuringBracketedCaptureEnabled);
  }

  /// setLensStabilizationDuringBracketedCaptureEnabled:
  set lensStabilizationDuringBracketedCaptureEnabled(bool value) {
    return _objc_msgSend_14(this.pointer,
        _sel_setLensStabilizationDuringBracketedCaptureEnabled_, value);
  }

  /// prepareToCaptureStillImageBracketFromConnection:withSettingsArray:completionHandler:
  void
      prepareToCaptureStillImageBracketFromConnection_withSettingsArray_completionHandler_(
          AVCaptureConnection connection,
          objc.NSArray settings,
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Bool, ffi.Pointer<objc.ObjCObject>)>
              handler) {
    _objc_msgSend_1521(
        this.pointer,
        _sel_prepareToCaptureStillImageBracketFromConnection_withSettingsArray_completionHandler_,
        connection.pointer,
        settings.pointer,
        handler.pointer);
  }

  /// captureStillImageBracketAsynchronouslyFromConnection:withSettingsArray:completionHandler:
  void
      captureStillImageBracketAsynchronouslyFromConnection_withSettingsArray_completionHandler_(
          AVCaptureConnection connection,
          objc.NSArray settings,
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<opaqueCMSampleBuffer>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>
              handler) {
    _objc_msgSend_1522(
        this.pointer,
        _sel_captureStillImageBracketAsynchronouslyFromConnection_withSettingsArray_completionHandler_,
        connection.pointer,
        settings.pointer,
        handler.pointer);
  }

  /// allocWithZone:
  static AVCaptureStillImageOutput allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVCaptureStillImageOutput, _sel_allocWithZone_, zone);
    return AVCaptureStillImageOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVCaptureStillImageOutput alloc() {
    final _ret = _objc_msgSend_19(_class_AVCaptureStillImageOutput, _sel_alloc);
    return AVCaptureStillImageOutput.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVCaptureStillImageOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVCaptureStillImageOutput,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVCaptureStillImageOutput, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVCaptureStillImageOutput, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVCaptureStillImageOutput,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVCaptureStillImageOutput,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVCaptureStillImageOutput,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVCaptureStillImageOutput, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVCaptureStillImageOutput, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVCaptureStillImageOutput =
    objc.getClass("AVCaptureStillImageOutput");
late final _sel_setOutputSettings_ = objc.registerName("setOutputSettings:");
late final _sel_availableImageDataCVPixelFormatTypes =
    objc.registerName("availableImageDataCVPixelFormatTypes");
late final _sel_availableImageDataCodecTypes =
    objc.registerName("availableImageDataCodecTypes");
late final _sel_automaticallyEnablesStillImageStabilizationWhenAvailable = objc
    .registerName("automaticallyEnablesStillImageStabilizationWhenAvailable");
late final _sel_setAutomaticallyEnablesStillImageStabilizationWhenAvailable_ =
    objc.registerName(
        "setAutomaticallyEnablesStillImageStabilizationWhenAvailable:");
late final _sel_isStillImageStabilizationActive =
    objc.registerName("isStillImageStabilizationActive");
late final _sel_isHighResolutionStillImageOutputEnabled =
    objc.registerName("isHighResolutionStillImageOutputEnabled");
late final _sel_setHighResolutionStillImageOutputEnabled_ =
    objc.registerName("setHighResolutionStillImageOutputEnabled:");
late final _sel_isCapturingStillImage =
    objc.registerName("isCapturingStillImage");
void _ObjCBlock_ffiVoid_opaqueCMSampleBuffer_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<opaqueCMSampleBuffer> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<opaqueCMSampleBuffer>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_opaqueCMSampleBuffer_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<opaqueCMSampleBuffer> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<opaqueCMSampleBuffer>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_opaqueCMSampleBuffer_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_opaqueCMSampleBuffer_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(ffi.Pointer<opaqueCMSampleBuffer>, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_opaqueCMSampleBuffer_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<opaqueCMSampleBuffer> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(arg0, arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)>
      listener(
          void Function(ffi.Pointer<opaqueCMSampleBuffer>, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<opaqueCMSampleBuffer>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_opaqueCMSampleBuffer_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<opaqueCMSampleBuffer> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
            fn(
                arg0,
                arg1.address == 0
                    ? null
                    : objc.NSError.castFromPointer(arg1,
                        retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_opaqueCMSampleBuffer_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>,
                ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<opaqueCMSampleBuffer>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_opaqueCMSampleBuffer_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>)> {
  void call(ffi.Pointer<opaqueCMSampleBuffer> arg0, objc.NSError? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<opaqueCMSampleBuffer> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<opaqueCMSampleBuffer>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_captureStillImageAsynchronouslyFromConnection_completionHandler_ =
    objc.registerName(
        "captureStillImageAsynchronouslyFromConnection:completionHandler:");
final _objc_msgSend_1519 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_jpegStillImageNSDataRepresentation_ =
    objc.registerName("jpegStillImageNSDataRepresentation:");
final _objc_msgSend_1520 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<opaqueCMSampleBuffer>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<opaqueCMSampleBuffer>)>();
late final _sel_maxBracketedCaptureStillImageCount =
    objc.registerName("maxBracketedCaptureStillImageCount");
late final _sel_isLensStabilizationDuringBracketedCaptureEnabled =
    objc.registerName("isLensStabilizationDuringBracketedCaptureEnabled");
late final _sel_setLensStabilizationDuringBracketedCaptureEnabled_ =
    objc.registerName("setLensStabilizationDuringBracketedCaptureEnabled:");
late final _sel_prepareToCaptureStillImageBracketFromConnection_withSettingsArray_completionHandler_ =
    objc.registerName(
        "prepareToCaptureStillImageBracketFromConnection:withSettingsArray:completionHandler:");
final _objc_msgSend_1521 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
void
    _ObjCBlock_ffiVoid_opaqueCMSampleBuffer_AVCaptureBracketedStillImageSettings_NSError_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<opaqueCMSampleBuffer> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<opaqueCMSampleBuffer> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<opaqueCMSampleBuffer>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void
    _ObjCBlock_ffiVoid_opaqueCMSampleBuffer_AVCaptureBracketedStillImageSettings_NSError_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<opaqueCMSampleBuffer> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<opaqueCMSampleBuffer>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_opaqueCMSampleBuffer_AVCaptureBracketedStillImageSettings_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<opaqueCMSampleBuffer>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<opaqueCMSampleBuffer>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_opaqueCMSampleBuffer_AVCaptureBracketedStillImageSettings_NSError_fnPtrTrampoline).cast(), ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunction(void Function(ffi.Pointer<opaqueCMSampleBuffer>, AVCaptureBracketedStillImageSettings?, objc.NSError?) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_opaqueCMSampleBuffer_AVCaptureBracketedStillImageSettings_NSError_closureTrampoline)
                          .cast(),
                  (ffi.Pointer<opaqueCMSampleBuffer> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2) =>
                      fn(arg0, arg1.address == 0 ? null : AVCaptureBracketedStillImageSettings.castFromPointer(arg1, retain: true, release: true), arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>,
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(ffi.Pointer<opaqueCMSampleBuffer>,
              AVCaptureBracketedStillImageSettings?, objc.NSError?)
          fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<opaqueCMSampleBuffer>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_opaqueCMSampleBuffer_AVCaptureBracketedStillImageSettings_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<opaqueCMSampleBuffer> arg0,
                ffi.Pointer<objc.ObjCObject> arg1,
                ffi.Pointer<objc.ObjCObject> arg2) =>
            fn(
                arg0,
                arg1.address == 0
                    ? null
                    : AVCaptureBracketedStillImageSettings.castFromPointer(arg1, retain: false, release: true),
                arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_opaqueCMSampleBuffer_AVCaptureBracketedStillImageSettings_NSError(
            raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<opaqueCMSampleBuffer>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<opaqueCMSampleBuffer>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_opaqueCMSampleBuffer_AVCaptureBracketedStillImageSettings_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<opaqueCMSampleBuffer>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(ffi.Pointer<opaqueCMSampleBuffer> arg0,
          AVCaptureBracketedStillImageSettings? arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<opaqueCMSampleBuffer> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<opaqueCMSampleBuffer>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0,
          arg1?.pointer ?? ffi.nullptr, arg2?.pointer ?? ffi.nullptr);
}

late final _sel_captureStillImageBracketAsynchronouslyFromConnection_withSettingsArray_completionHandler_ =
    objc.registerName(
        "captureStillImageBracketAsynchronouslyFromConnection:withSettingsArray:completionHandler:");
final _objc_msgSend_1522 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

final class simd_float3x3 extends ffi.Opaque {}

final class simd_float4x3 extends ffi.Opaque {}

/// AVExternalStorageDevice
class AVExternalStorageDevice extends objc.NSObject {
  AVExternalStorageDevice._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVExternalStorageDevice] that points to the same underlying object as [other].
  AVExternalStorageDevice.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVExternalStorageDevice] that wraps the given raw object pointer.
  AVExternalStorageDevice.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVExternalStorageDevice].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVExternalStorageDevice);
  }

  /// init
  AVExternalStorageDevice init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return AVExternalStorageDevice.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static AVExternalStorageDevice new1() {
    final _ret = _objc_msgSend_19(_class_AVExternalStorageDevice, _sel_new);
    return AVExternalStorageDevice.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// displayName
  objc.NSString? get displayName {
    final _ret = _objc_msgSend_20(this.pointer, _sel_displayName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// freeSize
  int get freeSize {
    return _objc_msgSend_125(this.pointer, _sel_freeSize);
  }

  /// totalSize
  int get totalSize {
    return _objc_msgSend_125(this.pointer, _sel_totalSize);
  }

  /// isConnected
  bool get connected {
    return _objc_msgSend_13(this.pointer, _sel_isConnected);
  }

  /// uuid
  NSUUID? get uuid {
    final _ret = _objc_msgSend_1523(this.pointer, _sel_uuid);
    return _ret.address == 0
        ? null
        : NSUUID.castFromPointer(_ret, retain: true, release: true);
  }

  /// isNotRecommendedForCaptureUse
  bool get notRecommendedForCaptureUse {
    return _objc_msgSend_13(this.pointer, _sel_isNotRecommendedForCaptureUse);
  }

  /// nextAvailableURLsWithPathExtensions:error:
  objc.NSArray? nextAvailableURLsWithPathExtensions_error_(
      objc.NSArray extensionArray,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_1524(
        this.pointer,
        _sel_nextAvailableURLsWithPathExtensions_error_,
        extensionArray.pointer,
        outError);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// authorizationStatus
  static AVAuthorizationStatus getAuthorizationStatus() {
    final _ret = _objc_msgSend_1525(
        _class_AVExternalStorageDevice, _sel_authorizationStatus);
    return AVAuthorizationStatus.fromValue(_ret);
  }

  /// requestAccessWithCompletionHandler:
  static void requestAccessWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)> handler) {
    _objc_msgSend_1333(_class_AVExternalStorageDevice,
        _sel_requestAccessWithCompletionHandler_, handler.pointer);
  }

  /// allocWithZone:
  static AVExternalStorageDevice allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_AVExternalStorageDevice, _sel_allocWithZone_, zone);
    return AVExternalStorageDevice.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVExternalStorageDevice alloc() {
    final _ret = _objc_msgSend_19(_class_AVExternalStorageDevice, _sel_alloc);
    return AVExternalStorageDevice.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_AVExternalStorageDevice,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_AVExternalStorageDevice,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_AVExternalStorageDevice, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_AVExternalStorageDevice, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_AVExternalStorageDevice,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_AVExternalStorageDevice,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_AVExternalStorageDevice,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_AVExternalStorageDevice, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_AVExternalStorageDevice, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_AVExternalStorageDevice =
    objc.getClass("AVExternalStorageDevice");
late final _sel_freeSize = objc.registerName("freeSize");
late final _sel_totalSize = objc.registerName("totalSize");
late final _sel_uuid = objc.registerName("uuid");
final _objc_msgSend_1523 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isNotRecommendedForCaptureUse =
    objc.registerName("isNotRecommendedForCaptureUse");
late final _sel_nextAvailableURLsWithPathExtensions_error_ =
    objc.registerName("nextAvailableURLsWithPathExtensions:error:");
final _objc_msgSend_1524 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_authorizationStatus = objc.registerName("authorizationStatus");
final _objc_msgSend_1525 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_requestAccessWithCompletionHandler_ =
    objc.registerName("requestAccessWithCompletionHandler:");

enum NSDecodingFailurePolicy {
  NSDecodingFailurePolicyRaiseException(0),
  NSDecodingFailurePolicySetErrorAndReturn(1);

  final int value;
  const NSDecodingFailurePolicy(this.value);

  static NSDecodingFailurePolicy fromValue(int value) => switch (value) {
        0 => NSDecodingFailurePolicyRaiseException,
        1 => NSDecodingFailurePolicySetErrorAndReturn,
        _ => throw ArgumentError(
            "Unknown value for NSDecodingFailurePolicy: $value"),
      };
}

enum NSPropertyListFormat {
  NSPropertyListOpenStepFormat(1),
  NSPropertyListXMLFormat_v1_0(100),
  NSPropertyListBinaryFormat_v1_0(200);

  final int value;
  const NSPropertyListFormat(this.value);

  static NSPropertyListFormat fromValue(int value) => switch (value) {
        1 => NSPropertyListOpenStepFormat,
        100 => NSPropertyListXMLFormat_v1_0,
        200 => NSPropertyListBinaryFormat_v1_0,
        _ =>
          throw ArgumentError("Unknown value for NSPropertyListFormat: $value"),
      };
}

final class NSEdgeInsets extends ffi.Struct {
  @ffi.Double()
  external double top;

  @ffi.Double()
  external double left;

  @ffi.Double()
  external double bottom;

  @ffi.Double()
  external double right;
}

/// NSKeyedArchiver
class NSKeyedArchiver extends objc.NSCoder {
  NSKeyedArchiver._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSKeyedArchiver] that points to the same underlying object as [other].
  NSKeyedArchiver.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSKeyedArchiver] that wraps the given raw object pointer.
  NSKeyedArchiver.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSKeyedArchiver].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSKeyedArchiver);
  }

  /// initRequiringSecureCoding:
  NSKeyedArchiver initRequiringSecureCoding_(bool requiresSecureCoding) {
    final _ret = _objc_msgSend_1526(
        this.pointer, _sel_initRequiringSecureCoding_, requiresSecureCoding);
    return NSKeyedArchiver.castFromPointer(_ret, retain: true, release: true);
  }

  /// archivedDataWithRootObject:requiringSecureCoding:error:
  static objc.NSData? archivedDataWithRootObject_requiringSecureCoding_error_(
      objc.ObjCObjectBase object,
      bool requiresSecureCoding,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_1527(
        _class_NSKeyedArchiver,
        _sel_archivedDataWithRootObject_requiringSecureCoding_error_,
        object.pointer,
        requiresSecureCoding,
        error);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSKeyedArchiver init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSKeyedArchiver.castFromPointer(_ret, retain: true, release: true);
  }

  /// initForWritingWithMutableData:
  NSKeyedArchiver initForWritingWithMutableData_(objc.NSMutableData data) {
    final _ret = _objc_msgSend_1528(
        this.pointer, _sel_initForWritingWithMutableData_, data.pointer);
    return NSKeyedArchiver.castFromPointer(_ret, retain: true, release: true);
  }

  /// archivedDataWithRootObject:
  static objc.NSData archivedDataWithRootObject_(
      objc.ObjCObjectBase rootObject) {
    final _ret = _objc_msgSend_1529(_class_NSKeyedArchiver,
        _sel_archivedDataWithRootObject_, rootObject.pointer);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// archiveRootObject:toFile:
  static bool archiveRootObject_toFile_(
      objc.ObjCObjectBase rootObject, objc.NSString path) {
    return _objc_msgSend_1530(_class_NSKeyedArchiver,
        _sel_archiveRootObject_toFile_, rootObject.pointer, path.pointer);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_85(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_202(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  /// outputFormat
  NSPropertyListFormat get outputFormat {
    final _ret = _objc_msgSend_1531(this.pointer, _sel_outputFormat);
    return NSPropertyListFormat.fromValue(_ret);
  }

  /// setOutputFormat:
  set outputFormat(NSPropertyListFormat value) {
    return _objc_msgSend_1532(this.pointer, _sel_setOutputFormat_, value.value);
  }

  /// encodedData
  objc.NSData get encodedData {
    final _ret = _objc_msgSend_115(this.pointer, _sel_encodedData);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// finishEncoding
  void finishEncoding() {
    _objc_msgSend_7(this.pointer, _sel_finishEncoding);
  }

  /// setClassName:forClass:
  void setClassName_forClass_(
      objc.NSString? codedName, objc.ObjCObjectBase cls) {
    _objc_msgSend_1533(this.pointer, _sel_setClassName_forClass_,
        codedName?.pointer ?? ffi.nullptr, cls.pointer);
  }

  /// classNameForClass:
  objc.NSString? classNameForClass_(objc.ObjCObjectBase cls) {
    final _ret =
        _objc_msgSend_177(this.pointer, _sel_classNameForClass_, cls.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// encodeObject:forKey:
  void encodeObject_forKey_(objc.ObjCObjectBase? object, objc.NSString key) {
    _objc_msgSend_17(this.pointer, _sel_encodeObject_forKey_,
        object?.pointer ?? ffi.nullptr, key.pointer);
  }

  /// encodeConditionalObject:forKey:
  void encodeConditionalObject_forKey_(
      objc.ObjCObjectBase? object, objc.NSString key) {
    _objc_msgSend_17(this.pointer, _sel_encodeConditionalObject_forKey_,
        object?.pointer ?? ffi.nullptr, key.pointer);
  }

  /// encodeBool:forKey:
  void encodeBool_forKey_(bool value, objc.NSString key) {
    _objc_msgSend_1534(
        this.pointer, _sel_encodeBool_forKey_, value, key.pointer);
  }

  /// encodeInt:forKey:
  void encodeInt_forKey_(int value, objc.NSString key) {
    _objc_msgSend_1535(
        this.pointer, _sel_encodeInt_forKey_, value, key.pointer);
  }

  /// encodeInt32:forKey:
  void encodeInt32_forKey_(int value, objc.NSString key) {
    _objc_msgSend_1536(
        this.pointer, _sel_encodeInt32_forKey_, value, key.pointer);
  }

  /// encodeInt64:forKey:
  void encodeInt64_forKey_(int value, objc.NSString key) {
    _objc_msgSend_1537(
        this.pointer, _sel_encodeInt64_forKey_, value, key.pointer);
  }

  /// encodeFloat:forKey:
  void encodeFloat_forKey_(double value, objc.NSString key) {
    _objc_msgSend_1538(
        this.pointer, _sel_encodeFloat_forKey_, value, key.pointer);
  }

  /// encodeDouble:forKey:
  void encodeDouble_forKey_(double value, objc.NSString key) {
    _objc_msgSend_1539(
        this.pointer, _sel_encodeDouble_forKey_, value, key.pointer);
  }

  /// encodeBytes:length:forKey:
  void encodeBytes_length_forKey_(
      ffi.Pointer<ffi.Uint8> bytes, int length, objc.NSString key) {
    _objc_msgSend_1540(this.pointer, _sel_encodeBytes_length_forKey_, bytes,
        length, key.pointer);
  }

  /// requiresSecureCoding
  bool get requiresSecureCoding {
    return _objc_msgSend_13(this.pointer, _sel_requiresSecureCoding);
  }

  /// setRequiresSecureCoding:
  set requiresSecureCoding(bool value) {
    return _objc_msgSend_14(this.pointer, _sel_setRequiresSecureCoding_, value);
  }
}

late final _class_NSKeyedArchiver = objc.getClass("NSKeyedArchiver");
late final _sel_initRequiringSecureCoding_ =
    objc.registerName("initRequiringSecureCoding:");
final _objc_msgSend_1526 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_archivedDataWithRootObject_requiringSecureCoding_error_ = objc
    .registerName("archivedDataWithRootObject:requiringSecureCoding:error:");
final _objc_msgSend_1527 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initForWritingWithMutableData_ =
    objc.registerName("initForWritingWithMutableData:");
final _objc_msgSend_1528 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_archivedDataWithRootObject_ =
    objc.registerName("archivedDataWithRootObject:");
final _objc_msgSend_1529 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_archiveRootObject_toFile_ =
    objc.registerName("archiveRootObject:toFile:");
final _objc_msgSend_1530 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1531 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setOutputFormat_ = objc.registerName("setOutputFormat:");
final _objc_msgSend_1532 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_encodedData = objc.registerName("encodedData");
late final _sel_finishEncoding = objc.registerName("finishEncoding");
late final _sel_setClassName_forClass_ =
    objc.registerName("setClassName:forClass:");
final _objc_msgSend_1533 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_classNameForClass_ = objc.registerName("classNameForClass:");
late final _sel_encodeObject_forKey_ =
    objc.registerName("encodeObject:forKey:");
late final _sel_encodeConditionalObject_forKey_ =
    objc.registerName("encodeConditionalObject:forKey:");
late final _sel_encodeBool_forKey_ = objc.registerName("encodeBool:forKey:");
final _objc_msgSend_1534 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_encodeInt_forKey_ = objc.registerName("encodeInt:forKey:");
final _objc_msgSend_1535 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_encodeInt32_forKey_ = objc.registerName("encodeInt32:forKey:");
final _objc_msgSend_1536 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_encodeInt64_forKey_ = objc.registerName("encodeInt64:forKey:");
final _objc_msgSend_1537 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int64,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_encodeFloat_forKey_ = objc.registerName("encodeFloat:forKey:");
final _objc_msgSend_1538 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Float,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_encodeDouble_forKey_ =
    objc.registerName("encodeDouble:forKey:");
final _objc_msgSend_1539 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_encodeBytes_length_forKey_ =
    objc.registerName("encodeBytes:length:forKey:");
final _objc_msgSend_1540 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Uint8>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Uint8>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_requiresSecureCoding =
    objc.registerName("requiresSecureCoding");
late final _sel_setRequiresSecureCoding_ =
    objc.registerName("setRequiresSecureCoding:");

/// NSThread
class NSThread extends objc.NSObject {
  NSThread._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSThread] that points to the same underlying object as [other].
  NSThread.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSThread] that wraps the given raw object pointer.
  NSThread.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSThread].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSThread);
  }

  /// currentThread
  static NSThread getCurrentThread() {
    final _ret = _objc_msgSend_1541(_class_NSThread, _sel_currentThread);
    return NSThread.castFromPointer(_ret, retain: true, release: true);
  }

  /// detachNewThreadWithBlock:
  static void detachNewThreadWithBlock_(
      objc.ObjCBlock<ffi.Void Function()> block) {
    _objc_msgSend_261(
        _class_NSThread, _sel_detachNewThreadWithBlock_, block.pointer);
  }

  /// detachNewThreadSelector:toTarget:withObject:
  static void detachNewThreadSelector_toTarget_withObject_(
      ffi.Pointer<objc.ObjCSelector> selector,
      objc.ObjCObjectBase target,
      objc.ObjCObjectBase? argument) {
    _objc_msgSend_263(
        _class_NSThread,
        _sel_detachNewThreadSelector_toTarget_withObject_,
        selector,
        target.pointer,
        argument?.pointer ?? ffi.nullptr);
  }

  /// isMultiThreaded
  static bool isMultiThreaded() {
    return _objc_msgSend_13(_class_NSThread, _sel_isMultiThreaded);
  }

  /// threadDictionary
  objc.NSMutableDictionary get threadDictionary {
    final _ret = _objc_msgSend_1542(this.pointer, _sel_threadDictionary);
    return objc.NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// sleepUntilDate:
  static void sleepUntilDate_(objc.NSDate date) {
    _objc_msgSend_258(_class_NSThread, _sel_sleepUntilDate_, date.pointer);
  }

  /// sleepForTimeInterval:
  static void sleepForTimeInterval_(double ti) {
    _objc_msgSend_574(_class_NSThread, _sel_sleepForTimeInterval_, ti);
  }

  /// exit
  static void exit() {
    _objc_msgSend_7(_class_NSThread, _sel_exit);
  }

  /// threadPriority
  double get threadPriority {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(this.pointer, _sel_threadPriority)
        : _objc_msgSend_18(this.pointer, _sel_threadPriority);
  }

  /// setThreadPriority:
  set threadPriority(double value) {
    return _objc_msgSend_226(this.pointer, _sel_setThreadPriority_, value);
  }

  /// qualityOfService
  NSQualityOfService get qualityOfService {
    final _ret = _objc_msgSend_397(this.pointer, _sel_qualityOfService);
    return NSQualityOfService.fromValue(_ret);
  }

  /// setQualityOfService:
  set qualityOfService(NSQualityOfService value) {
    return _objc_msgSend_398(
        this.pointer, _sel_setQualityOfService_, value.value);
  }

  /// callStackReturnAddresses
  static objc.NSArray getCallStackReturnAddresses() {
    final _ret =
        _objc_msgSend_33(_class_NSThread, _sel_callStackReturnAddresses);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// callStackSymbols
  static objc.NSArray getCallStackSymbols() {
    final _ret = _objc_msgSend_33(_class_NSThread, _sel_callStackSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_20(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString? value) {
    return _objc_msgSend_21(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  /// stackSize
  int get stackSize {
    return _objc_msgSend_57(this.pointer, _sel_stackSize);
  }

  /// setStackSize:
  set stackSize(int value) {
    return _objc_msgSend_135(this.pointer, _sel_setStackSize_, value);
  }

  /// isMainThread
  static bool getIsMainThread() {
    return _objc_msgSend_13(_class_NSThread, _sel_isMainThread);
  }

  /// mainThread
  static NSThread getMainThread() {
    final _ret = _objc_msgSend_1541(_class_NSThread, _sel_mainThread);
    return NSThread.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSThread init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSThread.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithTarget:selector:object:
  NSThread initWithTarget_selector_object_(objc.ObjCObjectBase target,
      ffi.Pointer<objc.ObjCSelector> selector, objc.ObjCObjectBase? argument) {
    final _ret = _objc_msgSend_1543(
        this.pointer,
        _sel_initWithTarget_selector_object_,
        target.pointer,
        selector,
        argument?.pointer ?? ffi.nullptr);
    return NSThread.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithBlock:
  NSThread initWithBlock_(objc.ObjCBlock<ffi.Void Function()> block) {
    final _ret =
        _objc_msgSend_1544(this.pointer, _sel_initWithBlock_, block.pointer);
    return NSThread.castFromPointer(_ret, retain: true, release: true);
  }

  /// isExecuting
  bool get executing {
    return _objc_msgSend_13(this.pointer, _sel_isExecuting);
  }

  /// isFinished
  bool get finished {
    return _objc_msgSend_13(this.pointer, _sel_isFinished);
  }

  /// isCancelled
  bool get cancelled {
    return _objc_msgSend_13(this.pointer, _sel_isCancelled);
  }

  /// cancel
  void cancel() {
    _objc_msgSend_7(this.pointer, _sel_cancel);
  }

  /// start
  void start() {
    _objc_msgSend_7(this.pointer, _sel_start);
  }

  /// main
  void main() {
    _objc_msgSend_7(this.pointer, _sel_main);
  }

  /// new
  static NSThread new1() {
    final _ret = _objc_msgSend_19(_class_NSThread, _sel_new);
    return NSThread.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSThread allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(_class_NSThread, _sel_allocWithZone_, zone);
    return NSThread.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSThread alloc() {
    final _ret = _objc_msgSend_19(_class_NSThread, _sel_alloc);
    return NSThread.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSThread,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSThread,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSThread, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSThread, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSThread,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSThread,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSThread,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_33(_class_NSThread, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSThread, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSThread = objc.getClass("NSThread");
late final _sel_currentThread = objc.registerName("currentThread");
final _objc_msgSend_1541 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_detachNewThreadWithBlock_ =
    objc.registerName("detachNewThreadWithBlock:");
late final _sel_detachNewThreadSelector_toTarget_withObject_ =
    objc.registerName("detachNewThreadSelector:toTarget:withObject:");
late final _sel_isMultiThreaded = objc.registerName("isMultiThreaded");
late final _sel_threadDictionary = objc.registerName("threadDictionary");
final _objc_msgSend_1542 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sleepUntilDate_ = objc.registerName("sleepUntilDate:");
late final _sel_sleepForTimeInterval_ =
    objc.registerName("sleepForTimeInterval:");
late final _sel_exit = objc.registerName("exit");
late final _sel_stackSize = objc.registerName("stackSize");
late final _sel_setStackSize_ = objc.registerName("setStackSize:");
late final _sel_isMainThread = objc.registerName("isMainThread");
late final _sel_mainThread = objc.registerName("mainThread");
late final _sel_initWithTarget_selector_object_ =
    objc.registerName("initWithTarget:selector:object:");
final _objc_msgSend_1543 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithBlock_ = objc.registerName("initWithBlock:");
final _objc_msgSend_1544 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();

/// NSPredicate
class NSPredicate extends objc.NSObject {
  NSPredicate._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPredicate] that points to the same underlying object as [other].
  NSPredicate.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPredicate] that wraps the given raw object pointer.
  NSPredicate.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPredicate].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSPredicate);
  }

  /// predicateWithFormat:argumentArray:
  static NSPredicate predicateWithFormat_argumentArray_(
      objc.NSString predicateFormat, objc.NSArray? arguments) {
    final _ret = _objc_msgSend_1545(
        _class_NSPredicate,
        _sel_predicateWithFormat_argumentArray_,
        predicateFormat.pointer,
        arguments?.pointer ?? ffi.nullptr);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateWithFormat:
  static NSPredicate predicateWithFormat_(objc.NSString predicateFormat) {
    final _ret = _objc_msgSend_1546(
        _class_NSPredicate, _sel_predicateWithFormat_, predicateFormat.pointer);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateWithFormat:arguments:
  static NSPredicate predicateWithFormat_arguments_(
      objc.NSString predicateFormat, ffi.Pointer<ffi.Char> argList) {
    final _ret = _objc_msgSend_1547(_class_NSPredicate,
        _sel_predicateWithFormat_arguments_, predicateFormat.pointer, argList);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateFromMetadataQueryString:
  static NSPredicate? predicateFromMetadataQueryString_(
      objc.NSString queryString) {
    final _ret = _objc_msgSend_1548(_class_NSPredicate,
        _sel_predicateFromMetadataQueryString_, queryString.pointer);
    return _ret.address == 0
        ? null
        : NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateWithValue:
  static NSPredicate predicateWithValue_(bool value) {
    final _ret =
        _objc_msgSend_1549(_class_NSPredicate, _sel_predicateWithValue_, value);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateWithBlock:
  static NSPredicate predicateWithBlock_(
      objc.ObjCBlock<
              ffi.Bool Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          block) {
    final _ret = _objc_msgSend_1550(
        _class_NSPredicate, _sel_predicateWithBlock_, block.pointer);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateFormat
  objc.NSString get predicateFormat {
    final _ret = _objc_msgSend_11(this.pointer, _sel_predicateFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateWithSubstitutionVariables:
  NSPredicate predicateWithSubstitutionVariables_(objc.NSDictionary variables) {
    final _ret = _objc_msgSend_527(this.pointer,
        _sel_predicateWithSubstitutionVariables_, variables.pointer);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// evaluateWithObject:
  bool evaluateWithObject_(objc.ObjCObjectBase? object) {
    return _objc_msgSend_1551(
        this.pointer, _sel_evaluateWithObject_, object?.pointer ?? ffi.nullptr);
  }

  /// evaluateWithObject:substitutionVariables:
  bool evaluateWithObject_substitutionVariables_(
      objc.ObjCObjectBase? object, objc.NSDictionary? bindings) {
    return _objc_msgSend_1552(
        this.pointer,
        _sel_evaluateWithObject_substitutionVariables_,
        object?.pointer ?? ffi.nullptr,
        bindings?.pointer ?? ffi.nullptr);
  }

  /// allowEvaluation
  void allowEvaluation() {
    _objc_msgSend_7(this.pointer, _sel_allowEvaluation);
  }

  /// init
  NSPredicate init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSPredicate new1() {
    final _ret = _objc_msgSend_19(_class_NSPredicate, _sel_new);
    return NSPredicate.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSPredicate allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_NSPredicate, _sel_allocWithZone_, zone);
    return NSPredicate.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSPredicate alloc() {
    final _ret = _objc_msgSend_19(_class_NSPredicate, _sel_alloc);
    return NSPredicate.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_NSPredicate,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_NSPredicate,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_NSPredicate, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_NSPredicate, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_NSPredicate,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_NSPredicate,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_NSPredicate,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_NSPredicate, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_NSPredicate, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSPredicate = objc.getClass("NSPredicate");
late final _sel_predicateWithFormat_argumentArray_ =
    objc.registerName("predicateWithFormat:argumentArray:");
final _objc_msgSend_1545 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predicateWithFormat_ =
    objc.registerName("predicateWithFormat:");
final _objc_msgSend_1546 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predicateWithFormat_arguments_ =
    objc.registerName("predicateWithFormat:arguments:");
final _objc_msgSend_1547 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Char>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Char>)>();
late final _sel_predicateFromMetadataQueryString_ =
    objc.registerName("predicateFromMetadataQueryString:");
final _objc_msgSend_1548 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predicateWithValue_ = objc.registerName("predicateWithValue:");
final _objc_msgSend_1549 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
bool _ObjCBlock_bool_objcObjCObject_NSDictionary_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
bool _ObjCBlock_bool_objcObjCObject_NSDictionary_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as bool Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_bool_objcObjCObject_NSDictionary {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Bool Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_bool_objcObjCObject_NSDictionary_fnPtrTrampoline,
                              false)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          bool Function(objc.ObjCObjectBase?, objc.NSDictionary?) fn) =>
      objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_bool_objcObjCObject_NSDictionary_closureTrampoline, false)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(arg0.address == 0 ? null : objc.ObjCObjectBase(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSDictionary.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_bool_objcObjCObject_NSDictionary_CallExtension
    on objc.ObjCBlock<
        ffi.Bool Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  bool call(objc.ObjCObjectBase? arg0, objc.NSDictionary? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Bool Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  bool Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_predicateWithBlock_ = objc.registerName("predicateWithBlock:");
final _objc_msgSend_1550 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_predicateFormat = objc.registerName("predicateFormat");
late final _sel_predicateWithSubstitutionVariables_ =
    objc.registerName("predicateWithSubstitutionVariables:");
late final _sel_evaluateWithObject_ = objc.registerName("evaluateWithObject:");
final _objc_msgSend_1551 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_evaluateWithObject_substitutionVariables_ =
    objc.registerName("evaluateWithObject:substitutionVariables:");
final _objc_msgSend_1552 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_allowEvaluation = objc.registerName("allowEvaluation");

enum NSLinguisticTaggerOptions {
  NSLinguisticTaggerOmitWords(1),
  NSLinguisticTaggerOmitPunctuation(2),
  NSLinguisticTaggerOmitWhitespace(4),
  NSLinguisticTaggerOmitOther(8),
  NSLinguisticTaggerJoinNames(16);

  final int value;
  const NSLinguisticTaggerOptions(this.value);

  static NSLinguisticTaggerOptions fromValue(int value) => switch (value) {
        1 => NSLinguisticTaggerOmitWords,
        2 => NSLinguisticTaggerOmitPunctuation,
        4 => NSLinguisticTaggerOmitWhitespace,
        8 => NSLinguisticTaggerOmitOther,
        16 => NSLinguisticTaggerJoinNames,
        _ => throw ArgumentError(
            "Unknown value for NSLinguisticTaggerOptions: $value"),
      };
}

/// NSArchiver
class NSArchiver extends objc.NSCoder {
  NSArchiver._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSArchiver] that points to the same underlying object as [other].
  NSArchiver.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSArchiver] that wraps the given raw object pointer.
  NSArchiver.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSArchiver].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSArchiver);
  }

  /// initForWritingWithMutableData:
  NSArchiver initForWritingWithMutableData_(objc.NSMutableData mdata) {
    final _ret = _objc_msgSend_1528(
        this.pointer, _sel_initForWritingWithMutableData_, mdata.pointer);
    return NSArchiver.castFromPointer(_ret, retain: true, release: true);
  }

  /// archiverData
  objc.NSMutableData get archiverData {
    final _ret = _objc_msgSend_1553(this.pointer, _sel_archiverData);
    return objc.NSMutableData.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// encodeRootObject:
  void encodeRootObject_(objc.ObjCObjectBase rootObject) {
    _objc_msgSend_27(this.pointer, _sel_encodeRootObject_, rootObject.pointer);
  }

  /// encodeConditionalObject:
  void encodeConditionalObject_(objc.ObjCObjectBase? object) {
    _objc_msgSend_229(this.pointer, _sel_encodeConditionalObject_,
        object?.pointer ?? ffi.nullptr);
  }

  /// archivedDataWithRootObject:
  static objc.NSData archivedDataWithRootObject_(
      objc.ObjCObjectBase rootObject) {
    final _ret = _objc_msgSend_1529(_class_NSArchiver,
        _sel_archivedDataWithRootObject_, rootObject.pointer);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// archiveRootObject:toFile:
  static bool archiveRootObject_toFile_(
      objc.ObjCObjectBase rootObject, objc.NSString path) {
    return _objc_msgSend_1530(_class_NSArchiver, _sel_archiveRootObject_toFile_,
        rootObject.pointer, path.pointer);
  }

  /// encodeClassName:intoClassName:
  void encodeClassName_intoClassName_(
      objc.NSString trueName, objc.NSString inArchiveName) {
    _objc_msgSend_215(this.pointer, _sel_encodeClassName_intoClassName_,
        trueName.pointer, inArchiveName.pointer);
  }

  /// classNameEncodedForTrueClassName:
  objc.NSString? classNameEncodedForTrueClassName_(objc.NSString trueName) {
    final _ret = _objc_msgSend_42(
        this.pointer, _sel_classNameEncodedForTrueClassName_, trueName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// replaceObject:withObject:
  void replaceObject_withObject_(
      objc.ObjCObjectBase object, objc.ObjCObjectBase newObject) {
    _objc_msgSend_1554(this.pointer, _sel_replaceObject_withObject_,
        object.pointer, newObject.pointer);
  }
}

late final _class_NSArchiver = objc.getClass("NSArchiver");
late final _sel_archiverData = objc.registerName("archiverData");
final _objc_msgSend_1553 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_encodeRootObject_ = objc.registerName("encodeRootObject:");
late final _sel_encodeConditionalObject_ =
    objc.registerName("encodeConditionalObject:");
late final _sel_encodeClassName_intoClassName_ =
    objc.registerName("encodeClassName:intoClassName:");
late final _sel_classNameEncodedForTrueClassName_ =
    objc.registerName("classNameEncodedForTrueClassName:");
late final _sel_replaceObject_withObject_ =
    objc.registerName("replaceObject:withObject:");
final _objc_msgSend_1554 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSCalendarDate
class NSCalendarDate extends objc.NSDate {
  NSCalendarDate._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSCalendarDate] that points to the same underlying object as [other].
  NSCalendarDate.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSCalendarDate] that wraps the given raw object pointer.
  NSCalendarDate.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSCalendarDate].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSCalendarDate);
  }

  /// calendarDate
  static objc.ObjCObjectBase calendarDate() {
    final _ret = _objc_msgSend_19(_class_NSCalendarDate, _sel_calendarDate);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// dateWithString:calendarFormat:locale:
  static objc.ObjCObjectBase? dateWithString_calendarFormat_locale_(
      objc.NSString description,
      objc.NSString format,
      objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_1555(
        _class_NSCalendarDate,
        _sel_dateWithString_calendarFormat_locale_,
        description.pointer,
        format.pointer,
        locale?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// dateWithString:calendarFormat:
  static objc.ObjCObjectBase? dateWithString_calendarFormat_(
      objc.NSString description, objc.NSString format) {
    final _ret = _objc_msgSend_1556(
        _class_NSCalendarDate,
        _sel_dateWithString_calendarFormat_,
        description.pointer,
        format.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// dateWithYear:month:day:hour:minute:second:timeZone:
  static objc.ObjCObjectBase
      dateWithYear_month_day_hour_minute_second_timeZone_(int year, int month,
          int day, int hour, int minute, int second, NSTimeZone? aTimeZone) {
    final _ret = _objc_msgSend_1557(
        _class_NSCalendarDate,
        _sel_dateWithYear_month_day_hour_minute_second_timeZone_,
        year,
        month,
        day,
        hour,
        minute,
        second,
        aTimeZone?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// dateByAddingYears:months:days:hours:minutes:seconds:
  NSCalendarDate dateByAddingYears_months_days_hours_minutes_seconds_(
      int year, int month, int day, int hour, int minute, int second) {
    final _ret = _objc_msgSend_1558(
        this.pointer,
        _sel_dateByAddingYears_months_days_hours_minutes_seconds_,
        year,
        month,
        day,
        hour,
        minute,
        second);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dayOfCommonEra
  int dayOfCommonEra() {
    return _objc_msgSend_125(this.pointer, _sel_dayOfCommonEra);
  }

  /// dayOfMonth
  int dayOfMonth() {
    return _objc_msgSend_125(this.pointer, _sel_dayOfMonth);
  }

  /// dayOfWeek
  int dayOfWeek() {
    return _objc_msgSend_125(this.pointer, _sel_dayOfWeek);
  }

  /// dayOfYear
  int dayOfYear() {
    return _objc_msgSend_125(this.pointer, _sel_dayOfYear);
  }

  /// hourOfDay
  int hourOfDay() {
    return _objc_msgSend_125(this.pointer, _sel_hourOfDay);
  }

  /// minuteOfHour
  int minuteOfHour() {
    return _objc_msgSend_125(this.pointer, _sel_minuteOfHour);
  }

  /// monthOfYear
  int monthOfYear() {
    return _objc_msgSend_125(this.pointer, _sel_monthOfYear);
  }

  /// secondOfMinute
  int secondOfMinute() {
    return _objc_msgSend_125(this.pointer, _sel_secondOfMinute);
  }

  /// yearOfCommonEra
  int yearOfCommonEra() {
    return _objc_msgSend_125(this.pointer, _sel_yearOfCommonEra);
  }

  /// calendarFormat
  objc.NSString calendarFormat() {
    final _ret = _objc_msgSend_11(this.pointer, _sel_calendarFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// descriptionWithCalendarFormat:locale:
  objc.NSString descriptionWithCalendarFormat_locale_(
      objc.NSString format, objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_1559(
        this.pointer,
        _sel_descriptionWithCalendarFormat_locale_,
        format.pointer,
        locale?.pointer ?? ffi.nullptr);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// descriptionWithCalendarFormat:
  objc.NSString descriptionWithCalendarFormat_(objc.NSString format) {
    final _ret = _objc_msgSend_309(
        this.pointer, _sel_descriptionWithCalendarFormat_, format.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// descriptionWithLocale:
  objc.NSString descriptionWithLocale_(objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_1560(this.pointer, _sel_descriptionWithLocale_,
        locale?.pointer ?? ffi.nullptr);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeZone
  NSTimeZone timeZone() {
    final _ret = _objc_msgSend_121(this.pointer, _sel_timeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithString:calendarFormat:locale:
  objc.ObjCObjectBase? initWithString_calendarFormat_locale_(
      objc.NSString description,
      objc.NSString format,
      objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_1555(
        this.pointer,
        _sel_initWithString_calendarFormat_locale_,
        description.pointer,
        format.pointer,
        locale?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initWithString:calendarFormat:
  objc.ObjCObjectBase? initWithString_calendarFormat_(
      objc.NSString description, objc.NSString format) {
    final _ret = _objc_msgSend_1556(
        this.pointer,
        _sel_initWithString_calendarFormat_,
        description.pointer,
        format.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initWithString:
  objc.ObjCObjectBase? initWithString_(objc.NSString description) {
    final _ret = _objc_msgSend_35(
        this.pointer, _sel_initWithString_, description.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initWithYear:month:day:hour:minute:second:timeZone:
  objc.ObjCObjectBase initWithYear_month_day_hour_minute_second_timeZone_(
      int year,
      int month,
      int day,
      int hour,
      int minute,
      int second,
      NSTimeZone? aTimeZone) {
    final _ret = _objc_msgSend_1557(
        this.pointer,
        _sel_initWithYear_month_day_hour_minute_second_timeZone_,
        year,
        month,
        day,
        hour,
        minute,
        second,
        aTimeZone?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setCalendarFormat:
  void setCalendarFormat_(objc.NSString? format) {
    _objc_msgSend_1561(
        this.pointer, _sel_setCalendarFormat_, format?.pointer ?? ffi.nullptr);
  }

  /// setTimeZone:
  void setTimeZone_(NSTimeZone? aTimeZone) {
    _objc_msgSend_1562(
        this.pointer, _sel_setTimeZone_, aTimeZone?.pointer ?? ffi.nullptr);
  }

  /// years:months:days:hours:minutes:seconds:sinceDate:
  void years_months_days_hours_minutes_seconds_sinceDate_(
      ffi.Pointer<ffi.Long> yp,
      ffi.Pointer<ffi.Long> mop,
      ffi.Pointer<ffi.Long> dp,
      ffi.Pointer<ffi.Long> hp,
      ffi.Pointer<ffi.Long> mip,
      ffi.Pointer<ffi.Long> sp,
      NSCalendarDate date) {
    _objc_msgSend_1563(
        this.pointer,
        _sel_years_months_days_hours_minutes_seconds_sinceDate_,
        yp,
        mop,
        dp,
        hp,
        mip,
        sp,
        date.pointer);
  }

  /// distantFuture
  static objc.NSDate getDistantFuture() {
    final _ret = _objc_msgSend_224(_class_NSCalendarDate, _sel_distantFuture);
    return objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// distantPast
  static objc.NSDate getDistantPast() {
    final _ret = _objc_msgSend_224(_class_NSCalendarDate, _sel_distantPast);
    return objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// timeIntervalSinceReferenceDate
  static double getTimeIntervalSinceReferenceDate() {
    return objc.useMsgSendVariants
        ? _objc_msgSend_18Fpret(
            _class_NSCalendarDate, _sel_timeIntervalSinceReferenceDate)
        : _objc_msgSend_18(
            _class_NSCalendarDate, _sel_timeIntervalSinceReferenceDate);
  }

  /// init
  NSCalendarDate init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithTimeIntervalSinceReferenceDate:
  NSCalendarDate initWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _objc_msgSend_1564(
        this.pointer, _sel_initWithTimeIntervalSinceReferenceDate_, ti);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCoder:
  NSCalendarDate? initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_242(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateByAddingTimeInterval:
  NSCalendarDate dateByAddingTimeInterval_(double ti) {
    final _ret =
        _objc_msgSend_1564(this.pointer, _sel_dateByAddingTimeInterval_, ti);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// date
  static NSCalendarDate date() {
    final _ret = _objc_msgSend_19(_class_NSCalendarDate, _sel_date);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateWithTimeIntervalSinceNow:
  static NSCalendarDate dateWithTimeIntervalSinceNow_(double secs) {
    final _ret = _objc_msgSend_1564(
        _class_NSCalendarDate, _sel_dateWithTimeIntervalSinceNow_, secs);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateWithTimeIntervalSinceReferenceDate:
  static NSCalendarDate dateWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _objc_msgSend_1564(_class_NSCalendarDate,
        _sel_dateWithTimeIntervalSinceReferenceDate_, ti);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateWithTimeIntervalSince1970:
  static NSCalendarDate dateWithTimeIntervalSince1970_(double secs) {
    final _ret = _objc_msgSend_1564(
        _class_NSCalendarDate, _sel_dateWithTimeIntervalSince1970_, secs);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateWithTimeInterval:sinceDate:
  static NSCalendarDate dateWithTimeInterval_sinceDate_(
      double secsToBeAdded, objc.NSDate date) {
    final _ret = _objc_msgSend_1565(_class_NSCalendarDate,
        _sel_dateWithTimeInterval_sinceDate_, secsToBeAdded, date.pointer);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// now
  static objc.NSDate getNow() {
    final _ret = _objc_msgSend_224(_class_NSCalendarDate, _sel_now);
    return objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithTimeIntervalSinceNow:
  NSCalendarDate initWithTimeIntervalSinceNow_(double secs) {
    final _ret = _objc_msgSend_1564(
        this.pointer, _sel_initWithTimeIntervalSinceNow_, secs);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithTimeIntervalSince1970:
  NSCalendarDate initWithTimeIntervalSince1970_(double secs) {
    final _ret = _objc_msgSend_1564(
        this.pointer, _sel_initWithTimeIntervalSince1970_, secs);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithTimeInterval:sinceDate:
  NSCalendarDate initWithTimeInterval_sinceDate_(
      double secsToBeAdded, objc.NSDate date) {
    final _ret = _objc_msgSend_1565(this.pointer,
        _sel_initWithTimeInterval_sinceDate_, secsToBeAdded, date.pointer);
    return NSCalendarDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateWithNaturalLanguageString:locale:
  static objc.ObjCObjectBase? dateWithNaturalLanguageString_locale_(
      objc.NSString string, objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_1566(
        _class_NSCalendarDate,
        _sel_dateWithNaturalLanguageString_locale_,
        string.pointer,
        locale?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// dateWithNaturalLanguageString:
  static objc.ObjCObjectBase? dateWithNaturalLanguageString_(
      objc.NSString string) {
    final _ret = _objc_msgSend_35(_class_NSCalendarDate,
        _sel_dateWithNaturalLanguageString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// dateWithString:
  static objc.ObjCObjectBase dateWithString_(objc.NSString aString) {
    final _ret = _objc_msgSend_63(
        _class_NSCalendarDate, _sel_dateWithString_, aString.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSCalendarDate = objc.getClass("NSCalendarDate");
late final _sel_calendarDate = objc.registerName("calendarDate");
late final _sel_dateWithString_calendarFormat_locale_ =
    objc.registerName("dateWithString:calendarFormat:locale:");
final _objc_msgSend_1555 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateWithString_calendarFormat_ =
    objc.registerName("dateWithString:calendarFormat:");
final _objc_msgSend_1556 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateWithYear_month_day_hour_minute_second_timeZone_ =
    objc.registerName("dateWithYear:month:day:hour:minute:second:timeZone:");
final _objc_msgSend_1557 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            int,
            int,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateByAddingYears_months_days_hours_minutes_seconds_ =
    objc.registerName("dateByAddingYears:months:days:hours:minutes:seconds:");
final _objc_msgSend_1558 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int, int, int, int, int)>();
late final _sel_dayOfCommonEra = objc.registerName("dayOfCommonEra");
late final _sel_dayOfMonth = objc.registerName("dayOfMonth");
late final _sel_dayOfWeek = objc.registerName("dayOfWeek");
late final _sel_dayOfYear = objc.registerName("dayOfYear");
late final _sel_hourOfDay = objc.registerName("hourOfDay");
late final _sel_minuteOfHour = objc.registerName("minuteOfHour");
late final _sel_monthOfYear = objc.registerName("monthOfYear");
late final _sel_secondOfMinute = objc.registerName("secondOfMinute");
late final _sel_yearOfCommonEra = objc.registerName("yearOfCommonEra");
late final _sel_calendarFormat = objc.registerName("calendarFormat");
late final _sel_descriptionWithCalendarFormat_locale_ =
    objc.registerName("descriptionWithCalendarFormat:locale:");
final _objc_msgSend_1559 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_descriptionWithCalendarFormat_ =
    objc.registerName("descriptionWithCalendarFormat:");
late final _sel_descriptionWithLocale_ =
    objc.registerName("descriptionWithLocale:");
final _objc_msgSend_1560 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithString_calendarFormat_locale_ =
    objc.registerName("initWithString:calendarFormat:locale:");
late final _sel_initWithString_calendarFormat_ =
    objc.registerName("initWithString:calendarFormat:");
late final _sel_initWithYear_month_day_hour_minute_second_timeZone_ =
    objc.registerName("initWithYear:month:day:hour:minute:second:timeZone:");
late final _sel_setCalendarFormat_ = objc.registerName("setCalendarFormat:");
final _objc_msgSend_1561 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1562 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_years_months_days_hours_minutes_seconds_sinceDate_ =
    objc.registerName("years:months:days:hours:minutes:seconds:sinceDate:");
final _objc_msgSend_1563 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_distantFuture = objc.registerName("distantFuture");
late final _sel_distantPast = objc.registerName("distantPast");
late final _sel_timeIntervalSinceReferenceDate =
    objc.registerName("timeIntervalSinceReferenceDate");
late final _sel_initWithTimeIntervalSinceReferenceDate_ =
    objc.registerName("initWithTimeIntervalSinceReferenceDate:");
final _objc_msgSend_1564 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_dateByAddingTimeInterval_ =
    objc.registerName("dateByAddingTimeInterval:");
late final _sel_dateWithTimeIntervalSinceNow_ =
    objc.registerName("dateWithTimeIntervalSinceNow:");
late final _sel_dateWithTimeIntervalSinceReferenceDate_ =
    objc.registerName("dateWithTimeIntervalSinceReferenceDate:");
late final _sel_dateWithTimeIntervalSince1970_ =
    objc.registerName("dateWithTimeIntervalSince1970:");
late final _sel_dateWithTimeInterval_sinceDate_ =
    objc.registerName("dateWithTimeInterval:sinceDate:");
final _objc_msgSend_1565 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_now = objc.registerName("now");
late final _sel_initWithTimeIntervalSinceNow_ =
    objc.registerName("initWithTimeIntervalSinceNow:");
late final _sel_initWithTimeIntervalSince1970_ =
    objc.registerName("initWithTimeIntervalSince1970:");
late final _sel_initWithTimeInterval_sinceDate_ =
    objc.registerName("initWithTimeInterval:sinceDate:");
late final _sel_dateWithNaturalLanguageString_locale_ =
    objc.registerName("dateWithNaturalLanguageString:locale:");
final _objc_msgSend_1566 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateWithNaturalLanguageString_ =
    objc.registerName("dateWithNaturalLanguageString:");
late final _sel_dateWithString_ = objc.registerName("dateWithString:");

/// NSPortCoder
class NSPortCoder extends objc.NSCoder {
  NSPortCoder._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPortCoder] that points to the same underlying object as [other].
  NSPortCoder.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPortCoder] that wraps the given raw object pointer.
  NSPortCoder.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPortCoder].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSPortCoder);
  }

  /// isBycopy
  bool isBycopy() {
    return _objc_msgSend_13(this.pointer, _sel_isBycopy);
  }

  /// isByref
  bool isByref() {
    return _objc_msgSend_13(this.pointer, _sel_isByref);
  }

  /// encodePortObject:
  void encodePortObject_(NSPort aport) {
    _objc_msgSend_1567(this.pointer, _sel_encodePortObject_, aport.pointer);
  }

  /// decodePortObject
  NSPort? decodePortObject() {
    final _ret = _objc_msgSend_1568(this.pointer, _sel_decodePortObject);
    return _ret.address == 0
        ? null
        : NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  /// connection
  NSConnection? connection() {
    final _ret = _objc_msgSend_1569(this.pointer, _sel_connection);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  /// portCoderWithReceivePort:sendPort:components:
  static objc.ObjCObjectBase portCoderWithReceivePort_sendPort_components_(
      NSPort? rcvPort, NSPort? sndPort, objc.NSArray? comps) {
    final _ret = _objc_msgSend_1570(
        _class_NSPortCoder,
        _sel_portCoderWithReceivePort_sendPort_components_,
        rcvPort?.pointer ?? ffi.nullptr,
        sndPort?.pointer ?? ffi.nullptr,
        comps?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initWithReceivePort:sendPort:components:
  objc.ObjCObjectBase initWithReceivePort_sendPort_components_(
      NSPort? rcvPort, NSPort? sndPort, objc.NSArray? comps) {
    final _ret = _objc_msgSend_1570(
        this.pointer,
        _sel_initWithReceivePort_sendPort_components_,
        rcvPort?.pointer ?? ffi.nullptr,
        sndPort?.pointer ?? ffi.nullptr,
        comps?.pointer ?? ffi.nullptr);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// dispatch
  void dispatch() {
    _objc_msgSend_7(this.pointer, _sel_dispatch);
  }
}

late final _class_NSPortCoder = objc.getClass("NSPortCoder");
late final _sel_isBycopy = objc.registerName("isBycopy");
late final _sel_isByref = objc.registerName("isByref");
late final _sel_encodePortObject_ = objc.registerName("encodePortObject:");
final _objc_msgSend_1567 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_decodePortObject = objc.registerName("decodePortObject");
final _objc_msgSend_1568 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1569 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_portCoderWithReceivePort_sendPort_components_ =
    objc.registerName("portCoderWithReceivePort:sendPort:components:");
final _objc_msgSend_1570 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithReceivePort_sendPort_components_ =
    objc.registerName("initWithReceivePort:sendPort:components:");
late final _sel_dispatch = objc.registerName("dispatch");

/// An implementation of FVPAVFactory that forwards directly to AVPlayer*.
class FVPDefaultAVFactory extends objc.NSObject {
  FVPDefaultAVFactory._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [FVPDefaultAVFactory] that points to the same underlying object as [other].
  FVPDefaultAVFactory.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [FVPDefaultAVFactory] that wraps the given raw object pointer.
  FVPDefaultAVFactory.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [FVPDefaultAVFactory].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_FVPDefaultAVFactory);
  }

  /// init
  FVPDefaultAVFactory init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return FVPDefaultAVFactory.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static FVPDefaultAVFactory new1() {
    final _ret = _objc_msgSend_19(_class_FVPDefaultAVFactory, _sel_new);
    return FVPDefaultAVFactory.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static FVPDefaultAVFactory allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_FVPDefaultAVFactory, _sel_allocWithZone_, zone);
    return FVPDefaultAVFactory.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static FVPDefaultAVFactory alloc() {
    final _ret = _objc_msgSend_19(_class_FVPDefaultAVFactory, _sel_alloc);
    return FVPDefaultAVFactory.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_FVPDefaultAVFactory,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_FVPDefaultAVFactory,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_FVPDefaultAVFactory, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_FVPDefaultAVFactory, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_FVPDefaultAVFactory,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_FVPDefaultAVFactory,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_FVPDefaultAVFactory,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_FVPDefaultAVFactory, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_FVPDefaultAVFactory, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_FVPDefaultAVFactory = objc.getClass("FVPDefaultAVFactory");

/// Non-test implementation of the diplay link factory.
class FVPDefaultDisplayLinkFactory extends objc.NSObject {
  FVPDefaultDisplayLinkFactory._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [FVPDefaultDisplayLinkFactory] that points to the same underlying object as [other].
  FVPDefaultDisplayLinkFactory.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [FVPDefaultDisplayLinkFactory] that wraps the given raw object pointer.
  FVPDefaultDisplayLinkFactory.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [FVPDefaultDisplayLinkFactory].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_FVPDefaultDisplayLinkFactory);
  }

  /// init
  FVPDefaultDisplayLinkFactory init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return FVPDefaultDisplayLinkFactory.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static FVPDefaultDisplayLinkFactory new1() {
    final _ret =
        _objc_msgSend_19(_class_FVPDefaultDisplayLinkFactory, _sel_new);
    return FVPDefaultDisplayLinkFactory.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static FVPDefaultDisplayLinkFactory allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_FVPDefaultDisplayLinkFactory, _sel_allocWithZone_, zone);
    return FVPDefaultDisplayLinkFactory.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static FVPDefaultDisplayLinkFactory alloc() {
    final _ret =
        _objc_msgSend_19(_class_FVPDefaultDisplayLinkFactory, _sel_alloc);
    return FVPDefaultDisplayLinkFactory.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_FVPDefaultDisplayLinkFactory,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_FVPDefaultDisplayLinkFactory,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_FVPDefaultDisplayLinkFactory,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_FVPDefaultDisplayLinkFactory, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_FVPDefaultDisplayLinkFactory,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_FVPDefaultDisplayLinkFactory,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_FVPDefaultDisplayLinkFactory,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_FVPDefaultDisplayLinkFactory,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(
        _class_FVPDefaultDisplayLinkFactory, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_FVPDefaultDisplayLinkFactory =
    objc.getClass("FVPDefaultDisplayLinkFactory");

/// The native component of a single video player instance.
class FVPVideoPlayer extends objc.NSObject {
  FVPVideoPlayer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [FVPVideoPlayer] that points to the same underlying object as [other].
  FVPVideoPlayer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [FVPVideoPlayer] that wraps the given raw object pointer.
  FVPVideoPlayer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [FVPVideoPlayer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_FVPVideoPlayer);
  }

  /// The event delegate that communicates information back to the Dart side of the plugin.
  ///
  /// Note that although this is a delegate, this is an owning reference.
  objc.ObjCObjectBase get delegate {
    final _ret = _objc_msgSend_19(this.pointer, _sel_delegate);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// The event delegate that communicates information back to the Dart side of the plugin.
  ///
  /// Note that although this is a delegate, this is an owning reference.
  set delegate(objc.ObjCObjectBase value) {
    return _objc_msgSend_1571(this.pointer, _sel_setDelegate_, value.pointer);
  }

  /// player
  AVPlayer get player {
    final _ret = _objc_msgSend_1572(this.pointer, _sel_player);
    return AVPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPlayer:
  set player(AVPlayer value) {
    return _objc_msgSend_1573(this.pointer, _sel_setPlayer_, value.pointer);
  }

  /// disposed
  bool get disposed {
    return _objc_msgSend_13(this.pointer, _sel_disposed);
  }

  /// isPlaying
  bool get isPlaying {
    return _objc_msgSend_13(this.pointer, _sel_isPlaying);
  }

  /// initWithPlayerItem:viewProvider:AVFactory:displayLinkFactory:
  FVPVideoPlayer initWithPlayerItem_viewProvider_AVFactory_displayLinkFactory_(
      AVPlayerItem item,
      objc.ObjCObjectBase viewProvider,
      objc.ObjCObjectBase avFactory,
      objc.ObjCObjectBase displayLinkFactory) {
    final _ret = _objc_msgSend_1574(
        this.pointer,
        _sel_initWithPlayerItem_viewProvider_AVFactory_displayLinkFactory_,
        item.pointer,
        viewProvider.pointer,
        avFactory.pointer,
        displayLinkFactory.pointer);
    return FVPVideoPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// play
  void play() {
    _objc_msgSend_7(this.pointer, _sel_play);
  }

  /// pause
  void pause() {
    _objc_msgSend_7(this.pointer, _sel_pause);
  }

  /// seekTo:completionHandler:
  void seekTo_completionHandler_(int location,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)> completionHandler) {
    _objc_msgSend_1575(this.pointer, _sel_seekTo_completionHandler_, location,
        completionHandler.pointer);
  }

  /// init
  FVPVideoPlayer init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return FVPVideoPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static FVPVideoPlayer new1() {
    final _ret = _objc_msgSend_19(_class_FVPVideoPlayer, _sel_new);
    return FVPVideoPlayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static FVPVideoPlayer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_28(_class_FVPVideoPlayer, _sel_allocWithZone_, zone);
    return FVPVideoPlayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static FVPVideoPlayer alloc() {
    final _ret = _objc_msgSend_19(_class_FVPVideoPlayer, _sel_alloc);
    return FVPVideoPlayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_FVPVideoPlayer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_FVPVideoPlayer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(
        _class_FVPVideoPlayer, _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(_class_FVPVideoPlayer, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_FVPVideoPlayer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_FVPVideoPlayer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_FVPVideoPlayer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(
        _class_FVPVideoPlayer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_19(_class_FVPVideoPlayer, _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_FVPVideoPlayer = objc.getClass("FVPVideoPlayer");
final _objc_msgSend_1571 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1572 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPlayer_ = objc.registerName("setPlayer:");
final _objc_msgSend_1573 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_disposed = objc.registerName("disposed");
late final _sel_initWithPlayerItem_viewProvider_AVFactory_displayLinkFactory_ =
    objc.registerName(
        "initWithPlayerItem:viewProvider:AVFactory:displayLinkFactory:");
final _objc_msgSend_1574 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_seekTo_completionHandler_ =
    objc.registerName("seekTo:completionHandler:");
final _objc_msgSend_1575 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int64,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// An implementation of FVPVideoPlayerDelegate that forwards messages blocks.
///
/// This is a manual version of what future versions of ffigen will codegen, to unblock exploration.
class FVPBlockAdapterVideoPlayerDelegate extends objc.NSObject {
  FVPBlockAdapterVideoPlayerDelegate._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [FVPBlockAdapterVideoPlayerDelegate] that points to the same underlying object as [other].
  FVPBlockAdapterVideoPlayerDelegate.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [FVPBlockAdapterVideoPlayerDelegate] that wraps the given raw object pointer.
  FVPBlockAdapterVideoPlayerDelegate.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [FVPBlockAdapterVideoPlayerDelegate].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_FVPBlockAdapterVideoPlayerDelegate);
  }

  /// videoPlayerDidInitializeHandler
  objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)>
      get videoPlayerDidInitializeHandler {
    final _ret =
        _objc_msgSend_1576(this.pointer, _sel_videoPlayerDidInitializeHandler);
    return ObjCBlock_ffiVoid_Int64_CGSize.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setVideoPlayerDidInitializeHandler:
  set videoPlayerDidInitializeHandler(
      objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)> value) {
    return _objc_msgSend_1577(
        this.pointer, _sel_setVideoPlayerDidInitializeHandler_, value.pointer);
  }

  /// videoPlayerDidErrorHandler
  objc.ObjCBlock<ffi.Void Function(objc.NSString)>
      get videoPlayerDidErrorHandler {
    final _ret =
        _objc_msgSend_1578(this.pointer, _sel_videoPlayerDidErrorHandler);
    return ObjCBlock_ffiVoid_NSString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setVideoPlayerDidErrorHandler:
  set videoPlayerDidErrorHandler(
      objc.ObjCBlock<ffi.Void Function(objc.NSString)> value) {
    return _objc_msgSend_1579(
        this.pointer, _sel_setVideoPlayerDidErrorHandler_, value.pointer);
  }

  /// videoPlayerDidCompleteHandler
  objc.ObjCBlock<ffi.Void Function()> get videoPlayerDidCompleteHandler {
    final _ret =
        _objc_msgSend_1580(this.pointer, _sel_videoPlayerDidCompleteHandler);
    return ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVideoPlayerDidCompleteHandler:
  set videoPlayerDidCompleteHandler(objc.ObjCBlock<ffi.Void Function()> value) {
    return _objc_msgSend_1581(
        this.pointer, _sel_setVideoPlayerDidCompleteHandler_, value.pointer);
  }

  /// videoPlayerDidStartBufferingHandler
  objc.ObjCBlock<ffi.Void Function()> get videoPlayerDidStartBufferingHandler {
    final _ret = _objc_msgSend_1580(
        this.pointer, _sel_videoPlayerDidStartBufferingHandler);
    return ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVideoPlayerDidStartBufferingHandler:
  set videoPlayerDidStartBufferingHandler(
      objc.ObjCBlock<ffi.Void Function()> value) {
    return _objc_msgSend_1581(this.pointer,
        _sel_setVideoPlayerDidStartBufferingHandler_, value.pointer);
  }

  /// videoPlayerDidEndBufferingHandler
  objc.ObjCBlock<ffi.Void Function()> get videoPlayerDidEndBufferingHandler {
    final _ret = _objc_msgSend_1580(
        this.pointer, _sel_videoPlayerDidEndBufferingHandler);
    return ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  /// setVideoPlayerDidEndBufferingHandler:
  set videoPlayerDidEndBufferingHandler(
      objc.ObjCBlock<ffi.Void Function()> value) {
    return _objc_msgSend_1581(this.pointer,
        _sel_setVideoPlayerDidEndBufferingHandler_, value.pointer);
  }

  /// videoPlayerDidUpdateBufferRegionsHandler
  objc.ObjCBlock<ffi.Void Function(AVPlayerItem)>
      get videoPlayerDidUpdateBufferRegionsHandler {
    final _ret = _objc_msgSend_1582(
        this.pointer, _sel_videoPlayerDidUpdateBufferRegionsHandler);
    return ObjCBlock_ffiVoid_AVPlayerItem.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setVideoPlayerDidUpdateBufferRegionsHandler:
  set videoPlayerDidUpdateBufferRegionsHandler(
      objc.ObjCBlock<ffi.Void Function(AVPlayerItem)> value) {
    return _objc_msgSend_1583(this.pointer,
        _sel_setVideoPlayerDidUpdateBufferRegionsHandler_, value.pointer);
  }

  /// videoPlayerDidSetPlayingHandler
  objc.ObjCBlock<ffi.Void Function(ffi.Bool)>
      get videoPlayerDidSetPlayingHandler {
    final _ret =
        _objc_msgSend_1584(this.pointer, _sel_videoPlayerDidSetPlayingHandler);
    return ObjCBlock_ffiVoid_bool.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setVideoPlayerDidSetPlayingHandler:
  set videoPlayerDidSetPlayingHandler(
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)> value) {
    return _objc_msgSend_1585(
        this.pointer, _sel_setVideoPlayerDidSetPlayingHandler_, value.pointer);
  }

  /// init
  FVPBlockAdapterVideoPlayerDelegate init() {
    final _ret = _objc_msgSend_19(this.pointer, _sel_init);
    return FVPBlockAdapterVideoPlayerDelegate.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// new
  static FVPBlockAdapterVideoPlayerDelegate new1() {
    final _ret =
        _objc_msgSend_19(_class_FVPBlockAdapterVideoPlayerDelegate, _sel_new);
    return FVPBlockAdapterVideoPlayerDelegate.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static FVPBlockAdapterVideoPlayerDelegate allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_28(
        _class_FVPBlockAdapterVideoPlayerDelegate, _sel_allocWithZone_, zone);
    return FVPBlockAdapterVideoPlayerDelegate.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static FVPBlockAdapterVideoPlayerDelegate alloc() {
    final _ret =
        _objc_msgSend_19(_class_FVPBlockAdapterVideoPlayerDelegate, _sel_alloc);
    return FVPBlockAdapterVideoPlayerDelegate.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// cancelPreviousPerformRequestsWithTarget:selector:object:
  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? anArgument) {
    _objc_msgSend_29(
        _class_FVPBlockAdapterVideoPlayerDelegate,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  /// cancelPreviousPerformRequestsWithTarget:
  static void cancelPreviousPerformRequestsWithTarget_(
      objc.ObjCObjectBase aTarget) {
    _objc_msgSend_27(_class_FVPBlockAdapterVideoPlayerDelegate,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  /// accessInstanceVariablesDirectly
  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_13(_class_FVPBlockAdapterVideoPlayerDelegate,
        _sel_accessInstanceVariablesDirectly);
  }

  /// useStoredAccessor
  static bool useStoredAccessor() {
    return _objc_msgSend_13(
        _class_FVPBlockAdapterVideoPlayerDelegate, _sel_useStoredAccessor);
  }

  /// keyPathsForValuesAffectingValueForKey:
  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_30(_class_FVPBlockAdapterVideoPlayerDelegate,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// automaticallyNotifiesObserversForKey:
  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_31(_class_FVPBlockAdapterVideoPlayerDelegate,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  /// setKeys:triggerChangeNotificationsForDependentKey:
  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_32(
        _class_FVPBlockAdapterVideoPlayerDelegate,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  /// classFallbacksForKeyedArchiver
  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_33(_class_FVPBlockAdapterVideoPlayerDelegate,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// classForKeyedUnarchiver
  static objc.ObjCObjectBase classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_19(_class_FVPBlockAdapterVideoPlayerDelegate,
        _sel_classForKeyedUnarchiver);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_FVPBlockAdapterVideoPlayerDelegate =
    objc.getClass("FVPBlockAdapterVideoPlayerDelegate");
void _ObjCBlock_ffiVoid_Int64_CGSize_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0, CGSize arg1) =>
    block.ref.target
        .cast<
            ffi
            .NativeFunction<ffi.Void Function(ffi.Int64 arg0, CGSize arg1)>>()
        .asFunction<void Function(int, CGSize)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_Int64_CGSize_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0, CGSize arg1) =>
    (objc.getBlockClosure(block) as void Function(int, CGSize))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)>`.
abstract final class ObjCBlock_ffiVoid_Int64_CGSize {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int64 arg0, CGSize arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Int64,
                              CGSize)>(_ObjCBlock_ffiVoid_Int64_CGSize_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)> fromFunction(
          void Function(int, CGSize) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Int64, CGSize)>(
                      _ObjCBlock_ffiVoid_Int64_CGSize_closureTrampoline)
                  .cast(),
              (int arg0, CGSize arg1) => fn(arg0, arg1)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)> listener(
      void Function(int, CGSize) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Int64, CGSize)>.listener(
                _ObjCBlock_ffiVoid_Int64_CGSize_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (int arg0, CGSize arg1) => fn(arg0, arg1));
    return objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int64, CGSize)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)>`.
extension ObjCBlock_ffiVoid_Int64_CGSize_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Int64, CGSize)> {
  void call(int arg0, CGSize arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Int64 arg0, CGSize arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>, int, CGSize)>()(
      pointer, arg0, arg1);
}

late final _sel_videoPlayerDidInitializeHandler =
    objc.registerName("videoPlayerDidInitializeHandler");
final _objc_msgSend_1576 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVideoPlayerDidInitializeHandler_ =
    objc.registerName("setVideoPlayerDidInitializeHandler:");
final _objc_msgSend_1577 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
void _ObjCBlock_ffiVoid_NSString_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSString_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(objc.NSString)>`.
abstract final class ObjCBlock_ffiVoid_NSString {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(objc.NSString)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSString)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSString)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSString)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSString_fnPtrTrampoline)
                      .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSString)> fromFunction(
          void Function(objc.NSString) fn) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSString)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(
                              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_NSString_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(objc.NSString.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(objc.NSString)> listener(
      void Function(objc.NSString) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSString_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(
            objc.NSString.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSString(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(objc.NSString)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(objc.NSString)>`.
extension ObjCBlock_ffiVoid_NSString_CallExtension
    on objc.ObjCBlock<ffi.Void Function(objc.NSString)> {
  void call(objc.NSString arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_videoPlayerDidErrorHandler =
    objc.registerName("videoPlayerDidErrorHandler");
final _objc_msgSend_1578 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVideoPlayerDidErrorHandler_ =
    objc.registerName("setVideoPlayerDidErrorHandler:");
final _objc_msgSend_1579 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_videoPlayerDidCompleteHandler =
    objc.registerName("videoPlayerDidCompleteHandler");
final _objc_msgSend_1580 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVideoPlayerDidCompleteHandler_ =
    objc.registerName("setVideoPlayerDidCompleteHandler:");
final _objc_msgSend_1581 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_videoPlayerDidStartBufferingHandler =
    objc.registerName("videoPlayerDidStartBufferingHandler");
late final _sel_setVideoPlayerDidStartBufferingHandler_ =
    objc.registerName("setVideoPlayerDidStartBufferingHandler:");
late final _sel_videoPlayerDidEndBufferingHandler =
    objc.registerName("videoPlayerDidEndBufferingHandler");
late final _sel_setVideoPlayerDidEndBufferingHandler_ =
    objc.registerName("setVideoPlayerDidEndBufferingHandler:");
void _ObjCBlock_ffiVoid_AVPlayerItem_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_AVPlayerItem_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(AVPlayerItem)>`.
abstract final class ObjCBlock_ffiVoid_AVPlayerItem {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(AVPlayerItem)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(AVPlayerItem)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVPlayerItem)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(AVPlayerItem)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                                  ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_AVPlayerItem_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(AVPlayerItem)> fromFunction(
          void Function(AVPlayerItem) fn) =>
      objc.ObjCBlock<ffi.Void Function(AVPlayerItem)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_AVPlayerItem_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(AVPlayerItem.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(AVPlayerItem)> listener(
      void Function(AVPlayerItem) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_AVPlayerItem_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(
            AVPlayerItem.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_AVPlayerItem(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(AVPlayerItem)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(AVPlayerItem)>`.
extension ObjCBlock_ffiVoid_AVPlayerItem_CallExtension
    on objc.ObjCBlock<ffi.Void Function(AVPlayerItem)> {
  void call(AVPlayerItem arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_videoPlayerDidUpdateBufferRegionsHandler =
    objc.registerName("videoPlayerDidUpdateBufferRegionsHandler");
final _objc_msgSend_1582 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVideoPlayerDidUpdateBufferRegionsHandler_ =
    objc.registerName("setVideoPlayerDidUpdateBufferRegionsHandler:");
final _objc_msgSend_1583 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_videoPlayerDidSetPlayingHandler =
    objc.registerName("videoPlayerDidSetPlayingHandler");
final _objc_msgSend_1584 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlockImpl> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlockImpl> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVideoPlayerDidSetPlayingHandler_ =
    objc.registerName("setVideoPlayerDidSetPlayingHandler:");
final _objc_msgSend_1585 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
