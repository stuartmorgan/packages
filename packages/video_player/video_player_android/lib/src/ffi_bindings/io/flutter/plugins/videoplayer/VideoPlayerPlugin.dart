// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `io.flutter.plugins.videoplayer.VideoPlayerPlugin`
class VideoPlayerPlugin extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<VideoPlayerPlugin> $type;

  @_$jni.internal
  VideoPlayerPlugin.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'io/flutter/plugins/videoplayer/VideoPlayerPlugin');

  /// The type which includes information such as the signature of this class.
  static const type = $VideoPlayerPlugin$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory VideoPlayerPlugin() {
    return VideoPlayerPlugin.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_onAttachedToEngine = _class.instanceMethodId(
    r'onAttachedToEngine',
    r'(Lio/flutter/embedding/engine/plugins/FlutterPlugin$FlutterPluginBinding;)V',
  );

  static final _onAttachedToEngine = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding flutterPluginBinding)`
  void onAttachedToEngine(
    _$jni.JObject flutterPluginBinding,
  ) {
    _onAttachedToEngine(
            reference.pointer,
            _id_onAttachedToEngine as _$jni.JMethodIDPtr,
            flutterPluginBinding.reference.pointer)
        .check();
  }

  static final _id_onDetachedFromEngine = _class.instanceMethodId(
    r'onDetachedFromEngine',
    r'(Lio/flutter/embedding/engine/plugins/FlutterPlugin$FlutterPluginBinding;)V',
  );

  static final _onDetachedFromEngine = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding flutterPluginBinding)`
  void onDetachedFromEngine(
    _$jni.JObject flutterPluginBinding,
  ) {
    _onDetachedFromEngine(
            reference.pointer,
            _id_onDetachedFromEngine as _$jni.JMethodIDPtr,
            flutterPluginBinding.reference.pointer)
        .check();
  }

  static final _id_onDestroy = _class.instanceMethodId(
    r'onDestroy',
    r'()V',
  );

  static final _onDestroy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onDestroy()`
  void onDestroy() {
    _onDestroy(reference.pointer, _id_onDestroy as _$jni.JMethodIDPtr).check();
  }

  static final _id_initialize = _class.instanceMethodId(
    r'initialize',
    r'()V',
  );

  static final _initialize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void initialize()`
  void initialize() {
    _initialize(reference.pointer, _id_initialize as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_create = _class.instanceMethodId(
    r'create',
    r'(Lio/flutter/plugins/videoplayer/Messages$CreateMessage;)Lio/flutter/plugins/videoplayer/Messages$TextureMessage;',
  );

  static final _create = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public io.flutter.plugins.videoplayer.Messages$TextureMessage create(io.flutter.plugins.videoplayer.Messages$CreateMessage createMessage)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject create(
    _$jni.JObject createMessage,
  ) {
    return _create(reference.pointer, _id_create as _$jni.JMethodIDPtr,
            createMessage.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_dispose = _class.instanceMethodId(
    r'dispose',
    r'(Lio/flutter/plugins/videoplayer/Messages$TextureMessage;)V',
  );

  static final _dispose = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void dispose(io.flutter.plugins.videoplayer.Messages$TextureMessage textureMessage)`
  void dispose(
    _$jni.JObject textureMessage,
  ) {
    _dispose(reference.pointer, _id_dispose as _$jni.JMethodIDPtr,
            textureMessage.reference.pointer)
        .check();
  }

  static final _id_setLooping = _class.instanceMethodId(
    r'setLooping',
    r'(Lio/flutter/plugins/videoplayer/Messages$LoopingMessage;)V',
  );

  static final _setLooping = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setLooping(io.flutter.plugins.videoplayer.Messages$LoopingMessage loopingMessage)`
  void setLooping(
    _$jni.JObject loopingMessage,
  ) {
    _setLooping(reference.pointer, _id_setLooping as _$jni.JMethodIDPtr,
            loopingMessage.reference.pointer)
        .check();
  }

  static final _id_setVolume = _class.instanceMethodId(
    r'setVolume',
    r'(Lio/flutter/plugins/videoplayer/Messages$VolumeMessage;)V',
  );

  static final _setVolume = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setVolume(io.flutter.plugins.videoplayer.Messages$VolumeMessage volumeMessage)`
  void setVolume(
    _$jni.JObject volumeMessage,
  ) {
    _setVolume(reference.pointer, _id_setVolume as _$jni.JMethodIDPtr,
            volumeMessage.reference.pointer)
        .check();
  }

  static final _id_setPlaybackSpeed = _class.instanceMethodId(
    r'setPlaybackSpeed',
    r'(Lio/flutter/plugins/videoplayer/Messages$PlaybackSpeedMessage;)V',
  );

  static final _setPlaybackSpeed = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setPlaybackSpeed(io.flutter.plugins.videoplayer.Messages$PlaybackSpeedMessage playbackSpeedMessage)`
  void setPlaybackSpeed(
    _$jni.JObject playbackSpeedMessage,
  ) {
    _setPlaybackSpeed(
            reference.pointer,
            _id_setPlaybackSpeed as _$jni.JMethodIDPtr,
            playbackSpeedMessage.reference.pointer)
        .check();
  }

  static final _id_play = _class.instanceMethodId(
    r'play',
    r'(Lio/flutter/plugins/videoplayer/Messages$TextureMessage;)V',
  );

  static final _play = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void play(io.flutter.plugins.videoplayer.Messages$TextureMessage textureMessage)`
  void play(
    _$jni.JObject textureMessage,
  ) {
    _play(reference.pointer, _id_play as _$jni.JMethodIDPtr,
            textureMessage.reference.pointer)
        .check();
  }

  static final _id_position = _class.instanceMethodId(
    r'position',
    r'(Lio/flutter/plugins/videoplayer/Messages$TextureMessage;)Lio/flutter/plugins/videoplayer/Messages$PositionMessage;',
  );

  static final _position = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public io.flutter.plugins.videoplayer.Messages$PositionMessage position(io.flutter.plugins.videoplayer.Messages$TextureMessage textureMessage)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject position(
    _$jni.JObject textureMessage,
  ) {
    return _position(reference.pointer, _id_position as _$jni.JMethodIDPtr,
            textureMessage.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_seekTo = _class.instanceMethodId(
    r'seekTo',
    r'(Lio/flutter/plugins/videoplayer/Messages$PositionMessage;)V',
  );

  static final _seekTo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void seekTo(io.flutter.plugins.videoplayer.Messages$PositionMessage positionMessage)`
  void seekTo(
    _$jni.JObject positionMessage,
  ) {
    _seekTo(reference.pointer, _id_seekTo as _$jni.JMethodIDPtr,
            positionMessage.reference.pointer)
        .check();
  }

  static final _id_pause = _class.instanceMethodId(
    r'pause',
    r'(Lio/flutter/plugins/videoplayer/Messages$TextureMessage;)V',
  );

  static final _pause = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void pause(io.flutter.plugins.videoplayer.Messages$TextureMessage textureMessage)`
  void pause(
    _$jni.JObject textureMessage,
  ) {
    _pause(reference.pointer, _id_pause as _$jni.JMethodIDPtr,
            textureMessage.reference.pointer)
        .check();
  }

  static final _id_setMixWithOthers = _class.instanceMethodId(
    r'setMixWithOthers',
    r'(Lio/flutter/plugins/videoplayer/Messages$MixWithOthersMessage;)V',
  );

  static final _setMixWithOthers = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setMixWithOthers(io.flutter.plugins.videoplayer.Messages$MixWithOthersMessage mixWithOthersMessage)`
  void setMixWithOthers(
    _$jni.JObject mixWithOthersMessage,
  ) {
    _setMixWithOthers(
            reference.pointer,
            _id_setMixWithOthers as _$jni.JMethodIDPtr,
            mixWithOthersMessage.reference.pointer)
        .check();
  }
}

final class $VideoPlayerPlugin$Type extends _$jni.JObjType<VideoPlayerPlugin> {
  @_$jni.internal
  const $VideoPlayerPlugin$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lio/flutter/plugins/videoplayer/VideoPlayerPlugin;';

  @_$jni.internal
  @_$core.override
  VideoPlayerPlugin fromReference(_$jni.JReference reference) =>
      VideoPlayerPlugin.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($VideoPlayerPlugin$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($VideoPlayerPlugin$Type) &&
        other is $VideoPlayerPlugin$Type;
  }
}
